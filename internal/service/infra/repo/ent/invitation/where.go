// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldEmail, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldRole, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldTeamID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldStatus, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldExpiresAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldEmail, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldRole, v))
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldRole))
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldRole))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldRole, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDIsNil applies the IsNil predicate on the "team_id" field.
func TeamIDIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldTeamID))
}

// TeamIDNotNil applies the NotNil predicate on the "team_id" field.
func TeamIDNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldTeamID))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldTeamID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldStatus, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtContains applies the Contains predicate on the "expires_at" field.
func ExpiresAtContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldExpiresAt, v))
}

// ExpiresAtHasPrefix applies the HasPrefix predicate on the "expires_at" field.
func ExpiresAtHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldExpiresAt, v))
}

// ExpiresAtHasSuffix applies the HasSuffix predicate on the "expires_at" field.
func ExpiresAtHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldExpiresAt, v))
}

// ExpiresAtEqualFold applies the EqualFold predicate on the "expires_at" field.
func ExpiresAtEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldExpiresAt, v))
}

// ExpiresAtContainsFold applies the ContainsFold predicate on the "expires_at" field.
func ExpiresAtContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldExpiresAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(sql.NotPredicates(p))
}
