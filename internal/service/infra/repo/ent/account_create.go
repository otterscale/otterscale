// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/account"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/user"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (ac *AccountCreate) SetAccountID(s string) *AccountCreate {
	ac.mutation.SetAccountID(s)
	return ac
}

// SetProviderID sets the "provider_id" field.
func (ac *AccountCreate) SetProviderID(s string) *AccountCreate {
	ac.mutation.SetProviderID(s)
	return ac
}

// SetAccessToken sets the "access_token" field.
func (ac *AccountCreate) SetAccessToken(s string) *AccountCreate {
	ac.mutation.SetAccessToken(s)
	return ac
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (ac *AccountCreate) SetNillableAccessToken(s *string) *AccountCreate {
	if s != nil {
		ac.SetAccessToken(*s)
	}
	return ac
}

// SetRefreshToken sets the "refresh_token" field.
func (ac *AccountCreate) SetRefreshToken(s string) *AccountCreate {
	ac.mutation.SetRefreshToken(s)
	return ac
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRefreshToken(s *string) *AccountCreate {
	if s != nil {
		ac.SetRefreshToken(*s)
	}
	return ac
}

// SetIDToken sets the "id_token" field.
func (ac *AccountCreate) SetIDToken(s string) *AccountCreate {
	ac.mutation.SetIDToken(s)
	return ac
}

// SetNillableIDToken sets the "id_token" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIDToken(s *string) *AccountCreate {
	if s != nil {
		ac.SetIDToken(*s)
	}
	return ac
}

// SetAccessTokenExpiresAt sets the "access_token_expires_at" field.
func (ac *AccountCreate) SetAccessTokenExpiresAt(t time.Time) *AccountCreate {
	ac.mutation.SetAccessTokenExpiresAt(t)
	return ac
}

// SetNillableAccessTokenExpiresAt sets the "access_token_expires_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableAccessTokenExpiresAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetAccessTokenExpiresAt(*t)
	}
	return ac
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (ac *AccountCreate) SetRefreshTokenExpiresAt(t time.Time) *AccountCreate {
	ac.mutation.SetRefreshTokenExpiresAt(t)
	return ac
}

// SetNillableRefreshTokenExpiresAt sets the "refresh_token_expires_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRefreshTokenExpiresAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetRefreshTokenExpiresAt(*t)
	}
	return ac
}

// SetScope sets the "scope" field.
func (ac *AccountCreate) SetScope(s string) *AccountCreate {
	ac.mutation.SetScope(s)
	return ac
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (ac *AccountCreate) SetNillableScope(s *string) *AccountCreate {
	if s != nil {
		ac.SetScope(*s)
	}
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountCreate) SetPassword(s string) *AccountCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePassword(s *string) *AccountCreate {
	if s != nil {
		ac.SetPassword(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(s string) *AccountCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ac *AccountCreate) SetUserID(id string) *AccountCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AccountCreate) SetUser(u *User) *AccountCreate {
	return ac.SetUserID(u.ID)
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Account.account_id"`)}
	}
	if _, ok := ac.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`ent: missing required field "Account.provider_id"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Account.updated_at"`)}
	}
	if len(ac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Account.user"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Account.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.AccountID(); ok {
		_spec.SetField(account.FieldAccountID, field.TypeString, value)
		_node.AccountID = value
	}
	if value, ok := ac.mutation.ProviderID(); ok {
		_spec.SetField(account.FieldProviderID, field.TypeString, value)
		_node.ProviderID = value
	}
	if value, ok := ac.mutation.AccessToken(); ok {
		_spec.SetField(account.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := ac.mutation.RefreshToken(); ok {
		_spec.SetField(account.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := ac.mutation.IDToken(); ok {
		_spec.SetField(account.FieldIDToken, field.TypeString, value)
		_node.IDToken = value
	}
	if value, ok := ac.mutation.AccessTokenExpiresAt(); ok {
		_spec.SetField(account.FieldAccessTokenExpiresAt, field.TypeTime, value)
		_node.AccessTokenExpiresAt = value
	}
	if value, ok := ac.mutation.RefreshTokenExpiresAt(); ok {
		_spec.SetField(account.FieldRefreshTokenExpiresAt, field.TypeTime, value)
		_node.RefreshTokenExpiresAt = value
	}
	if value, ok := ac.mutation.Scope(); ok {
		_spec.SetField(account.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.UserTable,
			Columns: []string{account.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
