// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/verification"
)

// Verification is the model entity for the Verification schema.
type Verification struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt string `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    string `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Verification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verification.FieldID, verification.FieldIdentifier, verification.FieldValue, verification.FieldExpiresAt, verification.FieldCreatedAt, verification.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Verification fields.
func (v *Verification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verification.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case verification.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				v.Identifier = value.String
			}
		case verification.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				v.Value = value.String
			}
		case verification.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				v.ExpiresAt = value.String
			}
		case verification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.String
			}
		case verification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Verification.
// This includes values selected through modifiers, order, etc.
func (v *Verification) GetValue(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// Update returns a builder for updating this Verification.
// Note that you need to call Verification.Unwrap() before calling this method if this Verification
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Verification) Update() *VerificationUpdateOne {
	return NewVerificationClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Verification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Verification) Unwrap() *Verification {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Verification is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Verification) String() string {
	var builder strings.Builder
	builder.WriteString("Verification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("identifier=")
	builder.WriteString(v.Identifier)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(v.Value)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(v.ExpiresAt)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// Verifications is a parsable slice of Verification.
type Verifications []*Verification
