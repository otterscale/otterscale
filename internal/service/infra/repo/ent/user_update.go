// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/account"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/invitation"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/member"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/predicate"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/session"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetImage sets the "image" field.
func (uu *UserUpdate) SetImage(s string) *UserUpdate {
	uu.mutation.SetImage(s)
	return uu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (uu *UserUpdate) SetNillableImage(s *string) *UserUpdate {
	if s != nil {
		uu.SetImage(*s)
	}
	return uu
}

// ClearImage clears the value of the "image" field.
func (uu *UserUpdate) ClearImage() *UserUpdate {
	uu.mutation.ClearImage()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(s *string) *UserUpdate {
	if s != nil {
		uu.SetRole(*s)
	}
	return uu
}

// ClearRole clears the value of the "role" field.
func (uu *UserUpdate) ClearRole() *UserUpdate {
	uu.mutation.ClearRole()
	return uu
}

// SetBanned sets the "banned" field.
func (uu *UserUpdate) SetBanned(b bool) *UserUpdate {
	uu.mutation.SetBanned(b)
	return uu
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBanned(*b)
	}
	return uu
}

// ClearBanned clears the value of the "banned" field.
func (uu *UserUpdate) ClearBanned() *UserUpdate {
	uu.mutation.ClearBanned()
	return uu
}

// SetBanReason sets the "ban_reason" field.
func (uu *UserUpdate) SetBanReason(s string) *UserUpdate {
	uu.mutation.SetBanReason(s)
	return uu
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetBanReason(*s)
	}
	return uu
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uu *UserUpdate) ClearBanReason() *UserUpdate {
	uu.mutation.ClearBanReason()
	return uu
}

// SetBanExpires sets the "ban_expires" field.
func (uu *UserUpdate) SetBanExpires(t time.Time) *UserUpdate {
	uu.mutation.SetBanExpires(t)
	return uu
}

// SetNillableBanExpires sets the "ban_expires" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanExpires(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBanExpires(*t)
	}
	return uu
}

// ClearBanExpires clears the value of the "ban_expires" field.
func (uu *UserUpdate) ClearBanExpires() *UserUpdate {
	uu.mutation.ClearBanExpires()
	return uu
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (uu *UserUpdate) AddAccountIDs(ids ...string) *UserUpdate {
	uu.mutation.AddAccountIDs(ids...)
	return uu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (uu *UserUpdate) AddAccounts(a ...*Account) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (uu *UserUpdate) AddMemberIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMemberIDs(ids...)
	return uu
}

// AddMembers adds the "members" edges to the Member entity.
func (uu *UserUpdate) AddMembers(m ...*Member) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMemberIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (uu *UserUpdate) AddInvitationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddInvitationIDs(ids...)
	return uu
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (uu *UserUpdate) AddInvitations(i ...*Invitation) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInvitationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (uu *UserUpdate) ClearAccounts() *UserUpdate {
	uu.mutation.ClearAccounts()
	return uu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (uu *UserUpdate) RemoveAccountIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveAccountIDs(ids...)
	return uu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (uu *UserUpdate) RemoveAccounts(a ...*Account) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountIDs(ids...)
}

// ClearMembers clears all "members" edges to the Member entity.
func (uu *UserUpdate) ClearMembers() *UserUpdate {
	uu.mutation.ClearMembers()
	return uu
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (uu *UserUpdate) RemoveMemberIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMemberIDs(ids...)
	return uu
}

// RemoveMembers removes "members" edges to Member entities.
func (uu *UserUpdate) RemoveMembers(m ...*Member) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMemberIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (uu *UserUpdate) ClearInvitations() *UserUpdate {
	uu.mutation.ClearInvitations()
	return uu
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (uu *UserUpdate) RemoveInvitationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveInvitationIDs(ids...)
	return uu
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (uu *UserUpdate) RemoveInvitations(i ...*Invitation) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInvitationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Image(); ok {
		_spec.SetField(user.FieldImage, field.TypeString, value)
	}
	if uu.mutation.ImageCleared() {
		_spec.ClearField(user.FieldImage, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if uu.mutation.RoleCleared() {
		_spec.ClearField(user.FieldRole, field.TypeString)
	}
	if value, ok := uu.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if uu.mutation.BannedCleared() {
		_spec.ClearField(user.FieldBanned, field.TypeBool)
	}
	if value, ok := uu.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uu.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if value, ok := uu.mutation.BanExpires(); ok {
		_spec.SetField(user.FieldBanExpires, field.TypeTime, value)
	}
	if uu.mutation.BanExpiresCleared() {
		_spec.ClearField(user.FieldBanExpires, field.TypeTime)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !uu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !uu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !uu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetImage sets the "image" field.
func (uuo *UserUpdateOne) SetImage(s string) *UserUpdateOne {
	uuo.mutation.SetImage(s)
	return uuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableImage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetImage(*s)
	}
	return uuo
}

// ClearImage clears the value of the "image" field.
func (uuo *UserUpdateOne) ClearImage() *UserUpdateOne {
	uuo.mutation.ClearImage()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRole(*s)
	}
	return uuo
}

// ClearRole clears the value of the "role" field.
func (uuo *UserUpdateOne) ClearRole() *UserUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// SetBanned sets the "banned" field.
func (uuo *UserUpdateOne) SetBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetBanned(b)
	return uuo
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBanned(*b)
	}
	return uuo
}

// ClearBanned clears the value of the "banned" field.
func (uuo *UserUpdateOne) ClearBanned() *UserUpdateOne {
	uuo.mutation.ClearBanned()
	return uuo
}

// SetBanReason sets the "ban_reason" field.
func (uuo *UserUpdateOne) SetBanReason(s string) *UserUpdateOne {
	uuo.mutation.SetBanReason(s)
	return uuo
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBanReason(*s)
	}
	return uuo
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uuo *UserUpdateOne) ClearBanReason() *UserUpdateOne {
	uuo.mutation.ClearBanReason()
	return uuo
}

// SetBanExpires sets the "ban_expires" field.
func (uuo *UserUpdateOne) SetBanExpires(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBanExpires(t)
	return uuo
}

// SetNillableBanExpires sets the "ban_expires" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanExpires(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBanExpires(*t)
	}
	return uuo
}

// ClearBanExpires clears the value of the "ban_expires" field.
func (uuo *UserUpdateOne) ClearBanExpires() *UserUpdateOne {
	uuo.mutation.ClearBanExpires()
	return uuo
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (uuo *UserUpdateOne) AddAccountIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddAccountIDs(ids...)
	return uuo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (uuo *UserUpdateOne) AddAccounts(a ...*Account) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (uuo *UserUpdateOne) AddMemberIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMemberIDs(ids...)
	return uuo
}

// AddMembers adds the "members" edges to the Member entity.
func (uuo *UserUpdateOne) AddMembers(m ...*Member) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMemberIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (uuo *UserUpdateOne) AddInvitationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddInvitationIDs(ids...)
	return uuo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (uuo *UserUpdateOne) AddInvitations(i ...*Invitation) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInvitationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (uuo *UserUpdateOne) ClearAccounts() *UserUpdateOne {
	uuo.mutation.ClearAccounts()
	return uuo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (uuo *UserUpdateOne) RemoveAccountIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveAccountIDs(ids...)
	return uuo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (uuo *UserUpdateOne) RemoveAccounts(a ...*Account) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountIDs(ids...)
}

// ClearMembers clears all "members" edges to the Member entity.
func (uuo *UserUpdateOne) ClearMembers() *UserUpdateOne {
	uuo.mutation.ClearMembers()
	return uuo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (uuo *UserUpdateOne) RemoveMemberIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMemberIDs(ids...)
	return uuo
}

// RemoveMembers removes "members" edges to Member entities.
func (uuo *UserUpdateOne) RemoveMembers(m ...*Member) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMemberIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (uuo *UserUpdateOne) ClearInvitations() *UserUpdateOne {
	uuo.mutation.ClearInvitations()
	return uuo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (uuo *UserUpdateOne) RemoveInvitationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveInvitationIDs(ids...)
	return uuo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (uuo *UserUpdateOne) RemoveInvitations(i ...*Invitation) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInvitationIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Image(); ok {
		_spec.SetField(user.FieldImage, field.TypeString, value)
	}
	if uuo.mutation.ImageCleared() {
		_spec.ClearField(user.FieldImage, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if uuo.mutation.RoleCleared() {
		_spec.ClearField(user.FieldRole, field.TypeString)
	}
	if value, ok := uuo.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if uuo.mutation.BannedCleared() {
		_spec.ClearField(user.FieldBanned, field.TypeBool)
	}
	if value, ok := uuo.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uuo.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if value, ok := uuo.mutation.BanExpires(); ok {
		_spec.SetField(user.FieldBanExpires, field.TypeTime, value)
	}
	if uuo.mutation.BanExpiresCleared() {
		_spec.ClearField(user.FieldBanExpires, field.TypeTime)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !uuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountsTable,
			Columns: []string{user.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !uuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembersTable,
			Columns: []string{user.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !uuo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.InvitationsTable,
			Columns: []string{user.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
