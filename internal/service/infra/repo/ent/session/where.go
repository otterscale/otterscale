// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openhdc/openhdc/internal/service/infra/repo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldID, id))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpiresAt, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// ImpersonatedBy applies equality check predicate on the "impersonated_by" field. It's identical to ImpersonatedByEQ.
func ImpersonatedBy(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldImpersonatedBy, v))
}

// ActiveOrganizationID applies equality check predicate on the "active_organization_id" field. It's identical to ActiveOrganizationIDEQ.
func ActiveOrganizationID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldActiveOrganizationID, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldExpiresAt, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUpdatedAt, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldUserAgent, v))
}

// ImpersonatedByEQ applies the EQ predicate on the "impersonated_by" field.
func ImpersonatedByEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldImpersonatedBy, v))
}

// ImpersonatedByNEQ applies the NEQ predicate on the "impersonated_by" field.
func ImpersonatedByNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldImpersonatedBy, v))
}

// ImpersonatedByIn applies the In predicate on the "impersonated_by" field.
func ImpersonatedByIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldImpersonatedBy, vs...))
}

// ImpersonatedByNotIn applies the NotIn predicate on the "impersonated_by" field.
func ImpersonatedByNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldImpersonatedBy, vs...))
}

// ImpersonatedByGT applies the GT predicate on the "impersonated_by" field.
func ImpersonatedByGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldImpersonatedBy, v))
}

// ImpersonatedByGTE applies the GTE predicate on the "impersonated_by" field.
func ImpersonatedByGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldImpersonatedBy, v))
}

// ImpersonatedByLT applies the LT predicate on the "impersonated_by" field.
func ImpersonatedByLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldImpersonatedBy, v))
}

// ImpersonatedByLTE applies the LTE predicate on the "impersonated_by" field.
func ImpersonatedByLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldImpersonatedBy, v))
}

// ImpersonatedByContains applies the Contains predicate on the "impersonated_by" field.
func ImpersonatedByContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldImpersonatedBy, v))
}

// ImpersonatedByHasPrefix applies the HasPrefix predicate on the "impersonated_by" field.
func ImpersonatedByHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldImpersonatedBy, v))
}

// ImpersonatedByHasSuffix applies the HasSuffix predicate on the "impersonated_by" field.
func ImpersonatedByHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldImpersonatedBy, v))
}

// ImpersonatedByIsNil applies the IsNil predicate on the "impersonated_by" field.
func ImpersonatedByIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldImpersonatedBy))
}

// ImpersonatedByNotNil applies the NotNil predicate on the "impersonated_by" field.
func ImpersonatedByNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldImpersonatedBy))
}

// ImpersonatedByEqualFold applies the EqualFold predicate on the "impersonated_by" field.
func ImpersonatedByEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldImpersonatedBy, v))
}

// ImpersonatedByContainsFold applies the ContainsFold predicate on the "impersonated_by" field.
func ImpersonatedByContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldImpersonatedBy, v))
}

// ActiveOrganizationIDEQ applies the EQ predicate on the "active_organization_id" field.
func ActiveOrganizationIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDNEQ applies the NEQ predicate on the "active_organization_id" field.
func ActiveOrganizationIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDIn applies the In predicate on the "active_organization_id" field.
func ActiveOrganizationIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldActiveOrganizationID, vs...))
}

// ActiveOrganizationIDNotIn applies the NotIn predicate on the "active_organization_id" field.
func ActiveOrganizationIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldActiveOrganizationID, vs...))
}

// ActiveOrganizationIDGT applies the GT predicate on the "active_organization_id" field.
func ActiveOrganizationIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDGTE applies the GTE predicate on the "active_organization_id" field.
func ActiveOrganizationIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDLT applies the LT predicate on the "active_organization_id" field.
func ActiveOrganizationIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDLTE applies the LTE predicate on the "active_organization_id" field.
func ActiveOrganizationIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDContains applies the Contains predicate on the "active_organization_id" field.
func ActiveOrganizationIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDHasPrefix applies the HasPrefix predicate on the "active_organization_id" field.
func ActiveOrganizationIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDHasSuffix applies the HasSuffix predicate on the "active_organization_id" field.
func ActiveOrganizationIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDIsNil applies the IsNil predicate on the "active_organization_id" field.
func ActiveOrganizationIDIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldActiveOrganizationID))
}

// ActiveOrganizationIDNotNil applies the NotNil predicate on the "active_organization_id" field.
func ActiveOrganizationIDNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldActiveOrganizationID))
}

// ActiveOrganizationIDEqualFold applies the EqualFold predicate on the "active_organization_id" field.
func ActiveOrganizationIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldActiveOrganizationID, v))
}

// ActiveOrganizationIDContainsFold applies the ContainsFold predicate on the "active_organization_id" field.
func ActiveOrganizationIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldActiveOrganizationID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
