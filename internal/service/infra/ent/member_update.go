// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/service/infra/ent/member"
	"github.com/openhdc/openhdc/internal/service/infra/ent/organization"
	"github.com/openhdc/openhdc/internal/service/infra/ent/predicate"
	"github.com/openhdc/openhdc/internal/service/infra/ent/user"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRole sets the "role" field.
func (mu *MemberUpdate) SetRole(s string) *MemberUpdate {
	mu.mutation.SetRole(s)
	return mu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableRole(s *string) *MemberUpdate {
	if s != nil {
		mu.SetRole(*s)
	}
	return mu
}

// SetTeamID sets the "team_id" field.
func (mu *MemberUpdate) SetTeamID(s string) *MemberUpdate {
	mu.mutation.SetTeamID(s)
	return mu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableTeamID(s *string) *MemberUpdate {
	if s != nil {
		mu.SetTeamID(*s)
	}
	return mu
}

// ClearTeamID clears the value of the "team_id" field.
func (mu *MemberUpdate) ClearTeamID() *MemberUpdate {
	mu.mutation.ClearTeamID()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MemberUpdate) SetCreatedAt(s string) *MemberUpdate {
	mu.mutation.SetCreatedAt(s)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCreatedAt(s *string) *MemberUpdate {
	if s != nil {
		mu.SetCreatedAt(*s)
	}
	return mu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MemberUpdate) SetUserID(id string) *MemberUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MemberUpdate) SetUser(u *User) *MemberUpdate {
	return mu.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (mu *MemberUpdate) SetOrganizationID(id string) *MemberUpdate {
	mu.mutation.SetOrganizationID(id)
	return mu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (mu *MemberUpdate) SetOrganization(o *Organization) *MemberUpdate {
	return mu.SetOrganizationID(o.ID)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MemberUpdate) ClearUser() *MemberUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (mu *MemberUpdate) ClearOrganization() *MemberUpdate {
	mu.mutation.ClearOrganization()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if mu.mutation.UserCleared() && len(mu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	if mu.mutation.OrganizationCleared() && len(mu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.organization"`)
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Role(); ok {
		_spec.SetField(member.FieldRole, field.TypeString, value)
	}
	if value, ok := mu.mutation.TeamID(); ok {
		_spec.SetField(member.FieldTeamID, field.TypeString, value)
	}
	if mu.mutation.TeamIDCleared() {
		_spec.ClearField(member.FieldTeamID, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeString, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.OrganizationTable,
			Columns: []string{member.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.OrganizationTable,
			Columns: []string{member.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetRole sets the "role" field.
func (muo *MemberUpdateOne) SetRole(s string) *MemberUpdateOne {
	muo.mutation.SetRole(s)
	return muo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableRole(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetRole(*s)
	}
	return muo
}

// SetTeamID sets the "team_id" field.
func (muo *MemberUpdateOne) SetTeamID(s string) *MemberUpdateOne {
	muo.mutation.SetTeamID(s)
	return muo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableTeamID(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetTeamID(*s)
	}
	return muo
}

// ClearTeamID clears the value of the "team_id" field.
func (muo *MemberUpdateOne) ClearTeamID() *MemberUpdateOne {
	muo.mutation.ClearTeamID()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MemberUpdateOne) SetCreatedAt(s string) *MemberUpdateOne {
	muo.mutation.SetCreatedAt(s)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCreatedAt(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetCreatedAt(*s)
	}
	return muo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MemberUpdateOne) SetUserID(id string) *MemberUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MemberUpdateOne) SetUser(u *User) *MemberUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (muo *MemberUpdateOne) SetOrganizationID(id string) *MemberUpdateOne {
	muo.mutation.SetOrganizationID(id)
	return muo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (muo *MemberUpdateOne) SetOrganization(o *Organization) *MemberUpdateOne {
	return muo.SetOrganizationID(o.ID)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MemberUpdateOne) ClearUser() *MemberUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (muo *MemberUpdateOne) ClearOrganization() *MemberUpdateOne {
	muo.mutation.ClearOrganization()
	return muo
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if muo.mutation.UserCleared() && len(muo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	if muo.mutation.OrganizationCleared() && len(muo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.organization"`)
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Role(); ok {
		_spec.SetField(member.FieldRole, field.TypeString, value)
	}
	if value, ok := muo.mutation.TeamID(); ok {
		_spec.SetField(member.FieldTeamID, field.TypeString, value)
	}
	if muo.mutation.TeamIDCleared() {
		_spec.ClearField(member.FieldTeamID, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeString, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.OrganizationTable,
			Columns: []string{member.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.OrganizationTable,
			Columns: []string{member.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
