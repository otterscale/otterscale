// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/service/infra/ent/invitation"
	"github.com/openhdc/openhdc/internal/service/infra/ent/organization"
	"github.com/openhdc/openhdc/internal/service/infra/ent/user"
)

// InvitationCreate is the builder for creating a Invitation entity.
type InvitationCreate struct {
	config
	mutation *InvitationMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ic *InvitationCreate) SetEmail(s string) *InvitationCreate {
	ic.mutation.SetEmail(s)
	return ic
}

// SetRole sets the "role" field.
func (ic *InvitationCreate) SetRole(s string) *InvitationCreate {
	ic.mutation.SetRole(s)
	return ic
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableRole(s *string) *InvitationCreate {
	if s != nil {
		ic.SetRole(*s)
	}
	return ic
}

// SetTeamID sets the "team_id" field.
func (ic *InvitationCreate) SetTeamID(s string) *InvitationCreate {
	ic.mutation.SetTeamID(s)
	return ic
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableTeamID(s *string) *InvitationCreate {
	if s != nil {
		ic.SetTeamID(*s)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *InvitationCreate) SetStatus(s string) *InvitationCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetExpiresAt sets the "expires_at" field.
func (ic *InvitationCreate) SetExpiresAt(s string) *InvitationCreate {
	ic.mutation.SetExpiresAt(s)
	return ic
}

// SetID sets the "id" field.
func (ic *InvitationCreate) SetID(s string) *InvitationCreate {
	ic.mutation.SetID(s)
	return ic
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *InvitationCreate) SetUserID(id string) *InvitationCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *InvitationCreate) SetUser(u *User) *InvitationCreate {
	return ic.SetUserID(u.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ic *InvitationCreate) SetOrganizationID(id string) *InvitationCreate {
	ic.mutation.SetOrganizationID(id)
	return ic
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ic *InvitationCreate) SetOrganization(o *Organization) *InvitationCreate {
	return ic.SetOrganizationID(o.ID)
}

// Mutation returns the InvitationMutation object of the builder.
func (ic *InvitationCreate) Mutation() *InvitationMutation {
	return ic.mutation
}

// Save creates the Invitation in the database.
func (ic *InvitationCreate) Save(ctx context.Context) (*Invitation, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvitationCreate) SaveX(ctx context.Context) *Invitation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvitationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvitationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvitationCreate) check() error {
	if _, ok := ic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Invitation.email"`)}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Invitation.status"`)}
	}
	if _, ok := ic.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Invitation.expires_at"`)}
	}
	if len(ic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Invitation.user"`)}
	}
	if len(ic.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Invitation.organization"`)}
	}
	return nil
}

func (ic *InvitationCreate) sqlSave(ctx context.Context) (*Invitation, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Invitation.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InvitationCreate) createSpec() (*Invitation, *sqlgraph.CreateSpec) {
	var (
		_node = &Invitation{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invitation.Table, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Email(); ok {
		_spec.SetField(invitation.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ic.mutation.Role(); ok {
		_spec.SetField(invitation.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := ic.mutation.TeamID(); ok {
		_spec.SetField(invitation.FieldTeamID, field.TypeString, value)
		_node.TeamID = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(invitation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.ExpiresAt(); ok {
		_spec.SetField(invitation.FieldExpiresAt, field.TypeString, value)
		_node.ExpiresAt = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.UserTable,
			Columns: []string{invitation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inviter_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitation.OrganizationTable,
			Columns: []string{invitation.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvitationCreateBulk is the builder for creating many Invitation entities in bulk.
type InvitationCreateBulk struct {
	config
	err      error
	builders []*InvitationCreate
}

// Save creates the Invitation entities in the database.
func (icb *InvitationCreateBulk) Save(ctx context.Context) ([]*Invitation, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invitation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvitationCreateBulk) SaveX(ctx context.Context) []*Invitation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvitationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvitationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
