// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openhdc/openhdc/internal/service/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldID, id))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccountID, v))
}

// ProviderID applies equality check predicate on the "provider_id" field. It's identical to ProviderIDEQ.
func ProviderID(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldProviderID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshToken, v))
}

// IDToken applies equality check predicate on the "id_token" field. It's identical to IDTokenEQ.
func IDToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIDToken, v))
}

// AccessTokenExpiresAt applies equality check predicate on the "access_token_expires_at" field. It's identical to AccessTokenExpiresAtEQ.
func AccessTokenExpiresAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessTokenExpiresAt, v))
}

// RefreshTokenExpiresAt applies equality check predicate on the "refresh_token_expires_at" field. It's identical to RefreshTokenExpiresAtEQ.
func RefreshTokenExpiresAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// Scope applies equality check predicate on the "scope" field. It's identical to ScopeEQ.
func Scope(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldScope, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAccountID, v))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAccountID, v))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAccountID, v))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAccountID, v))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAccountID, v))
}

// ProviderIDEQ applies the EQ predicate on the "provider_id" field.
func ProviderIDEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldProviderID, v))
}

// ProviderIDNEQ applies the NEQ predicate on the "provider_id" field.
func ProviderIDNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldProviderID, v))
}

// ProviderIDIn applies the In predicate on the "provider_id" field.
func ProviderIDIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldProviderID, vs...))
}

// ProviderIDNotIn applies the NotIn predicate on the "provider_id" field.
func ProviderIDNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldProviderID, vs...))
}

// ProviderIDGT applies the GT predicate on the "provider_id" field.
func ProviderIDGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldProviderID, v))
}

// ProviderIDGTE applies the GTE predicate on the "provider_id" field.
func ProviderIDGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldProviderID, v))
}

// ProviderIDLT applies the LT predicate on the "provider_id" field.
func ProviderIDLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldProviderID, v))
}

// ProviderIDLTE applies the LTE predicate on the "provider_id" field.
func ProviderIDLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldProviderID, v))
}

// ProviderIDContains applies the Contains predicate on the "provider_id" field.
func ProviderIDContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldProviderID, v))
}

// ProviderIDHasPrefix applies the HasPrefix predicate on the "provider_id" field.
func ProviderIDHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldProviderID, v))
}

// ProviderIDHasSuffix applies the HasSuffix predicate on the "provider_id" field.
func ProviderIDHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldProviderID, v))
}

// ProviderIDEqualFold applies the EqualFold predicate on the "provider_id" field.
func ProviderIDEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldProviderID, v))
}

// ProviderIDContainsFold applies the ContainsFold predicate on the "provider_id" field.
func ProviderIDContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldProviderID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldRefreshToken, v))
}

// IDTokenEQ applies the EQ predicate on the "id_token" field.
func IDTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIDToken, v))
}

// IDTokenNEQ applies the NEQ predicate on the "id_token" field.
func IDTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldIDToken, v))
}

// IDTokenIn applies the In predicate on the "id_token" field.
func IDTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldIDToken, vs...))
}

// IDTokenNotIn applies the NotIn predicate on the "id_token" field.
func IDTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldIDToken, vs...))
}

// IDTokenGT applies the GT predicate on the "id_token" field.
func IDTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldIDToken, v))
}

// IDTokenGTE applies the GTE predicate on the "id_token" field.
func IDTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldIDToken, v))
}

// IDTokenLT applies the LT predicate on the "id_token" field.
func IDTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldIDToken, v))
}

// IDTokenLTE applies the LTE predicate on the "id_token" field.
func IDTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldIDToken, v))
}

// IDTokenContains applies the Contains predicate on the "id_token" field.
func IDTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldIDToken, v))
}

// IDTokenHasPrefix applies the HasPrefix predicate on the "id_token" field.
func IDTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldIDToken, v))
}

// IDTokenHasSuffix applies the HasSuffix predicate on the "id_token" field.
func IDTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldIDToken, v))
}

// IDTokenIsNil applies the IsNil predicate on the "id_token" field.
func IDTokenIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldIDToken))
}

// IDTokenNotNil applies the NotNil predicate on the "id_token" field.
func IDTokenNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldIDToken))
}

// IDTokenEqualFold applies the EqualFold predicate on the "id_token" field.
func IDTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldIDToken, v))
}

// IDTokenContainsFold applies the ContainsFold predicate on the "id_token" field.
func IDTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldIDToken, v))
}

// AccessTokenExpiresAtEQ applies the EQ predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtNEQ applies the NEQ predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtIn applies the In predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccessTokenExpiresAt, vs...))
}

// AccessTokenExpiresAtNotIn applies the NotIn predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccessTokenExpiresAt, vs...))
}

// AccessTokenExpiresAtGT applies the GT predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtGTE applies the GTE predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtLT applies the LT predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtLTE applies the LTE predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccessTokenExpiresAt, v))
}

// AccessTokenExpiresAtIsNil applies the IsNil predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldAccessTokenExpiresAt))
}

// AccessTokenExpiresAtNotNil applies the NotNil predicate on the "access_token_expires_at" field.
func AccessTokenExpiresAtNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldAccessTokenExpiresAt))
}

// RefreshTokenExpiresAtEQ applies the EQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtNEQ applies the NEQ predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIn applies the In predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtNotIn applies the NotIn predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRefreshTokenExpiresAt, vs...))
}

// RefreshTokenExpiresAtGT applies the GT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtGTE applies the GTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLT applies the LT predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtLTE applies the LTE predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRefreshTokenExpiresAt, v))
}

// RefreshTokenExpiresAtIsNil applies the IsNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldRefreshTokenExpiresAt))
}

// RefreshTokenExpiresAtNotNil applies the NotNil predicate on the "refresh_token_expires_at" field.
func RefreshTokenExpiresAtNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldRefreshTokenExpiresAt))
}

// ScopeEQ applies the EQ predicate on the "scope" field.
func ScopeEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldScope, v))
}

// ScopeNEQ applies the NEQ predicate on the "scope" field.
func ScopeNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldScope, v))
}

// ScopeIn applies the In predicate on the "scope" field.
func ScopeIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldScope, vs...))
}

// ScopeNotIn applies the NotIn predicate on the "scope" field.
func ScopeNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldScope, vs...))
}

// ScopeGT applies the GT predicate on the "scope" field.
func ScopeGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldScope, v))
}

// ScopeGTE applies the GTE predicate on the "scope" field.
func ScopeGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldScope, v))
}

// ScopeLT applies the LT predicate on the "scope" field.
func ScopeLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldScope, v))
}

// ScopeLTE applies the LTE predicate on the "scope" field.
func ScopeLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldScope, v))
}

// ScopeContains applies the Contains predicate on the "scope" field.
func ScopeContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldScope, v))
}

// ScopeHasPrefix applies the HasPrefix predicate on the "scope" field.
func ScopeHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldScope, v))
}

// ScopeHasSuffix applies the HasSuffix predicate on the "scope" field.
func ScopeHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldScope, v))
}

// ScopeIsNil applies the IsNil predicate on the "scope" field.
func ScopeIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldScope))
}

// ScopeNotNil applies the NotNil predicate on the "scope" field.
func ScopeNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldScope))
}

// ScopeEqualFold applies the EqualFold predicate on the "scope" field.
func ScopeEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldScope, v))
}

// ScopeContainsFold applies the ContainsFold predicate on the "scope" field.
func ScopeContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldScope, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPassword, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
