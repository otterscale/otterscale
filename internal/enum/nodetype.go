// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package enum

import (
	"fmt"
	"strings"
)

type NodeType int64

const (
	// NodeTypeMachine is a NodeType of type Machine.
	NodeTypeMachine NodeType = iota
	// NodeTypeDevice is a NodeType of type Device.
	NodeTypeDevice
	// NodeTypeRackController is a NodeType of type Rack Controller.
	NodeTypeRackController
	// NodeTypeRegionRackController is a NodeType of type Region & Rack Controller.
	NodeTypeRegionRackController
	// NodeTypeRegionController is a NodeType of type Region Controller.
	NodeTypeRegionController
)

var ErrInvalidNodeType = fmt.Errorf("not a valid NodeType, try [%s]", strings.Join(_NodeTypeNames, ", "))

const _NodeTypeName = "MachineDeviceRack ControllerRegion & Rack ControllerRegion Controller"

var _NodeTypeNames = []string{
	_NodeTypeName[0:7],
	_NodeTypeName[7:13],
	_NodeTypeName[13:28],
	_NodeTypeName[28:52],
	_NodeTypeName[52:69],
}

// NodeTypeNames returns a list of possible string values of NodeType.
func NodeTypeNames() []string {
	tmp := make([]string, len(_NodeTypeNames))
	copy(tmp, _NodeTypeNames)
	return tmp
}

// Values returns a list of possible string values of NodeType for ent EnumValues interface.
func (x NodeType) Values() []string {
	tmp := make([]string, len(_NodeTypeNames))
	copy(tmp, _NodeTypeNames)
	return tmp
}

var _NodeTypeMap = map[NodeType]string{
	NodeTypeMachine:              _NodeTypeName[0:7],
	NodeTypeDevice:               _NodeTypeName[7:13],
	NodeTypeRackController:       _NodeTypeName[13:28],
	NodeTypeRegionRackController: _NodeTypeName[28:52],
	NodeTypeRegionController:     _NodeTypeName[52:69],
}

// String implements the Stringer interface.
func (x NodeType) String() string {
	if str, ok := _NodeTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NodeType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x NodeType) IsValid() bool {
	_, ok := _NodeTypeMap[x]
	return ok
}

var _NodeTypeValue = map[string]NodeType{
	_NodeTypeName[0:7]:   NodeTypeMachine,
	_NodeTypeName[7:13]:  NodeTypeDevice,
	_NodeTypeName[13:28]: NodeTypeRackController,
	_NodeTypeName[28:52]: NodeTypeRegionRackController,
	_NodeTypeName[52:69]: NodeTypeRegionController,
}

// ParseNodeType attempts to convert a string to a NodeType.
func ParseNodeType(name string) (NodeType, error) {
	if x, ok := _NodeTypeValue[name]; ok {
		return x, nil
	}
	return NodeType(0), fmt.Errorf("%s is %w", name, ErrInvalidNodeType)
}

// MarshalText implements the text marshaller method.
func (x NodeType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *NodeType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseNodeType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
