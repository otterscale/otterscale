// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package enum

import (
	"fmt"
	"strings"
)

type ErrorLevel int64

const (
	// ErrorLevelInfo is a ErrorLevel of type Info.
	ErrorLevelInfo ErrorLevel = iota
	// ErrorLevelLow is a ErrorLevel of type Low.
	ErrorLevelLow
	// ErrorLevelMedium is a ErrorLevel of type Medium.
	ErrorLevelMedium
	// ErrorLevelHigh is a ErrorLevel of type High.
	ErrorLevelHigh
	// ErrorLevelCritical is a ErrorLevel of type Critical.
	ErrorLevelCritical
)

var ErrInvalidErrorLevel = fmt.Errorf("not a valid ErrorLevel, try [%s]", strings.Join(_ErrorLevelNames, ", "))

const _ErrorLevelName = "InfoLowMediumHighCritical"

var _ErrorLevelNames = []string{
	_ErrorLevelName[0:4],
	_ErrorLevelName[4:7],
	_ErrorLevelName[7:13],
	_ErrorLevelName[13:17],
	_ErrorLevelName[17:25],
}

// ErrorLevelNames returns a list of possible string values of ErrorLevel.
func ErrorLevelNames() []string {
	tmp := make([]string, len(_ErrorLevelNames))
	copy(tmp, _ErrorLevelNames)
	return tmp
}

var _ErrorLevelMap = map[ErrorLevel]string{
	ErrorLevelInfo:     _ErrorLevelName[0:4],
	ErrorLevelLow:      _ErrorLevelName[4:7],
	ErrorLevelMedium:   _ErrorLevelName[7:13],
	ErrorLevelHigh:     _ErrorLevelName[13:17],
	ErrorLevelCritical: _ErrorLevelName[17:25],
}

// String implements the Stringer interface.
func (x ErrorLevel) String() string {
	if str, ok := _ErrorLevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ErrorLevel(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorLevel) IsValid() bool {
	_, ok := _ErrorLevelMap[x]
	return ok
}

var _ErrorLevelValue = map[string]ErrorLevel{
	_ErrorLevelName[0:4]:   ErrorLevelInfo,
	_ErrorLevelName[4:7]:   ErrorLevelLow,
	_ErrorLevelName[7:13]:  ErrorLevelMedium,
	_ErrorLevelName[13:17]: ErrorLevelHigh,
	_ErrorLevelName[17:25]: ErrorLevelCritical,
}

// ParseErrorLevel attempts to convert a string to a ErrorLevel.
func ParseErrorLevel(name string) (ErrorLevel, error) {
	if x, ok := _ErrorLevelValue[name]; ok {
		return x, nil
	}
	return ErrorLevel(0), fmt.Errorf("%s is %w", name, ErrInvalidErrorLevel)
}

// MarshalText implements the text marshaller method.
func (x ErrorLevel) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ErrorLevel) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseErrorLevel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
