// Package ceph provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ceph

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// PostApiAuthJSONBody defines parameters for PostApiAuth.
type PostApiAuthJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostApiAuthCheckJSONBody defines parameters for PostApiAuthCheck.
type PostApiAuthCheckJSONBody struct {
	// Token Authentication Token
	Token string `json:"token"`
}

// PostApiAuthCheckParams defines parameters for PostApiAuthCheck.
type PostApiAuthCheckParams struct {
	// Token Authentication Token
	Token string `form:"token" json:"token"`
}

// GetApiBlockImageParams defines parameters for GetApiBlockImage.
type GetApiBlockImageParams struct {
	// PoolName Pool Name
	PoolName *string `form:"pool_name,omitempty" json:"pool_name,omitempty"`

	// Offset offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostApiBlockImageJSONBody defines parameters for PostApiBlockImage.
type PostApiBlockImageJSONBody struct {
	Configuration    *string `json:"configuration,omitempty"`
	DataPool         *string `json:"data_pool,omitempty"`
	Features         *string `json:"features,omitempty"`
	MirrorMode       *string `json:"mirror_mode,omitempty"`
	Name             string  `json:"name"`
	Namespace        *string `json:"namespace,omitempty"`
	ObjSize          *int    `json:"obj_size,omitempty"`
	PoolName         string  `json:"pool_name"`
	ScheduleInterval *string `json:"schedule_interval,omitempty"`
	Size             int     `json:"size"`
	StripeCount      *int    `json:"stripe_count,omitempty"`
	StripeUnit       *string `json:"stripe_unit,omitempty"`
}

// GetApiBlockImageTrashParams defines parameters for GetApiBlockImageTrash.
type GetApiBlockImageTrashParams struct {
	// PoolName Name of the pool
	PoolName *string `form:"pool_name,omitempty" json:"pool_name,omitempty"`
}

// PostApiBlockImageTrashPurgeJSONBody defines parameters for PostApiBlockImageTrashPurge.
type PostApiBlockImageTrashPurgeJSONBody struct {
	PoolName *string `json:"pool_name,omitempty"`
}

// PostApiBlockImageTrashPurgeParams defines parameters for PostApiBlockImageTrashPurge.
type PostApiBlockImageTrashPurgeParams struct {
	PoolName *string `form:"pool_name,omitempty" json:"pool_name,omitempty"`
}

// DeleteApiBlockImageTrashImageIdSpecParams defines parameters for DeleteApiBlockImageTrashImageIdSpec.
type DeleteApiBlockImageTrashImageIdSpecParams struct {
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// PostApiBlockImageTrashImageIdSpecRestoreJSONBody defines parameters for PostApiBlockImageTrashImageIdSpecRestore.
type PostApiBlockImageTrashImageIdSpecRestoreJSONBody struct {
	NewImageName string `json:"new_image_name"`
}

// PutApiBlockImageImageSpecJSONBody defines parameters for PutApiBlockImageImageSpec.
type PutApiBlockImageImageSpecJSONBody struct {
	Configuration    *string `json:"configuration,omitempty"`
	EnableMirror     *string `json:"enable_mirror,omitempty"`
	Features         *string `json:"features,omitempty"`
	Force            *bool   `json:"force,omitempty"`
	MirrorMode       *string `json:"mirror_mode,omitempty"`
	Name             *string `json:"name,omitempty"`
	Primary          *string `json:"primary,omitempty"`
	RemoveScheduling *bool   `json:"remove_scheduling,omitempty"`
	Resync           *bool   `json:"resync,omitempty"`
	ScheduleInterval *string `json:"schedule_interval,omitempty"`
	Size             *int    `json:"size,omitempty"`
}

// PostApiBlockImageImageSpecCopyJSONBody defines parameters for PostApiBlockImageImageSpecCopy.
type PostApiBlockImageImageSpecCopyJSONBody struct {
	Configuration *string `json:"configuration,omitempty"`
	DataPool      *string `json:"data_pool,omitempty"`
	DestImageName string  `json:"dest_image_name"`
	DestNamespace string  `json:"dest_namespace"`
	DestPoolName  string  `json:"dest_pool_name"`
	Features      *string `json:"features,omitempty"`
	ObjSize       *int    `json:"obj_size,omitempty"`
	SnapshotName  *string `json:"snapshot_name,omitempty"`
	StripeCount   *int    `json:"stripe_count,omitempty"`
	StripeUnit    *string `json:"stripe_unit,omitempty"`
}

// PostApiBlockImageImageSpecMoveTrashJSONBody defines parameters for PostApiBlockImageImageSpecMoveTrash.
type PostApiBlockImageImageSpecMoveTrashJSONBody struct {
	Delay *int `json:"delay,omitempty"`
}

// PostApiBlockImageImageSpecSnapJSONBody defines parameters for PostApiBlockImageImageSpecSnap.
type PostApiBlockImageImageSpecSnapJSONBody struct {
	MirrorImageSnapshot string `json:"mirrorImageSnapshot"`
	SnapshotName        string `json:"snapshot_name"`
}

// PutApiBlockImageImageSpecSnapSnapshotNameJSONBody defines parameters for PutApiBlockImageImageSpecSnapSnapshotName.
type PutApiBlockImageImageSpecSnapSnapshotNameJSONBody struct {
	IsProtected *bool   `json:"is_protected,omitempty"`
	NewSnapName *string `json:"new_snap_name,omitempty"`
}

// PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONBody defines parameters for PostApiBlockImageImageSpecSnapSnapshotNameClone.
type PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONBody struct {
	ChildImageName string  `json:"child_image_name"`
	ChildNamespace *string `json:"child_namespace,omitempty"`
	ChildPoolName  string  `json:"child_pool_name"`
	Configuration  *string `json:"configuration,omitempty"`
	DataPool       *string `json:"data_pool,omitempty"`
	Features       *string `json:"features,omitempty"`
	ObjSize        *int    `json:"obj_size,omitempty"`
	StripeCount    *int    `json:"stripe_count,omitempty"`
	StripeUnit     *string `json:"stripe_unit,omitempty"`
}

// PutApiBlockMirroringPoolPoolNameJSONBody defines parameters for PutApiBlockMirroringPoolPoolName.
type PutApiBlockMirroringPoolPoolNameJSONBody struct {
	MirrorMode *string `json:"mirror_mode,omitempty"`
}

// PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONBody defines parameters for PostApiBlockMirroringPoolPoolNameBootstrapPeer.
type PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONBody struct {
	Direction string `json:"direction"`
	Token     string `json:"token"`
}

// PostApiBlockMirroringPoolPoolNamePeerJSONBody defines parameters for PostApiBlockMirroringPoolPoolNamePeer.
type PostApiBlockMirroringPoolPoolNamePeerJSONBody struct {
	ClientId    string  `json:"client_id"`
	ClusterName string  `json:"cluster_name"`
	Key         *string `json:"key,omitempty"`
	MonHost     *string `json:"mon_host,omitempty"`
}

// PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONBody defines parameters for PutApiBlockMirroringPoolPoolNamePeerPeerUuid.
type PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONBody struct {
	ClientId    *string `json:"client_id,omitempty"`
	ClusterName *string `json:"cluster_name,omitempty"`
	Key         *string `json:"key,omitempty"`
	MonHost     *string `json:"mon_host,omitempty"`
}

// PutApiBlockMirroringSiteNameJSONBody defines parameters for PutApiBlockMirroringSiteName.
type PutApiBlockMirroringSiteNameJSONBody struct {
	SiteName string `json:"site_name"`
}

// PostApiBlockPoolPoolNameNamespaceJSONBody defines parameters for PostApiBlockPoolPoolNameNamespace.
type PostApiBlockPoolPoolNameNamespaceJSONBody struct {
	Namespace string `json:"namespace"`
}

// GetApiCephfsFsIdLsDirParams defines parameters for GetApiCephfsFsIdLsDir.
type GetApiCephfsFsIdLsDirParams struct {
	Path  *string `form:"path,omitempty" json:"path,omitempty"`
	Depth *int    `form:"depth,omitempty" json:"depth,omitempty"`
}

// GetApiCephfsFsIdMdsCountersParams defines parameters for GetApiCephfsFsIdMdsCounters.
type GetApiCephfsFsIdMdsCountersParams struct {
	Counters *int `form:"counters,omitempty" json:"counters,omitempty"`
}

// GetApiCephfsFsIdQuotaParams defines parameters for GetApiCephfsFsIdQuota.
type GetApiCephfsFsIdQuotaParams struct {
	// Path File System Path
	Path string `form:"path" json:"path"`
}

// PutApiCephfsFsIdQuotaJSONBody defines parameters for PutApiCephfsFsIdQuota.
type PutApiCephfsFsIdQuotaJSONBody struct {
	MaxBytes *string `json:"max_bytes,omitempty"`
	MaxFiles *string `json:"max_files,omitempty"`
	Path     string  `json:"path"`
}

// DeleteApiCephfsFsIdSnapshotParams defines parameters for DeleteApiCephfsFsIdSnapshot.
type DeleteApiCephfsFsIdSnapshotParams struct {
	Path string `form:"path" json:"path"`
	Name string `form:"name" json:"name"`
}

// PostApiCephfsFsIdSnapshotJSONBody defines parameters for PostApiCephfsFsIdSnapshot.
type PostApiCephfsFsIdSnapshotJSONBody struct {
	Name *string `json:"name,omitempty"`
	Path string  `json:"path"`
}

// DeleteApiCephfsFsIdTreeParams defines parameters for DeleteApiCephfsFsIdTree.
type DeleteApiCephfsFsIdTreeParams struct {
	Path string `form:"path" json:"path"`
}

// PostApiCephfsFsIdTreeJSONBody defines parameters for PostApiCephfsFsIdTree.
type PostApiCephfsFsIdTreeJSONBody struct {
	Path string `json:"path"`
}

// PutApiClusterJSONBody defines parameters for PutApiCluster.
type PutApiClusterJSONBody struct {
	// Status Cluster Status
	Status string `json:"status"`
}

// PostApiClusterUserJSONBody defines parameters for PostApiClusterUser.
type PostApiClusterUserJSONBody struct {
	Capabilities *string `json:"capabilities,omitempty"`
	ImportData   *string `json:"import_data,omitempty"`
	UserEntity   *string `json:"user_entity,omitempty"`
}

// PutApiClusterUserJSONBody defines parameters for PutApiClusterUser.
type PutApiClusterUserJSONBody struct {
	Capabilities *string `json:"capabilities,omitempty"`
	UserEntity   *string `json:"user_entity,omitempty"`
}

// PostApiClusterUserExportJSONBody defines parameters for PostApiClusterUserExport.
type PostApiClusterUserExportJSONBody struct {
	Entities string `json:"entities"`
}

// PostApiClusterConfJSONBody defines parameters for PostApiClusterConf.
type PostApiClusterConfJSONBody struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// PutApiClusterConfJSONBody defines parameters for PutApiClusterConf.
type PutApiClusterConfJSONBody struct {
	Options string `json:"options"`
}

// GetApiClusterConfFilterParams defines parameters for GetApiClusterConfFilter.
type GetApiClusterConfFilterParams struct {
	// Names Config option names
	Names *string `form:"names,omitempty" json:"names,omitempty"`
}

// DeleteApiClusterConfNameParams defines parameters for DeleteApiClusterConfName.
type DeleteApiClusterConfNameParams struct {
	Section string `form:"section" json:"section"`
}

// PostApiCrushRuleJSONBody defines parameters for PostApiCrushRule.
type PostApiCrushRuleJSONBody struct {
	DeviceClass   *string `json:"device_class,omitempty"`
	FailureDomain string  `json:"failure_domain"`
	Name          string  `json:"name"`
	Root          string  `json:"root"`
}

// PutApiDaemonDaemonNameJSONBody defines parameters for PutApiDaemonDaemonName.
type PutApiDaemonDaemonNameJSONBody struct {
	Action         *string `json:"action,omitempty"`
	ContainerImage *string `json:"container_image,omitempty"`
}

// PostApiErasureCodeProfileJSONBody defines parameters for PostApiErasureCodeProfile.
type PostApiErasureCodeProfileJSONBody struct {
	Name string `json:"name"`
}

// PostApiFeedbackJSONBody defines parameters for PostApiFeedback.
type PostApiFeedbackJSONBody struct {
	ApiKey      *string `json:"api_key,omitempty"`
	Description string  `json:"description"`
	Project     string  `json:"project"`
	Subject     string  `json:"subject"`
	Tracker     string  `json:"tracker"`
}

// PostApiFeedbackApiKeyJSONBody defines parameters for PostApiFeedbackApiKey.
type PostApiFeedbackApiKeyJSONBody struct {
	ApiKey string `json:"api_key"`
}

// GetApiHostParams defines parameters for GetApiHost.
type GetApiHostParams struct {
	// Sources Host Sources
	Sources *string `form:"sources,omitempty" json:"sources,omitempty"`

	// Facts Host Facts
	Facts  *bool   `form:"facts,omitempty" json:"facts,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostApiHostJSONBody defines parameters for PostApiHost.
type PostApiHostJSONBody struct {
	// Addr Network Address
	Addr *string `json:"addr,omitempty"`

	// Hostname Hostname
	Hostname string `json:"hostname"`

	// Labels Host Labels
	Labels *[]string `json:"labels,omitempty"`

	// Status Host Status
	Status *string `json:"status,omitempty"`
}

// PutApiHostHostnameJSONBody defines parameters for PutApiHostHostname.
type PutApiHostHostnameJSONBody struct {
	// Drain Drain Host
	Drain *bool `json:"drain,omitempty"`

	// Force Force Enter Maintenance
	Force *bool `json:"force,omitempty"`

	// Labels Host Labels
	Labels *[]string `json:"labels,omitempty"`

	// Maintenance Enter/Exit Maintenance
	Maintenance *bool `json:"maintenance,omitempty"`

	// UpdateLabels Update Labels
	UpdateLabels *bool `json:"update_labels,omitempty"`
}

// PostApiHostHostnameIdentifyDeviceJSONBody defines parameters for PostApiHostHostnameIdentifyDevice.
type PostApiHostHostnameIdentifyDeviceJSONBody struct {
	Device   string `json:"device"`
	Duration string `json:"duration"`
}

// GetApiHostHostnameInventoryParams defines parameters for GetApiHostHostnameInventory.
type GetApiHostHostnameInventoryParams struct {
	// Refresh Trigger asynchronous refresh
	Refresh *string `form:"refresh,omitempty" json:"refresh,omitempty"`
}

// PutApiIscsiDiscoveryauthJSONBody defines parameters for PutApiIscsiDiscoveryauth.
type PutApiIscsiDiscoveryauthJSONBody struct {
	// MutualPassword Mutual Password
	MutualPassword string `json:"mutual_password"`

	// MutualUser Mutual UserName
	MutualUser string `json:"mutual_user"`

	// Password Password
	Password string `json:"password"`

	// User Username
	User string `json:"user"`
}

// PutApiIscsiDiscoveryauthParams defines parameters for PutApiIscsiDiscoveryauth.
type PutApiIscsiDiscoveryauthParams struct {
	// User Username
	User string `form:"user" json:"user"`

	// Password Password
	Password string `form:"password" json:"password"`

	// MutualUser Mutual UserName
	MutualUser string `form:"mutual_user" json:"mutual_user"`

	// MutualPassword Mutual Password
	MutualPassword string `form:"mutual_password" json:"mutual_password"`
}

// PostApiIscsiTargetJSONBody defines parameters for PostApiIscsiTarget.
type PostApiIscsiTargetJSONBody struct {
	AclEnabled     *string `json:"acl_enabled,omitempty"`
	Auth           *string `json:"auth,omitempty"`
	Clients        *string `json:"clients,omitempty"`
	Disks          *string `json:"disks,omitempty"`
	Groups         *string `json:"groups,omitempty"`
	Portals        *string `json:"portals,omitempty"`
	TargetControls *string `json:"target_controls,omitempty"`
	TargetIqn      *string `json:"target_iqn,omitempty"`
}

// PutApiIscsiTargetTargetIqnJSONBody defines parameters for PutApiIscsiTargetTargetIqn.
type PutApiIscsiTargetTargetIqnJSONBody struct {
	AclEnabled     *string `json:"acl_enabled,omitempty"`
	Auth           *string `json:"auth,omitempty"`
	Clients        *string `json:"clients,omitempty"`
	Disks          *string `json:"disks,omitempty"`
	Groups         *string `json:"groups,omitempty"`
	NewTargetIqn   *string `json:"new_target_iqn,omitempty"`
	Portals        *string `json:"portals,omitempty"`
	TargetControls *string `json:"target_controls,omitempty"`
}

// PutApiMgrModuleModuleNameJSONBody defines parameters for PutApiMgrModuleModuleName.
type PutApiMgrModuleModuleNameJSONBody struct {
	Config string `json:"config"`
}

// PostApiNfsGaneshaExportJSONBody defines parameters for PostApiNfsGaneshaExport.
type PostApiNfsGaneshaExportJSONBody struct {
	// AccessType Export access type
	AccessType string `json:"access_type"`

	// Clients List of client configurations
	Clients []struct {
		// AccessType Client access type
		AccessType string `json:"access_type"`

		// Addresses list of IP addresses
		Addresses []string `json:"addresses"`

		// Squash Client squash policy
		Squash string `json:"squash"`
	} `json:"clients"`

	// ClusterId Cluster identifier
	ClusterId string `json:"cluster_id"`

	// Fsal FSAL configuration
	Fsal struct {
		// FsName CephFS filesystem name
		FsName *string `json:"fs_name,omitempty"`

		// Name name of FSAL
		Name string `json:"name"`

		// SecLabelXattr Name of xattr for security label
		SecLabelXattr *string `json:"sec_label_xattr,omitempty"`
	} `json:"fsal"`

	// Path Export path
	Path string `json:"path"`

	// Protocols List of protocol types
	Protocols []int `json:"protocols"`

	// Pseudo Pseudo FS path
	Pseudo string `json:"pseudo"`

	// SecurityLabel Security label
	SecurityLabel string `json:"security_label"`

	// Squash Export squash policy
	Squash string `json:"squash"`

	// Transports List of transport types
	Transports []string `json:"transports"`
}

// PutApiNfsGaneshaExportClusterIdExportIdJSONBody defines parameters for PutApiNfsGaneshaExportClusterIdExportId.
type PutApiNfsGaneshaExportClusterIdExportIdJSONBody struct {
	// AccessType Export access type
	AccessType string `json:"access_type"`

	// Clients List of client configurations
	Clients []struct {
		// AccessType Client access type
		AccessType string `json:"access_type"`

		// Addresses list of IP addresses
		Addresses []string `json:"addresses"`

		// Squash Client squash policy
		Squash string `json:"squash"`
	} `json:"clients"`

	// Fsal FSAL configuration
	Fsal struct {
		// FsName CephFS filesystem name
		FsName *string `json:"fs_name,omitempty"`

		// Name name of FSAL
		Name string `json:"name"`

		// SecLabelXattr Name of xattr for security label
		SecLabelXattr *string `json:"sec_label_xattr,omitempty"`
	} `json:"fsal"`

	// Path Export path
	Path string `json:"path"`

	// Protocols List of protocol types
	Protocols []int `json:"protocols"`

	// Pseudo Pseudo FS path
	Pseudo string `json:"pseudo"`

	// SecurityLabel Security label
	SecurityLabel string `json:"security_label"`

	// Squash Export squash policy
	Squash string `json:"squash"`

	// Transports List of transport types
	Transports []string `json:"transports"`
}

// PostApiOsdJSONBody defines parameters for PostApiOsd.
type PostApiOsdJSONBody struct {
	Data       string `json:"data"`
	Method     string `json:"method"`
	TrackingId string `json:"tracking_id"`
}

// PutApiOsdFlagsJSONBody defines parameters for PutApiOsdFlags.
type PutApiOsdFlagsJSONBody struct {
	// Flags List of flags to set. The flags `recovery_deletes`, `sortbitwise` and `pglog_hardlimit` cannot be unset. Additionally `purged_snapshots` cannot even be set.
	Flags []string `json:"flags"`
}

// PutApiOsdFlagsIndividualJSONBody defines parameters for PutApiOsdFlagsIndividual.
type PutApiOsdFlagsIndividualJSONBody struct {
	// Flags Directory of flags to set or unset. The flags `noin`, `noout`, `noup` and `nodown` are going to be considered only.
	Flags struct {
		// Nodown Sets/unsets `nodown`
		Nodown *bool `json:"nodown,omitempty"`

		// Noin Sets/unsets `noin`
		Noin *bool `json:"noin,omitempty"`

		// Noout Sets/unsets `noout`
		Noout *bool `json:"noout,omitempty"`

		// Noup Sets/unsets `noup`
		Noup *bool `json:"noup,omitempty"`
	} `json:"flags"`

	// Ids List of OSD ids the flags should be applied to.
	Ids []int `json:"ids"`
}

// GetApiOsdSafeToDeleteParams defines parameters for GetApiOsdSafeToDelete.
type GetApiOsdSafeToDeleteParams struct {
	SvcIds string `form:"svc_ids" json:"svc_ids"`
}

// GetApiOsdSafeToDestroyParams defines parameters for GetApiOsdSafeToDestroy.
type GetApiOsdSafeToDestroyParams struct {
	// Ids OSD Service Identifier
	Ids string `form:"ids" json:"ids"`
}

// DeleteApiOsdSvcIdParams defines parameters for DeleteApiOsdSvcId.
type DeleteApiOsdSvcIdParams struct {
	PreserveId *string `form:"preserve_id,omitempty" json:"preserve_id,omitempty"`
	Force      *string `form:"force,omitempty" json:"force,omitempty"`
}

// PutApiOsdSvcIdJSONBody defines parameters for PutApiOsdSvcId.
type PutApiOsdSvcIdJSONBody struct {
	DeviceClass string `json:"device_class"`
}

// PutApiOsdSvcIdMarkJSONBody defines parameters for PutApiOsdSvcIdMark.
type PutApiOsdSvcIdMarkJSONBody struct {
	Action string `json:"action"`
}

// PostApiOsdSvcIdReweightJSONBody defines parameters for PostApiOsdSvcIdReweight.
type PostApiOsdSvcIdReweightJSONBody struct {
	Weight string `json:"weight"`
}

// PostApiOsdSvcIdScrubJSONBody defines parameters for PostApiOsdSvcIdScrub.
type PostApiOsdSvcIdScrubJSONBody struct {
	Deep *bool `json:"deep,omitempty"`
}

// PostApiOsdSvcIdScrubParams defines parameters for PostApiOsdSvcIdScrub.
type PostApiOsdSvcIdScrubParams struct {
	Deep *bool `form:"deep,omitempty" json:"deep,omitempty"`
}

// GetApiPoolParams defines parameters for GetApiPool.
type GetApiPoolParams struct {
	// Attrs Pool Attributes
	Attrs *string `form:"attrs,omitempty" json:"attrs,omitempty"`

	// Stats Pool Stats
	Stats *bool `form:"stats,omitempty" json:"stats,omitempty"`
}

// PostApiPoolJSONBody defines parameters for PostApiPool.
type PostApiPoolJSONBody struct {
	Pool *string `json:"pool,omitempty"`
}

// GetApiPoolPoolNameParams defines parameters for GetApiPoolPoolName.
type GetApiPoolPoolNameParams struct {
	Attrs *string `form:"attrs,omitempty" json:"attrs,omitempty"`
	Stats *bool   `form:"stats,omitempty" json:"stats,omitempty"`
}

// PutApiPoolPoolNameJSONBody defines parameters for PutApiPoolPoolName.
type PutApiPoolPoolNameJSONBody struct {
	ApplicationMetadata *string `json:"application_metadata,omitempty"`
	Configuration       *string `json:"configuration,omitempty"`
	Flags               *string `json:"flags,omitempty"`
}

// GetApiRgwBucketParams defines parameters for GetApiRgwBucket.
type GetApiRgwBucketParams struct {
	Stats      *bool   `form:"stats,omitempty" json:"stats,omitempty"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
	Uid        *string `form:"uid,omitempty" json:"uid,omitempty"`
}

// PostApiRgwBucketJSONBody defines parameters for PostApiRgwBucket.
type PostApiRgwBucketJSONBody struct {
	Bucket                   string  `json:"bucket"`
	DaemonName               *string `json:"daemon_name,omitempty"`
	EncryptionState          *string `json:"encryption_state,omitempty"`
	EncryptionType           *string `json:"encryption_type,omitempty"`
	KeyId                    *string `json:"key_id,omitempty"`
	LockEnabled              *string `json:"lock_enabled,omitempty"`
	LockMode                 *string `json:"lock_mode,omitempty"`
	LockRetentionPeriodDays  *string `json:"lock_retention_period_days,omitempty"`
	LockRetentionPeriodYears *string `json:"lock_retention_period_years,omitempty"`
	PlacementTarget          *string `json:"placement_target,omitempty"`
	Uid                      string  `json:"uid"`
	Zonegroup                *string `json:"zonegroup,omitempty"`
}

// DeleteApiRgwBucketDeleteEncryptionParams defines parameters for DeleteApiRgwBucketDeleteEncryption.
type DeleteApiRgwBucketDeleteEncryptionParams struct {
	BucketName string  `form:"bucket_name" json:"bucket_name"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
	Owner      *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// GetApiRgwBucketGetEncryptionParams defines parameters for GetApiRgwBucketGetEncryption.
type GetApiRgwBucketGetEncryptionParams struct {
	BucketName string  `form:"bucket_name" json:"bucket_name"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
	Owner      *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// GetApiRgwBucketGetEncryptionConfigParams defines parameters for GetApiRgwBucketGetEncryptionConfig.
type GetApiRgwBucketGetEncryptionConfigParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
	Owner      *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// PutApiRgwBucketSetEncryptionConfigJSONBody defines parameters for PutApiRgwBucketSetEncryptionConfig.
type PutApiRgwBucketSetEncryptionConfigJSONBody struct {
	Address        *string `json:"address,omitempty"`
	AuthMethod     *string `json:"auth_method,omitempty"`
	ClientCert     *string `json:"client_cert,omitempty"`
	ClientKey      *string `json:"client_key,omitempty"`
	DaemonName     *string `json:"daemon_name,omitempty"`
	EncryptionType *string `json:"encryption_type,omitempty"`
	KmsProvider    *string `json:"kms_provider,omitempty"`
	Namespace      *string `json:"namespace,omitempty"`
	Owner          *string `json:"owner,omitempty"`
	SecretEngine   *string `json:"secret_engine,omitempty"`
	SecretPath     *string `json:"secret_path,omitempty"`
	SslCert        *string `json:"ssl_cert,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// DeleteApiRgwBucketBucketParams defines parameters for DeleteApiRgwBucketBucket.
type DeleteApiRgwBucketBucketParams struct {
	PurgeObjects *string `form:"purge_objects,omitempty" json:"purge_objects,omitempty"`
	DaemonName   *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// GetApiRgwBucketBucketParams defines parameters for GetApiRgwBucketBucket.
type GetApiRgwBucketBucketParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PutApiRgwBucketBucketJSONBody defines parameters for PutApiRgwBucketBucket.
type PutApiRgwBucketBucketJSONBody struct {
	BucketId                 string  `json:"bucket_id"`
	DaemonName               *string `json:"daemon_name,omitempty"`
	EncryptionState          *string `json:"encryption_state,omitempty"`
	EncryptionType           *string `json:"encryption_type,omitempty"`
	KeyId                    *string `json:"key_id,omitempty"`
	LockMode                 *string `json:"lock_mode,omitempty"`
	LockRetentionPeriodDays  *string `json:"lock_retention_period_days,omitempty"`
	LockRetentionPeriodYears *string `json:"lock_retention_period_years,omitempty"`
	MfaDelete                *string `json:"mfa_delete,omitempty"`
	MfaTokenPin              *string `json:"mfa_token_pin,omitempty"`
	MfaTokenSerial           *string `json:"mfa_token_serial,omitempty"`
	Uid                      string  `json:"uid"`
	VersioningState          *string `json:"versioning_state,omitempty"`
}

// PostApiRgwRolesJSONBody defines parameters for PostApiRgwRoles.
type PostApiRgwRolesJSONBody struct {
	RoleAssumePolicyDoc *string `json:"role_assume_policy_doc,omitempty"`
	RoleName            *string `json:"role_name,omitempty"`
	RolePath            *string `json:"role_path,omitempty"`
}

// GetApiRgwSiteParams defines parameters for GetApiRgwSite.
type GetApiRgwSiteParams struct {
	Query      *string `form:"query,omitempty" json:"query,omitempty"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// GetApiRgwUserParams defines parameters for GetApiRgwUser.
type GetApiRgwUserParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PostApiRgwUserJSONBody defines parameters for PostApiRgwUser.
type PostApiRgwUserJSONBody struct {
	AccessKey   *string `json:"access_key,omitempty"`
	DaemonName  *string `json:"daemon_name,omitempty"`
	DisplayName string  `json:"display_name"`
	Email       *string `json:"email,omitempty"`
	GenerateKey *string `json:"generate_key,omitempty"`
	MaxBuckets  *string `json:"max_buckets,omitempty"`
	SecretKey   *string `json:"secret_key,omitempty"`
	Suspended   *string `json:"suspended,omitempty"`
	Uid         string  `json:"uid"`
}

// GetApiRgwUserGetEmailsParams defines parameters for GetApiRgwUserGetEmails.
type GetApiRgwUserGetEmailsParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// DeleteApiRgwUserUidParams defines parameters for DeleteApiRgwUserUid.
type DeleteApiRgwUserUidParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// GetApiRgwUserUidParams defines parameters for GetApiRgwUserUid.
type GetApiRgwUserUidParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
	Stats      *bool   `form:"stats,omitempty" json:"stats,omitempty"`
}

// PutApiRgwUserUidJSONBody defines parameters for PutApiRgwUserUid.
type PutApiRgwUserUidJSONBody struct {
	DaemonName  *string `json:"daemon_name,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Email       *string `json:"email,omitempty"`
	MaxBuckets  *string `json:"max_buckets,omitempty"`
	Suspended   *string `json:"suspended,omitempty"`
}

// DeleteApiRgwUserUidCapabilityParams defines parameters for DeleteApiRgwUserUidCapability.
type DeleteApiRgwUserUidCapabilityParams struct {
	Type       string  `form:"type" json:"type"`
	Perm       string  `form:"perm" json:"perm"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PostApiRgwUserUidCapabilityJSONBody defines parameters for PostApiRgwUserUidCapability.
type PostApiRgwUserUidCapabilityJSONBody struct {
	DaemonName *string `json:"daemon_name,omitempty"`
	Perm       string  `json:"perm"`
	Type       string  `json:"type"`
}

// DeleteApiRgwUserUidKeyParams defines parameters for DeleteApiRgwUserUidKey.
type DeleteApiRgwUserUidKeyParams struct {
	KeyType    *string `form:"key_type,omitempty" json:"key_type,omitempty"`
	Subuser    *string `form:"subuser,omitempty" json:"subuser,omitempty"`
	AccessKey  *string `form:"access_key,omitempty" json:"access_key,omitempty"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PostApiRgwUserUidKeyJSONBody defines parameters for PostApiRgwUserUidKey.
type PostApiRgwUserUidKeyJSONBody struct {
	AccessKey   *string `json:"access_key,omitempty"`
	DaemonName  *string `json:"daemon_name,omitempty"`
	GenerateKey *string `json:"generate_key,omitempty"`
	KeyType     *string `json:"key_type,omitempty"`
	SecretKey   *string `json:"secret_key,omitempty"`
	Subuser     *string `json:"subuser,omitempty"`
}

// GetApiRgwUserUidQuotaParams defines parameters for GetApiRgwUserUidQuota.
type GetApiRgwUserUidQuotaParams struct {
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PutApiRgwUserUidQuotaJSONBody defines parameters for PutApiRgwUserUidQuota.
type PutApiRgwUserUidQuotaJSONBody struct {
	DaemonName *string `json:"daemon_name,omitempty"`
	Enabled    string  `json:"enabled"`
	MaxObjects string  `json:"max_objects"`
	MaxSizeKb  int     `json:"max_size_kb"`
	QuotaType  string  `json:"quota_type"`
}

// PostApiRgwUserUidSubuserJSONBody defines parameters for PostApiRgwUserUidSubuser.
type PostApiRgwUserUidSubuserJSONBody struct {
	Access         string  `json:"access"`
	AccessKey      *string `json:"access_key,omitempty"`
	DaemonName     *string `json:"daemon_name,omitempty"`
	GenerateSecret *string `json:"generate_secret,omitempty"`
	KeyType        *string `json:"key_type,omitempty"`
	SecretKey      *string `json:"secret_key,omitempty"`
	Subuser        string  `json:"subuser"`
}

// DeleteApiRgwUserUidSubuserSubuserParams defines parameters for DeleteApiRgwUserUidSubuserSubuser.
type DeleteApiRgwUserUidSubuserSubuserParams struct {
	PurgeKeys  *string `form:"purge_keys,omitempty" json:"purge_keys,omitempty"`
	DaemonName *string `form:"daemon_name,omitempty" json:"daemon_name,omitempty"`
}

// PostApiRoleJSONBody defines parameters for PostApiRole.
type PostApiRoleJSONBody struct {
	Description       *string `json:"description,omitempty"`
	Name              *string `json:"name,omitempty"`
	ScopesPermissions *string `json:"scopes_permissions,omitempty"`
}

// PutApiRoleNameJSONBody defines parameters for PutApiRoleName.
type PutApiRoleNameJSONBody struct {
	Description       *string `json:"description,omitempty"`
	ScopesPermissions *string `json:"scopes_permissions,omitempty"`
}

// PostApiRoleNameCloneJSONBody defines parameters for PostApiRoleNameClone.
type PostApiRoleNameCloneJSONBody struct {
	NewName string `json:"new_name"`
}

// GetApiServiceParams defines parameters for GetApiService.
type GetApiServiceParams struct {
	ServiceName *string `form:"service_name,omitempty" json:"service_name,omitempty"`
	Offset      *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit       *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Search      *string `form:"search,omitempty" json:"search,omitempty"`
	Sort        *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostApiServiceJSONBody defines parameters for PostApiService.
type PostApiServiceJSONBody struct {
	ServiceName string `json:"service_name"`
	ServiceSpec string `json:"service_spec"`
}

// PutApiServiceServiceNameJSONBody defines parameters for PutApiServiceServiceName.
type PutApiServiceServiceNameJSONBody struct {
	ServiceSpec string `json:"service_spec"`
}

// GetApiSettingsParams defines parameters for GetApiSettings.
type GetApiSettingsParams struct {
	// Names Name of Settings
	Names *string `form:"names,omitempty" json:"names,omitempty"`
}

// PutApiSettingsNameJSONBody defines parameters for PutApiSettingsName.
type PutApiSettingsNameJSONBody struct {
	Value string `json:"value"`
}

// GetApiTaskParams defines parameters for GetApiTask.
type GetApiTaskParams struct {
	// Name Task Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PutApiTelemetryJSONBody defines parameters for PutApiTelemetry.
type PutApiTelemetryJSONBody struct {
	Enable      *bool   `json:"enable,omitempty"`
	LicenseName *string `json:"license_name,omitempty"`
}

// PostApiUserJSONBody defines parameters for PostApiUser.
type PostApiUserJSONBody struct {
	Email             *string `json:"email,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
	Name              *string `json:"name,omitempty"`
	Password          *string `json:"password,omitempty"`
	PwdExpirationDate *string `json:"pwdExpirationDate,omitempty"`
	PwdUpdateRequired *bool   `json:"pwdUpdateRequired,omitempty"`
	Roles             *string `json:"roles,omitempty"`
	Username          *string `json:"username,omitempty"`
}

// PostApiUserValidatePasswordJSONBody defines parameters for PostApiUserValidatePassword.
type PostApiUserValidatePasswordJSONBody struct {
	OldPassword *string `json:"old_password,omitempty"`
	Password    string  `json:"password"`
	Username    *string `json:"username,omitempty"`
}

// PutApiUserUsernameJSONBody defines parameters for PutApiUserUsername.
type PutApiUserUsernameJSONBody struct {
	Email             *string `json:"email,omitempty"`
	Enabled           *string `json:"enabled,omitempty"`
	Name              *string `json:"name,omitempty"`
	Password          *string `json:"password,omitempty"`
	PwdExpirationDate *string `json:"pwdExpirationDate,omitempty"`
	PwdUpdateRequired *bool   `json:"pwdUpdateRequired,omitempty"`
	Roles             *string `json:"roles,omitempty"`
}

// PostApiUserUsernameChangePasswordJSONBody defines parameters for PostApiUserUsernameChangePassword.
type PostApiUserUsernameChangePasswordJSONBody struct {
	NewPassword string `json:"new_password"`
	OldPassword string `json:"old_password"`
}

// PostApiAuthJSONRequestBody defines body for PostApiAuth for application/json ContentType.
type PostApiAuthJSONRequestBody PostApiAuthJSONBody

// PostApiAuthCheckJSONRequestBody defines body for PostApiAuthCheck for application/json ContentType.
type PostApiAuthCheckJSONRequestBody PostApiAuthCheckJSONBody

// PostApiBlockImageJSONRequestBody defines body for PostApiBlockImage for application/json ContentType.
type PostApiBlockImageJSONRequestBody PostApiBlockImageJSONBody

// PostApiBlockImageTrashPurgeJSONRequestBody defines body for PostApiBlockImageTrashPurge for application/json ContentType.
type PostApiBlockImageTrashPurgeJSONRequestBody PostApiBlockImageTrashPurgeJSONBody

// PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody defines body for PostApiBlockImageTrashImageIdSpecRestore for application/json ContentType.
type PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody PostApiBlockImageTrashImageIdSpecRestoreJSONBody

// PutApiBlockImageImageSpecJSONRequestBody defines body for PutApiBlockImageImageSpec for application/json ContentType.
type PutApiBlockImageImageSpecJSONRequestBody PutApiBlockImageImageSpecJSONBody

// PostApiBlockImageImageSpecCopyJSONRequestBody defines body for PostApiBlockImageImageSpecCopy for application/json ContentType.
type PostApiBlockImageImageSpecCopyJSONRequestBody PostApiBlockImageImageSpecCopyJSONBody

// PostApiBlockImageImageSpecMoveTrashJSONRequestBody defines body for PostApiBlockImageImageSpecMoveTrash for application/json ContentType.
type PostApiBlockImageImageSpecMoveTrashJSONRequestBody PostApiBlockImageImageSpecMoveTrashJSONBody

// PostApiBlockImageImageSpecSnapJSONRequestBody defines body for PostApiBlockImageImageSpecSnap for application/json ContentType.
type PostApiBlockImageImageSpecSnapJSONRequestBody PostApiBlockImageImageSpecSnapJSONBody

// PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody defines body for PutApiBlockImageImageSpecSnapSnapshotName for application/json ContentType.
type PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody PutApiBlockImageImageSpecSnapSnapshotNameJSONBody

// PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody defines body for PostApiBlockImageImageSpecSnapSnapshotNameClone for application/json ContentType.
type PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONBody

// PutApiBlockMirroringPoolPoolNameJSONRequestBody defines body for PutApiBlockMirroringPoolPoolName for application/json ContentType.
type PutApiBlockMirroringPoolPoolNameJSONRequestBody PutApiBlockMirroringPoolPoolNameJSONBody

// PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody defines body for PostApiBlockMirroringPoolPoolNameBootstrapPeer for application/json ContentType.
type PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONBody

// PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody defines body for PostApiBlockMirroringPoolPoolNamePeer for application/json ContentType.
type PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody PostApiBlockMirroringPoolPoolNamePeerJSONBody

// PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody defines body for PutApiBlockMirroringPoolPoolNamePeerPeerUuid for application/json ContentType.
type PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONBody

// PutApiBlockMirroringSiteNameJSONRequestBody defines body for PutApiBlockMirroringSiteName for application/json ContentType.
type PutApiBlockMirroringSiteNameJSONRequestBody PutApiBlockMirroringSiteNameJSONBody

// PostApiBlockPoolPoolNameNamespaceJSONRequestBody defines body for PostApiBlockPoolPoolNameNamespace for application/json ContentType.
type PostApiBlockPoolPoolNameNamespaceJSONRequestBody PostApiBlockPoolPoolNameNamespaceJSONBody

// PutApiCephfsFsIdQuotaJSONRequestBody defines body for PutApiCephfsFsIdQuota for application/json ContentType.
type PutApiCephfsFsIdQuotaJSONRequestBody PutApiCephfsFsIdQuotaJSONBody

// PostApiCephfsFsIdSnapshotJSONRequestBody defines body for PostApiCephfsFsIdSnapshot for application/json ContentType.
type PostApiCephfsFsIdSnapshotJSONRequestBody PostApiCephfsFsIdSnapshotJSONBody

// PostApiCephfsFsIdTreeJSONRequestBody defines body for PostApiCephfsFsIdTree for application/json ContentType.
type PostApiCephfsFsIdTreeJSONRequestBody PostApiCephfsFsIdTreeJSONBody

// PutApiClusterJSONRequestBody defines body for PutApiCluster for application/json ContentType.
type PutApiClusterJSONRequestBody PutApiClusterJSONBody

// PostApiClusterUserJSONRequestBody defines body for PostApiClusterUser for application/json ContentType.
type PostApiClusterUserJSONRequestBody PostApiClusterUserJSONBody

// PutApiClusterUserJSONRequestBody defines body for PutApiClusterUser for application/json ContentType.
type PutApiClusterUserJSONRequestBody PutApiClusterUserJSONBody

// PostApiClusterUserExportJSONRequestBody defines body for PostApiClusterUserExport for application/json ContentType.
type PostApiClusterUserExportJSONRequestBody PostApiClusterUserExportJSONBody

// PostApiClusterConfJSONRequestBody defines body for PostApiClusterConf for application/json ContentType.
type PostApiClusterConfJSONRequestBody PostApiClusterConfJSONBody

// PutApiClusterConfJSONRequestBody defines body for PutApiClusterConf for application/json ContentType.
type PutApiClusterConfJSONRequestBody PutApiClusterConfJSONBody

// PostApiCrushRuleJSONRequestBody defines body for PostApiCrushRule for application/json ContentType.
type PostApiCrushRuleJSONRequestBody PostApiCrushRuleJSONBody

// PutApiDaemonDaemonNameJSONRequestBody defines body for PutApiDaemonDaemonName for application/json ContentType.
type PutApiDaemonDaemonNameJSONRequestBody PutApiDaemonDaemonNameJSONBody

// PostApiErasureCodeProfileJSONRequestBody defines body for PostApiErasureCodeProfile for application/json ContentType.
type PostApiErasureCodeProfileJSONRequestBody PostApiErasureCodeProfileJSONBody

// PostApiFeedbackJSONRequestBody defines body for PostApiFeedback for application/json ContentType.
type PostApiFeedbackJSONRequestBody PostApiFeedbackJSONBody

// PostApiFeedbackApiKeyJSONRequestBody defines body for PostApiFeedbackApiKey for application/json ContentType.
type PostApiFeedbackApiKeyJSONRequestBody PostApiFeedbackApiKeyJSONBody

// PostApiHostJSONRequestBody defines body for PostApiHost for application/json ContentType.
type PostApiHostJSONRequestBody PostApiHostJSONBody

// PutApiHostHostnameJSONRequestBody defines body for PutApiHostHostname for application/json ContentType.
type PutApiHostHostnameJSONRequestBody PutApiHostHostnameJSONBody

// PostApiHostHostnameIdentifyDeviceJSONRequestBody defines body for PostApiHostHostnameIdentifyDevice for application/json ContentType.
type PostApiHostHostnameIdentifyDeviceJSONRequestBody PostApiHostHostnameIdentifyDeviceJSONBody

// PutApiIscsiDiscoveryauthJSONRequestBody defines body for PutApiIscsiDiscoveryauth for application/json ContentType.
type PutApiIscsiDiscoveryauthJSONRequestBody PutApiIscsiDiscoveryauthJSONBody

// PostApiIscsiTargetJSONRequestBody defines body for PostApiIscsiTarget for application/json ContentType.
type PostApiIscsiTargetJSONRequestBody PostApiIscsiTargetJSONBody

// PutApiIscsiTargetTargetIqnJSONRequestBody defines body for PutApiIscsiTargetTargetIqn for application/json ContentType.
type PutApiIscsiTargetTargetIqnJSONRequestBody PutApiIscsiTargetTargetIqnJSONBody

// PutApiMgrModuleModuleNameJSONRequestBody defines body for PutApiMgrModuleModuleName for application/json ContentType.
type PutApiMgrModuleModuleNameJSONRequestBody PutApiMgrModuleModuleNameJSONBody

// PostApiNfsGaneshaExportJSONRequestBody defines body for PostApiNfsGaneshaExport for application/json ContentType.
type PostApiNfsGaneshaExportJSONRequestBody PostApiNfsGaneshaExportJSONBody

// PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody defines body for PutApiNfsGaneshaExportClusterIdExportId for application/json ContentType.
type PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody PutApiNfsGaneshaExportClusterIdExportIdJSONBody

// PostApiOsdJSONRequestBody defines body for PostApiOsd for application/json ContentType.
type PostApiOsdJSONRequestBody PostApiOsdJSONBody

// PutApiOsdFlagsJSONRequestBody defines body for PutApiOsdFlags for application/json ContentType.
type PutApiOsdFlagsJSONRequestBody PutApiOsdFlagsJSONBody

// PutApiOsdFlagsIndividualJSONRequestBody defines body for PutApiOsdFlagsIndividual for application/json ContentType.
type PutApiOsdFlagsIndividualJSONRequestBody PutApiOsdFlagsIndividualJSONBody

// PutApiOsdSvcIdJSONRequestBody defines body for PutApiOsdSvcId for application/json ContentType.
type PutApiOsdSvcIdJSONRequestBody PutApiOsdSvcIdJSONBody

// PutApiOsdSvcIdMarkJSONRequestBody defines body for PutApiOsdSvcIdMark for application/json ContentType.
type PutApiOsdSvcIdMarkJSONRequestBody PutApiOsdSvcIdMarkJSONBody

// PostApiOsdSvcIdReweightJSONRequestBody defines body for PostApiOsdSvcIdReweight for application/json ContentType.
type PostApiOsdSvcIdReweightJSONRequestBody PostApiOsdSvcIdReweightJSONBody

// PostApiOsdSvcIdScrubJSONRequestBody defines body for PostApiOsdSvcIdScrub for application/json ContentType.
type PostApiOsdSvcIdScrubJSONRequestBody PostApiOsdSvcIdScrubJSONBody

// PostApiPoolJSONRequestBody defines body for PostApiPool for application/json ContentType.
type PostApiPoolJSONRequestBody PostApiPoolJSONBody

// PutApiPoolPoolNameJSONRequestBody defines body for PutApiPoolPoolName for application/json ContentType.
type PutApiPoolPoolNameJSONRequestBody PutApiPoolPoolNameJSONBody

// PostApiRgwBucketJSONRequestBody defines body for PostApiRgwBucket for application/json ContentType.
type PostApiRgwBucketJSONRequestBody PostApiRgwBucketJSONBody

// PutApiRgwBucketSetEncryptionConfigJSONRequestBody defines body for PutApiRgwBucketSetEncryptionConfig for application/json ContentType.
type PutApiRgwBucketSetEncryptionConfigJSONRequestBody PutApiRgwBucketSetEncryptionConfigJSONBody

// PutApiRgwBucketBucketJSONRequestBody defines body for PutApiRgwBucketBucket for application/json ContentType.
type PutApiRgwBucketBucketJSONRequestBody PutApiRgwBucketBucketJSONBody

// PostApiRgwRolesJSONRequestBody defines body for PostApiRgwRoles for application/json ContentType.
type PostApiRgwRolesJSONRequestBody PostApiRgwRolesJSONBody

// PostApiRgwUserJSONRequestBody defines body for PostApiRgwUser for application/json ContentType.
type PostApiRgwUserJSONRequestBody PostApiRgwUserJSONBody

// PutApiRgwUserUidJSONRequestBody defines body for PutApiRgwUserUid for application/json ContentType.
type PutApiRgwUserUidJSONRequestBody PutApiRgwUserUidJSONBody

// PostApiRgwUserUidCapabilityJSONRequestBody defines body for PostApiRgwUserUidCapability for application/json ContentType.
type PostApiRgwUserUidCapabilityJSONRequestBody PostApiRgwUserUidCapabilityJSONBody

// PostApiRgwUserUidKeyJSONRequestBody defines body for PostApiRgwUserUidKey for application/json ContentType.
type PostApiRgwUserUidKeyJSONRequestBody PostApiRgwUserUidKeyJSONBody

// PutApiRgwUserUidQuotaJSONRequestBody defines body for PutApiRgwUserUidQuota for application/json ContentType.
type PutApiRgwUserUidQuotaJSONRequestBody PutApiRgwUserUidQuotaJSONBody

// PostApiRgwUserUidSubuserJSONRequestBody defines body for PostApiRgwUserUidSubuser for application/json ContentType.
type PostApiRgwUserUidSubuserJSONRequestBody PostApiRgwUserUidSubuserJSONBody

// PostApiRoleJSONRequestBody defines body for PostApiRole for application/json ContentType.
type PostApiRoleJSONRequestBody PostApiRoleJSONBody

// PutApiRoleNameJSONRequestBody defines body for PutApiRoleName for application/json ContentType.
type PutApiRoleNameJSONRequestBody PutApiRoleNameJSONBody

// PostApiRoleNameCloneJSONRequestBody defines body for PostApiRoleNameClone for application/json ContentType.
type PostApiRoleNameCloneJSONRequestBody PostApiRoleNameCloneJSONBody

// PostApiServiceJSONRequestBody defines body for PostApiService for application/json ContentType.
type PostApiServiceJSONRequestBody PostApiServiceJSONBody

// PutApiServiceServiceNameJSONRequestBody defines body for PutApiServiceServiceName for application/json ContentType.
type PutApiServiceServiceNameJSONRequestBody PutApiServiceServiceNameJSONBody

// PutApiSettingsNameJSONRequestBody defines body for PutApiSettingsName for application/json ContentType.
type PutApiSettingsNameJSONRequestBody PutApiSettingsNameJSONBody

// PutApiTelemetryJSONRequestBody defines body for PutApiTelemetry for application/json ContentType.
type PutApiTelemetryJSONRequestBody PutApiTelemetryJSONBody

// PostApiUserJSONRequestBody defines body for PostApiUser for application/json ContentType.
type PostApiUserJSONRequestBody PostApiUserJSONBody

// PostApiUserValidatePasswordJSONRequestBody defines body for PostApiUserValidatePassword for application/json ContentType.
type PostApiUserValidatePasswordJSONRequestBody PostApiUserValidatePasswordJSONBody

// PutApiUserUsernameJSONRequestBody defines body for PutApiUserUsername for application/json ContentType.
type PutApiUserUsernameJSONRequestBody PutApiUserUsernameJSONBody

// PostApiUserUsernameChangePasswordJSONRequestBody defines body for PostApiUserUsernameChangePassword for application/json ContentType.
type PostApiUserUsernameChangePasswordJSONRequestBody PostApiUserUsernameChangePasswordJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAuthWithBody request with any body
	PostApiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuth(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthCheckWithBody request with any body
	PostApiAuthCheckWithBody(ctx context.Context, params *PostApiAuthCheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthCheck(ctx context.Context, params *PostApiAuthCheckParams, body PostApiAuthCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthLogout request
	PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockImage request
	GetApiBlockImage(ctx context.Context, params *GetApiBlockImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageWithBody request with any body
	PostApiBlockImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImage(ctx context.Context, body PostApiBlockImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockImageCloneFormatVersion request
	GetApiBlockImageCloneFormatVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockImageDefaultFeatures request
	GetApiBlockImageDefaultFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockImageTrash request
	GetApiBlockImageTrash(ctx context.Context, params *GetApiBlockImageTrashParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageTrashPurgeWithBody request with any body
	PostApiBlockImageTrashPurgeWithBody(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageTrashPurge(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, body PostApiBlockImageTrashPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBlockImageTrashImageIdSpec request
	DeleteApiBlockImageTrashImageIdSpec(ctx context.Context, imageIdSpec string, params *DeleteApiBlockImageTrashImageIdSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageTrashImageIdSpecRestoreWithBody request with any body
	PostApiBlockImageTrashImageIdSpecRestoreWithBody(ctx context.Context, imageIdSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageTrashImageIdSpecRestore(ctx context.Context, imageIdSpec string, body PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBlockImageImageSpec request
	DeleteApiBlockImageImageSpec(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockImageImageSpec request
	GetApiBlockImageImageSpec(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBlockImageImageSpecWithBody request with any body
	PutApiBlockImageImageSpecWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBlockImageImageSpec(ctx context.Context, imageSpec string, body PutApiBlockImageImageSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecCopyWithBody request with any body
	PostApiBlockImageImageSpecCopyWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageImageSpecCopy(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecFlatten request
	PostApiBlockImageImageSpecFlatten(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecMoveTrashWithBody request with any body
	PostApiBlockImageImageSpecMoveTrashWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageImageSpecMoveTrash(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecMoveTrashJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecSnapWithBody request with any body
	PostApiBlockImageImageSpecSnapWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageImageSpecSnap(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecSnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBlockImageImageSpecSnapSnapshotName request
	DeleteApiBlockImageImageSpecSnapSnapshotName(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBlockImageImageSpecSnapSnapshotNameWithBody request with any body
	PutApiBlockImageImageSpecSnapSnapshotNameWithBody(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBlockImageImageSpecSnapSnapshotName(ctx context.Context, imageSpec string, snapshotName string, body PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBody request with any body
	PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBody(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockImageImageSpecSnapSnapshotNameClone(ctx context.Context, imageSpec string, snapshotName string, body PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockImageImageSpecSnapSnapshotNameRollback request
	PostApiBlockImageImageSpecSnapSnapshotNameRollback(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockMirroringPoolPoolName request
	GetApiBlockMirroringPoolPoolName(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBlockMirroringPoolPoolNameWithBody request with any body
	PutApiBlockMirroringPoolPoolNameWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBlockMirroringPoolPoolName(ctx context.Context, poolName string, body PutApiBlockMirroringPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBody request with any body
	PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockMirroringPoolPoolNameBootstrapPeer(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockMirroringPoolPoolNameBootstrapToken request
	PostApiBlockMirroringPoolPoolNameBootstrapToken(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockMirroringPoolPoolNamePeer request
	GetApiBlockMirroringPoolPoolNamePeer(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockMirroringPoolPoolNamePeerWithBody request with any body
	PostApiBlockMirroringPoolPoolNamePeerWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockMirroringPoolPoolNamePeer(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBlockMirroringPoolPoolNamePeerPeerUuid request
	DeleteApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockMirroringPoolPoolNamePeerPeerUuid request
	GetApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBody request with any body
	PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBody(ctx context.Context, poolName string, peerUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, body PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockMirroringSiteName request
	GetApiBlockMirroringSiteName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiBlockMirroringSiteNameWithBody request with any body
	PutApiBlockMirroringSiteNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiBlockMirroringSiteName(ctx context.Context, body PutApiBlockMirroringSiteNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockMirroringSummary request
	GetApiBlockMirroringSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBlockPoolPoolNameNamespace request
	GetApiBlockPoolPoolNameNamespace(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBlockPoolPoolNameNamespaceWithBody request with any body
	PostApiBlockPoolPoolNameNamespaceWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBlockPoolPoolNameNamespace(ctx context.Context, poolName string, body PostApiBlockPoolPoolNameNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBlockPoolPoolNameNamespaceNamespace request
	DeleteApiBlockPoolPoolNameNamespaceNamespace(ctx context.Context, poolName string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfs request
	GetApiCephfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsId request
	GetApiCephfsFsId(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiCephfsFsIdClientClientId request
	DeleteApiCephfsFsIdClientClientId(ctx context.Context, fsId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsIdClients request
	GetApiCephfsFsIdClients(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsIdGetRootDirectory request
	GetApiCephfsFsIdGetRootDirectory(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsIdLsDir request
	GetApiCephfsFsIdLsDir(ctx context.Context, fsId string, params *GetApiCephfsFsIdLsDirParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsIdMdsCounters request
	GetApiCephfsFsIdMdsCounters(ctx context.Context, fsId string, params *GetApiCephfsFsIdMdsCountersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCephfsFsIdQuota request
	GetApiCephfsFsIdQuota(ctx context.Context, fsId string, params *GetApiCephfsFsIdQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiCephfsFsIdQuotaWithBody request with any body
	PutApiCephfsFsIdQuotaWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiCephfsFsIdQuota(ctx context.Context, fsId string, body PutApiCephfsFsIdQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiCephfsFsIdSnapshot request
	DeleteApiCephfsFsIdSnapshot(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiCephfsFsIdSnapshotWithBody request with any body
	PostApiCephfsFsIdSnapshotWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiCephfsFsIdSnapshot(ctx context.Context, fsId string, body PostApiCephfsFsIdSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiCephfsFsIdTree request
	DeleteApiCephfsFsIdTree(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiCephfsFsIdTreeWithBody request with any body
	PostApiCephfsFsIdTreeWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiCephfsFsIdTree(ctx context.Context, fsId string, body PostApiCephfsFsIdTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCluster request
	GetApiCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiClusterWithBody request with any body
	PutApiClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiCluster(ctx context.Context, body PutApiClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiClusterUser request
	GetApiClusterUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiClusterUserWithBody request with any body
	PostApiClusterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiClusterUser(ctx context.Context, body PostApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiClusterUserWithBody request with any body
	PutApiClusterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiClusterUser(ctx context.Context, body PutApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiClusterUserExportWithBody request with any body
	PostApiClusterUserExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiClusterUserExport(ctx context.Context, body PostApiClusterUserExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiClusterUserUserEntity request
	DeleteApiClusterUserUserEntity(ctx context.Context, userEntity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiClusterConf request
	GetApiClusterConf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiClusterConfWithBody request with any body
	PostApiClusterConfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiClusterConf(ctx context.Context, body PostApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiClusterConfWithBody request with any body
	PutApiClusterConfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiClusterConf(ctx context.Context, body PutApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiClusterConfFilter request
	GetApiClusterConfFilter(ctx context.Context, params *GetApiClusterConfFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiClusterConfName request
	DeleteApiClusterConfName(ctx context.Context, name string, params *DeleteApiClusterConfNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiClusterConfName request
	GetApiClusterConfName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCrushRule request
	GetApiCrushRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiCrushRuleWithBody request with any body
	PostApiCrushRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiCrushRule(ctx context.Context, body PostApiCrushRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiCrushRuleName request
	DeleteApiCrushRuleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCrushRuleName request
	GetApiCrushRuleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDaemonDaemonNameWithBody request with any body
	PutApiDaemonDaemonNameWithBody(ctx context.Context, daemonName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDaemonDaemonName(ctx context.Context, daemonName string, body PutApiDaemonDaemonNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiErasureCodeProfile request
	GetApiErasureCodeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiErasureCodeProfileWithBody request with any body
	PostApiErasureCodeProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiErasureCodeProfile(ctx context.Context, body PostApiErasureCodeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiErasureCodeProfileName request
	DeleteApiErasureCodeProfileName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiErasureCodeProfileName request
	GetApiErasureCodeProfileName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFeatureToggles request
	GetApiFeatureToggles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFeedback request
	GetApiFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFeedbackWithBody request with any body
	PostApiFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFeedback(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiFeedbackApiKey request
	DeleteApiFeedbackApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFeedbackApiKey request
	GetApiFeedbackApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiFeedbackApiKeyWithBody request with any body
	PostApiFeedbackApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiFeedbackApiKey(ctx context.Context, body PostApiFeedbackApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiGrafanaDashboards request
	PostApiGrafanaDashboards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGrafanaUrl request
	GetApiGrafanaUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGrafanaValidationParams request
	GetApiGrafanaValidationParams(ctx context.Context, params string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHealthFull request
	GetApiHealthFull(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHealthGetClusterCapacity request
	GetApiHealthGetClusterCapacity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHealthGetClusterFsid request
	GetApiHealthGetClusterFsid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHealthMinimal request
	GetApiHealthMinimal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHost request
	GetApiHost(ctx context.Context, params *GetApiHostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHostWithBody request with any body
	PostApiHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHost(ctx context.Context, body PostApiHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiHostHostname request
	DeleteApiHostHostname(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHostHostname request
	GetApiHostHostname(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiHostHostnameWithBody request with any body
	PutApiHostHostnameWithBody(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHostHostname(ctx context.Context, hostname string, body PutApiHostHostnameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHostHostnameDaemons request
	GetApiHostHostnameDaemons(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHostHostnameDevices request
	GetApiHostHostnameDevices(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHostHostnameIdentifyDeviceWithBody request with any body
	PostApiHostHostnameIdentifyDeviceWithBody(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHostHostnameIdentifyDevice(ctx context.Context, hostname string, body PostApiHostHostnameIdentifyDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHostHostnameInventory request
	GetApiHostHostnameInventory(ctx context.Context, hostname string, params *GetApiHostHostnameInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHostHostnameSmart request
	GetApiHostHostnameSmart(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiIscsiDiscoveryauth request
	GetApiIscsiDiscoveryauth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiIscsiDiscoveryauthWithBody request with any body
	PutApiIscsiDiscoveryauthWithBody(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiIscsiDiscoveryauth(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, body PutApiIscsiDiscoveryauthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiIscsiTarget request
	GetApiIscsiTarget(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiIscsiTargetWithBody request with any body
	PostApiIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiIscsiTarget(ctx context.Context, body PostApiIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiIscsiTargetTargetIqn request
	DeleteApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiIscsiTargetTargetIqn request
	GetApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiIscsiTargetTargetIqnWithBody request with any body
	PutApiIscsiTargetTargetIqnWithBody(ctx context.Context, targetIqn string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, body PutApiIscsiTargetTargetIqnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLogsAll request
	GetApiLogsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMgrModule request
	GetApiMgrModule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMgrModuleModuleName request
	GetApiMgrModuleModuleName(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiMgrModuleModuleNameWithBody request with any body
	PutApiMgrModuleModuleNameWithBody(ctx context.Context, moduleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiMgrModuleModuleName(ctx context.Context, moduleName string, body PutApiMgrModuleModuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMgrModuleModuleNameDisable request
	PostApiMgrModuleModuleNameDisable(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMgrModuleModuleNameEnable request
	PostApiMgrModuleModuleNameEnable(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMgrModuleModuleNameOptions request
	GetApiMgrModuleModuleNameOptions(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMonitor request
	GetApiMonitor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNfsGaneshaCluster request
	GetApiNfsGaneshaCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNfsGaneshaExport request
	GetApiNfsGaneshaExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiNfsGaneshaExportWithBody request with any body
	PostApiNfsGaneshaExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiNfsGaneshaExport(ctx context.Context, body PostApiNfsGaneshaExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiNfsGaneshaExportClusterIdExportId request
	DeleteApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNfsGaneshaExportClusterIdExportId request
	GetApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiNfsGaneshaExportClusterIdExportIdWithBody request with any body
	PutApiNfsGaneshaExportClusterIdExportIdWithBody(ctx context.Context, clusterId string, exportId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId int, body PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsd request
	GetApiOsd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOsdWithBody request with any body
	PostApiOsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiOsd(ctx context.Context, body PostApiOsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdFlags request
	GetApiOsdFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOsdFlagsWithBody request with any body
	PutApiOsdFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiOsdFlags(ctx context.Context, body PutApiOsdFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdFlagsIndividual request
	GetApiOsdFlagsIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOsdFlagsIndividualWithBody request with any body
	PutApiOsdFlagsIndividualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiOsdFlagsIndividual(ctx context.Context, body PutApiOsdFlagsIndividualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSafeToDelete request
	GetApiOsdSafeToDelete(ctx context.Context, params *GetApiOsdSafeToDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSafeToDestroy request
	GetApiOsdSafeToDestroy(ctx context.Context, params *GetApiOsdSafeToDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSettings request
	GetApiOsdSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiOsdSvcId request
	DeleteApiOsdSvcId(ctx context.Context, svcId string, params *DeleteApiOsdSvcIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSvcId request
	GetApiOsdSvcId(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOsdSvcIdWithBody request with any body
	PutApiOsdSvcIdWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiOsdSvcId(ctx context.Context, svcId string, body PutApiOsdSvcIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOsdSvcIdDestroy request
	PostApiOsdSvcIdDestroy(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSvcIdDevices request
	GetApiOsdSvcIdDevices(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSvcIdHistogram request
	GetApiOsdSvcIdHistogram(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiOsdSvcIdMarkWithBody request with any body
	PutApiOsdSvcIdMarkWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiOsdSvcIdMark(ctx context.Context, svcId string, body PutApiOsdSvcIdMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOsdSvcIdPurge request
	PostApiOsdSvcIdPurge(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOsdSvcIdReweightWithBody request with any body
	PostApiOsdSvcIdReweightWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiOsdSvcIdReweight(ctx context.Context, svcId string, body PostApiOsdSvcIdReweightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiOsdSvcIdScrubWithBody request with any body
	PostApiOsdSvcIdScrubWithBody(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiOsdSvcIdScrub(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, body PostApiOsdSvcIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiOsdSvcIdSmart request
	GetApiOsdSvcIdSmart(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCounters request
	GetApiPerfCounters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersMdsServiceId request
	GetApiPerfCountersMdsServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersMgrServiceId request
	GetApiPerfCountersMgrServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersMonServiceId request
	GetApiPerfCountersMonServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersOsdServiceId request
	GetApiPerfCountersOsdServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersRbdMirrorServiceId request
	GetApiPerfCountersRbdMirrorServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersRgwServiceId request
	GetApiPerfCountersRgwServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPerfCountersTcmuRunnerServiceId request
	GetApiPerfCountersTcmuRunnerServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPool request
	GetApiPool(ctx context.Context, params *GetApiPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPoolWithBody request with any body
	PostApiPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPool(ctx context.Context, body PostApiPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPoolPoolName request
	DeleteApiPoolPoolName(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPoolPoolName request
	GetApiPoolPoolName(ctx context.Context, poolName string, params *GetApiPoolPoolNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPoolPoolNameWithBody request with any body
	PutApiPoolPoolNameWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPoolPoolName(ctx context.Context, poolName string, body PutApiPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPoolPoolNameConfiguration request
	GetApiPoolPoolNameConfiguration(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPrometheus request
	GetApiPrometheus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPrometheusData request
	GetApiPrometheusData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPrometheusNotifications request
	GetApiPrometheusNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPrometheusRules request
	GetApiPrometheusRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPrometheusSilence request
	PostApiPrometheusSilence(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPrometheusSilenceSId request
	DeleteApiPrometheusSilenceSId(ctx context.Context, sId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPrometheusSilences request
	GetApiPrometheusSilences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwBucket request
	GetApiRgwBucket(ctx context.Context, params *GetApiRgwBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwBucketWithBody request with any body
	PostApiRgwBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwBucket(ctx context.Context, body PostApiRgwBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwBucketDeleteEncryption request
	DeleteApiRgwBucketDeleteEncryption(ctx context.Context, params *DeleteApiRgwBucketDeleteEncryptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwBucketGetEncryption request
	GetApiRgwBucketGetEncryption(ctx context.Context, params *GetApiRgwBucketGetEncryptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwBucketGetEncryptionConfig request
	GetApiRgwBucketGetEncryptionConfig(ctx context.Context, params *GetApiRgwBucketGetEncryptionConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRgwBucketSetEncryptionConfigWithBody request with any body
	PutApiRgwBucketSetEncryptionConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRgwBucketSetEncryptionConfig(ctx context.Context, body PutApiRgwBucketSetEncryptionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwBucketBucket request
	DeleteApiRgwBucketBucket(ctx context.Context, bucket string, params *DeleteApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwBucketBucket request
	GetApiRgwBucketBucket(ctx context.Context, bucket string, params *GetApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRgwBucketBucketWithBody request with any body
	PutApiRgwBucketBucketWithBody(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRgwBucketBucket(ctx context.Context, bucket string, body PutApiRgwBucketBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwDaemon request
	GetApiRgwDaemon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwDaemonSvcId request
	GetApiRgwDaemonSvcId(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwRoles request
	GetApiRgwRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwRolesWithBody request with any body
	PostApiRgwRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwRoles(ctx context.Context, body PostApiRgwRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwSite request
	GetApiRgwSite(ctx context.Context, params *GetApiRgwSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwUser request
	GetApiRgwUser(ctx context.Context, params *GetApiRgwUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwUserWithBody request with any body
	PostApiRgwUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwUser(ctx context.Context, body PostApiRgwUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwUserGetEmails request
	GetApiRgwUserGetEmails(ctx context.Context, params *GetApiRgwUserGetEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwUserUid request
	DeleteApiRgwUserUid(ctx context.Context, uid string, params *DeleteApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwUserUid request
	GetApiRgwUserUid(ctx context.Context, uid string, params *GetApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRgwUserUidWithBody request with any body
	PutApiRgwUserUidWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRgwUserUid(ctx context.Context, uid string, body PutApiRgwUserUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwUserUidCapability request
	DeleteApiRgwUserUidCapability(ctx context.Context, uid string, params *DeleteApiRgwUserUidCapabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwUserUidCapabilityWithBody request with any body
	PostApiRgwUserUidCapabilityWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwUserUidCapability(ctx context.Context, uid string, body PostApiRgwUserUidCapabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwUserUidKey request
	DeleteApiRgwUserUidKey(ctx context.Context, uid string, params *DeleteApiRgwUserUidKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwUserUidKeyWithBody request with any body
	PostApiRgwUserUidKeyWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwUserUidKey(ctx context.Context, uid string, body PostApiRgwUserUidKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRgwUserUidQuota request
	GetApiRgwUserUidQuota(ctx context.Context, uid string, params *GetApiRgwUserUidQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRgwUserUidQuotaWithBody request with any body
	PutApiRgwUserUidQuotaWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRgwUserUidQuota(ctx context.Context, uid string, body PutApiRgwUserUidQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRgwUserUidSubuserWithBody request with any body
	PostApiRgwUserUidSubuserWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRgwUserUidSubuser(ctx context.Context, uid string, body PostApiRgwUserUidSubuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRgwUserUidSubuserSubuser request
	DeleteApiRgwUserUidSubuserSubuser(ctx context.Context, uid string, subuser string, params *DeleteApiRgwUserUidSubuserSubuserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRole request
	GetApiRole(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoleWithBody request with any body
	PostApiRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRole(ctx context.Context, body PostApiRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRoleName request
	DeleteApiRoleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoleName request
	GetApiRoleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRoleNameWithBody request with any body
	PutApiRoleNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRoleName(ctx context.Context, name string, body PutApiRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoleNameCloneWithBody request with any body
	PostApiRoleNameCloneWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoleNameClone(ctx context.Context, name string, body PostApiRoleNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiService request
	GetApiService(ctx context.Context, params *GetApiServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiServiceWithBody request with any body
	PostApiServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiService(ctx context.Context, body PostApiServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiServiceKnownTypes request
	GetApiServiceKnownTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiServiceServiceName request
	DeleteApiServiceServiceName(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiServiceServiceName request
	GetApiServiceServiceName(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiServiceServiceNameWithBody request with any body
	PutApiServiceServiceNameWithBody(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiServiceServiceName(ctx context.Context, serviceName string, body PutApiServiceServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiServiceServiceNameDaemons request
	GetApiServiceServiceNameDaemons(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSettings request
	GetApiSettings(ctx context.Context, params *GetApiSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSettings request
	PutApiSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiSettingsName request
	DeleteApiSettingsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSettingsName request
	GetApiSettingsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSettingsNameWithBody request with any body
	PutApiSettingsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiSettingsName(ctx context.Context, name string, body PutApiSettingsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSummary request
	GetApiSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTask request
	GetApiTask(ctx context.Context, params *GetApiTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiTelemetryWithBody request with any body
	PutApiTelemetryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiTelemetry(ctx context.Context, body PutApiTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTelemetryReport request
	GetApiTelemetryReport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUser request
	GetApiUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUserWithBody request with any body
	PostApiUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUser(ctx context.Context, body PostApiUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUserValidatePasswordWithBody request with any body
	PostApiUserValidatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUserValidatePassword(ctx context.Context, body PostApiUserValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiUserUsername request
	DeleteApiUserUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUserUsername request
	GetApiUserUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiUserUsernameWithBody request with any body
	PutApiUserUsernameWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiUserUsername(ctx context.Context, username string, body PutApiUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUserUsernameChangePasswordWithBody request with any body
	PostApiUserUsernameChangePasswordWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUserUsernameChangePassword(ctx context.Context, username string, body PostApiUserUsernameChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuth(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthCheckWithBody(ctx context.Context, params *PostApiAuthCheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthCheckRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthCheck(ctx context.Context, params *PostApiAuthCheckParams, body PostApiAuthCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthCheckRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockImage(ctx context.Context, params *GetApiBlockImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImage(ctx context.Context, body PostApiBlockImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockImageCloneFormatVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockImageCloneFormatVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockImageDefaultFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockImageDefaultFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockImageTrash(ctx context.Context, params *GetApiBlockImageTrashParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockImageTrashRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageTrashPurgeWithBody(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageTrashPurgeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageTrashPurge(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, body PostApiBlockImageTrashPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageTrashPurgeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBlockImageTrashImageIdSpec(ctx context.Context, imageIdSpec string, params *DeleteApiBlockImageTrashImageIdSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBlockImageTrashImageIdSpecRequest(c.Server, imageIdSpec, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageTrashImageIdSpecRestoreWithBody(ctx context.Context, imageIdSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageTrashImageIdSpecRestoreRequestWithBody(c.Server, imageIdSpec, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageTrashImageIdSpecRestore(ctx context.Context, imageIdSpec string, body PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageTrashImageIdSpecRestoreRequest(c.Server, imageIdSpec, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBlockImageImageSpec(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBlockImageImageSpecRequest(c.Server, imageSpec)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockImageImageSpec(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockImageImageSpecRequest(c.Server, imageSpec)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockImageImageSpecWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockImageImageSpecRequestWithBody(c.Server, imageSpec, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockImageImageSpec(ctx context.Context, imageSpec string, body PutApiBlockImageImageSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockImageImageSpecRequest(c.Server, imageSpec, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecCopyWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecCopyRequestWithBody(c.Server, imageSpec, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecCopy(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecCopyRequest(c.Server, imageSpec, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecFlatten(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecFlattenRequest(c.Server, imageSpec)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecMoveTrashWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecMoveTrashRequestWithBody(c.Server, imageSpec, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecMoveTrash(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecMoveTrashJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecMoveTrashRequest(c.Server, imageSpec, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecSnapWithBody(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecSnapRequestWithBody(c.Server, imageSpec, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecSnap(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecSnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecSnapRequest(c.Server, imageSpec, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBlockImageImageSpecSnapSnapshotName(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBlockImageImageSpecSnapSnapshotNameRequest(c.Server, imageSpec, snapshotName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockImageImageSpecSnapSnapshotNameWithBody(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockImageImageSpecSnapSnapshotNameRequestWithBody(c.Server, imageSpec, snapshotName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockImageImageSpecSnapSnapshotName(ctx context.Context, imageSpec string, snapshotName string, body PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockImageImageSpecSnapSnapshotNameRequest(c.Server, imageSpec, snapshotName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBody(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequestWithBody(c.Server, imageSpec, snapshotName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecSnapSnapshotNameClone(ctx context.Context, imageSpec string, snapshotName string, body PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequest(c.Server, imageSpec, snapshotName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockImageImageSpecSnapSnapshotNameRollback(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockImageImageSpecSnapSnapshotNameRollbackRequest(c.Server, imageSpec, snapshotName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockMirroringPoolPoolName(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockMirroringPoolPoolNameRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringPoolPoolNameWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringPoolPoolNameRequestWithBody(c.Server, poolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringPoolPoolName(ctx context.Context, poolName string, body PutApiBlockMirroringPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringPoolPoolNameRequest(c.Server, poolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequestWithBody(c.Server, poolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockMirroringPoolPoolNameBootstrapPeer(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequest(c.Server, poolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockMirroringPoolPoolNameBootstrapToken(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockMirroringPoolPoolNameBootstrapTokenRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockMirroringPoolPoolNamePeer(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockMirroringPoolPoolNamePeerRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockMirroringPoolPoolNamePeerWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockMirroringPoolPoolNamePeerRequestWithBody(c.Server, poolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockMirroringPoolPoolNamePeer(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockMirroringPoolPoolNamePeerRequest(c.Server, poolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(c.Server, poolName, peerUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(c.Server, poolName, peerUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBody(ctx context.Context, poolName string, peerUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequestWithBody(c.Server, poolName, peerUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx context.Context, poolName string, peerUuid string, body PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(c.Server, poolName, peerUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockMirroringSiteName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockMirroringSiteNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringSiteNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringSiteNameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiBlockMirroringSiteName(ctx context.Context, body PutApiBlockMirroringSiteNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiBlockMirroringSiteNameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockMirroringSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockMirroringSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBlockPoolPoolNameNamespace(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBlockPoolPoolNameNamespaceRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockPoolPoolNameNamespaceWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockPoolPoolNameNamespaceRequestWithBody(c.Server, poolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBlockPoolPoolNameNamespace(ctx context.Context, poolName string, body PostApiBlockPoolPoolNameNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBlockPoolPoolNameNamespaceRequest(c.Server, poolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBlockPoolPoolNameNamespaceNamespace(ctx context.Context, poolName string, namespace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBlockPoolPoolNameNamespaceNamespaceRequest(c.Server, poolName, namespace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsId(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdRequest(c.Server, fsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiCephfsFsIdClientClientId(ctx context.Context, fsId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiCephfsFsIdClientClientIdRequest(c.Server, fsId, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsIdClients(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdClientsRequest(c.Server, fsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsIdGetRootDirectory(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdGetRootDirectoryRequest(c.Server, fsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsIdLsDir(ctx context.Context, fsId string, params *GetApiCephfsFsIdLsDirParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdLsDirRequest(c.Server, fsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsIdMdsCounters(ctx context.Context, fsId string, params *GetApiCephfsFsIdMdsCountersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdMdsCountersRequest(c.Server, fsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCephfsFsIdQuota(ctx context.Context, fsId string, params *GetApiCephfsFsIdQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCephfsFsIdQuotaRequest(c.Server, fsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiCephfsFsIdQuotaWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiCephfsFsIdQuotaRequestWithBody(c.Server, fsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiCephfsFsIdQuota(ctx context.Context, fsId string, body PutApiCephfsFsIdQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiCephfsFsIdQuotaRequest(c.Server, fsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiCephfsFsIdSnapshot(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiCephfsFsIdSnapshotRequest(c.Server, fsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCephfsFsIdSnapshotWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCephfsFsIdSnapshotRequestWithBody(c.Server, fsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCephfsFsIdSnapshot(ctx context.Context, fsId string, body PostApiCephfsFsIdSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCephfsFsIdSnapshotRequest(c.Server, fsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiCephfsFsIdTree(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdTreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiCephfsFsIdTreeRequest(c.Server, fsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCephfsFsIdTreeWithBody(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCephfsFsIdTreeRequestWithBody(c.Server, fsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCephfsFsIdTree(ctx context.Context, fsId string, body PostApiCephfsFsIdTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCephfsFsIdTreeRequest(c.Server, fsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiClusterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiCluster(ctx context.Context, body PutApiClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiClusterUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiClusterUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterUser(ctx context.Context, body PostApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiClusterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiClusterUser(ctx context.Context, body PutApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterUserExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterUserExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterUserExport(ctx context.Context, body PostApiClusterUserExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterUserExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiClusterUserUserEntity(ctx context.Context, userEntity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiClusterUserUserEntityRequest(c.Server, userEntity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiClusterConf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiClusterConfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterConfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterConfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiClusterConf(ctx context.Context, body PostApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiClusterConfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiClusterConfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterConfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiClusterConf(ctx context.Context, body PutApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiClusterConfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiClusterConfFilter(ctx context.Context, params *GetApiClusterConfFilterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiClusterConfFilterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiClusterConfName(ctx context.Context, name string, params *DeleteApiClusterConfNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiClusterConfNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiClusterConfName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiClusterConfNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCrushRule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCrushRuleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCrushRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCrushRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCrushRule(ctx context.Context, body PostApiCrushRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCrushRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiCrushRuleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiCrushRuleNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCrushRuleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCrushRuleNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDaemonDaemonNameWithBody(ctx context.Context, daemonName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDaemonDaemonNameRequestWithBody(c.Server, daemonName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDaemonDaemonName(ctx context.Context, daemonName string, body PutApiDaemonDaemonNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDaemonDaemonNameRequest(c.Server, daemonName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiErasureCodeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiErasureCodeProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiErasureCodeProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiErasureCodeProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiErasureCodeProfile(ctx context.Context, body PostApiErasureCodeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiErasureCodeProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiErasureCodeProfileName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiErasureCodeProfileNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiErasureCodeProfileName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiErasureCodeProfileNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFeatureToggles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFeatureTogglesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFeedback(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFeedbackRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedback(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiFeedbackApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiFeedbackApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFeedbackApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFeedbackApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedbackApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiFeedbackApiKey(ctx context.Context, body PostApiFeedbackApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiFeedbackApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGrafanaDashboards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGrafanaDashboardsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGrafanaUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGrafanaUrlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGrafanaValidationParams(ctx context.Context, params string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGrafanaValidationParamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHealthFull(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHealthFullRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHealthGetClusterCapacity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHealthGetClusterCapacityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHealthGetClusterFsid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHealthGetClusterFsidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHealthMinimal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHealthMinimalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHost(ctx context.Context, params *GetApiHostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHost(ctx context.Context, body PostApiHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiHostHostname(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiHostHostnameRequest(c.Server, hostname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHostHostname(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostHostnameRequest(c.Server, hostname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHostHostnameWithBody(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHostHostnameRequestWithBody(c.Server, hostname, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHostHostname(ctx context.Context, hostname string, body PutApiHostHostnameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHostHostnameRequest(c.Server, hostname, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHostHostnameDaemons(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostHostnameDaemonsRequest(c.Server, hostname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHostHostnameDevices(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostHostnameDevicesRequest(c.Server, hostname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHostHostnameIdentifyDeviceWithBody(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHostHostnameIdentifyDeviceRequestWithBody(c.Server, hostname, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHostHostnameIdentifyDevice(ctx context.Context, hostname string, body PostApiHostHostnameIdentifyDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHostHostnameIdentifyDeviceRequest(c.Server, hostname, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHostHostnameInventory(ctx context.Context, hostname string, params *GetApiHostHostnameInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostHostnameInventoryRequest(c.Server, hostname, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHostHostnameSmart(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHostHostnameSmartRequest(c.Server, hostname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiIscsiDiscoveryauth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiIscsiDiscoveryauthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiIscsiDiscoveryauthWithBody(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiIscsiDiscoveryauthRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiIscsiDiscoveryauth(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, body PutApiIscsiDiscoveryauthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiIscsiDiscoveryauthRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiIscsiTarget(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiIscsiTargetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiIscsiTargetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiIscsiTargetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiIscsiTarget(ctx context.Context, body PostApiIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiIscsiTargetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiIscsiTargetTargetIqnRequest(c.Server, targetIqn)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiIscsiTargetTargetIqnRequest(c.Server, targetIqn)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiIscsiTargetTargetIqnWithBody(ctx context.Context, targetIqn string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiIscsiTargetTargetIqnRequestWithBody(c.Server, targetIqn, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiIscsiTargetTargetIqn(ctx context.Context, targetIqn string, body PutApiIscsiTargetTargetIqnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiIscsiTargetTargetIqnRequest(c.Server, targetIqn, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLogsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLogsAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMgrModule(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMgrModuleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMgrModuleModuleName(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMgrModuleModuleNameRequest(c.Server, moduleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMgrModuleModuleNameWithBody(ctx context.Context, moduleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMgrModuleModuleNameRequestWithBody(c.Server, moduleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMgrModuleModuleName(ctx context.Context, moduleName string, body PutApiMgrModuleModuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMgrModuleModuleNameRequest(c.Server, moduleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMgrModuleModuleNameDisable(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMgrModuleModuleNameDisableRequest(c.Server, moduleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMgrModuleModuleNameEnable(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMgrModuleModuleNameEnableRequest(c.Server, moduleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMgrModuleModuleNameOptions(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMgrModuleModuleNameOptionsRequest(c.Server, moduleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMonitor(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMonitorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNfsGaneshaCluster(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNfsGaneshaClusterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNfsGaneshaExport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNfsGaneshaExportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNfsGaneshaExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNfsGaneshaExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiNfsGaneshaExport(ctx context.Context, body PostApiNfsGaneshaExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiNfsGaneshaExportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiNfsGaneshaExportClusterIdExportIdRequest(c.Server, clusterId, exportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNfsGaneshaExportClusterIdExportIdRequest(c.Server, clusterId, exportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiNfsGaneshaExportClusterIdExportIdWithBody(ctx context.Context, clusterId string, exportId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiNfsGaneshaExportClusterIdExportIdRequestWithBody(c.Server, clusterId, exportId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiNfsGaneshaExportClusterIdExportId(ctx context.Context, clusterId string, exportId int, body PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiNfsGaneshaExportClusterIdExportIdRequest(c.Server, clusterId, exportId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsd(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsd(ctx context.Context, body PostApiOsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdFlags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdFlagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdFlagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdFlags(ctx context.Context, body PutApiOsdFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdFlagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdFlagsIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdFlagsIndividualRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdFlagsIndividualWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdFlagsIndividualRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdFlagsIndividual(ctx context.Context, body PutApiOsdFlagsIndividualJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdFlagsIndividualRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSafeToDelete(ctx context.Context, params *GetApiOsdSafeToDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSafeToDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSafeToDestroy(ctx context.Context, params *GetApiOsdSafeToDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSafeToDestroyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiOsdSvcId(ctx context.Context, svcId string, params *DeleteApiOsdSvcIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiOsdSvcIdRequest(c.Server, svcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSvcId(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSvcIdRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdSvcIdWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdSvcIdRequestWithBody(c.Server, svcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdSvcId(ctx context.Context, svcId string, body PutApiOsdSvcIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdSvcIdRequest(c.Server, svcId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdDestroy(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdDestroyRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSvcIdDevices(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSvcIdDevicesRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSvcIdHistogram(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSvcIdHistogramRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdSvcIdMarkWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdSvcIdMarkRequestWithBody(c.Server, svcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiOsdSvcIdMark(ctx context.Context, svcId string, body PutApiOsdSvcIdMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiOsdSvcIdMarkRequest(c.Server, svcId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdPurge(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdPurgeRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdReweightWithBody(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdReweightRequestWithBody(c.Server, svcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdReweight(ctx context.Context, svcId string, body PostApiOsdSvcIdReweightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdReweightRequest(c.Server, svcId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdScrubWithBody(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdScrubRequestWithBody(c.Server, svcId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiOsdSvcIdScrub(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, body PostApiOsdSvcIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiOsdSvcIdScrubRequest(c.Server, svcId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiOsdSvcIdSmart(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiOsdSvcIdSmartRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCounters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersMdsServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersMdsServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersMgrServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersMgrServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersMonServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersMonServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersOsdServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersOsdServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersRbdMirrorServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersRbdMirrorServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersRgwServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersRgwServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPerfCountersTcmuRunnerServiceId(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPerfCountersTcmuRunnerServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPool(ctx context.Context, params *GetApiPoolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPoolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPool(ctx context.Context, body PostApiPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPoolPoolName(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPoolPoolNameRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPoolPoolName(ctx context.Context, poolName string, params *GetApiPoolPoolNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoolPoolNameRequest(c.Server, poolName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoolPoolNameWithBody(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoolPoolNameRequestWithBody(c.Server, poolName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoolPoolName(ctx context.Context, poolName string, body PutApiPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoolPoolNameRequest(c.Server, poolName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPoolPoolNameConfiguration(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoolPoolNameConfigurationRequest(c.Server, poolName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPrometheus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPrometheusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPrometheusData(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPrometheusDataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPrometheusNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPrometheusNotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPrometheusRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPrometheusRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPrometheusSilence(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPrometheusSilenceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPrometheusSilenceSId(ctx context.Context, sId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPrometheusSilenceSIdRequest(c.Server, sId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPrometheusSilences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPrometheusSilencesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwBucket(ctx context.Context, params *GetApiRgwBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwBucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwBucketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwBucket(ctx context.Context, body PostApiRgwBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwBucketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwBucketDeleteEncryption(ctx context.Context, params *DeleteApiRgwBucketDeleteEncryptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwBucketDeleteEncryptionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwBucketGetEncryption(ctx context.Context, params *GetApiRgwBucketGetEncryptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwBucketGetEncryptionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwBucketGetEncryptionConfig(ctx context.Context, params *GetApiRgwBucketGetEncryptionConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwBucketGetEncryptionConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwBucketSetEncryptionConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwBucketSetEncryptionConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwBucketSetEncryptionConfig(ctx context.Context, body PutApiRgwBucketSetEncryptionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwBucketSetEncryptionConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwBucketBucket(ctx context.Context, bucket string, params *DeleteApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwBucketBucketRequest(c.Server, bucket, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwBucketBucket(ctx context.Context, bucket string, params *GetApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwBucketBucketRequest(c.Server, bucket, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwBucketBucketWithBody(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwBucketBucketRequestWithBody(c.Server, bucket, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwBucketBucket(ctx context.Context, bucket string, body PutApiRgwBucketBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwBucketBucketRequest(c.Server, bucket, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwDaemon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwDaemonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwDaemonSvcId(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwDaemonSvcIdRequest(c.Server, svcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwRolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwRoles(ctx context.Context, body PostApiRgwRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwRolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwSite(ctx context.Context, params *GetApiRgwSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwSiteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwUser(ctx context.Context, params *GetApiRgwUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUser(ctx context.Context, body PostApiRgwUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwUserGetEmails(ctx context.Context, params *GetApiRgwUserGetEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwUserGetEmailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwUserUid(ctx context.Context, uid string, params *DeleteApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwUserUidRequest(c.Server, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwUserUid(ctx context.Context, uid string, params *GetApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwUserUidRequest(c.Server, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwUserUidWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwUserUidRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwUserUid(ctx context.Context, uid string, body PutApiRgwUserUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwUserUidRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwUserUidCapability(ctx context.Context, uid string, params *DeleteApiRgwUserUidCapabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwUserUidCapabilityRequest(c.Server, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidCapabilityWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidCapabilityRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidCapability(ctx context.Context, uid string, body PostApiRgwUserUidCapabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidCapabilityRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwUserUidKey(ctx context.Context, uid string, params *DeleteApiRgwUserUidKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwUserUidKeyRequest(c.Server, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidKeyWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidKeyRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidKey(ctx context.Context, uid string, body PostApiRgwUserUidKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidKeyRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRgwUserUidQuota(ctx context.Context, uid string, params *GetApiRgwUserUidQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRgwUserUidQuotaRequest(c.Server, uid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwUserUidQuotaWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwUserUidQuotaRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRgwUserUidQuota(ctx context.Context, uid string, body PutApiRgwUserUidQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRgwUserUidQuotaRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidSubuserWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidSubuserRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRgwUserUidSubuser(ctx context.Context, uid string, body PostApiRgwUserUidSubuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRgwUserUidSubuserRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRgwUserUidSubuserSubuser(ctx context.Context, uid string, subuser string, params *DeleteApiRgwUserUidSubuserSubuserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRgwUserUidSubuserSubuserRequest(c.Server, uid, subuser, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRole(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoleRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRole(ctx context.Context, body PostApiRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRoleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRoleNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoleName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoleNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoleNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoleNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoleName(ctx context.Context, name string, body PutApiRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoleNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoleNameCloneWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoleNameCloneRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoleNameClone(ctx context.Context, name string, body PostApiRoleNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoleNameCloneRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiService(ctx context.Context, params *GetApiServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiService(ctx context.Context, body PostApiServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiServiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiServiceKnownTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiServiceKnownTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiServiceServiceName(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiServiceServiceNameRequest(c.Server, serviceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiServiceServiceName(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiServiceServiceNameRequest(c.Server, serviceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiServiceServiceNameWithBody(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiServiceServiceNameRequestWithBody(c.Server, serviceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiServiceServiceName(ctx context.Context, serviceName string, body PutApiServiceServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiServiceServiceNameRequest(c.Server, serviceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiServiceServiceNameDaemons(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiServiceServiceNameDaemonsRequest(c.Server, serviceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSettings(ctx context.Context, params *GetApiSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiSettingsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiSettingsNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSettingsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSettingsNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSettingsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSettingsNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSettingsName(ctx context.Context, name string, body PutApiSettingsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSettingsNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTask(ctx context.Context, params *GetApiTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTaskRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiTelemetryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiTelemetryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiTelemetry(ctx context.Context, body PutApiTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiTelemetryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTelemetryReport(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTelemetryReportRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUser(ctx context.Context, body PostApiUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUserValidatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserValidatePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUserValidatePassword(ctx context.Context, body PostApiUserValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserValidatePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiUserUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiUserUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUserUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUserUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUserUsernameWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUserUsernameRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUserUsername(ctx context.Context, username string, body PutApiUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUserUsernameRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUserUsernameChangePasswordWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserUsernameChangePasswordRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUserUsernameChangePassword(ctx context.Context, username string, body PostApiUserUsernameChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUserUsernameChangePasswordRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAuthRequest calls the generic PostApiAuth builder with application/json body
func NewPostApiAuthRequest(server string, body PostApiAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthRequestWithBody generates requests for PostApiAuth with any type of body
func NewPostApiAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthCheckRequest calls the generic PostApiAuthCheck builder with application/json body
func NewPostApiAuthCheckRequest(server string, params *PostApiAuthCheckParams, body PostApiAuthCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthCheckRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthCheckRequestWithBody generates requests for PostApiAuthCheck with any type of body
func NewPostApiAuthCheckRequestWithBody(server string, params *PostApiAuthCheckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthLogoutRequest generates requests for PostApiAuthLogout
func NewPostApiAuthLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockImageRequest generates requests for GetApiBlockImage
func NewGetApiBlockImageRequest(server string, params *GetApiBlockImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PoolName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pool_name", runtime.ParamLocationQuery, *params.PoolName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockImageRequest calls the generic PostApiBlockImage builder with application/json body
func NewPostApiBlockImageRequest(server string, body PostApiBlockImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiBlockImageRequestWithBody generates requests for PostApiBlockImage with any type of body
func NewPostApiBlockImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiBlockImageCloneFormatVersionRequest generates requests for GetApiBlockImageCloneFormatVersion
func NewGetApiBlockImageCloneFormatVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/clone_format_version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockImageDefaultFeaturesRequest generates requests for GetApiBlockImageDefaultFeatures
func NewGetApiBlockImageDefaultFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/default_features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockImageTrashRequest generates requests for GetApiBlockImageTrash
func NewGetApiBlockImageTrashRequest(server string, params *GetApiBlockImageTrashParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/trash")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PoolName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pool_name", runtime.ParamLocationQuery, *params.PoolName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockImageTrashPurgeRequest calls the generic PostApiBlockImageTrashPurge builder with application/json body
func NewPostApiBlockImageTrashPurgeRequest(server string, params *PostApiBlockImageTrashPurgeParams, body PostApiBlockImageTrashPurgeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageTrashPurgeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiBlockImageTrashPurgeRequestWithBody generates requests for PostApiBlockImageTrashPurge with any type of body
func NewPostApiBlockImageTrashPurgeRequestWithBody(server string, params *PostApiBlockImageTrashPurgeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/trash/purge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PoolName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pool_name", runtime.ParamLocationQuery, *params.PoolName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBlockImageTrashImageIdSpecRequest generates requests for DeleteApiBlockImageTrashImageIdSpec
func NewDeleteApiBlockImageTrashImageIdSpecRequest(server string, imageIdSpec string, params *DeleteApiBlockImageTrashImageIdSpecParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_id_spec", runtime.ParamLocationPath, imageIdSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/trash/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockImageTrashImageIdSpecRestoreRequest calls the generic PostApiBlockImageTrashImageIdSpecRestore builder with application/json body
func NewPostApiBlockImageTrashImageIdSpecRestoreRequest(server string, imageIdSpec string, body PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageTrashImageIdSpecRestoreRequestWithBody(server, imageIdSpec, "application/json", bodyReader)
}

// NewPostApiBlockImageTrashImageIdSpecRestoreRequestWithBody generates requests for PostApiBlockImageTrashImageIdSpecRestore with any type of body
func NewPostApiBlockImageTrashImageIdSpecRestoreRequestWithBody(server string, imageIdSpec string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_id_spec", runtime.ParamLocationPath, imageIdSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/trash/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBlockImageImageSpecRequest generates requests for DeleteApiBlockImageImageSpec
func NewDeleteApiBlockImageImageSpecRequest(server string, imageSpec string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockImageImageSpecRequest generates requests for GetApiBlockImageImageSpec
func NewGetApiBlockImageImageSpecRequest(server string, imageSpec string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBlockImageImageSpecRequest calls the generic PutApiBlockImageImageSpec builder with application/json body
func NewPutApiBlockImageImageSpecRequest(server string, imageSpec string, body PutApiBlockImageImageSpecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBlockImageImageSpecRequestWithBody(server, imageSpec, "application/json", bodyReader)
}

// NewPutApiBlockImageImageSpecRequestWithBody generates requests for PutApiBlockImageImageSpec with any type of body
func NewPutApiBlockImageImageSpecRequestWithBody(server string, imageSpec string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockImageImageSpecCopyRequest calls the generic PostApiBlockImageImageSpecCopy builder with application/json body
func NewPostApiBlockImageImageSpecCopyRequest(server string, imageSpec string, body PostApiBlockImageImageSpecCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageImageSpecCopyRequestWithBody(server, imageSpec, "application/json", bodyReader)
}

// NewPostApiBlockImageImageSpecCopyRequestWithBody generates requests for PostApiBlockImageImageSpecCopy with any type of body
func NewPostApiBlockImageImageSpecCopyRequestWithBody(server string, imageSpec string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/copy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockImageImageSpecFlattenRequest generates requests for PostApiBlockImageImageSpecFlatten
func NewPostApiBlockImageImageSpecFlattenRequest(server string, imageSpec string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/flatten", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockImageImageSpecMoveTrashRequest calls the generic PostApiBlockImageImageSpecMoveTrash builder with application/json body
func NewPostApiBlockImageImageSpecMoveTrashRequest(server string, imageSpec string, body PostApiBlockImageImageSpecMoveTrashJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageImageSpecMoveTrashRequestWithBody(server, imageSpec, "application/json", bodyReader)
}

// NewPostApiBlockImageImageSpecMoveTrashRequestWithBody generates requests for PostApiBlockImageImageSpecMoveTrash with any type of body
func NewPostApiBlockImageImageSpecMoveTrashRequestWithBody(server string, imageSpec string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/move_trash", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockImageImageSpecSnapRequest calls the generic PostApiBlockImageImageSpecSnap builder with application/json body
func NewPostApiBlockImageImageSpecSnapRequest(server string, imageSpec string, body PostApiBlockImageImageSpecSnapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageImageSpecSnapRequestWithBody(server, imageSpec, "application/json", bodyReader)
}

// NewPostApiBlockImageImageSpecSnapRequestWithBody generates requests for PostApiBlockImageImageSpecSnap with any type of body
func NewPostApiBlockImageImageSpecSnapRequestWithBody(server string, imageSpec string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/snap", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBlockImageImageSpecSnapSnapshotNameRequest generates requests for DeleteApiBlockImageImageSpecSnapSnapshotName
func NewDeleteApiBlockImageImageSpecSnapSnapshotNameRequest(server string, imageSpec string, snapshotName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshot_name", runtime.ParamLocationPath, snapshotName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/snap/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBlockImageImageSpecSnapSnapshotNameRequest calls the generic PutApiBlockImageImageSpecSnapSnapshotName builder with application/json body
func NewPutApiBlockImageImageSpecSnapSnapshotNameRequest(server string, imageSpec string, snapshotName string, body PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBlockImageImageSpecSnapSnapshotNameRequestWithBody(server, imageSpec, snapshotName, "application/json", bodyReader)
}

// NewPutApiBlockImageImageSpecSnapSnapshotNameRequestWithBody generates requests for PutApiBlockImageImageSpecSnapSnapshotName with any type of body
func NewPutApiBlockImageImageSpecSnapSnapshotNameRequestWithBody(server string, imageSpec string, snapshotName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshot_name", runtime.ParamLocationPath, snapshotName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/snap/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequest calls the generic PostApiBlockImageImageSpecSnapSnapshotNameClone builder with application/json body
func NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequest(server string, imageSpec string, snapshotName string, body PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequestWithBody(server, imageSpec, snapshotName, "application/json", bodyReader)
}

// NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequestWithBody generates requests for PostApiBlockImageImageSpecSnapSnapshotNameClone with any type of body
func NewPostApiBlockImageImageSpecSnapSnapshotNameCloneRequestWithBody(server string, imageSpec string, snapshotName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshot_name", runtime.ParamLocationPath, snapshotName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/snap/%s/clone", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockImageImageSpecSnapSnapshotNameRollbackRequest generates requests for PostApiBlockImageImageSpecSnapSnapshotNameRollback
func NewPostApiBlockImageImageSpecSnapSnapshotNameRollbackRequest(server string, imageSpec string, snapshotName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_spec", runtime.ParamLocationPath, imageSpec)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshot_name", runtime.ParamLocationPath, snapshotName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/image/%s/snap/%s/rollback", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockMirroringPoolPoolNameRequest generates requests for GetApiBlockMirroringPoolPoolName
func NewGetApiBlockMirroringPoolPoolNameRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBlockMirroringPoolPoolNameRequest calls the generic PutApiBlockMirroringPoolPoolName builder with application/json body
func NewPutApiBlockMirroringPoolPoolNameRequest(server string, poolName string, body PutApiBlockMirroringPoolPoolNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBlockMirroringPoolPoolNameRequestWithBody(server, poolName, "application/json", bodyReader)
}

// NewPutApiBlockMirroringPoolPoolNameRequestWithBody generates requests for PutApiBlockMirroringPoolPoolName with any type of body
func NewPutApiBlockMirroringPoolPoolNameRequestWithBody(server string, poolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequest calls the generic PostApiBlockMirroringPoolPoolNameBootstrapPeer builder with application/json body
func NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequest(server string, poolName string, body PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequestWithBody(server, poolName, "application/json", bodyReader)
}

// NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequestWithBody generates requests for PostApiBlockMirroringPoolPoolNameBootstrapPeer with any type of body
func NewPostApiBlockMirroringPoolPoolNameBootstrapPeerRequestWithBody(server string, poolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/bootstrap/peer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBlockMirroringPoolPoolNameBootstrapTokenRequest generates requests for PostApiBlockMirroringPoolPoolNameBootstrapToken
func NewPostApiBlockMirroringPoolPoolNameBootstrapTokenRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/bootstrap/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockMirroringPoolPoolNamePeerRequest generates requests for GetApiBlockMirroringPoolPoolNamePeer
func NewGetApiBlockMirroringPoolPoolNamePeerRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/peer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockMirroringPoolPoolNamePeerRequest calls the generic PostApiBlockMirroringPoolPoolNamePeer builder with application/json body
func NewPostApiBlockMirroringPoolPoolNamePeerRequest(server string, poolName string, body PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockMirroringPoolPoolNamePeerRequestWithBody(server, poolName, "application/json", bodyReader)
}

// NewPostApiBlockMirroringPoolPoolNamePeerRequestWithBody generates requests for PostApiBlockMirroringPoolPoolNamePeer with any type of body
func NewPostApiBlockMirroringPoolPoolNamePeerRequestWithBody(server string, poolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/peer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidRequest generates requests for DeleteApiBlockMirroringPoolPoolNamePeerPeerUuid
func NewDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(server string, poolName string, peerUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "peer_uuid", runtime.ParamLocationPath, peerUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/peer/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockMirroringPoolPoolNamePeerPeerUuidRequest generates requests for GetApiBlockMirroringPoolPoolNamePeerPeerUuid
func NewGetApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(server string, poolName string, peerUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "peer_uuid", runtime.ParamLocationPath, peerUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/peer/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequest calls the generic PutApiBlockMirroringPoolPoolNamePeerPeerUuid builder with application/json body
func NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequest(server string, poolName string, peerUuid string, body PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequestWithBody(server, poolName, peerUuid, "application/json", bodyReader)
}

// NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequestWithBody generates requests for PutApiBlockMirroringPoolPoolNamePeerPeerUuid with any type of body
func NewPutApiBlockMirroringPoolPoolNamePeerPeerUuidRequestWithBody(server string, poolName string, peerUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "peer_uuid", runtime.ParamLocationPath, peerUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/pool/%s/peer/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiBlockMirroringSiteNameRequest generates requests for GetApiBlockMirroringSiteName
func NewGetApiBlockMirroringSiteNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/site_name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiBlockMirroringSiteNameRequest calls the generic PutApiBlockMirroringSiteName builder with application/json body
func NewPutApiBlockMirroringSiteNameRequest(server string, body PutApiBlockMirroringSiteNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiBlockMirroringSiteNameRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiBlockMirroringSiteNameRequestWithBody generates requests for PutApiBlockMirroringSiteName with any type of body
func NewPutApiBlockMirroringSiteNameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/site_name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiBlockMirroringSummaryRequest generates requests for GetApiBlockMirroringSummary
func NewGetApiBlockMirroringSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/mirroring/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBlockPoolPoolNameNamespaceRequest generates requests for GetApiBlockPoolPoolNameNamespace
func NewGetApiBlockPoolPoolNameNamespaceRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/pool/%s/namespace", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiBlockPoolPoolNameNamespaceRequest calls the generic PostApiBlockPoolPoolNameNamespace builder with application/json body
func NewPostApiBlockPoolPoolNameNamespaceRequest(server string, poolName string, body PostApiBlockPoolPoolNameNamespaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBlockPoolPoolNameNamespaceRequestWithBody(server, poolName, "application/json", bodyReader)
}

// NewPostApiBlockPoolPoolNameNamespaceRequestWithBody generates requests for PostApiBlockPoolPoolNameNamespace with any type of body
func NewPostApiBlockPoolPoolNameNamespaceRequestWithBody(server string, poolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/pool/%s/namespace", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBlockPoolPoolNameNamespaceNamespaceRequest generates requests for DeleteApiBlockPoolPoolNameNamespaceNamespace
func NewDeleteApiBlockPoolPoolNameNamespaceNamespaceRequest(server string, poolName string, namespace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespace", runtime.ParamLocationPath, namespace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/block/pool/%s/namespace/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsRequest generates requests for GetApiCephfs
func NewGetApiCephfsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdRequest generates requests for GetApiCephfsFsId
func NewGetApiCephfsFsIdRequest(server string, fsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiCephfsFsIdClientClientIdRequest generates requests for DeleteApiCephfsFsIdClientClientId
func NewDeleteApiCephfsFsIdClientClientIdRequest(server string, fsId string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client_id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/client/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdClientsRequest generates requests for GetApiCephfsFsIdClients
func NewGetApiCephfsFsIdClientsRequest(server string, fsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdGetRootDirectoryRequest generates requests for GetApiCephfsFsIdGetRootDirectory
func NewGetApiCephfsFsIdGetRootDirectoryRequest(server string, fsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/get_root_directory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdLsDirRequest generates requests for GetApiCephfsFsIdLsDir
func NewGetApiCephfsFsIdLsDirRequest(server string, fsId string, params *GetApiCephfsFsIdLsDirParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/ls_dir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdMdsCountersRequest generates requests for GetApiCephfsFsIdMdsCounters
func NewGetApiCephfsFsIdMdsCountersRequest(server string, fsId string, params *GetApiCephfsFsIdMdsCountersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/mds_counters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Counters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counters", runtime.ParamLocationQuery, *params.Counters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCephfsFsIdQuotaRequest generates requests for GetApiCephfsFsIdQuota
func NewGetApiCephfsFsIdQuotaRequest(server string, fsId string, params *GetApiCephfsFsIdQuotaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiCephfsFsIdQuotaRequest calls the generic PutApiCephfsFsIdQuota builder with application/json body
func NewPutApiCephfsFsIdQuotaRequest(server string, fsId string, body PutApiCephfsFsIdQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiCephfsFsIdQuotaRequestWithBody(server, fsId, "application/json", bodyReader)
}

// NewPutApiCephfsFsIdQuotaRequestWithBody generates requests for PutApiCephfsFsIdQuota with any type of body
func NewPutApiCephfsFsIdQuotaRequestWithBody(server string, fsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiCephfsFsIdSnapshotRequest generates requests for DeleteApiCephfsFsIdSnapshot
func NewDeleteApiCephfsFsIdSnapshotRequest(server string, fsId string, params *DeleteApiCephfsFsIdSnapshotParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiCephfsFsIdSnapshotRequest calls the generic PostApiCephfsFsIdSnapshot builder with application/json body
func NewPostApiCephfsFsIdSnapshotRequest(server string, fsId string, body PostApiCephfsFsIdSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiCephfsFsIdSnapshotRequestWithBody(server, fsId, "application/json", bodyReader)
}

// NewPostApiCephfsFsIdSnapshotRequestWithBody generates requests for PostApiCephfsFsIdSnapshot with any type of body
func NewPostApiCephfsFsIdSnapshotRequestWithBody(server string, fsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiCephfsFsIdTreeRequest generates requests for DeleteApiCephfsFsIdTree
func NewDeleteApiCephfsFsIdTreeRequest(server string, fsId string, params *DeleteApiCephfsFsIdTreeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/tree", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiCephfsFsIdTreeRequest calls the generic PostApiCephfsFsIdTree builder with application/json body
func NewPostApiCephfsFsIdTreeRequest(server string, fsId string, body PostApiCephfsFsIdTreeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiCephfsFsIdTreeRequestWithBody(server, fsId, "application/json", bodyReader)
}

// NewPostApiCephfsFsIdTreeRequestWithBody generates requests for PostApiCephfsFsIdTree with any type of body
func NewPostApiCephfsFsIdTreeRequestWithBody(server string, fsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fs_id", runtime.ParamLocationPath, fsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cephfs/%s/tree", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiClusterRequest generates requests for GetApiCluster
func NewGetApiClusterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiClusterRequest calls the generic PutApiCluster builder with application/json body
func NewPutApiClusterRequest(server string, body PutApiClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiClusterRequestWithBody generates requests for PutApiCluster with any type of body
func NewPutApiClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiClusterUserRequest generates requests for GetApiClusterUser
func NewGetApiClusterUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiClusterUserRequest calls the generic PostApiClusterUser builder with application/json body
func NewPostApiClusterUserRequest(server string, body PostApiClusterUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiClusterUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiClusterUserRequestWithBody generates requests for PostApiClusterUser with any type of body
func NewPostApiClusterUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiClusterUserRequest calls the generic PutApiClusterUser builder with application/json body
func NewPutApiClusterUserRequest(server string, body PutApiClusterUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiClusterUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiClusterUserRequestWithBody generates requests for PutApiClusterUser with any type of body
func NewPutApiClusterUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiClusterUserExportRequest calls the generic PostApiClusterUserExport builder with application/json body
func NewPostApiClusterUserExportRequest(server string, body PostApiClusterUserExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiClusterUserExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiClusterUserExportRequestWithBody generates requests for PostApiClusterUserExport with any type of body
func NewPostApiClusterUserExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster/user/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiClusterUserUserEntityRequest generates requests for DeleteApiClusterUserUserEntity
func NewDeleteApiClusterUserUserEntityRequest(server string, userEntity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_entity", runtime.ParamLocationPath, userEntity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiClusterConfRequest generates requests for GetApiClusterConf
func NewGetApiClusterConfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiClusterConfRequest calls the generic PostApiClusterConf builder with application/json body
func NewPostApiClusterConfRequest(server string, body PostApiClusterConfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiClusterConfRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiClusterConfRequestWithBody generates requests for PostApiClusterConf with any type of body
func NewPostApiClusterConfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiClusterConfRequest calls the generic PutApiClusterConf builder with application/json body
func NewPutApiClusterConfRequest(server string, body PutApiClusterConfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiClusterConfRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiClusterConfRequestWithBody generates requests for PutApiClusterConf with any type of body
func NewPutApiClusterConfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiClusterConfFilterRequest generates requests for GetApiClusterConfFilter
func NewGetApiClusterConfFilterRequest(server string, params *GetApiClusterConfFilterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf/filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiClusterConfNameRequest generates requests for DeleteApiClusterConfName
func NewDeleteApiClusterConfNameRequest(server string, name string, params *DeleteApiClusterConfNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiClusterConfNameRequest generates requests for GetApiClusterConfName
func NewGetApiClusterConfNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cluster_conf/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCrushRuleRequest generates requests for GetApiCrushRule
func NewGetApiCrushRuleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/crush_rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiCrushRuleRequest calls the generic PostApiCrushRule builder with application/json body
func NewPostApiCrushRuleRequest(server string, body PostApiCrushRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiCrushRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiCrushRuleRequestWithBody generates requests for PostApiCrushRule with any type of body
func NewPostApiCrushRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/crush_rule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiCrushRuleNameRequest generates requests for DeleteApiCrushRuleName
func NewDeleteApiCrushRuleNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/crush_rule/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCrushRuleNameRequest generates requests for GetApiCrushRuleName
func NewGetApiCrushRuleNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/crush_rule/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDaemonDaemonNameRequest calls the generic PutApiDaemonDaemonName builder with application/json body
func NewPutApiDaemonDaemonNameRequest(server string, daemonName string, body PutApiDaemonDaemonNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDaemonDaemonNameRequestWithBody(server, daemonName, "application/json", bodyReader)
}

// NewPutApiDaemonDaemonNameRequestWithBody generates requests for PutApiDaemonDaemonName with any type of body
func NewPutApiDaemonDaemonNameRequestWithBody(server string, daemonName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "daemon_name", runtime.ParamLocationPath, daemonName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/daemon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiErasureCodeProfileRequest generates requests for GetApiErasureCodeProfile
func NewGetApiErasureCodeProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/erasure_code_profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiErasureCodeProfileRequest calls the generic PostApiErasureCodeProfile builder with application/json body
func NewPostApiErasureCodeProfileRequest(server string, body PostApiErasureCodeProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiErasureCodeProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiErasureCodeProfileRequestWithBody generates requests for PostApiErasureCodeProfile with any type of body
func NewPostApiErasureCodeProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/erasure_code_profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiErasureCodeProfileNameRequest generates requests for DeleteApiErasureCodeProfileName
func NewDeleteApiErasureCodeProfileNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/erasure_code_profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiErasureCodeProfileNameRequest generates requests for GetApiErasureCodeProfileName
func NewGetApiErasureCodeProfileNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/erasure_code_profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFeatureTogglesRequest generates requests for GetApiFeatureToggles
func NewGetApiFeatureTogglesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feature_toggles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFeedbackRequest generates requests for GetApiFeedback
func NewGetApiFeedbackRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiFeedbackRequest calls the generic PostApiFeedback builder with application/json body
func NewPostApiFeedbackRequest(server string, body PostApiFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiFeedbackRequestWithBody generates requests for PostApiFeedback with any type of body
func NewPostApiFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiFeedbackApiKeyRequest generates requests for DeleteApiFeedbackApiKey
func NewDeleteApiFeedbackApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback/api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFeedbackApiKeyRequest generates requests for GetApiFeedbackApiKey
func NewGetApiFeedbackApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback/api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiFeedbackApiKeyRequest calls the generic PostApiFeedbackApiKey builder with application/json body
func NewPostApiFeedbackApiKeyRequest(server string, body PostApiFeedbackApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiFeedbackApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiFeedbackApiKeyRequestWithBody generates requests for PostApiFeedbackApiKey with any type of body
func NewPostApiFeedbackApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feedback/api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiGrafanaDashboardsRequest generates requests for PostApiGrafanaDashboards
func NewPostApiGrafanaDashboardsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/grafana/dashboards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGrafanaUrlRequest generates requests for GetApiGrafanaUrl
func NewGetApiGrafanaUrlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/grafana/url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGrafanaValidationParamsRequest generates requests for GetApiGrafanaValidationParams
func NewGetApiGrafanaValidationParamsRequest(server string, params string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "params", runtime.ParamLocationPath, params)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/grafana/validation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHealthFullRequest generates requests for GetApiHealthFull
func NewGetApiHealthFullRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/health/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHealthGetClusterCapacityRequest generates requests for GetApiHealthGetClusterCapacity
func NewGetApiHealthGetClusterCapacityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/health/get_cluster_capacity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHealthGetClusterFsidRequest generates requests for GetApiHealthGetClusterFsid
func NewGetApiHealthGetClusterFsidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/health/get_cluster_fsid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHealthMinimalRequest generates requests for GetApiHealthMinimal
func NewGetApiHealthMinimalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/health/minimal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHostRequest generates requests for GetApiHost
func NewGetApiHostRequest(server string, params *GetApiHostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sources", runtime.ParamLocationQuery, *params.Sources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facts", runtime.ParamLocationQuery, *params.Facts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiHostRequest calls the generic PostApiHost builder with application/json body
func NewPostApiHostRequest(server string, body PostApiHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiHostRequestWithBody generates requests for PostApiHost with any type of body
func NewPostApiHostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiHostHostnameRequest generates requests for DeleteApiHostHostname
func NewDeleteApiHostHostnameRequest(server string, hostname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHostHostnameRequest generates requests for GetApiHostHostname
func NewGetApiHostHostnameRequest(server string, hostname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiHostHostnameRequest calls the generic PutApiHostHostname builder with application/json body
func NewPutApiHostHostnameRequest(server string, hostname string, body PutApiHostHostnameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHostHostnameRequestWithBody(server, hostname, "application/json", bodyReader)
}

// NewPutApiHostHostnameRequestWithBody generates requests for PutApiHostHostname with any type of body
func NewPutApiHostHostnameRequestWithBody(server string, hostname string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHostHostnameDaemonsRequest generates requests for GetApiHostHostnameDaemons
func NewGetApiHostHostnameDaemonsRequest(server string, hostname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s/daemons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHostHostnameDevicesRequest generates requests for GetApiHostHostnameDevices
func NewGetApiHostHostnameDevicesRequest(server string, hostname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiHostHostnameIdentifyDeviceRequest calls the generic PostApiHostHostnameIdentifyDevice builder with application/json body
func NewPostApiHostHostnameIdentifyDeviceRequest(server string, hostname string, body PostApiHostHostnameIdentifyDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHostHostnameIdentifyDeviceRequestWithBody(server, hostname, "application/json", bodyReader)
}

// NewPostApiHostHostnameIdentifyDeviceRequestWithBody generates requests for PostApiHostHostnameIdentifyDevice with any type of body
func NewPostApiHostHostnameIdentifyDeviceRequestWithBody(server string, hostname string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s/identify_device", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHostHostnameInventoryRequest generates requests for GetApiHostHostnameInventory
func NewGetApiHostHostnameInventoryRequest(server string, hostname string, params *GetApiHostHostnameInventoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s/inventory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Refresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHostHostnameSmartRequest generates requests for GetApiHostHostnameSmart
func NewGetApiHostHostnameSmartRequest(server string, hostname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostname", runtime.ParamLocationPath, hostname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/host/%s/smart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiIscsiDiscoveryauthRequest generates requests for GetApiIscsiDiscoveryauth
func NewGetApiIscsiDiscoveryauthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/discoveryauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiIscsiDiscoveryauthRequest calls the generic PutApiIscsiDiscoveryauth builder with application/json body
func NewPutApiIscsiDiscoveryauthRequest(server string, params *PutApiIscsiDiscoveryauthParams, body PutApiIscsiDiscoveryauthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiIscsiDiscoveryauthRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutApiIscsiDiscoveryauthRequestWithBody generates requests for PutApiIscsiDiscoveryauth with any type of body
func NewPutApiIscsiDiscoveryauthRequestWithBody(server string, params *PutApiIscsiDiscoveryauthParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/discoveryauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mutual_user", runtime.ParamLocationQuery, params.MutualUser); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mutual_password", runtime.ParamLocationQuery, params.MutualPassword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiIscsiTargetRequest generates requests for GetApiIscsiTarget
func NewGetApiIscsiTargetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiIscsiTargetRequest calls the generic PostApiIscsiTarget builder with application/json body
func NewPostApiIscsiTargetRequest(server string, body PostApiIscsiTargetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiIscsiTargetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiIscsiTargetRequestWithBody generates requests for PostApiIscsiTarget with any type of body
func NewPostApiIscsiTargetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/target")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiIscsiTargetTargetIqnRequest generates requests for DeleteApiIscsiTargetTargetIqn
func NewDeleteApiIscsiTargetTargetIqnRequest(server string, targetIqn string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "target_iqn", runtime.ParamLocationPath, targetIqn)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/target/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiIscsiTargetTargetIqnRequest generates requests for GetApiIscsiTargetTargetIqn
func NewGetApiIscsiTargetTargetIqnRequest(server string, targetIqn string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "target_iqn", runtime.ParamLocationPath, targetIqn)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/target/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiIscsiTargetTargetIqnRequest calls the generic PutApiIscsiTargetTargetIqn builder with application/json body
func NewPutApiIscsiTargetTargetIqnRequest(server string, targetIqn string, body PutApiIscsiTargetTargetIqnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiIscsiTargetTargetIqnRequestWithBody(server, targetIqn, "application/json", bodyReader)
}

// NewPutApiIscsiTargetTargetIqnRequestWithBody generates requests for PutApiIscsiTargetTargetIqn with any type of body
func NewPutApiIscsiTargetTargetIqnRequestWithBody(server string, targetIqn string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "target_iqn", runtime.ParamLocationPath, targetIqn)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/iscsi/target/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiLogsAllRequest generates requests for GetApiLogsAll
func NewGetApiLogsAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/logs/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMgrModuleRequest generates requests for GetApiMgrModule
func NewGetApiMgrModuleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMgrModuleModuleNameRequest generates requests for GetApiMgrModuleModuleName
func NewGetApiMgrModuleModuleNameRequest(server string, moduleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "module_name", runtime.ParamLocationPath, moduleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiMgrModuleModuleNameRequest calls the generic PutApiMgrModuleModuleName builder with application/json body
func NewPutApiMgrModuleModuleNameRequest(server string, moduleName string, body PutApiMgrModuleModuleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiMgrModuleModuleNameRequestWithBody(server, moduleName, "application/json", bodyReader)
}

// NewPutApiMgrModuleModuleNameRequestWithBody generates requests for PutApiMgrModuleModuleName with any type of body
func NewPutApiMgrModuleModuleNameRequestWithBody(server string, moduleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "module_name", runtime.ParamLocationPath, moduleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiMgrModuleModuleNameDisableRequest generates requests for PostApiMgrModuleModuleNameDisable
func NewPostApiMgrModuleModuleNameDisableRequest(server string, moduleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "module_name", runtime.ParamLocationPath, moduleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module/%s/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMgrModuleModuleNameEnableRequest generates requests for PostApiMgrModuleModuleNameEnable
func NewPostApiMgrModuleModuleNameEnableRequest(server string, moduleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "module_name", runtime.ParamLocationPath, moduleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMgrModuleModuleNameOptionsRequest generates requests for GetApiMgrModuleModuleNameOptions
func NewGetApiMgrModuleModuleNameOptionsRequest(server string, moduleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "module_name", runtime.ParamLocationPath, moduleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mgr/module/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMonitorRequest generates requests for GetApiMonitor
func NewGetApiMonitorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/monitor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNfsGaneshaClusterRequest generates requests for GetApiNfsGaneshaCluster
func NewGetApiNfsGaneshaClusterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNfsGaneshaExportRequest generates requests for GetApiNfsGaneshaExport
func NewGetApiNfsGaneshaExportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiNfsGaneshaExportRequest calls the generic PostApiNfsGaneshaExport builder with application/json body
func NewPostApiNfsGaneshaExportRequest(server string, body PostApiNfsGaneshaExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiNfsGaneshaExportRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiNfsGaneshaExportRequestWithBody generates requests for PostApiNfsGaneshaExport with any type of body
func NewPostApiNfsGaneshaExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiNfsGaneshaExportClusterIdExportIdRequest generates requests for DeleteApiNfsGaneshaExportClusterIdExportId
func NewDeleteApiNfsGaneshaExportClusterIdExportIdRequest(server string, clusterId string, exportId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export_id", runtime.ParamLocationPath, exportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/export/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNfsGaneshaExportClusterIdExportIdRequest generates requests for GetApiNfsGaneshaExportClusterIdExportId
func NewGetApiNfsGaneshaExportClusterIdExportIdRequest(server string, clusterId string, exportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export_id", runtime.ParamLocationPath, exportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/export/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiNfsGaneshaExportClusterIdExportIdRequest calls the generic PutApiNfsGaneshaExportClusterIdExportId builder with application/json body
func NewPutApiNfsGaneshaExportClusterIdExportIdRequest(server string, clusterId string, exportId int, body PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiNfsGaneshaExportClusterIdExportIdRequestWithBody(server, clusterId, exportId, "application/json", bodyReader)
}

// NewPutApiNfsGaneshaExportClusterIdExportIdRequestWithBody generates requests for PutApiNfsGaneshaExportClusterIdExportId with any type of body
func NewPutApiNfsGaneshaExportClusterIdExportIdRequestWithBody(server string, clusterId string, exportId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export_id", runtime.ParamLocationPath, exportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/nfs-ganesha/export/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiOsdRequest generates requests for GetApiOsd
func NewGetApiOsdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiOsdRequest calls the generic PostApiOsd builder with application/json body
func NewPostApiOsdRequest(server string, body PostApiOsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiOsdRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiOsdRequestWithBody generates requests for PostApiOsd with any type of body
func NewPostApiOsdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiOsdFlagsRequest generates requests for GetApiOsdFlags
func NewGetApiOsdFlagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiOsdFlagsRequest calls the generic PutApiOsdFlags builder with application/json body
func NewPutApiOsdFlagsRequest(server string, body PutApiOsdFlagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiOsdFlagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiOsdFlagsRequestWithBody generates requests for PutApiOsdFlags with any type of body
func NewPutApiOsdFlagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiOsdFlagsIndividualRequest generates requests for GetApiOsdFlagsIndividual
func NewGetApiOsdFlagsIndividualRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/flags/individual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiOsdFlagsIndividualRequest calls the generic PutApiOsdFlagsIndividual builder with application/json body
func NewPutApiOsdFlagsIndividualRequest(server string, body PutApiOsdFlagsIndividualJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiOsdFlagsIndividualRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiOsdFlagsIndividualRequestWithBody generates requests for PutApiOsdFlagsIndividual with any type of body
func NewPutApiOsdFlagsIndividualRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/flags/individual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiOsdSafeToDeleteRequest generates requests for GetApiOsdSafeToDelete
func NewGetApiOsdSafeToDeleteRequest(server string, params *GetApiOsdSafeToDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/safe_to_delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "svc_ids", runtime.ParamLocationQuery, params.SvcIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiOsdSafeToDestroyRequest generates requests for GetApiOsdSafeToDestroy
func NewGetApiOsdSafeToDestroyRequest(server string, params *GetApiOsdSafeToDestroyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/safe_to_destroy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiOsdSettingsRequest generates requests for GetApiOsdSettings
func NewGetApiOsdSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiOsdSvcIdRequest generates requests for DeleteApiOsdSvcId
func NewDeleteApiOsdSvcIdRequest(server string, svcId string, params *DeleteApiOsdSvcIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PreserveId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preserve_id", runtime.ParamLocationQuery, *params.PreserveId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiOsdSvcIdRequest generates requests for GetApiOsdSvcId
func NewGetApiOsdSvcIdRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiOsdSvcIdRequest calls the generic PutApiOsdSvcId builder with application/json body
func NewPutApiOsdSvcIdRequest(server string, svcId string, body PutApiOsdSvcIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiOsdSvcIdRequestWithBody(server, svcId, "application/json", bodyReader)
}

// NewPutApiOsdSvcIdRequestWithBody generates requests for PutApiOsdSvcId with any type of body
func NewPutApiOsdSvcIdRequestWithBody(server string, svcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiOsdSvcIdDestroyRequest generates requests for PostApiOsdSvcIdDestroy
func NewPostApiOsdSvcIdDestroyRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/destroy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiOsdSvcIdDevicesRequest generates requests for GetApiOsdSvcIdDevices
func NewGetApiOsdSvcIdDevicesRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiOsdSvcIdHistogramRequest generates requests for GetApiOsdSvcIdHistogram
func NewGetApiOsdSvcIdHistogramRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/histogram", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiOsdSvcIdMarkRequest calls the generic PutApiOsdSvcIdMark builder with application/json body
func NewPutApiOsdSvcIdMarkRequest(server string, svcId string, body PutApiOsdSvcIdMarkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiOsdSvcIdMarkRequestWithBody(server, svcId, "application/json", bodyReader)
}

// NewPutApiOsdSvcIdMarkRequestWithBody generates requests for PutApiOsdSvcIdMark with any type of body
func NewPutApiOsdSvcIdMarkRequestWithBody(server string, svcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/mark", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiOsdSvcIdPurgeRequest generates requests for PostApiOsdSvcIdPurge
func NewPostApiOsdSvcIdPurgeRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/purge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiOsdSvcIdReweightRequest calls the generic PostApiOsdSvcIdReweight builder with application/json body
func NewPostApiOsdSvcIdReweightRequest(server string, svcId string, body PostApiOsdSvcIdReweightJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiOsdSvcIdReweightRequestWithBody(server, svcId, "application/json", bodyReader)
}

// NewPostApiOsdSvcIdReweightRequestWithBody generates requests for PostApiOsdSvcIdReweight with any type of body
func NewPostApiOsdSvcIdReweightRequestWithBody(server string, svcId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/reweight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiOsdSvcIdScrubRequest calls the generic PostApiOsdSvcIdScrub builder with application/json body
func NewPostApiOsdSvcIdScrubRequest(server string, svcId string, params *PostApiOsdSvcIdScrubParams, body PostApiOsdSvcIdScrubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiOsdSvcIdScrubRequestWithBody(server, svcId, params, "application/json", bodyReader)
}

// NewPostApiOsdSvcIdScrubRequestWithBody generates requests for PostApiOsdSvcIdScrub with any type of body
func NewPostApiOsdSvcIdScrubRequestWithBody(server string, svcId string, params *PostApiOsdSvcIdScrubParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/scrub", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiOsdSvcIdSmartRequest generates requests for GetApiOsdSvcIdSmart
func NewGetApiOsdSvcIdSmartRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/osd/%s/smart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersRequest generates requests for GetApiPerfCounters
func NewGetApiPerfCountersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersMdsServiceIdRequest generates requests for GetApiPerfCountersMdsServiceId
func NewGetApiPerfCountersMdsServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/mds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersMgrServiceIdRequest generates requests for GetApiPerfCountersMgrServiceId
func NewGetApiPerfCountersMgrServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/mgr/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersMonServiceIdRequest generates requests for GetApiPerfCountersMonServiceId
func NewGetApiPerfCountersMonServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/mon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersOsdServiceIdRequest generates requests for GetApiPerfCountersOsdServiceId
func NewGetApiPerfCountersOsdServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/osd/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersRbdMirrorServiceIdRequest generates requests for GetApiPerfCountersRbdMirrorServiceId
func NewGetApiPerfCountersRbdMirrorServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/rbd-mirror/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersRgwServiceIdRequest generates requests for GetApiPerfCountersRgwServiceId
func NewGetApiPerfCountersRgwServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/rgw/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPerfCountersTcmuRunnerServiceIdRequest generates requests for GetApiPerfCountersTcmuRunnerServiceId
func NewGetApiPerfCountersTcmuRunnerServiceIdRequest(server string, serviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/perf_counters/tcmu-runner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPoolRequest generates requests for GetApiPool
func NewGetApiPoolRequest(server string, params *GetApiPoolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Attrs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attrs", runtime.ParamLocationQuery, *params.Attrs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stats", runtime.ParamLocationQuery, *params.Stats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPoolRequest calls the generic PostApiPool builder with application/json body
func NewPostApiPoolRequest(server string, body PostApiPoolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPoolRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPoolRequestWithBody generates requests for PostApiPool with any type of body
func NewPostApiPoolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPoolPoolNameRequest generates requests for DeleteApiPoolPoolName
func NewDeleteApiPoolPoolNameRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPoolPoolNameRequest generates requests for GetApiPoolPoolName
func NewGetApiPoolPoolNameRequest(server string, poolName string, params *GetApiPoolPoolNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Attrs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attrs", runtime.ParamLocationQuery, *params.Attrs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stats", runtime.ParamLocationQuery, *params.Stats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPoolPoolNameRequest calls the generic PutApiPoolPoolName builder with application/json body
func NewPutApiPoolPoolNameRequest(server string, poolName string, body PutApiPoolPoolNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPoolPoolNameRequestWithBody(server, poolName, "application/json", bodyReader)
}

// NewPutApiPoolPoolNameRequestWithBody generates requests for PutApiPoolPoolName with any type of body
func NewPutApiPoolPoolNameRequestWithBody(server string, poolName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPoolPoolNameConfigurationRequest generates requests for GetApiPoolPoolNameConfiguration
func NewGetApiPoolPoolNameConfigurationRequest(server string, poolName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pool_name", runtime.ParamLocationPath, poolName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pool/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPrometheusRequest generates requests for GetApiPrometheus
func NewGetApiPrometheusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPrometheusDataRequest generates requests for GetApiPrometheusData
func NewGetApiPrometheusDataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPrometheusNotificationsRequest generates requests for GetApiPrometheusNotifications
func NewGetApiPrometheusNotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPrometheusRulesRequest generates requests for GetApiPrometheusRules
func NewGetApiPrometheusRulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPrometheusSilenceRequest generates requests for PostApiPrometheusSilence
func NewPostApiPrometheusSilenceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/silence")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiPrometheusSilenceSIdRequest generates requests for DeleteApiPrometheusSilenceSId
func NewDeleteApiPrometheusSilenceSIdRequest(server string, sId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "s_id", runtime.ParamLocationPath, sId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/silence/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPrometheusSilencesRequest generates requests for GetApiPrometheusSilences
func NewGetApiPrometheusSilencesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/prometheus/silences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwBucketRequest generates requests for GetApiRgwBucket
func NewGetApiRgwBucketRequest(server string, params *GetApiRgwBucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stats", runtime.ParamLocationQuery, *params.Stats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uid", runtime.ParamLocationQuery, *params.Uid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRgwBucketRequest calls the generic PostApiRgwBucket builder with application/json body
func NewPostApiRgwBucketRequest(server string, body PostApiRgwBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwBucketRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRgwBucketRequestWithBody generates requests for PostApiRgwBucket with any type of body
func NewPostApiRgwBucketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRgwBucketDeleteEncryptionRequest generates requests for DeleteApiRgwBucketDeleteEncryption
func NewDeleteApiRgwBucketDeleteEncryptionRequest(server string, params *DeleteApiRgwBucketDeleteEncryptionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/deleteEncryption")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bucket_name", runtime.ParamLocationQuery, params.BucketName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwBucketGetEncryptionRequest generates requests for GetApiRgwBucketGetEncryption
func NewGetApiRgwBucketGetEncryptionRequest(server string, params *GetApiRgwBucketGetEncryptionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/getEncryption")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bucket_name", runtime.ParamLocationQuery, params.BucketName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwBucketGetEncryptionConfigRequest generates requests for GetApiRgwBucketGetEncryptionConfig
func NewGetApiRgwBucketGetEncryptionConfigRequest(server string, params *GetApiRgwBucketGetEncryptionConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/getEncryptionConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRgwBucketSetEncryptionConfigRequest calls the generic PutApiRgwBucketSetEncryptionConfig builder with application/json body
func NewPutApiRgwBucketSetEncryptionConfigRequest(server string, body PutApiRgwBucketSetEncryptionConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRgwBucketSetEncryptionConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiRgwBucketSetEncryptionConfigRequestWithBody generates requests for PutApiRgwBucketSetEncryptionConfig with any type of body
func NewPutApiRgwBucketSetEncryptionConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/setEncryptionConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRgwBucketBucketRequest generates requests for DeleteApiRgwBucketBucket
func NewDeleteApiRgwBucketBucketRequest(server string, bucket string, params *DeleteApiRgwBucketBucketParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PurgeObjects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_objects", runtime.ParamLocationQuery, *params.PurgeObjects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwBucketBucketRequest generates requests for GetApiRgwBucketBucket
func NewGetApiRgwBucketBucketRequest(server string, bucket string, params *GetApiRgwBucketBucketParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRgwBucketBucketRequest calls the generic PutApiRgwBucketBucket builder with application/json body
func NewPutApiRgwBucketBucketRequest(server string, bucket string, body PutApiRgwBucketBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRgwBucketBucketRequestWithBody(server, bucket, "application/json", bodyReader)
}

// NewPutApiRgwBucketBucketRequestWithBody generates requests for PutApiRgwBucketBucket with any type of body
func NewPutApiRgwBucketBucketRequestWithBody(server string, bucket string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/bucket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRgwDaemonRequest generates requests for GetApiRgwDaemon
func NewGetApiRgwDaemonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/daemon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwDaemonSvcIdRequest generates requests for GetApiRgwDaemonSvcId
func NewGetApiRgwDaemonSvcIdRequest(server string, svcId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "svc_id", runtime.ParamLocationPath, svcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/daemon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwRolesRequest generates requests for GetApiRgwRoles
func NewGetApiRgwRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRgwRolesRequest calls the generic PostApiRgwRoles builder with application/json body
func NewPostApiRgwRolesRequest(server string, body PostApiRgwRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwRolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRgwRolesRequestWithBody generates requests for PostApiRgwRoles with any type of body
func NewPostApiRgwRolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRgwSiteRequest generates requests for GetApiRgwSite
func NewGetApiRgwSiteRequest(server string, params *GetApiRgwSiteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwUserRequest generates requests for GetApiRgwUser
func NewGetApiRgwUserRequest(server string, params *GetApiRgwUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRgwUserRequest calls the generic PostApiRgwUser builder with application/json body
func NewPostApiRgwUserRequest(server string, body PostApiRgwUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRgwUserRequestWithBody generates requests for PostApiRgwUser with any type of body
func NewPostApiRgwUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRgwUserGetEmailsRequest generates requests for GetApiRgwUserGetEmails
func NewGetApiRgwUserGetEmailsRequest(server string, params *GetApiRgwUserGetEmailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/get_emails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiRgwUserUidRequest generates requests for DeleteApiRgwUserUid
func NewDeleteApiRgwUserUidRequest(server string, uid string, params *DeleteApiRgwUserUidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRgwUserUidRequest generates requests for GetApiRgwUserUid
func NewGetApiRgwUserUidRequest(server string, uid string, params *GetApiRgwUserUidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stats", runtime.ParamLocationQuery, *params.Stats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRgwUserUidRequest calls the generic PutApiRgwUserUid builder with application/json body
func NewPutApiRgwUserUidRequest(server string, uid string, body PutApiRgwUserUidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRgwUserUidRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewPutApiRgwUserUidRequestWithBody generates requests for PutApiRgwUserUid with any type of body
func NewPutApiRgwUserUidRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRgwUserUidCapabilityRequest generates requests for DeleteApiRgwUserUidCapability
func NewDeleteApiRgwUserUidCapabilityRequest(server string, uid string, params *DeleteApiRgwUserUidCapabilityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/capability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perm", runtime.ParamLocationQuery, params.Perm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRgwUserUidCapabilityRequest calls the generic PostApiRgwUserUidCapability builder with application/json body
func NewPostApiRgwUserUidCapabilityRequest(server string, uid string, body PostApiRgwUserUidCapabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwUserUidCapabilityRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewPostApiRgwUserUidCapabilityRequestWithBody generates requests for PostApiRgwUserUidCapability with any type of body
func NewPostApiRgwUserUidCapabilityRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/capability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRgwUserUidKeyRequest generates requests for DeleteApiRgwUserUidKey
func NewDeleteApiRgwUserUidKeyRequest(server string, uid string, params *DeleteApiRgwUserUidKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.KeyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_type", runtime.ParamLocationQuery, *params.KeyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subuser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subuser", runtime.ParamLocationQuery, *params.Subuser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccessKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_key", runtime.ParamLocationQuery, *params.AccessKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRgwUserUidKeyRequest calls the generic PostApiRgwUserUidKey builder with application/json body
func NewPostApiRgwUserUidKeyRequest(server string, uid string, body PostApiRgwUserUidKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwUserUidKeyRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewPostApiRgwUserUidKeyRequestWithBody generates requests for PostApiRgwUserUidKey with any type of body
func NewPostApiRgwUserUidKeyRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRgwUserUidQuotaRequest generates requests for GetApiRgwUserUidQuota
func NewGetApiRgwUserUidQuotaRequest(server string, uid string, params *GetApiRgwUserUidQuotaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRgwUserUidQuotaRequest calls the generic PutApiRgwUserUidQuota builder with application/json body
func NewPutApiRgwUserUidQuotaRequest(server string, uid string, body PutApiRgwUserUidQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRgwUserUidQuotaRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewPutApiRgwUserUidQuotaRequestWithBody generates requests for PutApiRgwUserUidQuota with any type of body
func NewPutApiRgwUserUidQuotaRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiRgwUserUidSubuserRequest calls the generic PostApiRgwUserUidSubuser builder with application/json body
func NewPostApiRgwUserUidSubuserRequest(server string, uid string, body PostApiRgwUserUidSubuserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRgwUserUidSubuserRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewPostApiRgwUserUidSubuserRequestWithBody generates requests for PostApiRgwUserUidSubuser with any type of body
func NewPostApiRgwUserUidSubuserRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/subuser", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRgwUserUidSubuserSubuserRequest generates requests for DeleteApiRgwUserUidSubuserSubuser
func NewDeleteApiRgwUserUidSubuserSubuserRequest(server string, uid string, subuser string, params *DeleteApiRgwUserUidSubuserSubuserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subuser", runtime.ParamLocationPath, subuser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rgw/user/%s/subuser/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PurgeKeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys", runtime.ParamLocationQuery, *params.PurgeKeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_name", runtime.ParamLocationQuery, *params.DaemonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoleRequest generates requests for GetApiRole
func NewGetApiRoleRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoleRequest calls the generic PostApiRole builder with application/json body
func NewPostApiRoleRequest(server string, body PostApiRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRoleRequestWithBody generates requests for PostApiRole with any type of body
func NewPostApiRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRoleNameRequest generates requests for DeleteApiRoleName
func NewDeleteApiRoleNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoleNameRequest generates requests for GetApiRoleName
func NewGetApiRoleNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRoleNameRequest calls the generic PutApiRoleName builder with application/json body
func NewPutApiRoleNameRequest(server string, name string, body PutApiRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRoleNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPutApiRoleNameRequestWithBody generates requests for PutApiRoleName with any type of body
func NewPutApiRoleNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiRoleNameCloneRequest calls the generic PostApiRoleNameClone builder with application/json body
func NewPostApiRoleNameCloneRequest(server string, name string, body PostApiRoleNameCloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoleNameCloneRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPostApiRoleNameCloneRequestWithBody generates requests for PostApiRoleNameClone with any type of body
func NewPostApiRoleNameCloneRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/role/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiServiceRequest generates requests for GetApiService
func NewGetApiServiceRequest(server string, params *GetApiServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_name", runtime.ParamLocationQuery, *params.ServiceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiServiceRequest calls the generic PostApiService builder with application/json body
func NewPostApiServiceRequest(server string, body PostApiServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiServiceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiServiceRequestWithBody generates requests for PostApiService with any type of body
func NewPostApiServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiServiceKnownTypesRequest generates requests for GetApiServiceKnownTypes
func NewGetApiServiceKnownTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service/known_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiServiceServiceNameRequest generates requests for DeleteApiServiceServiceName
func NewDeleteApiServiceServiceNameRequest(server string, serviceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_name", runtime.ParamLocationPath, serviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiServiceServiceNameRequest generates requests for GetApiServiceServiceName
func NewGetApiServiceServiceNameRequest(server string, serviceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_name", runtime.ParamLocationPath, serviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiServiceServiceNameRequest calls the generic PutApiServiceServiceName builder with application/json body
func NewPutApiServiceServiceNameRequest(server string, serviceName string, body PutApiServiceServiceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiServiceServiceNameRequestWithBody(server, serviceName, "application/json", bodyReader)
}

// NewPutApiServiceServiceNameRequestWithBody generates requests for PutApiServiceServiceName with any type of body
func NewPutApiServiceServiceNameRequestWithBody(server string, serviceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_name", runtime.ParamLocationPath, serviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiServiceServiceNameDaemonsRequest generates requests for GetApiServiceServiceNameDaemons
func NewGetApiServiceServiceNameDaemonsRequest(server string, serviceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_name", runtime.ParamLocationPath, serviceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/service/%s/daemons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSettingsRequest generates requests for GetApiSettings
func NewGetApiSettingsRequest(server string, params *GetApiSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiSettingsRequest generates requests for PutApiSettings
func NewPutApiSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiSettingsNameRequest generates requests for DeleteApiSettingsName
func NewDeleteApiSettingsNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSettingsNameRequest generates requests for GetApiSettingsName
func NewGetApiSettingsNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiSettingsNameRequest calls the generic PutApiSettingsName builder with application/json body
func NewPutApiSettingsNameRequest(server string, name string, body PutApiSettingsNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiSettingsNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPutApiSettingsNameRequestWithBody generates requests for PutApiSettingsName with any type of body
func NewPutApiSettingsNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSummaryRequest generates requests for GetApiSummary
func NewGetApiSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTaskRequest generates requests for GetApiTask
func NewGetApiTaskRequest(server string, params *GetApiTaskParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiTelemetryRequest calls the generic PutApiTelemetry builder with application/json body
func NewPutApiTelemetryRequest(server string, body PutApiTelemetryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiTelemetryRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiTelemetryRequestWithBody generates requests for PutApiTelemetry with any type of body
func NewPutApiTelemetryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/telemetry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTelemetryReportRequest generates requests for GetApiTelemetryReport
func NewGetApiTelemetryReportRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/telemetry/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUserRequest generates requests for GetApiUser
func NewGetApiUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUserRequest calls the generic PostApiUser builder with application/json body
func NewPostApiUserRequest(server string, body PostApiUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiUserRequestWithBody generates requests for PostApiUser with any type of body
func NewPostApiUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiUserValidatePasswordRequest calls the generic PostApiUserValidatePassword builder with application/json body
func NewPostApiUserValidatePasswordRequest(server string, body PostApiUserValidatePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUserValidatePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiUserValidatePasswordRequestWithBody generates requests for PostApiUserValidatePassword with any type of body
func NewPostApiUserValidatePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/validate_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiUserUsernameRequest generates requests for DeleteApiUserUsername
func NewDeleteApiUserUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUserUsernameRequest generates requests for GetApiUserUsername
func NewGetApiUserUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiUserUsernameRequest calls the generic PutApiUserUsername builder with application/json body
func NewPutApiUserUsernameRequest(server string, username string, body PutApiUserUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiUserUsernameRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPutApiUserUsernameRequestWithBody generates requests for PutApiUserUsername with any type of body
func NewPutApiUserUsernameRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiUserUsernameChangePasswordRequest calls the generic PostApiUserUsernameChangePassword builder with application/json body
func NewPostApiUserUsernameChangePasswordRequest(server string, username string, body PostApiUserUsernameChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUserUsernameChangePasswordRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPostApiUserUsernameChangePasswordRequestWithBody generates requests for PostApiUserUsernameChangePassword with any type of body
func NewPostApiUserUsernameChangePasswordRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/change_password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAuthWithBodyWithResponse request with any body
	PostApiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error)

	PostApiAuthWithResponse(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error)

	// PostApiAuthCheckWithBodyWithResponse request with any body
	PostApiAuthCheckWithBodyWithResponse(ctx context.Context, params *PostApiAuthCheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthCheckResponse, error)

	PostApiAuthCheckWithResponse(ctx context.Context, params *PostApiAuthCheckParams, body PostApiAuthCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthCheckResponse, error)

	// PostApiAuthLogoutWithResponse request
	PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	// GetApiBlockImageWithResponse request
	GetApiBlockImageWithResponse(ctx context.Context, params *GetApiBlockImageParams, reqEditors ...RequestEditorFn) (*GetApiBlockImageResponse, error)

	// PostApiBlockImageWithBodyWithResponse request with any body
	PostApiBlockImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageResponse, error)

	PostApiBlockImageWithResponse(ctx context.Context, body PostApiBlockImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageResponse, error)

	// GetApiBlockImageCloneFormatVersionWithResponse request
	GetApiBlockImageCloneFormatVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockImageCloneFormatVersionResponse, error)

	// GetApiBlockImageDefaultFeaturesWithResponse request
	GetApiBlockImageDefaultFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockImageDefaultFeaturesResponse, error)

	// GetApiBlockImageTrashWithResponse request
	GetApiBlockImageTrashWithResponse(ctx context.Context, params *GetApiBlockImageTrashParams, reqEditors ...RequestEditorFn) (*GetApiBlockImageTrashResponse, error)

	// PostApiBlockImageTrashPurgeWithBodyWithResponse request with any body
	PostApiBlockImageTrashPurgeWithBodyWithResponse(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashPurgeResponse, error)

	PostApiBlockImageTrashPurgeWithResponse(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, body PostApiBlockImageTrashPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashPurgeResponse, error)

	// DeleteApiBlockImageTrashImageIdSpecWithResponse request
	DeleteApiBlockImageTrashImageIdSpecWithResponse(ctx context.Context, imageIdSpec string, params *DeleteApiBlockImageTrashImageIdSpecParams, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageTrashImageIdSpecResponse, error)

	// PostApiBlockImageTrashImageIdSpecRestoreWithBodyWithResponse request with any body
	PostApiBlockImageTrashImageIdSpecRestoreWithBodyWithResponse(ctx context.Context, imageIdSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashImageIdSpecRestoreResponse, error)

	PostApiBlockImageTrashImageIdSpecRestoreWithResponse(ctx context.Context, imageIdSpec string, body PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashImageIdSpecRestoreResponse, error)

	// DeleteApiBlockImageImageSpecWithResponse request
	DeleteApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageImageSpecResponse, error)

	// GetApiBlockImageImageSpecWithResponse request
	GetApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*GetApiBlockImageImageSpecResponse, error)

	// PutApiBlockImageImageSpecWithBodyWithResponse request with any body
	PutApiBlockImageImageSpecWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecResponse, error)

	PutApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, body PutApiBlockImageImageSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecResponse, error)

	// PostApiBlockImageImageSpecCopyWithBodyWithResponse request with any body
	PostApiBlockImageImageSpecCopyWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecCopyResponse, error)

	PostApiBlockImageImageSpecCopyWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecCopyResponse, error)

	// PostApiBlockImageImageSpecFlattenWithResponse request
	PostApiBlockImageImageSpecFlattenWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecFlattenResponse, error)

	// PostApiBlockImageImageSpecMoveTrashWithBodyWithResponse request with any body
	PostApiBlockImageImageSpecMoveTrashWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecMoveTrashResponse, error)

	PostApiBlockImageImageSpecMoveTrashWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecMoveTrashJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecMoveTrashResponse, error)

	// PostApiBlockImageImageSpecSnapWithBodyWithResponse request with any body
	PostApiBlockImageImageSpecSnapWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapResponse, error)

	PostApiBlockImageImageSpecSnapWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecSnapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapResponse, error)

	// DeleteApiBlockImageImageSpecSnapSnapshotNameWithResponse request
	DeleteApiBlockImageImageSpecSnapSnapshotNameWithResponse(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageImageSpecSnapSnapshotNameResponse, error)

	// PutApiBlockImageImageSpecSnapSnapshotNameWithBodyWithResponse request with any body
	PutApiBlockImageImageSpecSnapSnapshotNameWithBodyWithResponse(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecSnapSnapshotNameResponse, error)

	PutApiBlockImageImageSpecSnapSnapshotNameWithResponse(ctx context.Context, imageSpec string, snapshotName string, body PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecSnapSnapshotNameResponse, error)

	// PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBodyWithResponse request with any body
	PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBodyWithResponse(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse, error)

	PostApiBlockImageImageSpecSnapSnapshotNameCloneWithResponse(ctx context.Context, imageSpec string, snapshotName string, body PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse, error)

	// PostApiBlockImageImageSpecSnapSnapshotNameRollbackWithResponse request
	PostApiBlockImageImageSpecSnapSnapshotNameRollbackWithResponse(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse, error)

	// GetApiBlockMirroringPoolPoolNameWithResponse request
	GetApiBlockMirroringPoolPoolNameWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNameResponse, error)

	// PutApiBlockMirroringPoolPoolNameWithBodyWithResponse request with any body
	PutApiBlockMirroringPoolPoolNameWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNameResponse, error)

	PutApiBlockMirroringPoolPoolNameWithResponse(ctx context.Context, poolName string, body PutApiBlockMirroringPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNameResponse, error)

	// PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBodyWithResponse request with any body
	PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse, error)

	PostApiBlockMirroringPoolPoolNameBootstrapPeerWithResponse(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse, error)

	// PostApiBlockMirroringPoolPoolNameBootstrapTokenWithResponse request
	PostApiBlockMirroringPoolPoolNameBootstrapTokenWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse, error)

	// GetApiBlockMirroringPoolPoolNamePeerWithResponse request
	GetApiBlockMirroringPoolPoolNamePeerWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNamePeerResponse, error)

	// PostApiBlockMirroringPoolPoolNamePeerWithBodyWithResponse request with any body
	PostApiBlockMirroringPoolPoolNamePeerWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNamePeerResponse, error)

	PostApiBlockMirroringPoolPoolNamePeerWithResponse(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNamePeerResponse, error)

	// DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse request
	DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error)

	// GetApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse request
	GetApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error)

	// PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBodyWithResponse request with any body
	PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBodyWithResponse(ctx context.Context, poolName string, peerUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error)

	PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, body PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error)

	// GetApiBlockMirroringSiteNameWithResponse request
	GetApiBlockMirroringSiteNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringSiteNameResponse, error)

	// PutApiBlockMirroringSiteNameWithBodyWithResponse request with any body
	PutApiBlockMirroringSiteNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringSiteNameResponse, error)

	PutApiBlockMirroringSiteNameWithResponse(ctx context.Context, body PutApiBlockMirroringSiteNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringSiteNameResponse, error)

	// GetApiBlockMirroringSummaryWithResponse request
	GetApiBlockMirroringSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringSummaryResponse, error)

	// GetApiBlockPoolPoolNameNamespaceWithResponse request
	GetApiBlockPoolPoolNameNamespaceWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockPoolPoolNameNamespaceResponse, error)

	// PostApiBlockPoolPoolNameNamespaceWithBodyWithResponse request with any body
	PostApiBlockPoolPoolNameNamespaceWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockPoolPoolNameNamespaceResponse, error)

	PostApiBlockPoolPoolNameNamespaceWithResponse(ctx context.Context, poolName string, body PostApiBlockPoolPoolNameNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockPoolPoolNameNamespaceResponse, error)

	// DeleteApiBlockPoolPoolNameNamespaceNamespaceWithResponse request
	DeleteApiBlockPoolPoolNameNamespaceNamespaceWithResponse(ctx context.Context, poolName string, namespace string, reqEditors ...RequestEditorFn) (*DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse, error)

	// GetApiCephfsWithResponse request
	GetApiCephfsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCephfsResponse, error)

	// GetApiCephfsFsIdWithResponse request
	GetApiCephfsFsIdWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdResponse, error)

	// DeleteApiCephfsFsIdClientClientIdWithResponse request
	DeleteApiCephfsFsIdClientClientIdWithResponse(ctx context.Context, fsId string, clientId string, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdClientClientIdResponse, error)

	// GetApiCephfsFsIdClientsWithResponse request
	GetApiCephfsFsIdClientsWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdClientsResponse, error)

	// GetApiCephfsFsIdGetRootDirectoryWithResponse request
	GetApiCephfsFsIdGetRootDirectoryWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdGetRootDirectoryResponse, error)

	// GetApiCephfsFsIdLsDirWithResponse request
	GetApiCephfsFsIdLsDirWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdLsDirParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdLsDirResponse, error)

	// GetApiCephfsFsIdMdsCountersWithResponse request
	GetApiCephfsFsIdMdsCountersWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdMdsCountersParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdMdsCountersResponse, error)

	// GetApiCephfsFsIdQuotaWithResponse request
	GetApiCephfsFsIdQuotaWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdQuotaParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdQuotaResponse, error)

	// PutApiCephfsFsIdQuotaWithBodyWithResponse request with any body
	PutApiCephfsFsIdQuotaWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiCephfsFsIdQuotaResponse, error)

	PutApiCephfsFsIdQuotaWithResponse(ctx context.Context, fsId string, body PutApiCephfsFsIdQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiCephfsFsIdQuotaResponse, error)

	// DeleteApiCephfsFsIdSnapshotWithResponse request
	DeleteApiCephfsFsIdSnapshotWithResponse(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdSnapshotParams, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdSnapshotResponse, error)

	// PostApiCephfsFsIdSnapshotWithBodyWithResponse request with any body
	PostApiCephfsFsIdSnapshotWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdSnapshotResponse, error)

	PostApiCephfsFsIdSnapshotWithResponse(ctx context.Context, fsId string, body PostApiCephfsFsIdSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdSnapshotResponse, error)

	// DeleteApiCephfsFsIdTreeWithResponse request
	DeleteApiCephfsFsIdTreeWithResponse(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdTreeParams, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdTreeResponse, error)

	// PostApiCephfsFsIdTreeWithBodyWithResponse request with any body
	PostApiCephfsFsIdTreeWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdTreeResponse, error)

	PostApiCephfsFsIdTreeWithResponse(ctx context.Context, fsId string, body PostApiCephfsFsIdTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdTreeResponse, error)

	// GetApiClusterWithResponse request
	GetApiClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterResponse, error)

	// PutApiClusterWithBodyWithResponse request with any body
	PutApiClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterResponse, error)

	PutApiClusterWithResponse(ctx context.Context, body PutApiClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterResponse, error)

	// GetApiClusterUserWithResponse request
	GetApiClusterUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterUserResponse, error)

	// PostApiClusterUserWithBodyWithResponse request with any body
	PostApiClusterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterUserResponse, error)

	PostApiClusterUserWithResponse(ctx context.Context, body PostApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterUserResponse, error)

	// PutApiClusterUserWithBodyWithResponse request with any body
	PutApiClusterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterUserResponse, error)

	PutApiClusterUserWithResponse(ctx context.Context, body PutApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterUserResponse, error)

	// PostApiClusterUserExportWithBodyWithResponse request with any body
	PostApiClusterUserExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterUserExportResponse, error)

	PostApiClusterUserExportWithResponse(ctx context.Context, body PostApiClusterUserExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterUserExportResponse, error)

	// DeleteApiClusterUserUserEntityWithResponse request
	DeleteApiClusterUserUserEntityWithResponse(ctx context.Context, userEntity string, reqEditors ...RequestEditorFn) (*DeleteApiClusterUserUserEntityResponse, error)

	// GetApiClusterConfWithResponse request
	GetApiClusterConfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterConfResponse, error)

	// PostApiClusterConfWithBodyWithResponse request with any body
	PostApiClusterConfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterConfResponse, error)

	PostApiClusterConfWithResponse(ctx context.Context, body PostApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterConfResponse, error)

	// PutApiClusterConfWithBodyWithResponse request with any body
	PutApiClusterConfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterConfResponse, error)

	PutApiClusterConfWithResponse(ctx context.Context, body PutApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterConfResponse, error)

	// GetApiClusterConfFilterWithResponse request
	GetApiClusterConfFilterWithResponse(ctx context.Context, params *GetApiClusterConfFilterParams, reqEditors ...RequestEditorFn) (*GetApiClusterConfFilterResponse, error)

	// DeleteApiClusterConfNameWithResponse request
	DeleteApiClusterConfNameWithResponse(ctx context.Context, name string, params *DeleteApiClusterConfNameParams, reqEditors ...RequestEditorFn) (*DeleteApiClusterConfNameResponse, error)

	// GetApiClusterConfNameWithResponse request
	GetApiClusterConfNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiClusterConfNameResponse, error)

	// GetApiCrushRuleWithResponse request
	GetApiCrushRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCrushRuleResponse, error)

	// PostApiCrushRuleWithBodyWithResponse request with any body
	PostApiCrushRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCrushRuleResponse, error)

	PostApiCrushRuleWithResponse(ctx context.Context, body PostApiCrushRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCrushRuleResponse, error)

	// DeleteApiCrushRuleNameWithResponse request
	DeleteApiCrushRuleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiCrushRuleNameResponse, error)

	// GetApiCrushRuleNameWithResponse request
	GetApiCrushRuleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiCrushRuleNameResponse, error)

	// PutApiDaemonDaemonNameWithBodyWithResponse request with any body
	PutApiDaemonDaemonNameWithBodyWithResponse(ctx context.Context, daemonName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDaemonDaemonNameResponse, error)

	PutApiDaemonDaemonNameWithResponse(ctx context.Context, daemonName string, body PutApiDaemonDaemonNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDaemonDaemonNameResponse, error)

	// GetApiErasureCodeProfileWithResponse request
	GetApiErasureCodeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiErasureCodeProfileResponse, error)

	// PostApiErasureCodeProfileWithBodyWithResponse request with any body
	PostApiErasureCodeProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiErasureCodeProfileResponse, error)

	PostApiErasureCodeProfileWithResponse(ctx context.Context, body PostApiErasureCodeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiErasureCodeProfileResponse, error)

	// DeleteApiErasureCodeProfileNameWithResponse request
	DeleteApiErasureCodeProfileNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiErasureCodeProfileNameResponse, error)

	// GetApiErasureCodeProfileNameWithResponse request
	GetApiErasureCodeProfileNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiErasureCodeProfileNameResponse, error)

	// GetApiFeatureTogglesWithResponse request
	GetApiFeatureTogglesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeatureTogglesResponse, error)

	// GetApiFeedbackWithResponse request
	GetApiFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackResponse, error)

	// PostApiFeedbackWithBodyWithResponse request with any body
	PostApiFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error)

	PostApiFeedbackWithResponse(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error)

	// DeleteApiFeedbackApiKeyWithResponse request
	DeleteApiFeedbackApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiFeedbackApiKeyResponse, error)

	// GetApiFeedbackApiKeyWithResponse request
	GetApiFeedbackApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackApiKeyResponse, error)

	// PostApiFeedbackApiKeyWithBodyWithResponse request with any body
	PostApiFeedbackApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackApiKeyResponse, error)

	PostApiFeedbackApiKeyWithResponse(ctx context.Context, body PostApiFeedbackApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackApiKeyResponse, error)

	// PostApiGrafanaDashboardsWithResponse request
	PostApiGrafanaDashboardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiGrafanaDashboardsResponse, error)

	// GetApiGrafanaUrlWithResponse request
	GetApiGrafanaUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGrafanaUrlResponse, error)

	// GetApiGrafanaValidationParamsWithResponse request
	GetApiGrafanaValidationParamsWithResponse(ctx context.Context, params string, reqEditors ...RequestEditorFn) (*GetApiGrafanaValidationParamsResponse, error)

	// GetApiHealthFullWithResponse request
	GetApiHealthFullWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthFullResponse, error)

	// GetApiHealthGetClusterCapacityWithResponse request
	GetApiHealthGetClusterCapacityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthGetClusterCapacityResponse, error)

	// GetApiHealthGetClusterFsidWithResponse request
	GetApiHealthGetClusterFsidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthGetClusterFsidResponse, error)

	// GetApiHealthMinimalWithResponse request
	GetApiHealthMinimalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthMinimalResponse, error)

	// GetApiHostWithResponse request
	GetApiHostWithResponse(ctx context.Context, params *GetApiHostParams, reqEditors ...RequestEditorFn) (*GetApiHostResponse, error)

	// PostApiHostWithBodyWithResponse request with any body
	PostApiHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHostResponse, error)

	PostApiHostWithResponse(ctx context.Context, body PostApiHostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHostResponse, error)

	// DeleteApiHostHostnameWithResponse request
	DeleteApiHostHostnameWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*DeleteApiHostHostnameResponse, error)

	// GetApiHostHostnameWithResponse request
	GetApiHostHostnameWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameResponse, error)

	// PutApiHostHostnameWithBodyWithResponse request with any body
	PutApiHostHostnameWithBodyWithResponse(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHostHostnameResponse, error)

	PutApiHostHostnameWithResponse(ctx context.Context, hostname string, body PutApiHostHostnameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHostHostnameResponse, error)

	// GetApiHostHostnameDaemonsWithResponse request
	GetApiHostHostnameDaemonsWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameDaemonsResponse, error)

	// GetApiHostHostnameDevicesWithResponse request
	GetApiHostHostnameDevicesWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameDevicesResponse, error)

	// PostApiHostHostnameIdentifyDeviceWithBodyWithResponse request with any body
	PostApiHostHostnameIdentifyDeviceWithBodyWithResponse(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHostHostnameIdentifyDeviceResponse, error)

	PostApiHostHostnameIdentifyDeviceWithResponse(ctx context.Context, hostname string, body PostApiHostHostnameIdentifyDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHostHostnameIdentifyDeviceResponse, error)

	// GetApiHostHostnameInventoryWithResponse request
	GetApiHostHostnameInventoryWithResponse(ctx context.Context, hostname string, params *GetApiHostHostnameInventoryParams, reqEditors ...RequestEditorFn) (*GetApiHostHostnameInventoryResponse, error)

	// GetApiHostHostnameSmartWithResponse request
	GetApiHostHostnameSmartWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameSmartResponse, error)

	// GetApiIscsiDiscoveryauthWithResponse request
	GetApiIscsiDiscoveryauthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIscsiDiscoveryauthResponse, error)

	// PutApiIscsiDiscoveryauthWithBodyWithResponse request with any body
	PutApiIscsiDiscoveryauthWithBodyWithResponse(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiIscsiDiscoveryauthResponse, error)

	PutApiIscsiDiscoveryauthWithResponse(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, body PutApiIscsiDiscoveryauthJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiIscsiDiscoveryauthResponse, error)

	// GetApiIscsiTargetWithResponse request
	GetApiIscsiTargetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIscsiTargetResponse, error)

	// PostApiIscsiTargetWithBodyWithResponse request with any body
	PostApiIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiIscsiTargetResponse, error)

	PostApiIscsiTargetWithResponse(ctx context.Context, body PostApiIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiIscsiTargetResponse, error)

	// DeleteApiIscsiTargetTargetIqnWithResponse request
	DeleteApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*DeleteApiIscsiTargetTargetIqnResponse, error)

	// GetApiIscsiTargetTargetIqnWithResponse request
	GetApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*GetApiIscsiTargetTargetIqnResponse, error)

	// PutApiIscsiTargetTargetIqnWithBodyWithResponse request with any body
	PutApiIscsiTargetTargetIqnWithBodyWithResponse(ctx context.Context, targetIqn string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiIscsiTargetTargetIqnResponse, error)

	PutApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, body PutApiIscsiTargetTargetIqnJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiIscsiTargetTargetIqnResponse, error)

	// GetApiLogsAllWithResponse request
	GetApiLogsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLogsAllResponse, error)

	// GetApiMgrModuleWithResponse request
	GetApiMgrModuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMgrModuleResponse, error)

	// GetApiMgrModuleModuleNameWithResponse request
	GetApiMgrModuleModuleNameWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*GetApiMgrModuleModuleNameResponse, error)

	// PutApiMgrModuleModuleNameWithBodyWithResponse request with any body
	PutApiMgrModuleModuleNameWithBodyWithResponse(ctx context.Context, moduleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiMgrModuleModuleNameResponse, error)

	PutApiMgrModuleModuleNameWithResponse(ctx context.Context, moduleName string, body PutApiMgrModuleModuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMgrModuleModuleNameResponse, error)

	// PostApiMgrModuleModuleNameDisableWithResponse request
	PostApiMgrModuleModuleNameDisableWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*PostApiMgrModuleModuleNameDisableResponse, error)

	// PostApiMgrModuleModuleNameEnableWithResponse request
	PostApiMgrModuleModuleNameEnableWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*PostApiMgrModuleModuleNameEnableResponse, error)

	// GetApiMgrModuleModuleNameOptionsWithResponse request
	GetApiMgrModuleModuleNameOptionsWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*GetApiMgrModuleModuleNameOptionsResponse, error)

	// GetApiMonitorWithResponse request
	GetApiMonitorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMonitorResponse, error)

	// GetApiNfsGaneshaClusterWithResponse request
	GetApiNfsGaneshaClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaClusterResponse, error)

	// GetApiNfsGaneshaExportWithResponse request
	GetApiNfsGaneshaExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaExportResponse, error)

	// PostApiNfsGaneshaExportWithBodyWithResponse request with any body
	PostApiNfsGaneshaExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNfsGaneshaExportResponse, error)

	PostApiNfsGaneshaExportWithResponse(ctx context.Context, body PostApiNfsGaneshaExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNfsGaneshaExportResponse, error)

	// DeleteApiNfsGaneshaExportClusterIdExportIdWithResponse request
	DeleteApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId int, reqEditors ...RequestEditorFn) (*DeleteApiNfsGaneshaExportClusterIdExportIdResponse, error)

	// GetApiNfsGaneshaExportClusterIdExportIdWithResponse request
	GetApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId string, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaExportClusterIdExportIdResponse, error)

	// PutApiNfsGaneshaExportClusterIdExportIdWithBodyWithResponse request with any body
	PutApiNfsGaneshaExportClusterIdExportIdWithBodyWithResponse(ctx context.Context, clusterId string, exportId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiNfsGaneshaExportClusterIdExportIdResponse, error)

	PutApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId int, body PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiNfsGaneshaExportClusterIdExportIdResponse, error)

	// GetApiOsdWithResponse request
	GetApiOsdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdResponse, error)

	// PostApiOsdWithBodyWithResponse request with any body
	PostApiOsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdResponse, error)

	PostApiOsdWithResponse(ctx context.Context, body PostApiOsdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdResponse, error)

	// GetApiOsdFlagsWithResponse request
	GetApiOsdFlagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdFlagsResponse, error)

	// PutApiOsdFlagsWithBodyWithResponse request with any body
	PutApiOsdFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsResponse, error)

	PutApiOsdFlagsWithResponse(ctx context.Context, body PutApiOsdFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsResponse, error)

	// GetApiOsdFlagsIndividualWithResponse request
	GetApiOsdFlagsIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdFlagsIndividualResponse, error)

	// PutApiOsdFlagsIndividualWithBodyWithResponse request with any body
	PutApiOsdFlagsIndividualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsIndividualResponse, error)

	PutApiOsdFlagsIndividualWithResponse(ctx context.Context, body PutApiOsdFlagsIndividualJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsIndividualResponse, error)

	// GetApiOsdSafeToDeleteWithResponse request
	GetApiOsdSafeToDeleteWithResponse(ctx context.Context, params *GetApiOsdSafeToDeleteParams, reqEditors ...RequestEditorFn) (*GetApiOsdSafeToDeleteResponse, error)

	// GetApiOsdSafeToDestroyWithResponse request
	GetApiOsdSafeToDestroyWithResponse(ctx context.Context, params *GetApiOsdSafeToDestroyParams, reqEditors ...RequestEditorFn) (*GetApiOsdSafeToDestroyResponse, error)

	// GetApiOsdSettingsWithResponse request
	GetApiOsdSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdSettingsResponse, error)

	// DeleteApiOsdSvcIdWithResponse request
	DeleteApiOsdSvcIdWithResponse(ctx context.Context, svcId string, params *DeleteApiOsdSvcIdParams, reqEditors ...RequestEditorFn) (*DeleteApiOsdSvcIdResponse, error)

	// GetApiOsdSvcIdWithResponse request
	GetApiOsdSvcIdWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdResponse, error)

	// PutApiOsdSvcIdWithBodyWithResponse request with any body
	PutApiOsdSvcIdWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdResponse, error)

	PutApiOsdSvcIdWithResponse(ctx context.Context, svcId string, body PutApiOsdSvcIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdResponse, error)

	// PostApiOsdSvcIdDestroyWithResponse request
	PostApiOsdSvcIdDestroyWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdDestroyResponse, error)

	// GetApiOsdSvcIdDevicesWithResponse request
	GetApiOsdSvcIdDevicesWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdDevicesResponse, error)

	// GetApiOsdSvcIdHistogramWithResponse request
	GetApiOsdSvcIdHistogramWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdHistogramResponse, error)

	// PutApiOsdSvcIdMarkWithBodyWithResponse request with any body
	PutApiOsdSvcIdMarkWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdMarkResponse, error)

	PutApiOsdSvcIdMarkWithResponse(ctx context.Context, svcId string, body PutApiOsdSvcIdMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdMarkResponse, error)

	// PostApiOsdSvcIdPurgeWithResponse request
	PostApiOsdSvcIdPurgeWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdPurgeResponse, error)

	// PostApiOsdSvcIdReweightWithBodyWithResponse request with any body
	PostApiOsdSvcIdReweightWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdReweightResponse, error)

	PostApiOsdSvcIdReweightWithResponse(ctx context.Context, svcId string, body PostApiOsdSvcIdReweightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdReweightResponse, error)

	// PostApiOsdSvcIdScrubWithBodyWithResponse request with any body
	PostApiOsdSvcIdScrubWithBodyWithResponse(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdScrubResponse, error)

	PostApiOsdSvcIdScrubWithResponse(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, body PostApiOsdSvcIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdScrubResponse, error)

	// GetApiOsdSvcIdSmartWithResponse request
	GetApiOsdSvcIdSmartWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdSmartResponse, error)

	// GetApiPerfCountersWithResponse request
	GetApiPerfCountersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPerfCountersResponse, error)

	// GetApiPerfCountersMdsServiceIdWithResponse request
	GetApiPerfCountersMdsServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMdsServiceIdResponse, error)

	// GetApiPerfCountersMgrServiceIdWithResponse request
	GetApiPerfCountersMgrServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMgrServiceIdResponse, error)

	// GetApiPerfCountersMonServiceIdWithResponse request
	GetApiPerfCountersMonServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMonServiceIdResponse, error)

	// GetApiPerfCountersOsdServiceIdWithResponse request
	GetApiPerfCountersOsdServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersOsdServiceIdResponse, error)

	// GetApiPerfCountersRbdMirrorServiceIdWithResponse request
	GetApiPerfCountersRbdMirrorServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersRbdMirrorServiceIdResponse, error)

	// GetApiPerfCountersRgwServiceIdWithResponse request
	GetApiPerfCountersRgwServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersRgwServiceIdResponse, error)

	// GetApiPerfCountersTcmuRunnerServiceIdWithResponse request
	GetApiPerfCountersTcmuRunnerServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersTcmuRunnerServiceIdResponse, error)

	// GetApiPoolWithResponse request
	GetApiPoolWithResponse(ctx context.Context, params *GetApiPoolParams, reqEditors ...RequestEditorFn) (*GetApiPoolResponse, error)

	// PostApiPoolWithBodyWithResponse request with any body
	PostApiPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoolResponse, error)

	PostApiPoolWithResponse(ctx context.Context, body PostApiPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoolResponse, error)

	// DeleteApiPoolPoolNameWithResponse request
	DeleteApiPoolPoolNameWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*DeleteApiPoolPoolNameResponse, error)

	// GetApiPoolPoolNameWithResponse request
	GetApiPoolPoolNameWithResponse(ctx context.Context, poolName string, params *GetApiPoolPoolNameParams, reqEditors ...RequestEditorFn) (*GetApiPoolPoolNameResponse, error)

	// PutApiPoolPoolNameWithBodyWithResponse request with any body
	PutApiPoolPoolNameWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoolPoolNameResponse, error)

	PutApiPoolPoolNameWithResponse(ctx context.Context, poolName string, body PutApiPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoolPoolNameResponse, error)

	// GetApiPoolPoolNameConfigurationWithResponse request
	GetApiPoolPoolNameConfigurationWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiPoolPoolNameConfigurationResponse, error)

	// GetApiPrometheusWithResponse request
	GetApiPrometheusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusResponse, error)

	// GetApiPrometheusDataWithResponse request
	GetApiPrometheusDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusDataResponse, error)

	// GetApiPrometheusNotificationsWithResponse request
	GetApiPrometheusNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusNotificationsResponse, error)

	// GetApiPrometheusRulesWithResponse request
	GetApiPrometheusRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusRulesResponse, error)

	// PostApiPrometheusSilenceWithResponse request
	PostApiPrometheusSilenceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiPrometheusSilenceResponse, error)

	// DeleteApiPrometheusSilenceSIdWithResponse request
	DeleteApiPrometheusSilenceSIdWithResponse(ctx context.Context, sId string, reqEditors ...RequestEditorFn) (*DeleteApiPrometheusSilenceSIdResponse, error)

	// GetApiPrometheusSilencesWithResponse request
	GetApiPrometheusSilencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusSilencesResponse, error)

	// GetApiRgwBucketWithResponse request
	GetApiRgwBucketWithResponse(ctx context.Context, params *GetApiRgwBucketParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketResponse, error)

	// PostApiRgwBucketWithBodyWithResponse request with any body
	PostApiRgwBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwBucketResponse, error)

	PostApiRgwBucketWithResponse(ctx context.Context, body PostApiRgwBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwBucketResponse, error)

	// DeleteApiRgwBucketDeleteEncryptionWithResponse request
	DeleteApiRgwBucketDeleteEncryptionWithResponse(ctx context.Context, params *DeleteApiRgwBucketDeleteEncryptionParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwBucketDeleteEncryptionResponse, error)

	// GetApiRgwBucketGetEncryptionWithResponse request
	GetApiRgwBucketGetEncryptionWithResponse(ctx context.Context, params *GetApiRgwBucketGetEncryptionParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketGetEncryptionResponse, error)

	// GetApiRgwBucketGetEncryptionConfigWithResponse request
	GetApiRgwBucketGetEncryptionConfigWithResponse(ctx context.Context, params *GetApiRgwBucketGetEncryptionConfigParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketGetEncryptionConfigResponse, error)

	// PutApiRgwBucketSetEncryptionConfigWithBodyWithResponse request with any body
	PutApiRgwBucketSetEncryptionConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwBucketSetEncryptionConfigResponse, error)

	PutApiRgwBucketSetEncryptionConfigWithResponse(ctx context.Context, body PutApiRgwBucketSetEncryptionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwBucketSetEncryptionConfigResponse, error)

	// DeleteApiRgwBucketBucketWithResponse request
	DeleteApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, params *DeleteApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwBucketBucketResponse, error)

	// GetApiRgwBucketBucketWithResponse request
	GetApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, params *GetApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketBucketResponse, error)

	// PutApiRgwBucketBucketWithBodyWithResponse request with any body
	PutApiRgwBucketBucketWithBodyWithResponse(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwBucketBucketResponse, error)

	PutApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, body PutApiRgwBucketBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwBucketBucketResponse, error)

	// GetApiRgwDaemonWithResponse request
	GetApiRgwDaemonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRgwDaemonResponse, error)

	// GetApiRgwDaemonSvcIdWithResponse request
	GetApiRgwDaemonSvcIdWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiRgwDaemonSvcIdResponse, error)

	// GetApiRgwRolesWithResponse request
	GetApiRgwRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRgwRolesResponse, error)

	// PostApiRgwRolesWithBodyWithResponse request with any body
	PostApiRgwRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwRolesResponse, error)

	PostApiRgwRolesWithResponse(ctx context.Context, body PostApiRgwRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwRolesResponse, error)

	// GetApiRgwSiteWithResponse request
	GetApiRgwSiteWithResponse(ctx context.Context, params *GetApiRgwSiteParams, reqEditors ...RequestEditorFn) (*GetApiRgwSiteResponse, error)

	// GetApiRgwUserWithResponse request
	GetApiRgwUserWithResponse(ctx context.Context, params *GetApiRgwUserParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserResponse, error)

	// PostApiRgwUserWithBodyWithResponse request with any body
	PostApiRgwUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserResponse, error)

	PostApiRgwUserWithResponse(ctx context.Context, body PostApiRgwUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserResponse, error)

	// GetApiRgwUserGetEmailsWithResponse request
	GetApiRgwUserGetEmailsWithResponse(ctx context.Context, params *GetApiRgwUserGetEmailsParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserGetEmailsResponse, error)

	// DeleteApiRgwUserUidWithResponse request
	DeleteApiRgwUserUidWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidResponse, error)

	// GetApiRgwUserUidWithResponse request
	GetApiRgwUserUidWithResponse(ctx context.Context, uid string, params *GetApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserUidResponse, error)

	// PutApiRgwUserUidWithBodyWithResponse request with any body
	PutApiRgwUserUidWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidResponse, error)

	PutApiRgwUserUidWithResponse(ctx context.Context, uid string, body PutApiRgwUserUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidResponse, error)

	// DeleteApiRgwUserUidCapabilityWithResponse request
	DeleteApiRgwUserUidCapabilityWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidCapabilityParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidCapabilityResponse, error)

	// PostApiRgwUserUidCapabilityWithBodyWithResponse request with any body
	PostApiRgwUserUidCapabilityWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidCapabilityResponse, error)

	PostApiRgwUserUidCapabilityWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidCapabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidCapabilityResponse, error)

	// DeleteApiRgwUserUidKeyWithResponse request
	DeleteApiRgwUserUidKeyWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidKeyParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidKeyResponse, error)

	// PostApiRgwUserUidKeyWithBodyWithResponse request with any body
	PostApiRgwUserUidKeyWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidKeyResponse, error)

	PostApiRgwUserUidKeyWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidKeyResponse, error)

	// GetApiRgwUserUidQuotaWithResponse request
	GetApiRgwUserUidQuotaWithResponse(ctx context.Context, uid string, params *GetApiRgwUserUidQuotaParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserUidQuotaResponse, error)

	// PutApiRgwUserUidQuotaWithBodyWithResponse request with any body
	PutApiRgwUserUidQuotaWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidQuotaResponse, error)

	PutApiRgwUserUidQuotaWithResponse(ctx context.Context, uid string, body PutApiRgwUserUidQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidQuotaResponse, error)

	// PostApiRgwUserUidSubuserWithBodyWithResponse request with any body
	PostApiRgwUserUidSubuserWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidSubuserResponse, error)

	PostApiRgwUserUidSubuserWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidSubuserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidSubuserResponse, error)

	// DeleteApiRgwUserUidSubuserSubuserWithResponse request
	DeleteApiRgwUserUidSubuserSubuserWithResponse(ctx context.Context, uid string, subuser string, params *DeleteApiRgwUserUidSubuserSubuserParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidSubuserSubuserResponse, error)

	// GetApiRoleWithResponse request
	GetApiRoleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoleResponse, error)

	// PostApiRoleWithBodyWithResponse request with any body
	PostApiRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoleResponse, error)

	PostApiRoleWithResponse(ctx context.Context, body PostApiRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoleResponse, error)

	// DeleteApiRoleNameWithResponse request
	DeleteApiRoleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiRoleNameResponse, error)

	// GetApiRoleNameWithResponse request
	GetApiRoleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiRoleNameResponse, error)

	// PutApiRoleNameWithBodyWithResponse request with any body
	PutApiRoleNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoleNameResponse, error)

	PutApiRoleNameWithResponse(ctx context.Context, name string, body PutApiRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoleNameResponse, error)

	// PostApiRoleNameCloneWithBodyWithResponse request with any body
	PostApiRoleNameCloneWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoleNameCloneResponse, error)

	PostApiRoleNameCloneWithResponse(ctx context.Context, name string, body PostApiRoleNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoleNameCloneResponse, error)

	// GetApiServiceWithResponse request
	GetApiServiceWithResponse(ctx context.Context, params *GetApiServiceParams, reqEditors ...RequestEditorFn) (*GetApiServiceResponse, error)

	// PostApiServiceWithBodyWithResponse request with any body
	PostApiServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiServiceResponse, error)

	PostApiServiceWithResponse(ctx context.Context, body PostApiServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiServiceResponse, error)

	// GetApiServiceKnownTypesWithResponse request
	GetApiServiceKnownTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiServiceKnownTypesResponse, error)

	// DeleteApiServiceServiceNameWithResponse request
	DeleteApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*DeleteApiServiceServiceNameResponse, error)

	// GetApiServiceServiceNameWithResponse request
	GetApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*GetApiServiceServiceNameResponse, error)

	// PutApiServiceServiceNameWithBodyWithResponse request with any body
	PutApiServiceServiceNameWithBodyWithResponse(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiServiceServiceNameResponse, error)

	PutApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, body PutApiServiceServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiServiceServiceNameResponse, error)

	// GetApiServiceServiceNameDaemonsWithResponse request
	GetApiServiceServiceNameDaemonsWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*GetApiServiceServiceNameDaemonsResponse, error)

	// GetApiSettingsWithResponse request
	GetApiSettingsWithResponse(ctx context.Context, params *GetApiSettingsParams, reqEditors ...RequestEditorFn) (*GetApiSettingsResponse, error)

	// PutApiSettingsWithResponse request
	PutApiSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutApiSettingsResponse, error)

	// DeleteApiSettingsNameWithResponse request
	DeleteApiSettingsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiSettingsNameResponse, error)

	// GetApiSettingsNameWithResponse request
	GetApiSettingsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiSettingsNameResponse, error)

	// PutApiSettingsNameWithBodyWithResponse request with any body
	PutApiSettingsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSettingsNameResponse, error)

	PutApiSettingsNameWithResponse(ctx context.Context, name string, body PutApiSettingsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSettingsNameResponse, error)

	// GetApiSummaryWithResponse request
	GetApiSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSummaryResponse, error)

	// GetApiTaskWithResponse request
	GetApiTaskWithResponse(ctx context.Context, params *GetApiTaskParams, reqEditors ...RequestEditorFn) (*GetApiTaskResponse, error)

	// PutApiTelemetryWithBodyWithResponse request with any body
	PutApiTelemetryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiTelemetryResponse, error)

	PutApiTelemetryWithResponse(ctx context.Context, body PutApiTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiTelemetryResponse, error)

	// GetApiTelemetryReportWithResponse request
	GetApiTelemetryReportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTelemetryReportResponse, error)

	// GetApiUserWithResponse request
	GetApiUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUserResponse, error)

	// PostApiUserWithBodyWithResponse request with any body
	PostApiUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserResponse, error)

	PostApiUserWithResponse(ctx context.Context, body PostApiUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserResponse, error)

	// PostApiUserValidatePasswordWithBodyWithResponse request with any body
	PostApiUserValidatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserValidatePasswordResponse, error)

	PostApiUserValidatePasswordWithResponse(ctx context.Context, body PostApiUserValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserValidatePasswordResponse, error)

	// DeleteApiUserUsernameWithResponse request
	DeleteApiUserUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteApiUserUsernameResponse, error)

	// GetApiUserUsernameWithResponse request
	GetApiUserUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetApiUserUsernameResponse, error)

	// PutApiUserUsernameWithBodyWithResponse request with any body
	PutApiUserUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUserUsernameResponse, error)

	PutApiUserUsernameWithResponse(ctx context.Context, username string, body PutApiUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUserUsernameResponse, error)

	// PostApiUserUsernameChangePasswordWithBodyWithResponse request with any body
	PostApiUserUsernameChangePasswordWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserUsernameChangePasswordResponse, error)

	PostApiUserUsernameChangePasswordWithResponse(ctx context.Context, username string, body PostApiUserUsernameChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserUsernameChangePasswordResponse, error)
}

type PostApiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthCheckResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON201 *struct {
		// Permissions List of permissions acquired
		Permissions struct {
			Cephfs []string `json:"cephfs"`
		} `json:"permissions"`

		// PwdUpdateRequired Is password update required?
		PwdUpdateRequired bool `json:"pwdUpdateRequired"`

		// Sso Uses single sign on?
		Sso bool `json:"sso"`

		// Username Username
		Username string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAuthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockImageResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV20JSON200 *[]struct {
		// PoolName pool name
		PoolName *string   `json:"pool_name,omitempty"`
		Value    *[]string `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBlockImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockImageCloneFormatVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockImageCloneFormatVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockImageCloneFormatVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockImageDefaultFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockImageDefaultFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockImageDefaultFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockImageTrashResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// PoolName pool name
		PoolName *string   `json:"pool_name,omitempty"`
		Status   *int      `json:"status,omitempty"`
		Value    *[]string `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBlockImageTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockImageTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageTrashPurgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageTrashPurgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageTrashPurgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBlockImageTrashImageIdSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBlockImageTrashImageIdSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBlockImageTrashImageIdSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageTrashImageIdSpecRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageTrashImageIdSpecRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageTrashImageIdSpecRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBlockImageImageSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBlockImageImageSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBlockImageImageSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockImageImageSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockImageImageSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockImageImageSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBlockImageImageSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBlockImageImageSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBlockImageImageSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecFlattenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecFlattenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecFlattenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecMoveTrashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecMoveTrashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecMoveTrashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecSnapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecSnapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecSnapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBlockImageImageSpecSnapSnapshotNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBlockImageImageSpecSnapSnapshotNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBlockImageImageSpecSnapSnapshotNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBlockImageImageSpecSnapSnapshotNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBlockImageImageSpecSnapSnapshotNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBlockImageImageSpecSnapSnapshotNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockMirroringPoolPoolNameResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// MirrorMode Mirror Mode
		MirrorMode string `json:"mirror_mode"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBlockMirroringPoolPoolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockMirroringPoolPoolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBlockMirroringPoolPoolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBlockMirroringPoolPoolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBlockMirroringPoolPoolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockMirroringPoolPoolNamePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockMirroringPoolPoolNamePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockMirroringPoolPoolNamePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockMirroringPoolPoolNamePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockMirroringPoolPoolNamePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockMirroringPoolPoolNamePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockMirroringSiteNameResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// SiteName Site Name
		SiteName string `json:"site_name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBlockMirroringSiteNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockMirroringSiteNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiBlockMirroringSiteNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiBlockMirroringSiteNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiBlockMirroringSiteNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockMirroringSummaryResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		ContentData struct {
			Daemons      []string `json:"daemons"`
			ImageError   []string `json:"image_error"`
			ImageReady   []string `json:"image_ready"`
			ImageSyncing []string `json:"image_syncing"`

			// Pools Pools
			Pools []struct {
				// Health pool health
				Health      string `json:"health"`
				HealthColor string `json:"health_color"`

				// MirrorMode status
				MirrorMode string `json:"mirror_mode"`

				// Name Pool name
				Name      string   `json:"name"`
				PeerUuids []string `json:"peer_uuids"`
			} `json:"pools"`
		} `json:"content_data"`

		// SiteName site name
		SiteName string `json:"site_name"`
		Status   int    `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBlockMirroringSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockMirroringSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBlockPoolPoolNameNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiBlockPoolPoolNameNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBlockPoolPoolNameNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBlockPoolPoolNameNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiBlockPoolPoolNameNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBlockPoolPoolNameNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiCephfsFsIdClientClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiCephfsFsIdClientClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiCephfsFsIdClientClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdGetRootDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdGetRootDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdGetRootDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdLsDirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdLsDirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdLsDirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdMdsCountersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdMdsCountersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdMdsCountersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCephfsFsIdQuotaResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		MaxBytes int `json:"max_bytes"`
		MaxFiles int `json:"max_files"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiCephfsFsIdQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCephfsFsIdQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiCephfsFsIdQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiCephfsFsIdQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiCephfsFsIdQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiCephfsFsIdSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiCephfsFsIdSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiCephfsFsIdSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiCephfsFsIdSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiCephfsFsIdSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiCephfsFsIdSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiCephfsFsIdTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiCephfsFsIdTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiCephfsFsIdTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiCephfsFsIdTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiCephfsFsIdTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiCephfsFsIdTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiClusterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiClusterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiClusterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiClusterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiClusterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiClusterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiClusterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiClusterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiClusterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiClusterUserExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiClusterUserExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiClusterUserExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiClusterUserUserEntityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiClusterUserUserEntityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiClusterUserUserEntityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiClusterConfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiClusterConfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiClusterConfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiClusterConfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiClusterConfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiClusterConfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiClusterConfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiClusterConfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiClusterConfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiClusterConfFilterResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// CanUpdateAtRuntime Check if can update at runtime
		CanUpdateAtRuntime *bool `json:"can_update_at_runtime,omitempty"`

		// DaemonDefault Daemon specific default value
		DaemonDefault *string `json:"daemon_default,omitempty"`

		// Default Default value for the config option
		Default *string `json:"default,omitempty"`

		// Desc Description of the configuration
		Desc *string `json:"desc,omitempty"`

		// EnumValues List of enums allowed
		EnumValues *[]string `json:"enum_values,omitempty"`

		// Flags List of flags associated
		Flags *[]string `json:"flags,omitempty"`

		// Level Config option level
		Level *string `json:"level,omitempty"`

		// LongDesc Elaborated description
		LongDesc *string `json:"long_desc,omitempty"`

		// Max Maximum value
		Max *string `json:"max,omitempty"`

		// Min Minimum value
		Min *string `json:"min,omitempty"`

		// Name Name of the config option
		Name *string `json:"name,omitempty"`

		// SeeAlso Related config options
		SeeAlso *[]string `json:"see_also,omitempty"`

		// Services Services associated with the config option
		Services *[]string `json:"services,omitempty"`

		// Tags Tags associated with the cluster
		Tags *[]string `json:"tags,omitempty"`

		// Type Config option type
		Type *string `json:"type,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiClusterConfFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiClusterConfFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiClusterConfNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiClusterConfNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiClusterConfNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiClusterConfNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiClusterConfNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiClusterConfNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCrushRuleResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV20JSON200 *struct {
		// MaxSize Maximum size of Rule
		MaxSize int `json:"max_size"`

		// MinSize Minimum size of Rule
		MinSize int `json:"min_size"`

		// RuleId Rule ID
		RuleId int `json:"rule_id"`

		// RuleName Rule Name
		RuleName string `json:"rule_name"`

		// Ruleset RuleSet related to the rule
		Ruleset int `json:"ruleset"`

		// Steps Steps included in the rule
		Steps []map[string]interface{} `json:"steps"`

		// Type Type of Rule
		Type int `json:"type"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiCrushRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCrushRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiCrushRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiCrushRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiCrushRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiCrushRuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiCrushRuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiCrushRuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCrushRuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiCrushRuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCrushRuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDaemonDaemonNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiDaemonDaemonNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDaemonDaemonNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiErasureCodeProfileResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		CrushFailureDomain *string `json:"crush-failure-domain,omitempty"`

		// K Number of data chunks
		K *int `json:"k,omitempty"`

		// M Number of coding chunks
		M *int `json:"m,omitempty"`

		// Name Name of the profile
		Name *string `json:"name,omitempty"`

		// Plugin Plugin Info
		Plugin    *string `json:"plugin,omitempty"`
		Technique *string `json:"technique,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiErasureCodeProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiErasureCodeProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiErasureCodeProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiErasureCodeProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiErasureCodeProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiErasureCodeProfileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiErasureCodeProfileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiErasureCodeProfileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiErasureCodeProfileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiErasureCodeProfileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiErasureCodeProfileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFeatureTogglesResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		Cephfs    bool `json:"cephfs"`
		Dashboard bool `json:"dashboard"`
		Iscsi     bool `json:"iscsi"`
		Mirroring bool `json:"mirroring"`
		Nfs       bool `json:"nfs"`
		Rbd       bool `json:"rbd"`
		Rgw       bool `json:"rgw"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiFeatureTogglesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFeatureTogglesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiFeedbackApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiFeedbackApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiFeedbackApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFeedbackApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiFeedbackApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFeedbackApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiFeedbackApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiFeedbackApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiFeedbackApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiGrafanaDashboardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiGrafanaDashboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiGrafanaDashboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGrafanaUrlResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// Instance grafana instance
		Instance string `json:"instance"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiGrafanaUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGrafanaUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGrafanaValidationParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiGrafanaValidationParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGrafanaValidationParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHealthFullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHealthFullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHealthFullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHealthGetClusterCapacityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHealthGetClusterCapacityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHealthGetClusterCapacityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHealthGetClusterFsidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHealthGetClusterFsidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHealthGetClusterFsidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHealthMinimalResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		ClientPerf struct {
			ReadBytesSec          int `json:"read_bytes_sec"`
			ReadOpPerSec          int `json:"read_op_per_sec"`
			RecoveringBytesPerSec int `json:"recovering_bytes_per_sec"`
			WriteBytesSec         int `json:"write_bytes_sec"`
			WriteOpPerSec         int `json:"write_op_per_sec"`
		} `json:"client_perf"`
		Df struct {
			Stats struct {
				TotalAvailBytes   int `json:"total_avail_bytes"`
				TotalBytes        int `json:"total_bytes"`
				TotalUsedRawBytes int `json:"total_used_raw_bytes"`
			} `json:"stats"`
		} `json:"df"`
		FsMap struct {
			Filesystems []struct {
				Mdsmap struct {
					Balancer string `json:"balancer"`
					Compat   struct {
						Compat   string `json:"compat"`
						Incompat string `json:"incompat"`
						RoCompat string `json:"ro_compat"`
					} `json:"compat"`
					Created                   string `json:"created"`
					Damaged                   []int  `json:"damaged"`
					DataPools                 []int  `json:"data_pools"`
					Enabled                   bool   `json:"enabled"`
					Epoch                     int    `json:"epoch"`
					EverAllowedFeatures       int    `json:"ever_allowed_features"`
					ExplicitlyAllowedFeatures int    `json:"explicitly_allowed_features"`
					Failed                    []int  `json:"failed"`
					Flags                     int    `json:"flags"`
					FsName                    string `json:"fs_name"`
					In                        []int  `json:"in"`
					Info                      string `json:"info"`
					LastFailure               int    `json:"last_failure"`
					LastFailureOsdEpoch       int    `json:"last_failure_osd_epoch"`
					MaxFileSize               int    `json:"max_file_size"`
					MaxMds                    int    `json:"max_mds"`
					MetadataPool              int    `json:"metadata_pool"`
					Modified                  string `json:"modified"`
					RequiredClientFeatures    string `json:"required_client_features"`
					Root                      int    `json:"root"`
					SessionAutoclose          int    `json:"session_autoclose"`
					SessionTimeout            int    `json:"session_timeout"`
					StandbyCountWanted        int    `json:"standby_count_wanted"`
					Stopped                   []int  `json:"stopped"`
					Tableserver               int    `json:"tableserver"`
					Up                        string `json:"up"`
				} `json:"mdsmap"`
				Standbys string `json:"standbys"`
			} `json:"filesystems"`
		} `json:"fs_map"`
		Health struct {
			Checks string `json:"checks"`
			Mutes  string `json:"mutes"`
			Status string `json:"status"`
		} `json:"health"`
		Hosts        int `json:"hosts"`
		IscsiDaemons struct {
			Down int `json:"down"`
			Up   int `json:"up"`
		} `json:"iscsi_daemons"`
		MgrMap struct {
			ActiveName string `json:"active_name"`
			Standbys   string `json:"standbys"`
		} `json:"mgr_map"`
		MonStatus struct {
			Monmap struct {
				Mons string `json:"mons"`
			} `json:"monmap"`
			Quorum []int `json:"quorum"`
		} `json:"mon_status"`
		OsdMap struct {
			Osds []struct {
				In int `json:"in"`
				Up int `json:"up"`
			} `json:"osds"`
		} `json:"osd_map"`
		PgInfo struct {
			ObjectStats struct {
				NumObjectCopies     int `json:"num_object_copies"`
				NumObjects          int `json:"num_objects"`
				NumObjectsDegraded  int `json:"num_objects_degraded"`
				NumObjectsMisplaced int `json:"num_objects_misplaced"`
				NumObjectsUnfound   int `json:"num_objects_unfound"`
			} `json:"object_stats"`
			PgsPerOsd int    `json:"pgs_per_osd"`
			Statuses  string `json:"statuses"`
		} `json:"pg_info"`
		Pools       string `json:"pools"`
		Rgw         int    `json:"rgw"`
		ScrubStatus string `json:"scrub_status"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiHealthMinimalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHealthMinimalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV13JSON200 *struct {
		// Addr Host address
		Addr string `json:"addr"`

		// CephVersion Ceph version
		CephVersion string `json:"ceph_version"`

		// Hostname Hostname
		Hostname string `json:"hostname"`

		// Labels Labels related to the host
		Labels []string `json:"labels"`

		// ServiceInstances Service instances related to the host
		ServiceInstances []struct {
			// Count Number of instances of the service
			Count int `json:"count"`

			// Type type of service
			Type string `json:"type"`
		} `json:"service_instances"`
		ServiceType string `json:"service_type"`

		// Services Services related to the host
		Services []struct {
			// Id Service Id
			Id string `json:"id"`

			// Type type of service
			Type string `json:"type"`
		} `json:"services"`

		// Sources Host Sources
		Sources struct {
			Ceph         bool `json:"ceph"`
			Orchestrator bool `json:"orchestrator"`
		} `json:"sources"`
		Status string `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiHostHostnameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiHostHostnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiHostHostnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostHostnameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHostHostnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostHostnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiHostHostnameResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV01JSON200 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutApiHostHostnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiHostHostnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostHostnameDaemonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHostHostnameDaemonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostHostnameDaemonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostHostnameDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHostHostnameDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostHostnameDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHostHostnameIdentifyDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiHostHostnameIdentifyDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHostHostnameIdentifyDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostHostnameInventoryResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// Addr Host address
		Addr string `json:"addr"`

		// Devices Host devices
		Devices []struct {
			// Available If the device can be provisioned to an OSD
			Available bool `json:"available"`

			// DeviceId Device's udev ID
			DeviceId string `json:"device_id"`

			// HumanReadableType Device type. ssd or hdd
			HumanReadableType string `json:"human_readable_type"`
			LsmData           struct {
				Errors     []string `json:"errors"`
				Health     string   `json:"health"`
				LedSupport struct {
					FAILstatus   string `json:"FAILstatus"`
					FAILsupport  string `json:"FAILsupport"`
					IDENTstatus  string `json:"IDENTstatus"`
					IDENTsupport string `json:"IDENTsupport"`
				} `json:"ledSupport"`
				LinkSpeed string `json:"linkSpeed"`
				MediaType string `json:"mediaType"`
				Rpm       string `json:"rpm"`
				SerialNum string `json:"serialNum"`
				Transport string `json:"transport"`
			} `json:"lsm_data"`
			Lvs []struct {
				BlockUuid       string `json:"block_uuid"`
				ClusterFsid     string `json:"cluster_fsid"`
				ClusterName     string `json:"cluster_name"`
				Name            string `json:"name"`
				OsdFsid         string `json:"osd_fsid"`
				OsdId           string `json:"osd_id"`
				OsdspecAffinity string `json:"osdspec_affinity"`
				Type            string `json:"type"`
			} `json:"lvs"`

			// OsdIds Device OSD IDs
			OsdIds []int `json:"osd_ids"`

			// Path Device path
			Path            string   `json:"path"`
			RejectedReasons []string `json:"rejected_reasons"`
			SysApi          struct {
				HumanReadableSize string `json:"human_readable_size"`
				Locked            int    `json:"locked"`
				Model             string `json:"model"`
				NrRequests        string `json:"nr_requests"`
				Partitions        struct {
					PartitionName struct {
						Holders           []string `json:"holders"`
						HumanReadableSize string   `json:"human_readable_size"`
						Sectors           string   `json:"sectors"`
						Sectorsize        int      `json:"sectorsize"`
						Size              int      `json:"size"`
						Start             string   `json:"start"`
					} `json:"partition_name"`
				} `json:"partitions"`
				Path            string `json:"path"`
				Removable       string `json:"removable"`
				Rev             string `json:"rev"`
				Ro              string `json:"ro"`
				Rotational      string `json:"rotational"`
				SasAddress      string `json:"sas_address"`
				SasDeviceHandle string `json:"sas_device_handle"`
				SchedulerMode   string `json:"scheduler_mode"`
				Sectors         int    `json:"sectors"`
				Sectorsize      string `json:"sectorsize"`
				Size            int    `json:"size"`
				SupportDiscard  string `json:"support_discard"`
				Vendor          string `json:"vendor"`
			} `json:"sys_api"`
		} `json:"devices"`

		// Labels Host labels
		Labels []string `json:"labels"`

		// Name Hostname
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiHostHostnameInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostHostnameInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHostHostnameSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiHostHostnameSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHostHostnameSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiIscsiDiscoveryauthResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		MutualPassword *string `json:"mutual_password,omitempty"`
		MutualUser     *string `json:"mutual_user,omitempty"`

		// Password password
		Password *string `json:"password,omitempty"`

		// User username
		User *string `json:"user,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiIscsiDiscoveryauthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiIscsiDiscoveryauthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiIscsiDiscoveryauthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiIscsiDiscoveryauthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiIscsiDiscoveryauthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiIscsiTargetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiIscsiTargetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiIscsiTargetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiIscsiTargetTargetIqnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiIscsiTargetTargetIqnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiIscsiTargetTargetIqnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiIscsiTargetTargetIqnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiIscsiTargetTargetIqnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiIscsiTargetTargetIqnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiIscsiTargetTargetIqnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiIscsiTargetTargetIqnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiIscsiTargetTargetIqnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLogsAllResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// AuditLog Audit log
		AuditLog []struct {
			Addrs struct {
				Addrvec []struct {
					// Addr IP Address
					Addr  string `json:"addr"`
					Nonce int    `json:"nonce"`
					Type  string `json:"type"`
				} `json:"addrvec"`
			} `json:"addrs"`
			Channel  string `json:"channel"`
			Message  string `json:"message"`
			Name     string `json:"name"`
			Priority string `json:"priority"`
			Rank     string `json:"rank"`
			Seq      int    `json:"seq"`
			Stamp    string `json:"stamp"`
		} `json:"audit_log"`
		Clog []string `json:"clog"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiLogsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLogsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMgrModuleResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// AlwaysOn Is it an always on module?
		AlwaysOn *bool `json:"always_on,omitempty"`

		// Enabled Is Module Enabled
		Enabled *bool `json:"enabled,omitempty"`

		// Name Module Name
		Name *string `json:"name,omitempty"`

		// Options Module Options
		Options *struct {
			// OptionName Options
			OptionName struct {
				// DefaultValue Default value for the option
				DefaultValue int `json:"default_value"`

				// Desc Description of the option
				Desc        string   `json:"desc"`
				EnumAllowed []string `json:"enum_allowed"`

				// Flags List of flags associated
				Flags int `json:"flags"`

				// Level Option level
				Level string `json:"level"`

				// LongDesc Elaborated description
				LongDesc string `json:"long_desc"`

				// Max Maximum value
				Max string `json:"max"`

				// Min Minimum value
				Min string `json:"min"`

				// Name Name of the option
				Name string `json:"name"`

				// SeeAlso Related options
				SeeAlso []string `json:"see_also"`

				// Tags Tags associated with the option
				Tags []string `json:"tags"`

				// Type Type of the option
				Type string `json:"type"`
			} `json:"Option_name"`
		} `json:"options,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiMgrModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMgrModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMgrModuleModuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiMgrModuleModuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMgrModuleModuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiMgrModuleModuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiMgrModuleModuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiMgrModuleModuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMgrModuleModuleNameDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiMgrModuleModuleNameDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMgrModuleModuleNameDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMgrModuleModuleNameEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiMgrModuleModuleNameEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMgrModuleModuleNameEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMgrModuleModuleNameOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiMgrModuleModuleNameOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMgrModuleModuleNameOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMonitorResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		InQuorum []struct {
			Addr        string `json:"addr"`
			Name        string `json:"name"`
			Priority    int    `json:"priority"`
			PublicAddr  string `json:"public_addr"`
			PublicAddrs struct {
				Addrvec []struct {
					Addr  string `json:"addr"`
					Nonce int    `json:"nonce"`
					Type  string `json:"type"`
				} `json:"addrvec"`
			} `json:"public_addrs"`
			Rank  int `json:"rank"`
			Stats struct {
				NumSessions []int `json:"num_sessions"`
			} `json:"stats"`
			Weight int `json:"weight"`
		} `json:"in_quorum"`
		MonStatus struct {
			ElectionEpoch   int      `json:"election_epoch"`
			ExtraProbePeers []string `json:"extra_probe_peers"`
			FeatureMap      struct {
				Client []struct {
					Features string `json:"features"`
					Num      int    `json:"num"`
					Release  string `json:"release"`
				} `json:"client"`
				Mds []struct {
					Features string `json:"features"`
					Num      int    `json:"num"`
					Release  string `json:"release"`
				} `json:"mds"`
				Mgr []struct {
					Features string `json:"features"`
					Num      int    `json:"num"`
					Release  string `json:"release"`
				} `json:"mgr"`
				Mon []struct {
					Features string `json:"features"`
					Num      int    `json:"num"`
					Release  string `json:"release"`
				} `json:"mon"`
			} `json:"feature_map"`
			Features struct {
				QuorumCon   string   `json:"quorum_con"`
				QuorumMon   []string `json:"quorum_mon"`
				RequiredCon string   `json:"required_con"`
				RequiredMon []int    `json:"required_mon"`
			} `json:"features"`
			Monmap struct {
				Created  string `json:"created"`
				Epoch    int    `json:"epoch"`
				Features struct {
					Optional   []string `json:"optional"`
					Persistent []string `json:"persistent"`
				} `json:"features"`
				Fsid              string `json:"fsid"`
				MinMonRelease     int    `json:"min_mon_release"`
				MinMonReleaseName string `json:"min_mon_release_name"`
				Modified          string `json:"modified"`
				Mons              []struct {
					Addr        string `json:"addr"`
					Name        string `json:"name"`
					Priority    int    `json:"priority"`
					PublicAddr  string `json:"public_addr"`
					PublicAddrs struct {
						Addrvec []struct {
							Addr  string `json:"addr"`
							Nonce int    `json:"nonce"`
							Type  string `json:"type"`
						} `json:"addrvec"`
					} `json:"public_addrs"`
					Rank  int `json:"rank"`
					Stats struct {
						NumSessions []int `json:"num_sessions"`
					} `json:"stats"`
					Weight int `json:"weight"`
				} `json:"mons"`
			} `json:"monmap"`
			Name          string   `json:"name"`
			OutsideQuorum []string `json:"outside_quorum"`
			Quorum        []int    `json:"quorum"`
			QuorumAge     int      `json:"quorum_age"`
			Rank          int      `json:"rank"`
			State         string   `json:"state"`
			SyncProvider  []string `json:"sync_provider"`
		} `json:"mon_status"`
		OutQuorum []int `json:"out_quorum"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNfsGaneshaClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiNfsGaneshaClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNfsGaneshaClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNfsGaneshaExportResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// AccessType Export access type
		AccessType *string `json:"access_type,omitempty"`

		// Clients List of client configurations
		Clients *[]struct {
			// AccessType Client access type
			AccessType string `json:"access_type"`

			// Addresses list of IP addresses
			Addresses []string `json:"addresses"`

			// Squash Client squash policy
			Squash string `json:"squash"`
		} `json:"clients,omitempty"`

		// ClusterId Cluster identifier
		ClusterId *string `json:"cluster_id,omitempty"`

		// ExportId Export ID
		ExportId *int `json:"export_id,omitempty"`

		// Fsal FSAL configuration
		Fsal *struct {
			// FsName CephFS filesystem name
			FsName *string `json:"fs_name,omitempty"`

			// Name name of FSAL
			Name string `json:"name"`

			// SecLabelXattr Name of xattr for security label
			SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

			// UserId User id
			UserId *string `json:"user_id,omitempty"`
		} `json:"fsal,omitempty"`

		// Path Export path
		Path *string `json:"path,omitempty"`

		// Protocols List of protocol types
		Protocols *[]int `json:"protocols,omitempty"`

		// Pseudo Pseudo FS path
		Pseudo *string `json:"pseudo,omitempty"`

		// SecurityLabel Security label
		SecurityLabel *string `json:"security_label,omitempty"`

		// Squash Export squash policy
		Squash *string `json:"squash,omitempty"`

		// Transports List of transport types
		Transports *[]string `json:"transports,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiNfsGaneshaExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNfsGaneshaExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiNfsGaneshaExportResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV20JSON201 *struct {
		// AccessType Export access type
		AccessType string `json:"access_type"`

		// Clients List of client configurations
		Clients []struct {
			// AccessType Client access type
			AccessType string `json:"access_type"`

			// Addresses list of IP addresses
			Addresses []string `json:"addresses"`

			// Squash Client squash policy
			Squash string `json:"squash"`
		} `json:"clients"`

		// ClusterId Cluster identifier
		ClusterId string `json:"cluster_id"`

		// ExportId Export ID
		ExportId int `json:"export_id"`

		// Fsal FSAL configuration
		Fsal struct {
			// FsName CephFS filesystem name
			FsName *string `json:"fs_name,omitempty"`

			// Name name of FSAL
			Name string `json:"name"`

			// SecLabelXattr Name of xattr for security label
			SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

			// UserId User id
			UserId *string `json:"user_id,omitempty"`
		} `json:"fsal"`

		// Path Export path
		Path string `json:"path"`

		// Protocols List of protocol types
		Protocols []int `json:"protocols"`

		// Pseudo Pseudo FS path
		Pseudo string `json:"pseudo"`

		// SecurityLabel Security label
		SecurityLabel string `json:"security_label"`

		// Squash Export squash policy
		Squash string `json:"squash"`

		// Transports List of transport types
		Transports []string `json:"transports"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiNfsGaneshaExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiNfsGaneshaExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiNfsGaneshaExportClusterIdExportIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiNfsGaneshaExportClusterIdExportIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiNfsGaneshaExportClusterIdExportIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNfsGaneshaExportClusterIdExportIdResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// AccessType Export access type
		AccessType string `json:"access_type"`

		// Clients List of client configurations
		Clients []struct {
			// AccessType Client access type
			AccessType string `json:"access_type"`

			// Addresses list of IP addresses
			Addresses []string `json:"addresses"`

			// Squash Client squash policy
			Squash string `json:"squash"`
		} `json:"clients"`

		// ClusterId Cluster identifier
		ClusterId string `json:"cluster_id"`

		// ExportId Export ID
		ExportId int `json:"export_id"`

		// Fsal FSAL configuration
		Fsal struct {
			// FsName CephFS filesystem name
			FsName *string `json:"fs_name,omitempty"`

			// Name name of FSAL
			Name string `json:"name"`

			// SecLabelXattr Name of xattr for security label
			SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

			// UserId User id
			UserId *string `json:"user_id,omitempty"`
		} `json:"fsal"`

		// Path Export path
		Path string `json:"path"`

		// Protocols List of protocol types
		Protocols []int `json:"protocols"`

		// Pseudo Pseudo FS path
		Pseudo string `json:"pseudo"`

		// SecurityLabel Security label
		SecurityLabel string `json:"security_label"`

		// Squash Export squash policy
		Squash string `json:"squash"`

		// Transports List of transport types
		Transports []string `json:"transports"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiNfsGaneshaExportClusterIdExportIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNfsGaneshaExportClusterIdExportIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiNfsGaneshaExportClusterIdExportIdResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV20JSON200 *struct {
		// AccessType Export access type
		AccessType string `json:"access_type"`

		// Clients List of client configurations
		Clients []struct {
			// AccessType Client access type
			AccessType string `json:"access_type"`

			// Addresses list of IP addresses
			Addresses []string `json:"addresses"`

			// Squash Client squash policy
			Squash string `json:"squash"`
		} `json:"clients"`

		// ClusterId Cluster identifier
		ClusterId string `json:"cluster_id"`

		// ExportId Export ID
		ExportId int `json:"export_id"`

		// Fsal FSAL configuration
		Fsal struct {
			// FsName CephFS filesystem name
			FsName *string `json:"fs_name,omitempty"`

			// Name name of FSAL
			Name string `json:"name"`

			// SecLabelXattr Name of xattr for security label
			SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

			// UserId User id
			UserId *string `json:"user_id,omitempty"`
		} `json:"fsal"`

		// Path Export path
		Path string `json:"path"`

		// Protocols List of protocol types
		Protocols []int `json:"protocols"`

		// Pseudo Pseudo FS path
		Pseudo string `json:"pseudo"`

		// SecurityLabel Security label
		SecurityLabel string `json:"security_label"`

		// Squash Export squash policy
		Squash string `json:"squash"`

		// Transports List of transport types
		Transports []string `json:"transports"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiNfsGaneshaExportClusterIdExportIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiNfsGaneshaExportClusterIdExportIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiOsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdFlagsResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		ListOfFlags []string `json:"list_of_flags"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiOsdFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOsdFlagsResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		ListOfFlags []string `json:"list_of_flags"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiOsdFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOsdFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdFlagsIndividualResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// Flags List of active flags
		Flags []string `json:"flags"`

		// Osd OSD ID
		Osd int `json:"osd"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiOsdFlagsIndividualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdFlagsIndividualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOsdFlagsIndividualResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// Added List of added flags
		Added []string `json:"added"`

		// Ids List of updated OSDs
		Ids []int `json:"ids"`

		// Removed List of removed flags
		Removed []string `json:"removed"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiOsdFlagsIndividualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOsdFlagsIndividualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSafeToDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSafeToDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSafeToDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSafeToDestroyResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		Active []int `json:"active"`

		// IsSafeToDestroy Is OSD safe to destroy?
		IsSafeToDestroy bool     `json:"is_safe_to_destroy"`
		MissingStats    []string `json:"missing_stats"`

		// SafeToDestroy Is OSD safe to destroy?
		SafeToDestroy []string `json:"safe_to_destroy"`

		// StoredPgs Stored Pool groups in Osd
		StoredPgs []string `json:"stored_pgs"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSafeToDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSafeToDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiOsdSvcIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiOsdSvcIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiOsdSvcIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSvcIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSvcIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSvcIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOsdSvcIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiOsdSvcIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOsdSvcIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOsdSvcIdDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiOsdSvcIdDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOsdSvcIdDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSvcIdDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSvcIdDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSvcIdDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSvcIdHistogramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSvcIdHistogramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSvcIdHistogramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiOsdSvcIdMarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiOsdSvcIdMarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiOsdSvcIdMarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOsdSvcIdPurgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiOsdSvcIdPurgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOsdSvcIdPurgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOsdSvcIdReweightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiOsdSvcIdReweightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOsdSvcIdReweightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiOsdSvcIdScrubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiOsdSvcIdScrubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiOsdSvcIdScrubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiOsdSvcIdSmartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiOsdSvcIdSmartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiOsdSvcIdSmartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// MonA Service ID
		MonA struct {
			DotCacheBytes struct {
				Description string `json:"description"`
				Nick        string `json:"nick"`
				Priority    int    `json:"priority"`
				Type        int    `json:"type"`
				Units       int    `json:"units"`
				Value       int    `json:"value"`
			} `json:".cache_bytes"`
		} `json:"mon.a"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersMdsServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersMdsServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersMdsServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersMgrServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersMgrServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersMgrServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersMonServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersMonServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersMonServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersOsdServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersOsdServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersOsdServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersRbdMirrorServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersRbdMirrorServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersRbdMirrorServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersRgwServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersRgwServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersRgwServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPerfCountersTcmuRunnerServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPerfCountersTcmuRunnerServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPerfCountersTcmuRunnerServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoolResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		ApplicationMetadata            *[]string `json:"application_metadata,omitempty"`
		Auid                           *int      `json:"auid,omitempty"`
		CacheMinEvictAge               *int      `json:"cache_min_evict_age,omitempty"`
		CacheMinFlushAge               *int      `json:"cache_min_flush_age,omitempty"`
		CacheMode                      *string   `json:"cache_mode,omitempty"`
		CacheTargetDirtyHighRatioMicro *int      `json:"cache_target_dirty_high_ratio_micro,omitempty"`
		CacheTargetDirtyRatioMicro     *int      `json:"cache_target_dirty_ratio_micro,omitempty"`
		CacheTargetFullRatioMicro      *int      `json:"cache_target_full_ratio_micro,omitempty"`
		CreateTime                     *string   `json:"create_time,omitempty"`
		CrushRule                      *string   `json:"crush_rule,omitempty"`
		ErasureCodeProfile             *string   `json:"erasure_code_profile,omitempty"`
		ExpectedNumObjects             *int      `json:"expected_num_objects,omitempty"`
		FastRead                       *bool     `json:"fast_read,omitempty"`
		Flags                          *int      `json:"flags,omitempty"`

		// FlagsNames flags name
		FlagsNames           *string   `json:"flags_names,omitempty"`
		GradeTable           *[]string `json:"grade_table,omitempty"`
		HitSetCount          *int      `json:"hit_set_count,omitempty"`
		HitSetGradeDecayRate *int      `json:"hit_set_grade_decay_rate,omitempty"`
		HitSetParams         *struct {
			Type string `json:"type"`
		} `json:"hit_set_params,omitempty"`
		HitSetPeriod                 *int    `json:"hit_set_period,omitempty"`
		HitSetSearchLastN            *int    `json:"hit_set_search_last_n,omitempty"`
		LastChange                   *string `json:"last_change,omitempty"`
		LastForceOpResend            *string `json:"last_force_op_resend,omitempty"`
		LastForceOpResendPreluminous *string `json:"last_force_op_resend_preluminous,omitempty"`
		LastForceOpResendPrenautilus *string `json:"last_force_op_resend_prenautilus,omitempty"`
		LastPgMergeMeta              *struct {
			LastEpochClean   int    `json:"last_epoch_clean"`
			LastEpochStarted int    `json:"last_epoch_started"`
			ReadyEpoch       int    `json:"ready_epoch"`
			SourcePgid       string `json:"source_pgid"`
			SourceVersion    string `json:"source_version"`
			TargetVersion    string `json:"target_version"`
		} `json:"last_pg_merge_meta,omitempty"`
		MinReadRecencyForPromote  *int `json:"min_read_recency_for_promote,omitempty"`
		MinSize                   *int `json:"min_size,omitempty"`
		MinWriteRecencyForPromote *int `json:"min_write_recency_for_promote,omitempty"`
		ObjectHash                *int `json:"object_hash,omitempty"`
		Options                   *struct {
			PgNumMax int `json:"pg_num_max"`
			PgNumMin int `json:"pg_num_min"`
		} `json:"options,omitempty"`
		PgAutoscaleMode      *string `json:"pg_autoscale_mode,omitempty"`
		PgNum                *int    `json:"pg_num,omitempty"`
		PgNumPending         *int    `json:"pg_num_pending,omitempty"`
		PgNumTarget          *int    `json:"pg_num_target,omitempty"`
		PgPlacementNum       *int    `json:"pg_placement_num,omitempty"`
		PgPlacementNumTarget *int    `json:"pg_placement_num_target,omitempty"`

		// Pool pool id
		Pool *int `json:"pool,omitempty"`

		// PoolName pool name
		PoolName        *string   `json:"pool_name,omitempty"`
		PoolSnaps       *[]string `json:"pool_snaps,omitempty"`
		QuotaMaxBytes   *int      `json:"quota_max_bytes,omitempty"`
		QuotaMaxObjects *int      `json:"quota_max_objects,omitempty"`
		ReadTier        *int      `json:"read_tier,omitempty"`
		RemovedSnaps    *[]string `json:"removed_snaps,omitempty"`

		// Size pool size
		Size             *int      `json:"size,omitempty"`
		SnapEpoch        *int      `json:"snap_epoch,omitempty"`
		SnapMode         *string   `json:"snap_mode,omitempty"`
		SnapSeq          *int      `json:"snap_seq,omitempty"`
		StripeWidth      *int      `json:"stripe_width,omitempty"`
		TargetMaxBytes   *int      `json:"target_max_bytes,omitempty"`
		TargetMaxObjects *int      `json:"target_max_objects,omitempty"`
		TierOf           *int      `json:"tier_of,omitempty"`
		Tiers            *[]string `json:"tiers,omitempty"`

		// Type type of pool
		Type         *string `json:"type,omitempty"`
		UseGmtHitset *bool   `json:"use_gmt_hitset,omitempty"`
		WriteTier    *int    `json:"write_tier,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPoolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiPoolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPoolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPoolPoolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPoolPoolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPoolPoolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoolPoolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPoolPoolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoolPoolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPoolPoolNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiPoolPoolNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPoolPoolNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoolPoolNameConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPoolPoolNameConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoolPoolNameConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPrometheusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPrometheusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPrometheusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPrometheusDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPrometheusDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPrometheusDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPrometheusNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPrometheusNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPrometheusNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPrometheusRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPrometheusRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPrometheusRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPrometheusSilenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiPrometheusSilenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPrometheusSilenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPrometheusSilenceSIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPrometheusSilenceSIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPrometheusSilenceSIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPrometheusSilencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiPrometheusSilencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPrometheusSilencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwBucketDeleteEncryptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwBucketDeleteEncryptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwBucketDeleteEncryptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwBucketGetEncryptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwBucketGetEncryptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwBucketGetEncryptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwBucketGetEncryptionConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwBucketGetEncryptionConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwBucketGetEncryptionConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRgwBucketSetEncryptionConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiRgwBucketSetEncryptionConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRgwBucketSetEncryptionConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwBucketBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwBucketBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwBucketBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwBucketBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwBucketBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwBucketBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRgwBucketBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiRgwBucketBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRgwBucketBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwDaemonResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// Id Daemon ID
		Id *string `json:"id,omitempty"`

		// Port Port
		Port           *int    `json:"port,omitempty"`
		ServerHostname *string `json:"server_hostname,omitempty"`

		// Version Ceph Version
		Version *string `json:"version,omitempty"`

		// ZoneName Zone
		ZoneName *string `json:"zone_name,omitempty"`

		// ZonegroupName Zone Group
		ZonegroupName *string `json:"zonegroup_name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiRgwDaemonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwDaemonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwDaemonSvcIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwDaemonSvcIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwDaemonSvcIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwUserResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// ListOfUsers list of rgw users
		ListOfUsers []string `json:"list_of_users"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiRgwUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwUserGetEmailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwUserGetEmailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwUserGetEmailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwUserUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwUserUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwUserUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwUserUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwUserUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwUserUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRgwUserUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiRgwUserUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRgwUserUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwUserUidCapabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwUserUidCapabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwUserUidCapabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwUserUidCapabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwUserUidCapabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwUserUidCapabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwUserUidKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwUserUidKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwUserUidKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwUserUidKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwUserUidKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwUserUidKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRgwUserUidQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRgwUserUidQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRgwUserUidQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRgwUserUidQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiRgwUserUidQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRgwUserUidQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRgwUserUidSubuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRgwUserUidSubuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRgwUserUidSubuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRgwUserUidSubuserSubuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRgwUserUidSubuserSubuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRgwUserUidSubuserSubuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoleResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// Description Role Descriptions
		Description *string `json:"description,omitempty"`

		// Name Role Name
		Name              *string `json:"name,omitempty"`
		ScopesPermissions *struct {
			Cephfs []string `json:"cephfs"`
		} `json:"scopes_permissions,omitempty"`
		System *bool `json:"system,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoleNameCloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiRoleNameCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoleNameCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiServiceKnownTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiServiceKnownTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiServiceKnownTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiServiceServiceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiServiceServiceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiServiceServiceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiServiceServiceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiServiceServiceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiServiceServiceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiServiceServiceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiServiceServiceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiServiceServiceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiServiceServiceNameDaemonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiServiceServiceNameDaemonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiServiceServiceNameDaemonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSettingsResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *[]struct {
		// Default Default Settings
		Default *bool `json:"default,omitempty"`

		// Name Settings Name
		Name *string `json:"name,omitempty"`

		// Type Type of Settings
		Type *string `json:"type,omitempty"`

		// Value Settings Value
		Value *bool `json:"value,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiSettingsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiSettingsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiSettingsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSettingsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiSettingsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSettingsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSettingsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiSettingsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSettingsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSummaryResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		ExecutingTasks []string `json:"executing_tasks"`
		FinishedTasks  []struct {
			BeginTime string `json:"begin_time"`
			Duration  int    `json:"duration"`
			EndTime   string `json:"end_time"`
			Exception string `json:"exception"`
			Metadata  struct {
				Pool int `json:"pool"`
			} `json:"metadata"`
			Name     string `json:"name"`
			Progress int    `json:"progress"`
			RetValue string `json:"ret_value"`
			Success  bool   `json:"success"`
		} `json:"finished_tasks"`
		HaveMonConnection string `json:"have_mon_connection"`
		HealthStatus      string `json:"health_status"`
		MgrHost           string `json:"mgr_host"`
		MgrId             string `json:"mgr_id"`
		RbdMirroring      struct {
			Errors   int `json:"errors"`
			Warnings int `json:"warnings"`
		} `json:"rbd_mirroring"`
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTaskResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// ExecutingTasks ongoing executing tasks
		ExecutingTasks string `json:"executing_tasks"`
		FinishedTasks  []struct {
			// BeginTime Task begin time
			BeginTime string `json:"begin_time"`
			Duration  int    `json:"duration"`

			// EndTime Task end time
			EndTime   string `json:"end_time"`
			Exception bool   `json:"exception"`
			Metadata  struct {
				Pool int `json:"pool"`
			} `json:"metadata"`

			// Name finished tasks name
			Name string `json:"name"`

			// Progress Progress of tasks
			Progress int  `json:"progress"`
			RetValue bool `json:"ret_value"`
			Success  bool `json:"success"`
		} `json:"finished_tasks"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiTelemetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiTelemetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiTelemetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTelemetryReportResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		DeviceReport string `json:"device_report"`
		Report       struct {
			Balancer struct {
				Active bool   `json:"active"`
				Mode   string `json:"mode"`
			} `json:"balancer"`
			Channels          []string `json:"channels"`
			ChannelsAvailable []string `json:"channels_available"`
			Config            struct {
				ActiveChanged  []string `json:"active_changed"`
				ClusterChanged []string `json:"cluster_changed"`
			} `json:"config"`
			Crashes []int  `json:"crashes"`
			Created string `json:"created"`
			Crush   struct {
				BucketAlgs struct {
					Straw2 int `json:"straw2"`
				} `json:"bucket_algs"`
				BucketSizes struct {
					N1 int `json:"1"`
					N3 int `json:"3"`
				} `json:"bucket_sizes"`
				BucketTypes struct {
					N1  int `json:"1"`
					N11 int `json:"11"`
				} `json:"bucket_types"`
				CompatWeightSet bool  `json:"compat_weight_set"`
				DeviceClasses   []int `json:"device_classes"`
				NumBuckets      int   `json:"num_buckets"`
				NumDevices      int   `json:"num_devices"`
				NumRules        int   `json:"num_rules"`
				NumTypes        int   `json:"num_types"`
				NumWeightSets   int   `json:"num_weight_sets"`
				Tunables        struct {
					AllowedBucketAlgs        int    `json:"allowed_bucket_algs"`
					ChooseLocalFallbackTries int    `json:"choose_local_fallback_tries"`
					ChooseLocalTries         int    `json:"choose_local_tries"`
					ChooseTotalTries         int    `json:"choose_total_tries"`
					ChooseleafDescendOnce    int    `json:"chooseleaf_descend_once"`
					ChooseleafStable         int    `json:"chooseleaf_stable"`
					ChooseleafVaryR          int    `json:"chooseleaf_vary_r"`
					HasV2Rules               int    `json:"has_v2_rules"`
					HasV3Rules               int    `json:"has_v3_rules"`
					HasV4Buckets             int    `json:"has_v4_buckets"`
					HasV5Rules               int    `json:"has_v5_rules"`
					LegacyTunables           int    `json:"legacy_tunables"`
					MinimumRequiredVersion   string `json:"minimum_required_version"`
					OptimalTunables          int    `json:"optimal_tunables"`
					Profile                  string `json:"profile"`
					RequireFeatureTunables   int    `json:"require_feature_tunables"`
					RequireFeatureTunables2  int    `json:"require_feature_tunables2"`
					RequireFeatureTunables3  int    `json:"require_feature_tunables3"`
					RequireFeatureTunables5  int    `json:"require_feature_tunables5"`
					StrawCalcVersion         int    `json:"straw_calc_version"`
				} `json:"tunables"`
			} `json:"crush"`
			Fs struct {
				Count        int `json:"count"`
				FeatureFlags struct {
					EnableMultiple      bool `json:"enable_multiple"`
					EverEnabledMultiple bool `json:"ever_enabled_multiple"`
				} `json:"feature_flags"`
				Filesystems   []int `json:"filesystems"`
				NumStandbyMds int   `json:"num_standby_mds"`
				TotalNumMds   int   `json:"total_num_mds"`
			} `json:"fs"`
			Hosts struct {
				Num        int `json:"num"`
				NumWithMds int `json:"num_with_mds"`
				NumWithMgr int `json:"num_with_mgr"`
				NumWithMon int `json:"num_with_mon"`
				NumWithOsd int `json:"num_with_osd"`
			} `json:"hosts"`
			Leaderboard bool   `json:"leaderboard"`
			License     string `json:"license"`
			Metadata    struct {
				Mon struct {
					Arch struct {
						X8664 int `json:"x86_64"`
					} `json:"arch"`
					CephVersion struct {
						CephVersion16003151Gf202994fcf int `json:"ceph version 16.0.0-3151-gf202994fcf"`
					} `json:"ceph_version"`
					Cpu struct {
						IntelRCoreTMI78665UCPU190GHz int `json:"Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz"`
					} `json:"cpu"`
					Distro struct {
						Centos int `json:"centos"`
					} `json:"distro"`
					DistroDescription struct {
						CentOSLinux8Core int `json:"CentOS Linux 8 (Core)"`
					} `json:"distro_description"`
					KernelDescription struct {
						Hash1SMPWedJul1195301UTC2020 int `json:"#1 SMP Wed Jul 1 19:53:01 UTC 2020"`
					} `json:"kernel_description"`
					KernelVersion struct {
						N577200Fc32X8664 int `json:"5.7.7-200.fc32.x86_64"`
					} `json:"kernel_version"`
					Os struct {
						Linux int `json:"Linux"`
					} `json:"os"`
				} `json:"mon"`
				Osd struct {
					Arch struct {
						X8664 int `json:"x86_64"`
					} `json:"arch"`
					CephVersion struct {
						CephVersion16003151Gf202994fcf int `json:"ceph version 16.0.0-3151-gf202994fcf"`
					} `json:"ceph_version"`
					Cpu struct {
						IntelRCoreTMI78665UCPU190GHz int `json:"Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz"`
					} `json:"cpu"`
					Distro struct {
						Centos int `json:"centos"`
					} `json:"distro"`
					DistroDescription struct {
						CentOSLinux8Core int `json:"CentOS Linux 8 (Core)"`
					} `json:"distro_description"`
					KernelDescription struct {
						Hash1SMPWedJul1195301UTC2020 int `json:"#1 SMP Wed Jul 1 19:53:01 UTC 2020"`
					} `json:"kernel_description"`
					KernelVersion struct {
						N577200Fc32X8664 int `json:"5.7.7-200.fc32.x86_64"`
					} `json:"kernel_version"`
					Os struct {
						Linux int `json:"Linux"`
					} `json:"os"`
					OsdObjectstore struct {
						Bluestore int `json:"bluestore"`
					} `json:"osd_objectstore"`
					Rotational struct {
						N1 int `json:"1"`
					} `json:"rotational"`
				} `json:"osd"`
			} `json:"metadata"`
			Mon struct {
				Count    int `json:"count"`
				Features struct {
					Optional   []int    `json:"optional"`
					Persistent []string `json:"persistent"`
				} `json:"features"`
				Ipv4AddrMons  int `json:"ipv4_addr_mons"`
				Ipv6AddrMons  int `json:"ipv6_addr_mons"`
				MinMonRelease int `json:"min_mon_release"`
				V1AddrMons    int `json:"v1_addr_mons"`
				V2AddrMons    int `json:"v2_addr_mons"`
			} `json:"mon"`
			Osd struct {
				ClusterNetwork         bool   `json:"cluster_network"`
				Count                  int    `json:"count"`
				RequireMinCompatClient string `json:"require_min_compat_client"`
				RequireOsdRelease      string `json:"require_osd_release"`
			} `json:"osd"`
			Pools []struct {
				CacheMode          string `json:"cache_mode"`
				ErasureCodeProfile string `json:"erasure_code_profile"`
				MinSize            int    `json:"min_size"`
				PgAutoscaleMode    string `json:"pg_autoscale_mode"`
				PgNum              int    `json:"pg_num"`
				PgpNum             int    `json:"pgp_num"`
				Pool               int    `json:"pool"`
				Size               int    `json:"size"`
				TargetMaxBytes     int    `json:"target_max_bytes"`
				TargetMaxObjects   int    `json:"target_max_objects"`
				Type               string `json:"type"`
			} `json:"pools"`
			Rbd struct {
				MirroringByPool []bool `json:"mirroring_by_pool"`
				NumImagesByPool []int  `json:"num_images_by_pool"`
				NumPools        int    `json:"num_pools"`
			} `json:"rbd"`
			ReportId        string `json:"report_id"`
			ReportTimestamp string `json:"report_timestamp"`
			ReportVersion   int    `json:"report_version"`
			Rgw             struct {
				Count      int      `json:"count"`
				Frontends  []string `json:"frontends"`
				Zonegroups int      `json:"zonegroups"`
				Zones      int      `json:"zones"`
			} `json:"rgw"`
			Services struct {
				Rgw int `json:"rgw"`
			} `json:"services"`
			Usage struct {
				PgNum           int `json:"pg_num"`
				Pools           int `json:"pools"`
				TotalAvailBytes int `json:"total_avail_bytes"`
				TotalBytes      int `json:"total_bytes"`
				TotalUsedBytes  int `json:"total_used_bytes"`
			} `json:"usage"`
		} `json:"report"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTelemetryReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTelemetryReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUserResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndCephApiV10JSON200 *struct {
		// Email User email address
		Email string `json:"email"`

		// Enabled Is the user enabled?
		Enabled bool `json:"enabled"`

		// LastUpdate Details last updated
		LastUpdate int `json:"lastUpdate"`

		// Name User Name
		Name string `json:"name"`

		// PwdExpirationDate Password Expiration date
		PwdExpirationDate string `json:"pwdExpirationDate"`

		// PwdUpdateRequired Is Password Update Required?
		PwdUpdateRequired bool `json:"pwdUpdateRequired"`

		// Roles User Roles
		Roles []string `json:"roles"`

		// Username Username of the user
		Username string `json:"username"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUserValidatePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUserValidatePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUserValidatePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUserUsernameChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUserUsernameChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUserUsernameChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAuthWithBodyWithResponse request with arbitrary body returning *PostApiAuthResponse
func (c *ClientWithResponses) PostApiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error) {
	rsp, err := c.PostApiAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthWithResponse(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error) {
	rsp, err := c.PostApiAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResponse(rsp)
}

// PostApiAuthCheckWithBodyWithResponse request with arbitrary body returning *PostApiAuthCheckResponse
func (c *ClientWithResponses) PostApiAuthCheckWithBodyWithResponse(ctx context.Context, params *PostApiAuthCheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthCheckResponse, error) {
	rsp, err := c.PostApiAuthCheckWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthCheckResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthCheckWithResponse(ctx context.Context, params *PostApiAuthCheckParams, body PostApiAuthCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthCheckResponse, error) {
	rsp, err := c.PostApiAuthCheck(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthCheckResponse(rsp)
}

// PostApiAuthLogoutWithResponse request returning *PostApiAuthLogoutResponse
func (c *ClientWithResponses) PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

// GetApiBlockImageWithResponse request returning *GetApiBlockImageResponse
func (c *ClientWithResponses) GetApiBlockImageWithResponse(ctx context.Context, params *GetApiBlockImageParams, reqEditors ...RequestEditorFn) (*GetApiBlockImageResponse, error) {
	rsp, err := c.GetApiBlockImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockImageResponse(rsp)
}

// PostApiBlockImageWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageResponse
func (c *ClientWithResponses) PostApiBlockImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageResponse, error) {
	rsp, err := c.PostApiBlockImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageWithResponse(ctx context.Context, body PostApiBlockImageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageResponse, error) {
	rsp, err := c.PostApiBlockImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageResponse(rsp)
}

// GetApiBlockImageCloneFormatVersionWithResponse request returning *GetApiBlockImageCloneFormatVersionResponse
func (c *ClientWithResponses) GetApiBlockImageCloneFormatVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockImageCloneFormatVersionResponse, error) {
	rsp, err := c.GetApiBlockImageCloneFormatVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockImageCloneFormatVersionResponse(rsp)
}

// GetApiBlockImageDefaultFeaturesWithResponse request returning *GetApiBlockImageDefaultFeaturesResponse
func (c *ClientWithResponses) GetApiBlockImageDefaultFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockImageDefaultFeaturesResponse, error) {
	rsp, err := c.GetApiBlockImageDefaultFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockImageDefaultFeaturesResponse(rsp)
}

// GetApiBlockImageTrashWithResponse request returning *GetApiBlockImageTrashResponse
func (c *ClientWithResponses) GetApiBlockImageTrashWithResponse(ctx context.Context, params *GetApiBlockImageTrashParams, reqEditors ...RequestEditorFn) (*GetApiBlockImageTrashResponse, error) {
	rsp, err := c.GetApiBlockImageTrash(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockImageTrashResponse(rsp)
}

// PostApiBlockImageTrashPurgeWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageTrashPurgeResponse
func (c *ClientWithResponses) PostApiBlockImageTrashPurgeWithBodyWithResponse(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashPurgeResponse, error) {
	rsp, err := c.PostApiBlockImageTrashPurgeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageTrashPurgeResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageTrashPurgeWithResponse(ctx context.Context, params *PostApiBlockImageTrashPurgeParams, body PostApiBlockImageTrashPurgeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashPurgeResponse, error) {
	rsp, err := c.PostApiBlockImageTrashPurge(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageTrashPurgeResponse(rsp)
}

// DeleteApiBlockImageTrashImageIdSpecWithResponse request returning *DeleteApiBlockImageTrashImageIdSpecResponse
func (c *ClientWithResponses) DeleteApiBlockImageTrashImageIdSpecWithResponse(ctx context.Context, imageIdSpec string, params *DeleteApiBlockImageTrashImageIdSpecParams, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageTrashImageIdSpecResponse, error) {
	rsp, err := c.DeleteApiBlockImageTrashImageIdSpec(ctx, imageIdSpec, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBlockImageTrashImageIdSpecResponse(rsp)
}

// PostApiBlockImageTrashImageIdSpecRestoreWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageTrashImageIdSpecRestoreResponse
func (c *ClientWithResponses) PostApiBlockImageTrashImageIdSpecRestoreWithBodyWithResponse(ctx context.Context, imageIdSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashImageIdSpecRestoreResponse, error) {
	rsp, err := c.PostApiBlockImageTrashImageIdSpecRestoreWithBody(ctx, imageIdSpec, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageTrashImageIdSpecRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageTrashImageIdSpecRestoreWithResponse(ctx context.Context, imageIdSpec string, body PostApiBlockImageTrashImageIdSpecRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageTrashImageIdSpecRestoreResponse, error) {
	rsp, err := c.PostApiBlockImageTrashImageIdSpecRestore(ctx, imageIdSpec, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageTrashImageIdSpecRestoreResponse(rsp)
}

// DeleteApiBlockImageImageSpecWithResponse request returning *DeleteApiBlockImageImageSpecResponse
func (c *ClientWithResponses) DeleteApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageImageSpecResponse, error) {
	rsp, err := c.DeleteApiBlockImageImageSpec(ctx, imageSpec, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBlockImageImageSpecResponse(rsp)
}

// GetApiBlockImageImageSpecWithResponse request returning *GetApiBlockImageImageSpecResponse
func (c *ClientWithResponses) GetApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*GetApiBlockImageImageSpecResponse, error) {
	rsp, err := c.GetApiBlockImageImageSpec(ctx, imageSpec, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockImageImageSpecResponse(rsp)
}

// PutApiBlockImageImageSpecWithBodyWithResponse request with arbitrary body returning *PutApiBlockImageImageSpecResponse
func (c *ClientWithResponses) PutApiBlockImageImageSpecWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecResponse, error) {
	rsp, err := c.PutApiBlockImageImageSpecWithBody(ctx, imageSpec, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockImageImageSpecResponse(rsp)
}

func (c *ClientWithResponses) PutApiBlockImageImageSpecWithResponse(ctx context.Context, imageSpec string, body PutApiBlockImageImageSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecResponse, error) {
	rsp, err := c.PutApiBlockImageImageSpec(ctx, imageSpec, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockImageImageSpecResponse(rsp)
}

// PostApiBlockImageImageSpecCopyWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageImageSpecCopyResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecCopyWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecCopyResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecCopyWithBody(ctx, imageSpec, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecCopyResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageImageSpecCopyWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecCopyResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecCopy(ctx, imageSpec, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecCopyResponse(rsp)
}

// PostApiBlockImageImageSpecFlattenWithResponse request returning *PostApiBlockImageImageSpecFlattenResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecFlattenWithResponse(ctx context.Context, imageSpec string, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecFlattenResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecFlatten(ctx, imageSpec, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecFlattenResponse(rsp)
}

// PostApiBlockImageImageSpecMoveTrashWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageImageSpecMoveTrashResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecMoveTrashWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecMoveTrashResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecMoveTrashWithBody(ctx, imageSpec, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecMoveTrashResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageImageSpecMoveTrashWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecMoveTrashJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecMoveTrashResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecMoveTrash(ctx, imageSpec, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecMoveTrashResponse(rsp)
}

// PostApiBlockImageImageSpecSnapWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageImageSpecSnapResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecSnapWithBodyWithResponse(ctx context.Context, imageSpec string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecSnapWithBody(ctx, imageSpec, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecSnapResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageImageSpecSnapWithResponse(ctx context.Context, imageSpec string, body PostApiBlockImageImageSpecSnapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecSnap(ctx, imageSpec, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecSnapResponse(rsp)
}

// DeleteApiBlockImageImageSpecSnapSnapshotNameWithResponse request returning *DeleteApiBlockImageImageSpecSnapSnapshotNameResponse
func (c *ClientWithResponses) DeleteApiBlockImageImageSpecSnapSnapshotNameWithResponse(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*DeleteApiBlockImageImageSpecSnapSnapshotNameResponse, error) {
	rsp, err := c.DeleteApiBlockImageImageSpecSnapSnapshotName(ctx, imageSpec, snapshotName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBlockImageImageSpecSnapSnapshotNameResponse(rsp)
}

// PutApiBlockImageImageSpecSnapSnapshotNameWithBodyWithResponse request with arbitrary body returning *PutApiBlockImageImageSpecSnapSnapshotNameResponse
func (c *ClientWithResponses) PutApiBlockImageImageSpecSnapSnapshotNameWithBodyWithResponse(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecSnapSnapshotNameResponse, error) {
	rsp, err := c.PutApiBlockImageImageSpecSnapSnapshotNameWithBody(ctx, imageSpec, snapshotName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockImageImageSpecSnapSnapshotNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiBlockImageImageSpecSnapSnapshotNameWithResponse(ctx context.Context, imageSpec string, snapshotName string, body PutApiBlockImageImageSpecSnapSnapshotNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockImageImageSpecSnapSnapshotNameResponse, error) {
	rsp, err := c.PutApiBlockImageImageSpecSnapSnapshotName(ctx, imageSpec, snapshotName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockImageImageSpecSnapSnapshotNameResponse(rsp)
}

// PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBodyWithResponse request with arbitrary body returning *PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBodyWithResponse(ctx context.Context, imageSpec string, snapshotName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecSnapSnapshotNameCloneWithBody(ctx, imageSpec, snapshotName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecSnapSnapshotNameCloneResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockImageImageSpecSnapSnapshotNameCloneWithResponse(ctx context.Context, imageSpec string, snapshotName string, body PostApiBlockImageImageSpecSnapSnapshotNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecSnapSnapshotNameClone(ctx, imageSpec, snapshotName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecSnapSnapshotNameCloneResponse(rsp)
}

// PostApiBlockImageImageSpecSnapSnapshotNameRollbackWithResponse request returning *PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse
func (c *ClientWithResponses) PostApiBlockImageImageSpecSnapSnapshotNameRollbackWithResponse(ctx context.Context, imageSpec string, snapshotName string, reqEditors ...RequestEditorFn) (*PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse, error) {
	rsp, err := c.PostApiBlockImageImageSpecSnapSnapshotNameRollback(ctx, imageSpec, snapshotName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse(rsp)
}

// GetApiBlockMirroringPoolPoolNameWithResponse request returning *GetApiBlockMirroringPoolPoolNameResponse
func (c *ClientWithResponses) GetApiBlockMirroringPoolPoolNameWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNameResponse, error) {
	rsp, err := c.GetApiBlockMirroringPoolPoolName(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockMirroringPoolPoolNameResponse(rsp)
}

// PutApiBlockMirroringPoolPoolNameWithBodyWithResponse request with arbitrary body returning *PutApiBlockMirroringPoolPoolNameResponse
func (c *ClientWithResponses) PutApiBlockMirroringPoolPoolNameWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNameResponse, error) {
	rsp, err := c.PutApiBlockMirroringPoolPoolNameWithBody(ctx, poolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringPoolPoolNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiBlockMirroringPoolPoolNameWithResponse(ctx context.Context, poolName string, body PutApiBlockMirroringPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNameResponse, error) {
	rsp, err := c.PutApiBlockMirroringPoolPoolName(ctx, poolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringPoolPoolNameResponse(rsp)
}

// PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBodyWithResponse request with arbitrary body returning *PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse
func (c *ClientWithResponses) PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse, error) {
	rsp, err := c.PostApiBlockMirroringPoolPoolNameBootstrapPeerWithBody(ctx, poolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockMirroringPoolPoolNameBootstrapPeerResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockMirroringPoolPoolNameBootstrapPeerWithResponse(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNameBootstrapPeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse, error) {
	rsp, err := c.PostApiBlockMirroringPoolPoolNameBootstrapPeer(ctx, poolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockMirroringPoolPoolNameBootstrapPeerResponse(rsp)
}

// PostApiBlockMirroringPoolPoolNameBootstrapTokenWithResponse request returning *PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse
func (c *ClientWithResponses) PostApiBlockMirroringPoolPoolNameBootstrapTokenWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse, error) {
	rsp, err := c.PostApiBlockMirroringPoolPoolNameBootstrapToken(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockMirroringPoolPoolNameBootstrapTokenResponse(rsp)
}

// GetApiBlockMirroringPoolPoolNamePeerWithResponse request returning *GetApiBlockMirroringPoolPoolNamePeerResponse
func (c *ClientWithResponses) GetApiBlockMirroringPoolPoolNamePeerWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNamePeerResponse, error) {
	rsp, err := c.GetApiBlockMirroringPoolPoolNamePeer(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockMirroringPoolPoolNamePeerResponse(rsp)
}

// PostApiBlockMirroringPoolPoolNamePeerWithBodyWithResponse request with arbitrary body returning *PostApiBlockMirroringPoolPoolNamePeerResponse
func (c *ClientWithResponses) PostApiBlockMirroringPoolPoolNamePeerWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNamePeerResponse, error) {
	rsp, err := c.PostApiBlockMirroringPoolPoolNamePeerWithBody(ctx, poolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockMirroringPoolPoolNamePeerResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockMirroringPoolPoolNamePeerWithResponse(ctx context.Context, poolName string, body PostApiBlockMirroringPoolPoolNamePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockMirroringPoolPoolNamePeerResponse, error) {
	rsp, err := c.PostApiBlockMirroringPoolPoolNamePeer(ctx, poolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockMirroringPoolPoolNamePeerResponse(rsp)
}

// DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse request returning *DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse
func (c *ClientWithResponses) DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	rsp, err := c.DeleteApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx, poolName, peerUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp)
}

// GetApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse request returning *GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse
func (c *ClientWithResponses) GetApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	rsp, err := c.GetApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx, poolName, peerUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp)
}

// PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBodyWithResponse request with arbitrary body returning *PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse
func (c *ClientWithResponses) PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBodyWithResponse(ctx context.Context, poolName string, peerUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	rsp, err := c.PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithBody(ctx, poolName, peerUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp)
}

func (c *ClientWithResponses) PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse(ctx context.Context, poolName string, peerUuid string, body PutApiBlockMirroringPoolPoolNamePeerPeerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	rsp, err := c.PutApiBlockMirroringPoolPoolNamePeerPeerUuid(ctx, poolName, peerUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp)
}

// GetApiBlockMirroringSiteNameWithResponse request returning *GetApiBlockMirroringSiteNameResponse
func (c *ClientWithResponses) GetApiBlockMirroringSiteNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringSiteNameResponse, error) {
	rsp, err := c.GetApiBlockMirroringSiteName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockMirroringSiteNameResponse(rsp)
}

// PutApiBlockMirroringSiteNameWithBodyWithResponse request with arbitrary body returning *PutApiBlockMirroringSiteNameResponse
func (c *ClientWithResponses) PutApiBlockMirroringSiteNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringSiteNameResponse, error) {
	rsp, err := c.PutApiBlockMirroringSiteNameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringSiteNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiBlockMirroringSiteNameWithResponse(ctx context.Context, body PutApiBlockMirroringSiteNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiBlockMirroringSiteNameResponse, error) {
	rsp, err := c.PutApiBlockMirroringSiteName(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiBlockMirroringSiteNameResponse(rsp)
}

// GetApiBlockMirroringSummaryWithResponse request returning *GetApiBlockMirroringSummaryResponse
func (c *ClientWithResponses) GetApiBlockMirroringSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBlockMirroringSummaryResponse, error) {
	rsp, err := c.GetApiBlockMirroringSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockMirroringSummaryResponse(rsp)
}

// GetApiBlockPoolPoolNameNamespaceWithResponse request returning *GetApiBlockPoolPoolNameNamespaceResponse
func (c *ClientWithResponses) GetApiBlockPoolPoolNameNamespaceWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiBlockPoolPoolNameNamespaceResponse, error) {
	rsp, err := c.GetApiBlockPoolPoolNameNamespace(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBlockPoolPoolNameNamespaceResponse(rsp)
}

// PostApiBlockPoolPoolNameNamespaceWithBodyWithResponse request with arbitrary body returning *PostApiBlockPoolPoolNameNamespaceResponse
func (c *ClientWithResponses) PostApiBlockPoolPoolNameNamespaceWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBlockPoolPoolNameNamespaceResponse, error) {
	rsp, err := c.PostApiBlockPoolPoolNameNamespaceWithBody(ctx, poolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockPoolPoolNameNamespaceResponse(rsp)
}

func (c *ClientWithResponses) PostApiBlockPoolPoolNameNamespaceWithResponse(ctx context.Context, poolName string, body PostApiBlockPoolPoolNameNamespaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBlockPoolPoolNameNamespaceResponse, error) {
	rsp, err := c.PostApiBlockPoolPoolNameNamespace(ctx, poolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBlockPoolPoolNameNamespaceResponse(rsp)
}

// DeleteApiBlockPoolPoolNameNamespaceNamespaceWithResponse request returning *DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse
func (c *ClientWithResponses) DeleteApiBlockPoolPoolNameNamespaceNamespaceWithResponse(ctx context.Context, poolName string, namespace string, reqEditors ...RequestEditorFn) (*DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse, error) {
	rsp, err := c.DeleteApiBlockPoolPoolNameNamespaceNamespace(ctx, poolName, namespace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBlockPoolPoolNameNamespaceNamespaceResponse(rsp)
}

// GetApiCephfsWithResponse request returning *GetApiCephfsResponse
func (c *ClientWithResponses) GetApiCephfsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCephfsResponse, error) {
	rsp, err := c.GetApiCephfs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsResponse(rsp)
}

// GetApiCephfsFsIdWithResponse request returning *GetApiCephfsFsIdResponse
func (c *ClientWithResponses) GetApiCephfsFsIdWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdResponse, error) {
	rsp, err := c.GetApiCephfsFsId(ctx, fsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdResponse(rsp)
}

// DeleteApiCephfsFsIdClientClientIdWithResponse request returning *DeleteApiCephfsFsIdClientClientIdResponse
func (c *ClientWithResponses) DeleteApiCephfsFsIdClientClientIdWithResponse(ctx context.Context, fsId string, clientId string, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdClientClientIdResponse, error) {
	rsp, err := c.DeleteApiCephfsFsIdClientClientId(ctx, fsId, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiCephfsFsIdClientClientIdResponse(rsp)
}

// GetApiCephfsFsIdClientsWithResponse request returning *GetApiCephfsFsIdClientsResponse
func (c *ClientWithResponses) GetApiCephfsFsIdClientsWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdClientsResponse, error) {
	rsp, err := c.GetApiCephfsFsIdClients(ctx, fsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdClientsResponse(rsp)
}

// GetApiCephfsFsIdGetRootDirectoryWithResponse request returning *GetApiCephfsFsIdGetRootDirectoryResponse
func (c *ClientWithResponses) GetApiCephfsFsIdGetRootDirectoryWithResponse(ctx context.Context, fsId string, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdGetRootDirectoryResponse, error) {
	rsp, err := c.GetApiCephfsFsIdGetRootDirectory(ctx, fsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdGetRootDirectoryResponse(rsp)
}

// GetApiCephfsFsIdLsDirWithResponse request returning *GetApiCephfsFsIdLsDirResponse
func (c *ClientWithResponses) GetApiCephfsFsIdLsDirWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdLsDirParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdLsDirResponse, error) {
	rsp, err := c.GetApiCephfsFsIdLsDir(ctx, fsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdLsDirResponse(rsp)
}

// GetApiCephfsFsIdMdsCountersWithResponse request returning *GetApiCephfsFsIdMdsCountersResponse
func (c *ClientWithResponses) GetApiCephfsFsIdMdsCountersWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdMdsCountersParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdMdsCountersResponse, error) {
	rsp, err := c.GetApiCephfsFsIdMdsCounters(ctx, fsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdMdsCountersResponse(rsp)
}

// GetApiCephfsFsIdQuotaWithResponse request returning *GetApiCephfsFsIdQuotaResponse
func (c *ClientWithResponses) GetApiCephfsFsIdQuotaWithResponse(ctx context.Context, fsId string, params *GetApiCephfsFsIdQuotaParams, reqEditors ...RequestEditorFn) (*GetApiCephfsFsIdQuotaResponse, error) {
	rsp, err := c.GetApiCephfsFsIdQuota(ctx, fsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCephfsFsIdQuotaResponse(rsp)
}

// PutApiCephfsFsIdQuotaWithBodyWithResponse request with arbitrary body returning *PutApiCephfsFsIdQuotaResponse
func (c *ClientWithResponses) PutApiCephfsFsIdQuotaWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiCephfsFsIdQuotaResponse, error) {
	rsp, err := c.PutApiCephfsFsIdQuotaWithBody(ctx, fsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiCephfsFsIdQuotaResponse(rsp)
}

func (c *ClientWithResponses) PutApiCephfsFsIdQuotaWithResponse(ctx context.Context, fsId string, body PutApiCephfsFsIdQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiCephfsFsIdQuotaResponse, error) {
	rsp, err := c.PutApiCephfsFsIdQuota(ctx, fsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiCephfsFsIdQuotaResponse(rsp)
}

// DeleteApiCephfsFsIdSnapshotWithResponse request returning *DeleteApiCephfsFsIdSnapshotResponse
func (c *ClientWithResponses) DeleteApiCephfsFsIdSnapshotWithResponse(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdSnapshotParams, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdSnapshotResponse, error) {
	rsp, err := c.DeleteApiCephfsFsIdSnapshot(ctx, fsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiCephfsFsIdSnapshotResponse(rsp)
}

// PostApiCephfsFsIdSnapshotWithBodyWithResponse request with arbitrary body returning *PostApiCephfsFsIdSnapshotResponse
func (c *ClientWithResponses) PostApiCephfsFsIdSnapshotWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdSnapshotResponse, error) {
	rsp, err := c.PostApiCephfsFsIdSnapshotWithBody(ctx, fsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCephfsFsIdSnapshotResponse(rsp)
}

func (c *ClientWithResponses) PostApiCephfsFsIdSnapshotWithResponse(ctx context.Context, fsId string, body PostApiCephfsFsIdSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdSnapshotResponse, error) {
	rsp, err := c.PostApiCephfsFsIdSnapshot(ctx, fsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCephfsFsIdSnapshotResponse(rsp)
}

// DeleteApiCephfsFsIdTreeWithResponse request returning *DeleteApiCephfsFsIdTreeResponse
func (c *ClientWithResponses) DeleteApiCephfsFsIdTreeWithResponse(ctx context.Context, fsId string, params *DeleteApiCephfsFsIdTreeParams, reqEditors ...RequestEditorFn) (*DeleteApiCephfsFsIdTreeResponse, error) {
	rsp, err := c.DeleteApiCephfsFsIdTree(ctx, fsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiCephfsFsIdTreeResponse(rsp)
}

// PostApiCephfsFsIdTreeWithBodyWithResponse request with arbitrary body returning *PostApiCephfsFsIdTreeResponse
func (c *ClientWithResponses) PostApiCephfsFsIdTreeWithBodyWithResponse(ctx context.Context, fsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdTreeResponse, error) {
	rsp, err := c.PostApiCephfsFsIdTreeWithBody(ctx, fsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCephfsFsIdTreeResponse(rsp)
}

func (c *ClientWithResponses) PostApiCephfsFsIdTreeWithResponse(ctx context.Context, fsId string, body PostApiCephfsFsIdTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCephfsFsIdTreeResponse, error) {
	rsp, err := c.PostApiCephfsFsIdTree(ctx, fsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCephfsFsIdTreeResponse(rsp)
}

// GetApiClusterWithResponse request returning *GetApiClusterResponse
func (c *ClientWithResponses) GetApiClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterResponse, error) {
	rsp, err := c.GetApiCluster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiClusterResponse(rsp)
}

// PutApiClusterWithBodyWithResponse request with arbitrary body returning *PutApiClusterResponse
func (c *ClientWithResponses) PutApiClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterResponse, error) {
	rsp, err := c.PutApiClusterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterResponse(rsp)
}

func (c *ClientWithResponses) PutApiClusterWithResponse(ctx context.Context, body PutApiClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterResponse, error) {
	rsp, err := c.PutApiCluster(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterResponse(rsp)
}

// GetApiClusterUserWithResponse request returning *GetApiClusterUserResponse
func (c *ClientWithResponses) GetApiClusterUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterUserResponse, error) {
	rsp, err := c.GetApiClusterUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiClusterUserResponse(rsp)
}

// PostApiClusterUserWithBodyWithResponse request with arbitrary body returning *PostApiClusterUserResponse
func (c *ClientWithResponses) PostApiClusterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterUserResponse, error) {
	rsp, err := c.PostApiClusterUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterUserResponse(rsp)
}

func (c *ClientWithResponses) PostApiClusterUserWithResponse(ctx context.Context, body PostApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterUserResponse, error) {
	rsp, err := c.PostApiClusterUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterUserResponse(rsp)
}

// PutApiClusterUserWithBodyWithResponse request with arbitrary body returning *PutApiClusterUserResponse
func (c *ClientWithResponses) PutApiClusterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterUserResponse, error) {
	rsp, err := c.PutApiClusterUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterUserResponse(rsp)
}

func (c *ClientWithResponses) PutApiClusterUserWithResponse(ctx context.Context, body PutApiClusterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterUserResponse, error) {
	rsp, err := c.PutApiClusterUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterUserResponse(rsp)
}

// PostApiClusterUserExportWithBodyWithResponse request with arbitrary body returning *PostApiClusterUserExportResponse
func (c *ClientWithResponses) PostApiClusterUserExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterUserExportResponse, error) {
	rsp, err := c.PostApiClusterUserExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterUserExportResponse(rsp)
}

func (c *ClientWithResponses) PostApiClusterUserExportWithResponse(ctx context.Context, body PostApiClusterUserExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterUserExportResponse, error) {
	rsp, err := c.PostApiClusterUserExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterUserExportResponse(rsp)
}

// DeleteApiClusterUserUserEntityWithResponse request returning *DeleteApiClusterUserUserEntityResponse
func (c *ClientWithResponses) DeleteApiClusterUserUserEntityWithResponse(ctx context.Context, userEntity string, reqEditors ...RequestEditorFn) (*DeleteApiClusterUserUserEntityResponse, error) {
	rsp, err := c.DeleteApiClusterUserUserEntity(ctx, userEntity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiClusterUserUserEntityResponse(rsp)
}

// GetApiClusterConfWithResponse request returning *GetApiClusterConfResponse
func (c *ClientWithResponses) GetApiClusterConfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiClusterConfResponse, error) {
	rsp, err := c.GetApiClusterConf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiClusterConfResponse(rsp)
}

// PostApiClusterConfWithBodyWithResponse request with arbitrary body returning *PostApiClusterConfResponse
func (c *ClientWithResponses) PostApiClusterConfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiClusterConfResponse, error) {
	rsp, err := c.PostApiClusterConfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterConfResponse(rsp)
}

func (c *ClientWithResponses) PostApiClusterConfWithResponse(ctx context.Context, body PostApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiClusterConfResponse, error) {
	rsp, err := c.PostApiClusterConf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiClusterConfResponse(rsp)
}

// PutApiClusterConfWithBodyWithResponse request with arbitrary body returning *PutApiClusterConfResponse
func (c *ClientWithResponses) PutApiClusterConfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiClusterConfResponse, error) {
	rsp, err := c.PutApiClusterConfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterConfResponse(rsp)
}

func (c *ClientWithResponses) PutApiClusterConfWithResponse(ctx context.Context, body PutApiClusterConfJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiClusterConfResponse, error) {
	rsp, err := c.PutApiClusterConf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiClusterConfResponse(rsp)
}

// GetApiClusterConfFilterWithResponse request returning *GetApiClusterConfFilterResponse
func (c *ClientWithResponses) GetApiClusterConfFilterWithResponse(ctx context.Context, params *GetApiClusterConfFilterParams, reqEditors ...RequestEditorFn) (*GetApiClusterConfFilterResponse, error) {
	rsp, err := c.GetApiClusterConfFilter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiClusterConfFilterResponse(rsp)
}

// DeleteApiClusterConfNameWithResponse request returning *DeleteApiClusterConfNameResponse
func (c *ClientWithResponses) DeleteApiClusterConfNameWithResponse(ctx context.Context, name string, params *DeleteApiClusterConfNameParams, reqEditors ...RequestEditorFn) (*DeleteApiClusterConfNameResponse, error) {
	rsp, err := c.DeleteApiClusterConfName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiClusterConfNameResponse(rsp)
}

// GetApiClusterConfNameWithResponse request returning *GetApiClusterConfNameResponse
func (c *ClientWithResponses) GetApiClusterConfNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiClusterConfNameResponse, error) {
	rsp, err := c.GetApiClusterConfName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiClusterConfNameResponse(rsp)
}

// GetApiCrushRuleWithResponse request returning *GetApiCrushRuleResponse
func (c *ClientWithResponses) GetApiCrushRuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCrushRuleResponse, error) {
	rsp, err := c.GetApiCrushRule(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCrushRuleResponse(rsp)
}

// PostApiCrushRuleWithBodyWithResponse request with arbitrary body returning *PostApiCrushRuleResponse
func (c *ClientWithResponses) PostApiCrushRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCrushRuleResponse, error) {
	rsp, err := c.PostApiCrushRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCrushRuleResponse(rsp)
}

func (c *ClientWithResponses) PostApiCrushRuleWithResponse(ctx context.Context, body PostApiCrushRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCrushRuleResponse, error) {
	rsp, err := c.PostApiCrushRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCrushRuleResponse(rsp)
}

// DeleteApiCrushRuleNameWithResponse request returning *DeleteApiCrushRuleNameResponse
func (c *ClientWithResponses) DeleteApiCrushRuleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiCrushRuleNameResponse, error) {
	rsp, err := c.DeleteApiCrushRuleName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiCrushRuleNameResponse(rsp)
}

// GetApiCrushRuleNameWithResponse request returning *GetApiCrushRuleNameResponse
func (c *ClientWithResponses) GetApiCrushRuleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiCrushRuleNameResponse, error) {
	rsp, err := c.GetApiCrushRuleName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCrushRuleNameResponse(rsp)
}

// PutApiDaemonDaemonNameWithBodyWithResponse request with arbitrary body returning *PutApiDaemonDaemonNameResponse
func (c *ClientWithResponses) PutApiDaemonDaemonNameWithBodyWithResponse(ctx context.Context, daemonName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDaemonDaemonNameResponse, error) {
	rsp, err := c.PutApiDaemonDaemonNameWithBody(ctx, daemonName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDaemonDaemonNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiDaemonDaemonNameWithResponse(ctx context.Context, daemonName string, body PutApiDaemonDaemonNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDaemonDaemonNameResponse, error) {
	rsp, err := c.PutApiDaemonDaemonName(ctx, daemonName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDaemonDaemonNameResponse(rsp)
}

// GetApiErasureCodeProfileWithResponse request returning *GetApiErasureCodeProfileResponse
func (c *ClientWithResponses) GetApiErasureCodeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiErasureCodeProfileResponse, error) {
	rsp, err := c.GetApiErasureCodeProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiErasureCodeProfileResponse(rsp)
}

// PostApiErasureCodeProfileWithBodyWithResponse request with arbitrary body returning *PostApiErasureCodeProfileResponse
func (c *ClientWithResponses) PostApiErasureCodeProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiErasureCodeProfileResponse, error) {
	rsp, err := c.PostApiErasureCodeProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiErasureCodeProfileResponse(rsp)
}

func (c *ClientWithResponses) PostApiErasureCodeProfileWithResponse(ctx context.Context, body PostApiErasureCodeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiErasureCodeProfileResponse, error) {
	rsp, err := c.PostApiErasureCodeProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiErasureCodeProfileResponse(rsp)
}

// DeleteApiErasureCodeProfileNameWithResponse request returning *DeleteApiErasureCodeProfileNameResponse
func (c *ClientWithResponses) DeleteApiErasureCodeProfileNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiErasureCodeProfileNameResponse, error) {
	rsp, err := c.DeleteApiErasureCodeProfileName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiErasureCodeProfileNameResponse(rsp)
}

// GetApiErasureCodeProfileNameWithResponse request returning *GetApiErasureCodeProfileNameResponse
func (c *ClientWithResponses) GetApiErasureCodeProfileNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiErasureCodeProfileNameResponse, error) {
	rsp, err := c.GetApiErasureCodeProfileName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiErasureCodeProfileNameResponse(rsp)
}

// GetApiFeatureTogglesWithResponse request returning *GetApiFeatureTogglesResponse
func (c *ClientWithResponses) GetApiFeatureTogglesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeatureTogglesResponse, error) {
	rsp, err := c.GetApiFeatureToggles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFeatureTogglesResponse(rsp)
}

// GetApiFeedbackWithResponse request returning *GetApiFeedbackResponse
func (c *ClientWithResponses) GetApiFeedbackWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackResponse, error) {
	rsp, err := c.GetApiFeedback(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFeedbackResponse(rsp)
}

// PostApiFeedbackWithBodyWithResponse request with arbitrary body returning *PostApiFeedbackResponse
func (c *ClientWithResponses) PostApiFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error) {
	rsp, err := c.PostApiFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackResponse(rsp)
}

func (c *ClientWithResponses) PostApiFeedbackWithResponse(ctx context.Context, body PostApiFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackResponse, error) {
	rsp, err := c.PostApiFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackResponse(rsp)
}

// DeleteApiFeedbackApiKeyWithResponse request returning *DeleteApiFeedbackApiKeyResponse
func (c *ClientWithResponses) DeleteApiFeedbackApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiFeedbackApiKeyResponse, error) {
	rsp, err := c.DeleteApiFeedbackApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiFeedbackApiKeyResponse(rsp)
}

// GetApiFeedbackApiKeyWithResponse request returning *GetApiFeedbackApiKeyResponse
func (c *ClientWithResponses) GetApiFeedbackApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiFeedbackApiKeyResponse, error) {
	rsp, err := c.GetApiFeedbackApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFeedbackApiKeyResponse(rsp)
}

// PostApiFeedbackApiKeyWithBodyWithResponse request with arbitrary body returning *PostApiFeedbackApiKeyResponse
func (c *ClientWithResponses) PostApiFeedbackApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiFeedbackApiKeyResponse, error) {
	rsp, err := c.PostApiFeedbackApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiFeedbackApiKeyWithResponse(ctx context.Context, body PostApiFeedbackApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiFeedbackApiKeyResponse, error) {
	rsp, err := c.PostApiFeedbackApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiFeedbackApiKeyResponse(rsp)
}

// PostApiGrafanaDashboardsWithResponse request returning *PostApiGrafanaDashboardsResponse
func (c *ClientWithResponses) PostApiGrafanaDashboardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiGrafanaDashboardsResponse, error) {
	rsp, err := c.PostApiGrafanaDashboards(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGrafanaDashboardsResponse(rsp)
}

// GetApiGrafanaUrlWithResponse request returning *GetApiGrafanaUrlResponse
func (c *ClientWithResponses) GetApiGrafanaUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGrafanaUrlResponse, error) {
	rsp, err := c.GetApiGrafanaUrl(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGrafanaUrlResponse(rsp)
}

// GetApiGrafanaValidationParamsWithResponse request returning *GetApiGrafanaValidationParamsResponse
func (c *ClientWithResponses) GetApiGrafanaValidationParamsWithResponse(ctx context.Context, params string, reqEditors ...RequestEditorFn) (*GetApiGrafanaValidationParamsResponse, error) {
	rsp, err := c.GetApiGrafanaValidationParams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGrafanaValidationParamsResponse(rsp)
}

// GetApiHealthFullWithResponse request returning *GetApiHealthFullResponse
func (c *ClientWithResponses) GetApiHealthFullWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthFullResponse, error) {
	rsp, err := c.GetApiHealthFull(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHealthFullResponse(rsp)
}

// GetApiHealthGetClusterCapacityWithResponse request returning *GetApiHealthGetClusterCapacityResponse
func (c *ClientWithResponses) GetApiHealthGetClusterCapacityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthGetClusterCapacityResponse, error) {
	rsp, err := c.GetApiHealthGetClusterCapacity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHealthGetClusterCapacityResponse(rsp)
}

// GetApiHealthGetClusterFsidWithResponse request returning *GetApiHealthGetClusterFsidResponse
func (c *ClientWithResponses) GetApiHealthGetClusterFsidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthGetClusterFsidResponse, error) {
	rsp, err := c.GetApiHealthGetClusterFsid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHealthGetClusterFsidResponse(rsp)
}

// GetApiHealthMinimalWithResponse request returning *GetApiHealthMinimalResponse
func (c *ClientWithResponses) GetApiHealthMinimalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHealthMinimalResponse, error) {
	rsp, err := c.GetApiHealthMinimal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHealthMinimalResponse(rsp)
}

// GetApiHostWithResponse request returning *GetApiHostResponse
func (c *ClientWithResponses) GetApiHostWithResponse(ctx context.Context, params *GetApiHostParams, reqEditors ...RequestEditorFn) (*GetApiHostResponse, error) {
	rsp, err := c.GetApiHost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostResponse(rsp)
}

// PostApiHostWithBodyWithResponse request with arbitrary body returning *PostApiHostResponse
func (c *ClientWithResponses) PostApiHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHostResponse, error) {
	rsp, err := c.PostApiHostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHostResponse(rsp)
}

func (c *ClientWithResponses) PostApiHostWithResponse(ctx context.Context, body PostApiHostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHostResponse, error) {
	rsp, err := c.PostApiHost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHostResponse(rsp)
}

// DeleteApiHostHostnameWithResponse request returning *DeleteApiHostHostnameResponse
func (c *ClientWithResponses) DeleteApiHostHostnameWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*DeleteApiHostHostnameResponse, error) {
	rsp, err := c.DeleteApiHostHostname(ctx, hostname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiHostHostnameResponse(rsp)
}

// GetApiHostHostnameWithResponse request returning *GetApiHostHostnameResponse
func (c *ClientWithResponses) GetApiHostHostnameWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameResponse, error) {
	rsp, err := c.GetApiHostHostname(ctx, hostname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostHostnameResponse(rsp)
}

// PutApiHostHostnameWithBodyWithResponse request with arbitrary body returning *PutApiHostHostnameResponse
func (c *ClientWithResponses) PutApiHostHostnameWithBodyWithResponse(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHostHostnameResponse, error) {
	rsp, err := c.PutApiHostHostnameWithBody(ctx, hostname, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHostHostnameResponse(rsp)
}

func (c *ClientWithResponses) PutApiHostHostnameWithResponse(ctx context.Context, hostname string, body PutApiHostHostnameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHostHostnameResponse, error) {
	rsp, err := c.PutApiHostHostname(ctx, hostname, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHostHostnameResponse(rsp)
}

// GetApiHostHostnameDaemonsWithResponse request returning *GetApiHostHostnameDaemonsResponse
func (c *ClientWithResponses) GetApiHostHostnameDaemonsWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameDaemonsResponse, error) {
	rsp, err := c.GetApiHostHostnameDaemons(ctx, hostname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostHostnameDaemonsResponse(rsp)
}

// GetApiHostHostnameDevicesWithResponse request returning *GetApiHostHostnameDevicesResponse
func (c *ClientWithResponses) GetApiHostHostnameDevicesWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameDevicesResponse, error) {
	rsp, err := c.GetApiHostHostnameDevices(ctx, hostname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostHostnameDevicesResponse(rsp)
}

// PostApiHostHostnameIdentifyDeviceWithBodyWithResponse request with arbitrary body returning *PostApiHostHostnameIdentifyDeviceResponse
func (c *ClientWithResponses) PostApiHostHostnameIdentifyDeviceWithBodyWithResponse(ctx context.Context, hostname string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHostHostnameIdentifyDeviceResponse, error) {
	rsp, err := c.PostApiHostHostnameIdentifyDeviceWithBody(ctx, hostname, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHostHostnameIdentifyDeviceResponse(rsp)
}

func (c *ClientWithResponses) PostApiHostHostnameIdentifyDeviceWithResponse(ctx context.Context, hostname string, body PostApiHostHostnameIdentifyDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHostHostnameIdentifyDeviceResponse, error) {
	rsp, err := c.PostApiHostHostnameIdentifyDevice(ctx, hostname, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHostHostnameIdentifyDeviceResponse(rsp)
}

// GetApiHostHostnameInventoryWithResponse request returning *GetApiHostHostnameInventoryResponse
func (c *ClientWithResponses) GetApiHostHostnameInventoryWithResponse(ctx context.Context, hostname string, params *GetApiHostHostnameInventoryParams, reqEditors ...RequestEditorFn) (*GetApiHostHostnameInventoryResponse, error) {
	rsp, err := c.GetApiHostHostnameInventory(ctx, hostname, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostHostnameInventoryResponse(rsp)
}

// GetApiHostHostnameSmartWithResponse request returning *GetApiHostHostnameSmartResponse
func (c *ClientWithResponses) GetApiHostHostnameSmartWithResponse(ctx context.Context, hostname string, reqEditors ...RequestEditorFn) (*GetApiHostHostnameSmartResponse, error) {
	rsp, err := c.GetApiHostHostnameSmart(ctx, hostname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHostHostnameSmartResponse(rsp)
}

// GetApiIscsiDiscoveryauthWithResponse request returning *GetApiIscsiDiscoveryauthResponse
func (c *ClientWithResponses) GetApiIscsiDiscoveryauthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIscsiDiscoveryauthResponse, error) {
	rsp, err := c.GetApiIscsiDiscoveryauth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiIscsiDiscoveryauthResponse(rsp)
}

// PutApiIscsiDiscoveryauthWithBodyWithResponse request with arbitrary body returning *PutApiIscsiDiscoveryauthResponse
func (c *ClientWithResponses) PutApiIscsiDiscoveryauthWithBodyWithResponse(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiIscsiDiscoveryauthResponse, error) {
	rsp, err := c.PutApiIscsiDiscoveryauthWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiIscsiDiscoveryauthResponse(rsp)
}

func (c *ClientWithResponses) PutApiIscsiDiscoveryauthWithResponse(ctx context.Context, params *PutApiIscsiDiscoveryauthParams, body PutApiIscsiDiscoveryauthJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiIscsiDiscoveryauthResponse, error) {
	rsp, err := c.PutApiIscsiDiscoveryauth(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiIscsiDiscoveryauthResponse(rsp)
}

// GetApiIscsiTargetWithResponse request returning *GetApiIscsiTargetResponse
func (c *ClientWithResponses) GetApiIscsiTargetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiIscsiTargetResponse, error) {
	rsp, err := c.GetApiIscsiTarget(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiIscsiTargetResponse(rsp)
}

// PostApiIscsiTargetWithBodyWithResponse request with arbitrary body returning *PostApiIscsiTargetResponse
func (c *ClientWithResponses) PostApiIscsiTargetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiIscsiTargetResponse, error) {
	rsp, err := c.PostApiIscsiTargetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiIscsiTargetResponse(rsp)
}

func (c *ClientWithResponses) PostApiIscsiTargetWithResponse(ctx context.Context, body PostApiIscsiTargetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiIscsiTargetResponse, error) {
	rsp, err := c.PostApiIscsiTarget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiIscsiTargetResponse(rsp)
}

// DeleteApiIscsiTargetTargetIqnWithResponse request returning *DeleteApiIscsiTargetTargetIqnResponse
func (c *ClientWithResponses) DeleteApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*DeleteApiIscsiTargetTargetIqnResponse, error) {
	rsp, err := c.DeleteApiIscsiTargetTargetIqn(ctx, targetIqn, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiIscsiTargetTargetIqnResponse(rsp)
}

// GetApiIscsiTargetTargetIqnWithResponse request returning *GetApiIscsiTargetTargetIqnResponse
func (c *ClientWithResponses) GetApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, reqEditors ...RequestEditorFn) (*GetApiIscsiTargetTargetIqnResponse, error) {
	rsp, err := c.GetApiIscsiTargetTargetIqn(ctx, targetIqn, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiIscsiTargetTargetIqnResponse(rsp)
}

// PutApiIscsiTargetTargetIqnWithBodyWithResponse request with arbitrary body returning *PutApiIscsiTargetTargetIqnResponse
func (c *ClientWithResponses) PutApiIscsiTargetTargetIqnWithBodyWithResponse(ctx context.Context, targetIqn string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiIscsiTargetTargetIqnResponse, error) {
	rsp, err := c.PutApiIscsiTargetTargetIqnWithBody(ctx, targetIqn, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiIscsiTargetTargetIqnResponse(rsp)
}

func (c *ClientWithResponses) PutApiIscsiTargetTargetIqnWithResponse(ctx context.Context, targetIqn string, body PutApiIscsiTargetTargetIqnJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiIscsiTargetTargetIqnResponse, error) {
	rsp, err := c.PutApiIscsiTargetTargetIqn(ctx, targetIqn, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiIscsiTargetTargetIqnResponse(rsp)
}

// GetApiLogsAllWithResponse request returning *GetApiLogsAllResponse
func (c *ClientWithResponses) GetApiLogsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLogsAllResponse, error) {
	rsp, err := c.GetApiLogsAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLogsAllResponse(rsp)
}

// GetApiMgrModuleWithResponse request returning *GetApiMgrModuleResponse
func (c *ClientWithResponses) GetApiMgrModuleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMgrModuleResponse, error) {
	rsp, err := c.GetApiMgrModule(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMgrModuleResponse(rsp)
}

// GetApiMgrModuleModuleNameWithResponse request returning *GetApiMgrModuleModuleNameResponse
func (c *ClientWithResponses) GetApiMgrModuleModuleNameWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*GetApiMgrModuleModuleNameResponse, error) {
	rsp, err := c.GetApiMgrModuleModuleName(ctx, moduleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMgrModuleModuleNameResponse(rsp)
}

// PutApiMgrModuleModuleNameWithBodyWithResponse request with arbitrary body returning *PutApiMgrModuleModuleNameResponse
func (c *ClientWithResponses) PutApiMgrModuleModuleNameWithBodyWithResponse(ctx context.Context, moduleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiMgrModuleModuleNameResponse, error) {
	rsp, err := c.PutApiMgrModuleModuleNameWithBody(ctx, moduleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMgrModuleModuleNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiMgrModuleModuleNameWithResponse(ctx context.Context, moduleName string, body PutApiMgrModuleModuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMgrModuleModuleNameResponse, error) {
	rsp, err := c.PutApiMgrModuleModuleName(ctx, moduleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMgrModuleModuleNameResponse(rsp)
}

// PostApiMgrModuleModuleNameDisableWithResponse request returning *PostApiMgrModuleModuleNameDisableResponse
func (c *ClientWithResponses) PostApiMgrModuleModuleNameDisableWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*PostApiMgrModuleModuleNameDisableResponse, error) {
	rsp, err := c.PostApiMgrModuleModuleNameDisable(ctx, moduleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMgrModuleModuleNameDisableResponse(rsp)
}

// PostApiMgrModuleModuleNameEnableWithResponse request returning *PostApiMgrModuleModuleNameEnableResponse
func (c *ClientWithResponses) PostApiMgrModuleModuleNameEnableWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*PostApiMgrModuleModuleNameEnableResponse, error) {
	rsp, err := c.PostApiMgrModuleModuleNameEnable(ctx, moduleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMgrModuleModuleNameEnableResponse(rsp)
}

// GetApiMgrModuleModuleNameOptionsWithResponse request returning *GetApiMgrModuleModuleNameOptionsResponse
func (c *ClientWithResponses) GetApiMgrModuleModuleNameOptionsWithResponse(ctx context.Context, moduleName string, reqEditors ...RequestEditorFn) (*GetApiMgrModuleModuleNameOptionsResponse, error) {
	rsp, err := c.GetApiMgrModuleModuleNameOptions(ctx, moduleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMgrModuleModuleNameOptionsResponse(rsp)
}

// GetApiMonitorWithResponse request returning *GetApiMonitorResponse
func (c *ClientWithResponses) GetApiMonitorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMonitorResponse, error) {
	rsp, err := c.GetApiMonitor(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMonitorResponse(rsp)
}

// GetApiNfsGaneshaClusterWithResponse request returning *GetApiNfsGaneshaClusterResponse
func (c *ClientWithResponses) GetApiNfsGaneshaClusterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaClusterResponse, error) {
	rsp, err := c.GetApiNfsGaneshaCluster(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNfsGaneshaClusterResponse(rsp)
}

// GetApiNfsGaneshaExportWithResponse request returning *GetApiNfsGaneshaExportResponse
func (c *ClientWithResponses) GetApiNfsGaneshaExportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaExportResponse, error) {
	rsp, err := c.GetApiNfsGaneshaExport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNfsGaneshaExportResponse(rsp)
}

// PostApiNfsGaneshaExportWithBodyWithResponse request with arbitrary body returning *PostApiNfsGaneshaExportResponse
func (c *ClientWithResponses) PostApiNfsGaneshaExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiNfsGaneshaExportResponse, error) {
	rsp, err := c.PostApiNfsGaneshaExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNfsGaneshaExportResponse(rsp)
}

func (c *ClientWithResponses) PostApiNfsGaneshaExportWithResponse(ctx context.Context, body PostApiNfsGaneshaExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiNfsGaneshaExportResponse, error) {
	rsp, err := c.PostApiNfsGaneshaExport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiNfsGaneshaExportResponse(rsp)
}

// DeleteApiNfsGaneshaExportClusterIdExportIdWithResponse request returning *DeleteApiNfsGaneshaExportClusterIdExportIdResponse
func (c *ClientWithResponses) DeleteApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId int, reqEditors ...RequestEditorFn) (*DeleteApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	rsp, err := c.DeleteApiNfsGaneshaExportClusterIdExportId(ctx, clusterId, exportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiNfsGaneshaExportClusterIdExportIdResponse(rsp)
}

// GetApiNfsGaneshaExportClusterIdExportIdWithResponse request returning *GetApiNfsGaneshaExportClusterIdExportIdResponse
func (c *ClientWithResponses) GetApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId string, reqEditors ...RequestEditorFn) (*GetApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	rsp, err := c.GetApiNfsGaneshaExportClusterIdExportId(ctx, clusterId, exportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNfsGaneshaExportClusterIdExportIdResponse(rsp)
}

// PutApiNfsGaneshaExportClusterIdExportIdWithBodyWithResponse request with arbitrary body returning *PutApiNfsGaneshaExportClusterIdExportIdResponse
func (c *ClientWithResponses) PutApiNfsGaneshaExportClusterIdExportIdWithBodyWithResponse(ctx context.Context, clusterId string, exportId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	rsp, err := c.PutApiNfsGaneshaExportClusterIdExportIdWithBody(ctx, clusterId, exportId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiNfsGaneshaExportClusterIdExportIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiNfsGaneshaExportClusterIdExportIdWithResponse(ctx context.Context, clusterId string, exportId int, body PutApiNfsGaneshaExportClusterIdExportIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	rsp, err := c.PutApiNfsGaneshaExportClusterIdExportId(ctx, clusterId, exportId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiNfsGaneshaExportClusterIdExportIdResponse(rsp)
}

// GetApiOsdWithResponse request returning *GetApiOsdResponse
func (c *ClientWithResponses) GetApiOsdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdResponse, error) {
	rsp, err := c.GetApiOsd(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdResponse(rsp)
}

// PostApiOsdWithBodyWithResponse request with arbitrary body returning *PostApiOsdResponse
func (c *ClientWithResponses) PostApiOsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdResponse, error) {
	rsp, err := c.PostApiOsdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdResponse(rsp)
}

func (c *ClientWithResponses) PostApiOsdWithResponse(ctx context.Context, body PostApiOsdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdResponse, error) {
	rsp, err := c.PostApiOsd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdResponse(rsp)
}

// GetApiOsdFlagsWithResponse request returning *GetApiOsdFlagsResponse
func (c *ClientWithResponses) GetApiOsdFlagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdFlagsResponse, error) {
	rsp, err := c.GetApiOsdFlags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdFlagsResponse(rsp)
}

// PutApiOsdFlagsWithBodyWithResponse request with arbitrary body returning *PutApiOsdFlagsResponse
func (c *ClientWithResponses) PutApiOsdFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsResponse, error) {
	rsp, err := c.PutApiOsdFlagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdFlagsResponse(rsp)
}

func (c *ClientWithResponses) PutApiOsdFlagsWithResponse(ctx context.Context, body PutApiOsdFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsResponse, error) {
	rsp, err := c.PutApiOsdFlags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdFlagsResponse(rsp)
}

// GetApiOsdFlagsIndividualWithResponse request returning *GetApiOsdFlagsIndividualResponse
func (c *ClientWithResponses) GetApiOsdFlagsIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdFlagsIndividualResponse, error) {
	rsp, err := c.GetApiOsdFlagsIndividual(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdFlagsIndividualResponse(rsp)
}

// PutApiOsdFlagsIndividualWithBodyWithResponse request with arbitrary body returning *PutApiOsdFlagsIndividualResponse
func (c *ClientWithResponses) PutApiOsdFlagsIndividualWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsIndividualResponse, error) {
	rsp, err := c.PutApiOsdFlagsIndividualWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdFlagsIndividualResponse(rsp)
}

func (c *ClientWithResponses) PutApiOsdFlagsIndividualWithResponse(ctx context.Context, body PutApiOsdFlagsIndividualJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdFlagsIndividualResponse, error) {
	rsp, err := c.PutApiOsdFlagsIndividual(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdFlagsIndividualResponse(rsp)
}

// GetApiOsdSafeToDeleteWithResponse request returning *GetApiOsdSafeToDeleteResponse
func (c *ClientWithResponses) GetApiOsdSafeToDeleteWithResponse(ctx context.Context, params *GetApiOsdSafeToDeleteParams, reqEditors ...RequestEditorFn) (*GetApiOsdSafeToDeleteResponse, error) {
	rsp, err := c.GetApiOsdSafeToDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSafeToDeleteResponse(rsp)
}

// GetApiOsdSafeToDestroyWithResponse request returning *GetApiOsdSafeToDestroyResponse
func (c *ClientWithResponses) GetApiOsdSafeToDestroyWithResponse(ctx context.Context, params *GetApiOsdSafeToDestroyParams, reqEditors ...RequestEditorFn) (*GetApiOsdSafeToDestroyResponse, error) {
	rsp, err := c.GetApiOsdSafeToDestroy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSafeToDestroyResponse(rsp)
}

// GetApiOsdSettingsWithResponse request returning *GetApiOsdSettingsResponse
func (c *ClientWithResponses) GetApiOsdSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiOsdSettingsResponse, error) {
	rsp, err := c.GetApiOsdSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSettingsResponse(rsp)
}

// DeleteApiOsdSvcIdWithResponse request returning *DeleteApiOsdSvcIdResponse
func (c *ClientWithResponses) DeleteApiOsdSvcIdWithResponse(ctx context.Context, svcId string, params *DeleteApiOsdSvcIdParams, reqEditors ...RequestEditorFn) (*DeleteApiOsdSvcIdResponse, error) {
	rsp, err := c.DeleteApiOsdSvcId(ctx, svcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiOsdSvcIdResponse(rsp)
}

// GetApiOsdSvcIdWithResponse request returning *GetApiOsdSvcIdResponse
func (c *ClientWithResponses) GetApiOsdSvcIdWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdResponse, error) {
	rsp, err := c.GetApiOsdSvcId(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSvcIdResponse(rsp)
}

// PutApiOsdSvcIdWithBodyWithResponse request with arbitrary body returning *PutApiOsdSvcIdResponse
func (c *ClientWithResponses) PutApiOsdSvcIdWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdResponse, error) {
	rsp, err := c.PutApiOsdSvcIdWithBody(ctx, svcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdSvcIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiOsdSvcIdWithResponse(ctx context.Context, svcId string, body PutApiOsdSvcIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdResponse, error) {
	rsp, err := c.PutApiOsdSvcId(ctx, svcId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdSvcIdResponse(rsp)
}

// PostApiOsdSvcIdDestroyWithResponse request returning *PostApiOsdSvcIdDestroyResponse
func (c *ClientWithResponses) PostApiOsdSvcIdDestroyWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdDestroyResponse, error) {
	rsp, err := c.PostApiOsdSvcIdDestroy(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdDestroyResponse(rsp)
}

// GetApiOsdSvcIdDevicesWithResponse request returning *GetApiOsdSvcIdDevicesResponse
func (c *ClientWithResponses) GetApiOsdSvcIdDevicesWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdDevicesResponse, error) {
	rsp, err := c.GetApiOsdSvcIdDevices(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSvcIdDevicesResponse(rsp)
}

// GetApiOsdSvcIdHistogramWithResponse request returning *GetApiOsdSvcIdHistogramResponse
func (c *ClientWithResponses) GetApiOsdSvcIdHistogramWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdHistogramResponse, error) {
	rsp, err := c.GetApiOsdSvcIdHistogram(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSvcIdHistogramResponse(rsp)
}

// PutApiOsdSvcIdMarkWithBodyWithResponse request with arbitrary body returning *PutApiOsdSvcIdMarkResponse
func (c *ClientWithResponses) PutApiOsdSvcIdMarkWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdMarkResponse, error) {
	rsp, err := c.PutApiOsdSvcIdMarkWithBody(ctx, svcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdSvcIdMarkResponse(rsp)
}

func (c *ClientWithResponses) PutApiOsdSvcIdMarkWithResponse(ctx context.Context, svcId string, body PutApiOsdSvcIdMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiOsdSvcIdMarkResponse, error) {
	rsp, err := c.PutApiOsdSvcIdMark(ctx, svcId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiOsdSvcIdMarkResponse(rsp)
}

// PostApiOsdSvcIdPurgeWithResponse request returning *PostApiOsdSvcIdPurgeResponse
func (c *ClientWithResponses) PostApiOsdSvcIdPurgeWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdPurgeResponse, error) {
	rsp, err := c.PostApiOsdSvcIdPurge(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdPurgeResponse(rsp)
}

// PostApiOsdSvcIdReweightWithBodyWithResponse request with arbitrary body returning *PostApiOsdSvcIdReweightResponse
func (c *ClientWithResponses) PostApiOsdSvcIdReweightWithBodyWithResponse(ctx context.Context, svcId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdReweightResponse, error) {
	rsp, err := c.PostApiOsdSvcIdReweightWithBody(ctx, svcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdReweightResponse(rsp)
}

func (c *ClientWithResponses) PostApiOsdSvcIdReweightWithResponse(ctx context.Context, svcId string, body PostApiOsdSvcIdReweightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdReweightResponse, error) {
	rsp, err := c.PostApiOsdSvcIdReweight(ctx, svcId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdReweightResponse(rsp)
}

// PostApiOsdSvcIdScrubWithBodyWithResponse request with arbitrary body returning *PostApiOsdSvcIdScrubResponse
func (c *ClientWithResponses) PostApiOsdSvcIdScrubWithBodyWithResponse(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdScrubResponse, error) {
	rsp, err := c.PostApiOsdSvcIdScrubWithBody(ctx, svcId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdScrubResponse(rsp)
}

func (c *ClientWithResponses) PostApiOsdSvcIdScrubWithResponse(ctx context.Context, svcId string, params *PostApiOsdSvcIdScrubParams, body PostApiOsdSvcIdScrubJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiOsdSvcIdScrubResponse, error) {
	rsp, err := c.PostApiOsdSvcIdScrub(ctx, svcId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiOsdSvcIdScrubResponse(rsp)
}

// GetApiOsdSvcIdSmartWithResponse request returning *GetApiOsdSvcIdSmartResponse
func (c *ClientWithResponses) GetApiOsdSvcIdSmartWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiOsdSvcIdSmartResponse, error) {
	rsp, err := c.GetApiOsdSvcIdSmart(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiOsdSvcIdSmartResponse(rsp)
}

// GetApiPerfCountersWithResponse request returning *GetApiPerfCountersResponse
func (c *ClientWithResponses) GetApiPerfCountersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPerfCountersResponse, error) {
	rsp, err := c.GetApiPerfCounters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersResponse(rsp)
}

// GetApiPerfCountersMdsServiceIdWithResponse request returning *GetApiPerfCountersMdsServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersMdsServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMdsServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersMdsServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersMdsServiceIdResponse(rsp)
}

// GetApiPerfCountersMgrServiceIdWithResponse request returning *GetApiPerfCountersMgrServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersMgrServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMgrServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersMgrServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersMgrServiceIdResponse(rsp)
}

// GetApiPerfCountersMonServiceIdWithResponse request returning *GetApiPerfCountersMonServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersMonServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersMonServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersMonServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersMonServiceIdResponse(rsp)
}

// GetApiPerfCountersOsdServiceIdWithResponse request returning *GetApiPerfCountersOsdServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersOsdServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersOsdServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersOsdServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersOsdServiceIdResponse(rsp)
}

// GetApiPerfCountersRbdMirrorServiceIdWithResponse request returning *GetApiPerfCountersRbdMirrorServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersRbdMirrorServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersRbdMirrorServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersRbdMirrorServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersRbdMirrorServiceIdResponse(rsp)
}

// GetApiPerfCountersRgwServiceIdWithResponse request returning *GetApiPerfCountersRgwServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersRgwServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersRgwServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersRgwServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersRgwServiceIdResponse(rsp)
}

// GetApiPerfCountersTcmuRunnerServiceIdWithResponse request returning *GetApiPerfCountersTcmuRunnerServiceIdResponse
func (c *ClientWithResponses) GetApiPerfCountersTcmuRunnerServiceIdWithResponse(ctx context.Context, serviceId string, reqEditors ...RequestEditorFn) (*GetApiPerfCountersTcmuRunnerServiceIdResponse, error) {
	rsp, err := c.GetApiPerfCountersTcmuRunnerServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPerfCountersTcmuRunnerServiceIdResponse(rsp)
}

// GetApiPoolWithResponse request returning *GetApiPoolResponse
func (c *ClientWithResponses) GetApiPoolWithResponse(ctx context.Context, params *GetApiPoolParams, reqEditors ...RequestEditorFn) (*GetApiPoolResponse, error) {
	rsp, err := c.GetApiPool(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoolResponse(rsp)
}

// PostApiPoolWithBodyWithResponse request with arbitrary body returning *PostApiPoolResponse
func (c *ClientWithResponses) PostApiPoolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoolResponse, error) {
	rsp, err := c.PostApiPoolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoolResponse(rsp)
}

func (c *ClientWithResponses) PostApiPoolWithResponse(ctx context.Context, body PostApiPoolJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoolResponse, error) {
	rsp, err := c.PostApiPool(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoolResponse(rsp)
}

// DeleteApiPoolPoolNameWithResponse request returning *DeleteApiPoolPoolNameResponse
func (c *ClientWithResponses) DeleteApiPoolPoolNameWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*DeleteApiPoolPoolNameResponse, error) {
	rsp, err := c.DeleteApiPoolPoolName(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPoolPoolNameResponse(rsp)
}

// GetApiPoolPoolNameWithResponse request returning *GetApiPoolPoolNameResponse
func (c *ClientWithResponses) GetApiPoolPoolNameWithResponse(ctx context.Context, poolName string, params *GetApiPoolPoolNameParams, reqEditors ...RequestEditorFn) (*GetApiPoolPoolNameResponse, error) {
	rsp, err := c.GetApiPoolPoolName(ctx, poolName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoolPoolNameResponse(rsp)
}

// PutApiPoolPoolNameWithBodyWithResponse request with arbitrary body returning *PutApiPoolPoolNameResponse
func (c *ClientWithResponses) PutApiPoolPoolNameWithBodyWithResponse(ctx context.Context, poolName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoolPoolNameResponse, error) {
	rsp, err := c.PutApiPoolPoolNameWithBody(ctx, poolName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoolPoolNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiPoolPoolNameWithResponse(ctx context.Context, poolName string, body PutApiPoolPoolNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoolPoolNameResponse, error) {
	rsp, err := c.PutApiPoolPoolName(ctx, poolName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoolPoolNameResponse(rsp)
}

// GetApiPoolPoolNameConfigurationWithResponse request returning *GetApiPoolPoolNameConfigurationResponse
func (c *ClientWithResponses) GetApiPoolPoolNameConfigurationWithResponse(ctx context.Context, poolName string, reqEditors ...RequestEditorFn) (*GetApiPoolPoolNameConfigurationResponse, error) {
	rsp, err := c.GetApiPoolPoolNameConfiguration(ctx, poolName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoolPoolNameConfigurationResponse(rsp)
}

// GetApiPrometheusWithResponse request returning *GetApiPrometheusResponse
func (c *ClientWithResponses) GetApiPrometheusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusResponse, error) {
	rsp, err := c.GetApiPrometheus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPrometheusResponse(rsp)
}

// GetApiPrometheusDataWithResponse request returning *GetApiPrometheusDataResponse
func (c *ClientWithResponses) GetApiPrometheusDataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusDataResponse, error) {
	rsp, err := c.GetApiPrometheusData(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPrometheusDataResponse(rsp)
}

// GetApiPrometheusNotificationsWithResponse request returning *GetApiPrometheusNotificationsResponse
func (c *ClientWithResponses) GetApiPrometheusNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusNotificationsResponse, error) {
	rsp, err := c.GetApiPrometheusNotifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPrometheusNotificationsResponse(rsp)
}

// GetApiPrometheusRulesWithResponse request returning *GetApiPrometheusRulesResponse
func (c *ClientWithResponses) GetApiPrometheusRulesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusRulesResponse, error) {
	rsp, err := c.GetApiPrometheusRules(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPrometheusRulesResponse(rsp)
}

// PostApiPrometheusSilenceWithResponse request returning *PostApiPrometheusSilenceResponse
func (c *ClientWithResponses) PostApiPrometheusSilenceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiPrometheusSilenceResponse, error) {
	rsp, err := c.PostApiPrometheusSilence(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPrometheusSilenceResponse(rsp)
}

// DeleteApiPrometheusSilenceSIdWithResponse request returning *DeleteApiPrometheusSilenceSIdResponse
func (c *ClientWithResponses) DeleteApiPrometheusSilenceSIdWithResponse(ctx context.Context, sId string, reqEditors ...RequestEditorFn) (*DeleteApiPrometheusSilenceSIdResponse, error) {
	rsp, err := c.DeleteApiPrometheusSilenceSId(ctx, sId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPrometheusSilenceSIdResponse(rsp)
}

// GetApiPrometheusSilencesWithResponse request returning *GetApiPrometheusSilencesResponse
func (c *ClientWithResponses) GetApiPrometheusSilencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPrometheusSilencesResponse, error) {
	rsp, err := c.GetApiPrometheusSilences(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPrometheusSilencesResponse(rsp)
}

// GetApiRgwBucketWithResponse request returning *GetApiRgwBucketResponse
func (c *ClientWithResponses) GetApiRgwBucketWithResponse(ctx context.Context, params *GetApiRgwBucketParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketResponse, error) {
	rsp, err := c.GetApiRgwBucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwBucketResponse(rsp)
}

// PostApiRgwBucketWithBodyWithResponse request with arbitrary body returning *PostApiRgwBucketResponse
func (c *ClientWithResponses) PostApiRgwBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwBucketResponse, error) {
	rsp, err := c.PostApiRgwBucketWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwBucketResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwBucketWithResponse(ctx context.Context, body PostApiRgwBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwBucketResponse, error) {
	rsp, err := c.PostApiRgwBucket(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwBucketResponse(rsp)
}

// DeleteApiRgwBucketDeleteEncryptionWithResponse request returning *DeleteApiRgwBucketDeleteEncryptionResponse
func (c *ClientWithResponses) DeleteApiRgwBucketDeleteEncryptionWithResponse(ctx context.Context, params *DeleteApiRgwBucketDeleteEncryptionParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwBucketDeleteEncryptionResponse, error) {
	rsp, err := c.DeleteApiRgwBucketDeleteEncryption(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwBucketDeleteEncryptionResponse(rsp)
}

// GetApiRgwBucketGetEncryptionWithResponse request returning *GetApiRgwBucketGetEncryptionResponse
func (c *ClientWithResponses) GetApiRgwBucketGetEncryptionWithResponse(ctx context.Context, params *GetApiRgwBucketGetEncryptionParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketGetEncryptionResponse, error) {
	rsp, err := c.GetApiRgwBucketGetEncryption(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwBucketGetEncryptionResponse(rsp)
}

// GetApiRgwBucketGetEncryptionConfigWithResponse request returning *GetApiRgwBucketGetEncryptionConfigResponse
func (c *ClientWithResponses) GetApiRgwBucketGetEncryptionConfigWithResponse(ctx context.Context, params *GetApiRgwBucketGetEncryptionConfigParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketGetEncryptionConfigResponse, error) {
	rsp, err := c.GetApiRgwBucketGetEncryptionConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwBucketGetEncryptionConfigResponse(rsp)
}

// PutApiRgwBucketSetEncryptionConfigWithBodyWithResponse request with arbitrary body returning *PutApiRgwBucketSetEncryptionConfigResponse
func (c *ClientWithResponses) PutApiRgwBucketSetEncryptionConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwBucketSetEncryptionConfigResponse, error) {
	rsp, err := c.PutApiRgwBucketSetEncryptionConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwBucketSetEncryptionConfigResponse(rsp)
}

func (c *ClientWithResponses) PutApiRgwBucketSetEncryptionConfigWithResponse(ctx context.Context, body PutApiRgwBucketSetEncryptionConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwBucketSetEncryptionConfigResponse, error) {
	rsp, err := c.PutApiRgwBucketSetEncryptionConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwBucketSetEncryptionConfigResponse(rsp)
}

// DeleteApiRgwBucketBucketWithResponse request returning *DeleteApiRgwBucketBucketResponse
func (c *ClientWithResponses) DeleteApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, params *DeleteApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwBucketBucketResponse, error) {
	rsp, err := c.DeleteApiRgwBucketBucket(ctx, bucket, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwBucketBucketResponse(rsp)
}

// GetApiRgwBucketBucketWithResponse request returning *GetApiRgwBucketBucketResponse
func (c *ClientWithResponses) GetApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, params *GetApiRgwBucketBucketParams, reqEditors ...RequestEditorFn) (*GetApiRgwBucketBucketResponse, error) {
	rsp, err := c.GetApiRgwBucketBucket(ctx, bucket, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwBucketBucketResponse(rsp)
}

// PutApiRgwBucketBucketWithBodyWithResponse request with arbitrary body returning *PutApiRgwBucketBucketResponse
func (c *ClientWithResponses) PutApiRgwBucketBucketWithBodyWithResponse(ctx context.Context, bucket string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwBucketBucketResponse, error) {
	rsp, err := c.PutApiRgwBucketBucketWithBody(ctx, bucket, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwBucketBucketResponse(rsp)
}

func (c *ClientWithResponses) PutApiRgwBucketBucketWithResponse(ctx context.Context, bucket string, body PutApiRgwBucketBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwBucketBucketResponse, error) {
	rsp, err := c.PutApiRgwBucketBucket(ctx, bucket, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwBucketBucketResponse(rsp)
}

// GetApiRgwDaemonWithResponse request returning *GetApiRgwDaemonResponse
func (c *ClientWithResponses) GetApiRgwDaemonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRgwDaemonResponse, error) {
	rsp, err := c.GetApiRgwDaemon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwDaemonResponse(rsp)
}

// GetApiRgwDaemonSvcIdWithResponse request returning *GetApiRgwDaemonSvcIdResponse
func (c *ClientWithResponses) GetApiRgwDaemonSvcIdWithResponse(ctx context.Context, svcId string, reqEditors ...RequestEditorFn) (*GetApiRgwDaemonSvcIdResponse, error) {
	rsp, err := c.GetApiRgwDaemonSvcId(ctx, svcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwDaemonSvcIdResponse(rsp)
}

// GetApiRgwRolesWithResponse request returning *GetApiRgwRolesResponse
func (c *ClientWithResponses) GetApiRgwRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRgwRolesResponse, error) {
	rsp, err := c.GetApiRgwRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwRolesResponse(rsp)
}

// PostApiRgwRolesWithBodyWithResponse request with arbitrary body returning *PostApiRgwRolesResponse
func (c *ClientWithResponses) PostApiRgwRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwRolesResponse, error) {
	rsp, err := c.PostApiRgwRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwRolesResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwRolesWithResponse(ctx context.Context, body PostApiRgwRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwRolesResponse, error) {
	rsp, err := c.PostApiRgwRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwRolesResponse(rsp)
}

// GetApiRgwSiteWithResponse request returning *GetApiRgwSiteResponse
func (c *ClientWithResponses) GetApiRgwSiteWithResponse(ctx context.Context, params *GetApiRgwSiteParams, reqEditors ...RequestEditorFn) (*GetApiRgwSiteResponse, error) {
	rsp, err := c.GetApiRgwSite(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwSiteResponse(rsp)
}

// GetApiRgwUserWithResponse request returning *GetApiRgwUserResponse
func (c *ClientWithResponses) GetApiRgwUserWithResponse(ctx context.Context, params *GetApiRgwUserParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserResponse, error) {
	rsp, err := c.GetApiRgwUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwUserResponse(rsp)
}

// PostApiRgwUserWithBodyWithResponse request with arbitrary body returning *PostApiRgwUserResponse
func (c *ClientWithResponses) PostApiRgwUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserResponse, error) {
	rsp, err := c.PostApiRgwUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwUserWithResponse(ctx context.Context, body PostApiRgwUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserResponse, error) {
	rsp, err := c.PostApiRgwUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserResponse(rsp)
}

// GetApiRgwUserGetEmailsWithResponse request returning *GetApiRgwUserGetEmailsResponse
func (c *ClientWithResponses) GetApiRgwUserGetEmailsWithResponse(ctx context.Context, params *GetApiRgwUserGetEmailsParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserGetEmailsResponse, error) {
	rsp, err := c.GetApiRgwUserGetEmails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwUserGetEmailsResponse(rsp)
}

// DeleteApiRgwUserUidWithResponse request returning *DeleteApiRgwUserUidResponse
func (c *ClientWithResponses) DeleteApiRgwUserUidWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidResponse, error) {
	rsp, err := c.DeleteApiRgwUserUid(ctx, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwUserUidResponse(rsp)
}

// GetApiRgwUserUidWithResponse request returning *GetApiRgwUserUidResponse
func (c *ClientWithResponses) GetApiRgwUserUidWithResponse(ctx context.Context, uid string, params *GetApiRgwUserUidParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserUidResponse, error) {
	rsp, err := c.GetApiRgwUserUid(ctx, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwUserUidResponse(rsp)
}

// PutApiRgwUserUidWithBodyWithResponse request with arbitrary body returning *PutApiRgwUserUidResponse
func (c *ClientWithResponses) PutApiRgwUserUidWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidResponse, error) {
	rsp, err := c.PutApiRgwUserUidWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwUserUidResponse(rsp)
}

func (c *ClientWithResponses) PutApiRgwUserUidWithResponse(ctx context.Context, uid string, body PutApiRgwUserUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidResponse, error) {
	rsp, err := c.PutApiRgwUserUid(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwUserUidResponse(rsp)
}

// DeleteApiRgwUserUidCapabilityWithResponse request returning *DeleteApiRgwUserUidCapabilityResponse
func (c *ClientWithResponses) DeleteApiRgwUserUidCapabilityWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidCapabilityParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidCapabilityResponse, error) {
	rsp, err := c.DeleteApiRgwUserUidCapability(ctx, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwUserUidCapabilityResponse(rsp)
}

// PostApiRgwUserUidCapabilityWithBodyWithResponse request with arbitrary body returning *PostApiRgwUserUidCapabilityResponse
func (c *ClientWithResponses) PostApiRgwUserUidCapabilityWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidCapabilityResponse, error) {
	rsp, err := c.PostApiRgwUserUidCapabilityWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidCapabilityResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwUserUidCapabilityWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidCapabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidCapabilityResponse, error) {
	rsp, err := c.PostApiRgwUserUidCapability(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidCapabilityResponse(rsp)
}

// DeleteApiRgwUserUidKeyWithResponse request returning *DeleteApiRgwUserUidKeyResponse
func (c *ClientWithResponses) DeleteApiRgwUserUidKeyWithResponse(ctx context.Context, uid string, params *DeleteApiRgwUserUidKeyParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidKeyResponse, error) {
	rsp, err := c.DeleteApiRgwUserUidKey(ctx, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwUserUidKeyResponse(rsp)
}

// PostApiRgwUserUidKeyWithBodyWithResponse request with arbitrary body returning *PostApiRgwUserUidKeyResponse
func (c *ClientWithResponses) PostApiRgwUserUidKeyWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidKeyResponse, error) {
	rsp, err := c.PostApiRgwUserUidKeyWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwUserUidKeyWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidKeyResponse, error) {
	rsp, err := c.PostApiRgwUserUidKey(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidKeyResponse(rsp)
}

// GetApiRgwUserUidQuotaWithResponse request returning *GetApiRgwUserUidQuotaResponse
func (c *ClientWithResponses) GetApiRgwUserUidQuotaWithResponse(ctx context.Context, uid string, params *GetApiRgwUserUidQuotaParams, reqEditors ...RequestEditorFn) (*GetApiRgwUserUidQuotaResponse, error) {
	rsp, err := c.GetApiRgwUserUidQuota(ctx, uid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRgwUserUidQuotaResponse(rsp)
}

// PutApiRgwUserUidQuotaWithBodyWithResponse request with arbitrary body returning *PutApiRgwUserUidQuotaResponse
func (c *ClientWithResponses) PutApiRgwUserUidQuotaWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidQuotaResponse, error) {
	rsp, err := c.PutApiRgwUserUidQuotaWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwUserUidQuotaResponse(rsp)
}

func (c *ClientWithResponses) PutApiRgwUserUidQuotaWithResponse(ctx context.Context, uid string, body PutApiRgwUserUidQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRgwUserUidQuotaResponse, error) {
	rsp, err := c.PutApiRgwUserUidQuota(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRgwUserUidQuotaResponse(rsp)
}

// PostApiRgwUserUidSubuserWithBodyWithResponse request with arbitrary body returning *PostApiRgwUserUidSubuserResponse
func (c *ClientWithResponses) PostApiRgwUserUidSubuserWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidSubuserResponse, error) {
	rsp, err := c.PostApiRgwUserUidSubuserWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidSubuserResponse(rsp)
}

func (c *ClientWithResponses) PostApiRgwUserUidSubuserWithResponse(ctx context.Context, uid string, body PostApiRgwUserUidSubuserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRgwUserUidSubuserResponse, error) {
	rsp, err := c.PostApiRgwUserUidSubuser(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRgwUserUidSubuserResponse(rsp)
}

// DeleteApiRgwUserUidSubuserSubuserWithResponse request returning *DeleteApiRgwUserUidSubuserSubuserResponse
func (c *ClientWithResponses) DeleteApiRgwUserUidSubuserSubuserWithResponse(ctx context.Context, uid string, subuser string, params *DeleteApiRgwUserUidSubuserSubuserParams, reqEditors ...RequestEditorFn) (*DeleteApiRgwUserUidSubuserSubuserResponse, error) {
	rsp, err := c.DeleteApiRgwUserUidSubuserSubuser(ctx, uid, subuser, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRgwUserUidSubuserSubuserResponse(rsp)
}

// GetApiRoleWithResponse request returning *GetApiRoleResponse
func (c *ClientWithResponses) GetApiRoleWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoleResponse, error) {
	rsp, err := c.GetApiRole(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoleResponse(rsp)
}

// PostApiRoleWithBodyWithResponse request with arbitrary body returning *PostApiRoleResponse
func (c *ClientWithResponses) PostApiRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoleResponse, error) {
	rsp, err := c.PostApiRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoleResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoleWithResponse(ctx context.Context, body PostApiRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoleResponse, error) {
	rsp, err := c.PostApiRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoleResponse(rsp)
}

// DeleteApiRoleNameWithResponse request returning *DeleteApiRoleNameResponse
func (c *ClientWithResponses) DeleteApiRoleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiRoleNameResponse, error) {
	rsp, err := c.DeleteApiRoleName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRoleNameResponse(rsp)
}

// GetApiRoleNameWithResponse request returning *GetApiRoleNameResponse
func (c *ClientWithResponses) GetApiRoleNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiRoleNameResponse, error) {
	rsp, err := c.GetApiRoleName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoleNameResponse(rsp)
}

// PutApiRoleNameWithBodyWithResponse request with arbitrary body returning *PutApiRoleNameResponse
func (c *ClientWithResponses) PutApiRoleNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoleNameResponse, error) {
	rsp, err := c.PutApiRoleNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiRoleNameWithResponse(ctx context.Context, name string, body PutApiRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoleNameResponse, error) {
	rsp, err := c.PutApiRoleName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoleNameResponse(rsp)
}

// PostApiRoleNameCloneWithBodyWithResponse request with arbitrary body returning *PostApiRoleNameCloneResponse
func (c *ClientWithResponses) PostApiRoleNameCloneWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoleNameCloneResponse, error) {
	rsp, err := c.PostApiRoleNameCloneWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoleNameCloneResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoleNameCloneWithResponse(ctx context.Context, name string, body PostApiRoleNameCloneJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoleNameCloneResponse, error) {
	rsp, err := c.PostApiRoleNameClone(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoleNameCloneResponse(rsp)
}

// GetApiServiceWithResponse request returning *GetApiServiceResponse
func (c *ClientWithResponses) GetApiServiceWithResponse(ctx context.Context, params *GetApiServiceParams, reqEditors ...RequestEditorFn) (*GetApiServiceResponse, error) {
	rsp, err := c.GetApiService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiServiceResponse(rsp)
}

// PostApiServiceWithBodyWithResponse request with arbitrary body returning *PostApiServiceResponse
func (c *ClientWithResponses) PostApiServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiServiceResponse, error) {
	rsp, err := c.PostApiServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiServiceResponse(rsp)
}

func (c *ClientWithResponses) PostApiServiceWithResponse(ctx context.Context, body PostApiServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiServiceResponse, error) {
	rsp, err := c.PostApiService(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiServiceResponse(rsp)
}

// GetApiServiceKnownTypesWithResponse request returning *GetApiServiceKnownTypesResponse
func (c *ClientWithResponses) GetApiServiceKnownTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiServiceKnownTypesResponse, error) {
	rsp, err := c.GetApiServiceKnownTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiServiceKnownTypesResponse(rsp)
}

// DeleteApiServiceServiceNameWithResponse request returning *DeleteApiServiceServiceNameResponse
func (c *ClientWithResponses) DeleteApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*DeleteApiServiceServiceNameResponse, error) {
	rsp, err := c.DeleteApiServiceServiceName(ctx, serviceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiServiceServiceNameResponse(rsp)
}

// GetApiServiceServiceNameWithResponse request returning *GetApiServiceServiceNameResponse
func (c *ClientWithResponses) GetApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*GetApiServiceServiceNameResponse, error) {
	rsp, err := c.GetApiServiceServiceName(ctx, serviceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiServiceServiceNameResponse(rsp)
}

// PutApiServiceServiceNameWithBodyWithResponse request with arbitrary body returning *PutApiServiceServiceNameResponse
func (c *ClientWithResponses) PutApiServiceServiceNameWithBodyWithResponse(ctx context.Context, serviceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiServiceServiceNameResponse, error) {
	rsp, err := c.PutApiServiceServiceNameWithBody(ctx, serviceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiServiceServiceNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiServiceServiceNameWithResponse(ctx context.Context, serviceName string, body PutApiServiceServiceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiServiceServiceNameResponse, error) {
	rsp, err := c.PutApiServiceServiceName(ctx, serviceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiServiceServiceNameResponse(rsp)
}

// GetApiServiceServiceNameDaemonsWithResponse request returning *GetApiServiceServiceNameDaemonsResponse
func (c *ClientWithResponses) GetApiServiceServiceNameDaemonsWithResponse(ctx context.Context, serviceName string, reqEditors ...RequestEditorFn) (*GetApiServiceServiceNameDaemonsResponse, error) {
	rsp, err := c.GetApiServiceServiceNameDaemons(ctx, serviceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiServiceServiceNameDaemonsResponse(rsp)
}

// GetApiSettingsWithResponse request returning *GetApiSettingsResponse
func (c *ClientWithResponses) GetApiSettingsWithResponse(ctx context.Context, params *GetApiSettingsParams, reqEditors ...RequestEditorFn) (*GetApiSettingsResponse, error) {
	rsp, err := c.GetApiSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSettingsResponse(rsp)
}

// PutApiSettingsWithResponse request returning *PutApiSettingsResponse
func (c *ClientWithResponses) PutApiSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutApiSettingsResponse, error) {
	rsp, err := c.PutApiSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSettingsResponse(rsp)
}

// DeleteApiSettingsNameWithResponse request returning *DeleteApiSettingsNameResponse
func (c *ClientWithResponses) DeleteApiSettingsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteApiSettingsNameResponse, error) {
	rsp, err := c.DeleteApiSettingsName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiSettingsNameResponse(rsp)
}

// GetApiSettingsNameWithResponse request returning *GetApiSettingsNameResponse
func (c *ClientWithResponses) GetApiSettingsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiSettingsNameResponse, error) {
	rsp, err := c.GetApiSettingsName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSettingsNameResponse(rsp)
}

// PutApiSettingsNameWithBodyWithResponse request with arbitrary body returning *PutApiSettingsNameResponse
func (c *ClientWithResponses) PutApiSettingsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSettingsNameResponse, error) {
	rsp, err := c.PutApiSettingsNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSettingsNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiSettingsNameWithResponse(ctx context.Context, name string, body PutApiSettingsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSettingsNameResponse, error) {
	rsp, err := c.PutApiSettingsName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSettingsNameResponse(rsp)
}

// GetApiSummaryWithResponse request returning *GetApiSummaryResponse
func (c *ClientWithResponses) GetApiSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSummaryResponse, error) {
	rsp, err := c.GetApiSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSummaryResponse(rsp)
}

// GetApiTaskWithResponse request returning *GetApiTaskResponse
func (c *ClientWithResponses) GetApiTaskWithResponse(ctx context.Context, params *GetApiTaskParams, reqEditors ...RequestEditorFn) (*GetApiTaskResponse, error) {
	rsp, err := c.GetApiTask(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTaskResponse(rsp)
}

// PutApiTelemetryWithBodyWithResponse request with arbitrary body returning *PutApiTelemetryResponse
func (c *ClientWithResponses) PutApiTelemetryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiTelemetryResponse, error) {
	rsp, err := c.PutApiTelemetryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiTelemetryResponse(rsp)
}

func (c *ClientWithResponses) PutApiTelemetryWithResponse(ctx context.Context, body PutApiTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiTelemetryResponse, error) {
	rsp, err := c.PutApiTelemetry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiTelemetryResponse(rsp)
}

// GetApiTelemetryReportWithResponse request returning *GetApiTelemetryReportResponse
func (c *ClientWithResponses) GetApiTelemetryReportWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTelemetryReportResponse, error) {
	rsp, err := c.GetApiTelemetryReport(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTelemetryReportResponse(rsp)
}

// GetApiUserWithResponse request returning *GetApiUserResponse
func (c *ClientWithResponses) GetApiUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUserResponse, error) {
	rsp, err := c.GetApiUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUserResponse(rsp)
}

// PostApiUserWithBodyWithResponse request with arbitrary body returning *PostApiUserResponse
func (c *ClientWithResponses) PostApiUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserResponse, error) {
	rsp, err := c.PostApiUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserResponse(rsp)
}

func (c *ClientWithResponses) PostApiUserWithResponse(ctx context.Context, body PostApiUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserResponse, error) {
	rsp, err := c.PostApiUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserResponse(rsp)
}

// PostApiUserValidatePasswordWithBodyWithResponse request with arbitrary body returning *PostApiUserValidatePasswordResponse
func (c *ClientWithResponses) PostApiUserValidatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserValidatePasswordResponse, error) {
	rsp, err := c.PostApiUserValidatePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserValidatePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiUserValidatePasswordWithResponse(ctx context.Context, body PostApiUserValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserValidatePasswordResponse, error) {
	rsp, err := c.PostApiUserValidatePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserValidatePasswordResponse(rsp)
}

// DeleteApiUserUsernameWithResponse request returning *DeleteApiUserUsernameResponse
func (c *ClientWithResponses) DeleteApiUserUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteApiUserUsernameResponse, error) {
	rsp, err := c.DeleteApiUserUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiUserUsernameResponse(rsp)
}

// GetApiUserUsernameWithResponse request returning *GetApiUserUsernameResponse
func (c *ClientWithResponses) GetApiUserUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetApiUserUsernameResponse, error) {
	rsp, err := c.GetApiUserUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUserUsernameResponse(rsp)
}

// PutApiUserUsernameWithBodyWithResponse request with arbitrary body returning *PutApiUserUsernameResponse
func (c *ClientWithResponses) PutApiUserUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUserUsernameResponse, error) {
	rsp, err := c.PutApiUserUsernameWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUserUsernameResponse(rsp)
}

func (c *ClientWithResponses) PutApiUserUsernameWithResponse(ctx context.Context, username string, body PutApiUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUserUsernameResponse, error) {
	rsp, err := c.PutApiUserUsername(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUserUsernameResponse(rsp)
}

// PostApiUserUsernameChangePasswordWithBodyWithResponse request with arbitrary body returning *PostApiUserUsernameChangePasswordResponse
func (c *ClientWithResponses) PostApiUserUsernameChangePasswordWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUserUsernameChangePasswordResponse, error) {
	rsp, err := c.PostApiUserUsernameChangePasswordWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserUsernameChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiUserUsernameChangePasswordWithResponse(ctx context.Context, username string, body PostApiUserUsernameChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUserUsernameChangePasswordResponse, error) {
	rsp, err := c.PostApiUserUsernameChangePassword(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUserUsernameChangePasswordResponse(rsp)
}

// ParsePostApiAuthResponse parses an HTTP response from a PostApiAuthWithResponse call
func ParsePostApiAuthResponse(rsp *http.Response) (*PostApiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthCheckResponse parses an HTTP response from a PostApiAuthCheckWithResponse call
func ParsePostApiAuthCheckResponse(rsp *http.Response) (*PostApiAuthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Permissions List of permissions acquired
			Permissions struct {
				Cephfs []string `json:"cephfs"`
			} `json:"permissions"`

			// PwdUpdateRequired Is password update required?
			PwdUpdateRequired bool `json:"pwdUpdateRequired"`

			// Sso Uses single sign on?
			Sso bool `json:"sso"`

			// Username Username
			Username string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiAuthLogoutResponse parses an HTTP response from a PostApiAuthLogoutWithResponse call
func ParsePostApiAuthLogoutResponse(rsp *http.Response) (*PostApiAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockImageResponse parses an HTTP response from a GetApiBlockImageWithResponse call
func ParseGetApiBlockImageResponse(rsp *http.Response) (*GetApiBlockImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// PoolName pool name
			PoolName *string   `json:"pool_name,omitempty"`
			Value    *[]string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV20JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiBlockImageResponse parses an HTTP response from a PostApiBlockImageWithResponse call
func ParsePostApiBlockImageResponse(rsp *http.Response) (*PostApiBlockImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockImageCloneFormatVersionResponse parses an HTTP response from a GetApiBlockImageCloneFormatVersionWithResponse call
func ParseGetApiBlockImageCloneFormatVersionResponse(rsp *http.Response) (*GetApiBlockImageCloneFormatVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockImageCloneFormatVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockImageDefaultFeaturesResponse parses an HTTP response from a GetApiBlockImageDefaultFeaturesWithResponse call
func ParseGetApiBlockImageDefaultFeaturesResponse(rsp *http.Response) (*GetApiBlockImageDefaultFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockImageDefaultFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockImageTrashResponse parses an HTTP response from a GetApiBlockImageTrashWithResponse call
func ParseGetApiBlockImageTrashResponse(rsp *http.Response) (*GetApiBlockImageTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockImageTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// PoolName pool name
			PoolName *string   `json:"pool_name,omitempty"`
			Status   *int      `json:"status,omitempty"`
			Value    *[]string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiBlockImageTrashPurgeResponse parses an HTTP response from a PostApiBlockImageTrashPurgeWithResponse call
func ParsePostApiBlockImageTrashPurgeResponse(rsp *http.Response) (*PostApiBlockImageTrashPurgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageTrashPurgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBlockImageTrashImageIdSpecResponse parses an HTTP response from a DeleteApiBlockImageTrashImageIdSpecWithResponse call
func ParseDeleteApiBlockImageTrashImageIdSpecResponse(rsp *http.Response) (*DeleteApiBlockImageTrashImageIdSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBlockImageTrashImageIdSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageTrashImageIdSpecRestoreResponse parses an HTTP response from a PostApiBlockImageTrashImageIdSpecRestoreWithResponse call
func ParsePostApiBlockImageTrashImageIdSpecRestoreResponse(rsp *http.Response) (*PostApiBlockImageTrashImageIdSpecRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageTrashImageIdSpecRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBlockImageImageSpecResponse parses an HTTP response from a DeleteApiBlockImageImageSpecWithResponse call
func ParseDeleteApiBlockImageImageSpecResponse(rsp *http.Response) (*DeleteApiBlockImageImageSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBlockImageImageSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockImageImageSpecResponse parses an HTTP response from a GetApiBlockImageImageSpecWithResponse call
func ParseGetApiBlockImageImageSpecResponse(rsp *http.Response) (*GetApiBlockImageImageSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockImageImageSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiBlockImageImageSpecResponse parses an HTTP response from a PutApiBlockImageImageSpecWithResponse call
func ParsePutApiBlockImageImageSpecResponse(rsp *http.Response) (*PutApiBlockImageImageSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBlockImageImageSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecCopyResponse parses an HTTP response from a PostApiBlockImageImageSpecCopyWithResponse call
func ParsePostApiBlockImageImageSpecCopyResponse(rsp *http.Response) (*PostApiBlockImageImageSpecCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecFlattenResponse parses an HTTP response from a PostApiBlockImageImageSpecFlattenWithResponse call
func ParsePostApiBlockImageImageSpecFlattenResponse(rsp *http.Response) (*PostApiBlockImageImageSpecFlattenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecFlattenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecMoveTrashResponse parses an HTTP response from a PostApiBlockImageImageSpecMoveTrashWithResponse call
func ParsePostApiBlockImageImageSpecMoveTrashResponse(rsp *http.Response) (*PostApiBlockImageImageSpecMoveTrashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecMoveTrashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecSnapResponse parses an HTTP response from a PostApiBlockImageImageSpecSnapWithResponse call
func ParsePostApiBlockImageImageSpecSnapResponse(rsp *http.Response) (*PostApiBlockImageImageSpecSnapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecSnapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBlockImageImageSpecSnapSnapshotNameResponse parses an HTTP response from a DeleteApiBlockImageImageSpecSnapSnapshotNameWithResponse call
func ParseDeleteApiBlockImageImageSpecSnapSnapshotNameResponse(rsp *http.Response) (*DeleteApiBlockImageImageSpecSnapSnapshotNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBlockImageImageSpecSnapSnapshotNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiBlockImageImageSpecSnapSnapshotNameResponse parses an HTTP response from a PutApiBlockImageImageSpecSnapSnapshotNameWithResponse call
func ParsePutApiBlockImageImageSpecSnapSnapshotNameResponse(rsp *http.Response) (*PutApiBlockImageImageSpecSnapSnapshotNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBlockImageImageSpecSnapSnapshotNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecSnapSnapshotNameCloneResponse parses an HTTP response from a PostApiBlockImageImageSpecSnapSnapshotNameCloneWithResponse call
func ParsePostApiBlockImageImageSpecSnapSnapshotNameCloneResponse(rsp *http.Response) (*PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecSnapSnapshotNameCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse parses an HTTP response from a PostApiBlockImageImageSpecSnapSnapshotNameRollbackWithResponse call
func ParsePostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse(rsp *http.Response) (*PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockImageImageSpecSnapSnapshotNameRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockMirroringPoolPoolNameResponse parses an HTTP response from a GetApiBlockMirroringPoolPoolNameWithResponse call
func ParseGetApiBlockMirroringPoolPoolNameResponse(rsp *http.Response) (*GetApiBlockMirroringPoolPoolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockMirroringPoolPoolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// MirrorMode Mirror Mode
			MirrorMode string `json:"mirror_mode"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiBlockMirroringPoolPoolNameResponse parses an HTTP response from a PutApiBlockMirroringPoolPoolNameWithResponse call
func ParsePutApiBlockMirroringPoolPoolNameResponse(rsp *http.Response) (*PutApiBlockMirroringPoolPoolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBlockMirroringPoolPoolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockMirroringPoolPoolNameBootstrapPeerResponse parses an HTTP response from a PostApiBlockMirroringPoolPoolNameBootstrapPeerWithResponse call
func ParsePostApiBlockMirroringPoolPoolNameBootstrapPeerResponse(rsp *http.Response) (*PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockMirroringPoolPoolNameBootstrapPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockMirroringPoolPoolNameBootstrapTokenResponse parses an HTTP response from a PostApiBlockMirroringPoolPoolNameBootstrapTokenWithResponse call
func ParsePostApiBlockMirroringPoolPoolNameBootstrapTokenResponse(rsp *http.Response) (*PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockMirroringPoolPoolNameBootstrapTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockMirroringPoolPoolNamePeerResponse parses an HTTP response from a GetApiBlockMirroringPoolPoolNamePeerWithResponse call
func ParseGetApiBlockMirroringPoolPoolNamePeerResponse(rsp *http.Response) (*GetApiBlockMirroringPoolPoolNamePeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockMirroringPoolPoolNamePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockMirroringPoolPoolNamePeerResponse parses an HTTP response from a PostApiBlockMirroringPoolPoolNamePeerWithResponse call
func ParsePostApiBlockMirroringPoolPoolNamePeerResponse(rsp *http.Response) (*PostApiBlockMirroringPoolPoolNamePeerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockMirroringPoolPoolNamePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse parses an HTTP response from a DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse call
func ParseDeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp *http.Response) (*DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBlockMirroringPoolPoolNamePeerPeerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse parses an HTTP response from a GetApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse call
func ParseGetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp *http.Response) (*GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockMirroringPoolPoolNamePeerPeerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse parses an HTTP response from a PutApiBlockMirroringPoolPoolNamePeerPeerUuidWithResponse call
func ParsePutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse(rsp *http.Response) (*PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBlockMirroringPoolPoolNamePeerPeerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockMirroringSiteNameResponse parses an HTTP response from a GetApiBlockMirroringSiteNameWithResponse call
func ParseGetApiBlockMirroringSiteNameResponse(rsp *http.Response) (*GetApiBlockMirroringSiteNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockMirroringSiteNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SiteName Site Name
			SiteName string `json:"site_name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiBlockMirroringSiteNameResponse parses an HTTP response from a PutApiBlockMirroringSiteNameWithResponse call
func ParsePutApiBlockMirroringSiteNameResponse(rsp *http.Response) (*PutApiBlockMirroringSiteNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiBlockMirroringSiteNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiBlockMirroringSummaryResponse parses an HTTP response from a GetApiBlockMirroringSummaryWithResponse call
func ParseGetApiBlockMirroringSummaryResponse(rsp *http.Response) (*GetApiBlockMirroringSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockMirroringSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ContentData struct {
				Daemons      []string `json:"daemons"`
				ImageError   []string `json:"image_error"`
				ImageReady   []string `json:"image_ready"`
				ImageSyncing []string `json:"image_syncing"`

				// Pools Pools
				Pools []struct {
					// Health pool health
					Health      string `json:"health"`
					HealthColor string `json:"health_color"`

					// MirrorMode status
					MirrorMode string `json:"mirror_mode"`

					// Name Pool name
					Name      string   `json:"name"`
					PeerUuids []string `json:"peer_uuids"`
				} `json:"pools"`
			} `json:"content_data"`

			// SiteName site name
			SiteName string `json:"site_name"`
			Status   int    `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBlockPoolPoolNameNamespaceResponse parses an HTTP response from a GetApiBlockPoolPoolNameNamespaceWithResponse call
func ParseGetApiBlockPoolPoolNameNamespaceResponse(rsp *http.Response) (*GetApiBlockPoolPoolNameNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBlockPoolPoolNameNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiBlockPoolPoolNameNamespaceResponse parses an HTTP response from a PostApiBlockPoolPoolNameNamespaceWithResponse call
func ParsePostApiBlockPoolPoolNameNamespaceResponse(rsp *http.Response) (*PostApiBlockPoolPoolNameNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBlockPoolPoolNameNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiBlockPoolPoolNameNamespaceNamespaceResponse parses an HTTP response from a DeleteApiBlockPoolPoolNameNamespaceNamespaceWithResponse call
func ParseDeleteApiBlockPoolPoolNameNamespaceNamespaceResponse(rsp *http.Response) (*DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBlockPoolPoolNameNamespaceNamespaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsResponse parses an HTTP response from a GetApiCephfsWithResponse call
func ParseGetApiCephfsResponse(rsp *http.Response) (*GetApiCephfsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdResponse parses an HTTP response from a GetApiCephfsFsIdWithResponse call
func ParseGetApiCephfsFsIdResponse(rsp *http.Response) (*GetApiCephfsFsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiCephfsFsIdClientClientIdResponse parses an HTTP response from a DeleteApiCephfsFsIdClientClientIdWithResponse call
func ParseDeleteApiCephfsFsIdClientClientIdResponse(rsp *http.Response) (*DeleteApiCephfsFsIdClientClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiCephfsFsIdClientClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdClientsResponse parses an HTTP response from a GetApiCephfsFsIdClientsWithResponse call
func ParseGetApiCephfsFsIdClientsResponse(rsp *http.Response) (*GetApiCephfsFsIdClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdGetRootDirectoryResponse parses an HTTP response from a GetApiCephfsFsIdGetRootDirectoryWithResponse call
func ParseGetApiCephfsFsIdGetRootDirectoryResponse(rsp *http.Response) (*GetApiCephfsFsIdGetRootDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdGetRootDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdLsDirResponse parses an HTTP response from a GetApiCephfsFsIdLsDirWithResponse call
func ParseGetApiCephfsFsIdLsDirResponse(rsp *http.Response) (*GetApiCephfsFsIdLsDirResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdLsDirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdMdsCountersResponse parses an HTTP response from a GetApiCephfsFsIdMdsCountersWithResponse call
func ParseGetApiCephfsFsIdMdsCountersResponse(rsp *http.Response) (*GetApiCephfsFsIdMdsCountersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdMdsCountersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCephfsFsIdQuotaResponse parses an HTTP response from a GetApiCephfsFsIdQuotaWithResponse call
func ParseGetApiCephfsFsIdQuotaResponse(rsp *http.Response) (*GetApiCephfsFsIdQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCephfsFsIdQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MaxBytes int `json:"max_bytes"`
			MaxFiles int `json:"max_files"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiCephfsFsIdQuotaResponse parses an HTTP response from a PutApiCephfsFsIdQuotaWithResponse call
func ParsePutApiCephfsFsIdQuotaResponse(rsp *http.Response) (*PutApiCephfsFsIdQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiCephfsFsIdQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiCephfsFsIdSnapshotResponse parses an HTTP response from a DeleteApiCephfsFsIdSnapshotWithResponse call
func ParseDeleteApiCephfsFsIdSnapshotResponse(rsp *http.Response) (*DeleteApiCephfsFsIdSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiCephfsFsIdSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiCephfsFsIdSnapshotResponse parses an HTTP response from a PostApiCephfsFsIdSnapshotWithResponse call
func ParsePostApiCephfsFsIdSnapshotResponse(rsp *http.Response) (*PostApiCephfsFsIdSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiCephfsFsIdSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiCephfsFsIdTreeResponse parses an HTTP response from a DeleteApiCephfsFsIdTreeWithResponse call
func ParseDeleteApiCephfsFsIdTreeResponse(rsp *http.Response) (*DeleteApiCephfsFsIdTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiCephfsFsIdTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiCephfsFsIdTreeResponse parses an HTTP response from a PostApiCephfsFsIdTreeWithResponse call
func ParsePostApiCephfsFsIdTreeResponse(rsp *http.Response) (*PostApiCephfsFsIdTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiCephfsFsIdTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiClusterResponse parses an HTTP response from a GetApiClusterWithResponse call
func ParseGetApiClusterResponse(rsp *http.Response) (*GetApiClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiClusterResponse parses an HTTP response from a PutApiClusterWithResponse call
func ParsePutApiClusterResponse(rsp *http.Response) (*PutApiClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiClusterUserResponse parses an HTTP response from a GetApiClusterUserWithResponse call
func ParseGetApiClusterUserResponse(rsp *http.Response) (*GetApiClusterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiClusterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiClusterUserResponse parses an HTTP response from a PostApiClusterUserWithResponse call
func ParsePostApiClusterUserResponse(rsp *http.Response) (*PostApiClusterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiClusterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiClusterUserResponse parses an HTTP response from a PutApiClusterUserWithResponse call
func ParsePutApiClusterUserResponse(rsp *http.Response) (*PutApiClusterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiClusterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiClusterUserExportResponse parses an HTTP response from a PostApiClusterUserExportWithResponse call
func ParsePostApiClusterUserExportResponse(rsp *http.Response) (*PostApiClusterUserExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiClusterUserExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiClusterUserUserEntityResponse parses an HTTP response from a DeleteApiClusterUserUserEntityWithResponse call
func ParseDeleteApiClusterUserUserEntityResponse(rsp *http.Response) (*DeleteApiClusterUserUserEntityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiClusterUserUserEntityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiClusterConfResponse parses an HTTP response from a GetApiClusterConfWithResponse call
func ParseGetApiClusterConfResponse(rsp *http.Response) (*GetApiClusterConfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiClusterConfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiClusterConfResponse parses an HTTP response from a PostApiClusterConfWithResponse call
func ParsePostApiClusterConfResponse(rsp *http.Response) (*PostApiClusterConfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiClusterConfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiClusterConfResponse parses an HTTP response from a PutApiClusterConfWithResponse call
func ParsePutApiClusterConfResponse(rsp *http.Response) (*PutApiClusterConfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiClusterConfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiClusterConfFilterResponse parses an HTTP response from a GetApiClusterConfFilterWithResponse call
func ParseGetApiClusterConfFilterResponse(rsp *http.Response) (*GetApiClusterConfFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiClusterConfFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// CanUpdateAtRuntime Check if can update at runtime
			CanUpdateAtRuntime *bool `json:"can_update_at_runtime,omitempty"`

			// DaemonDefault Daemon specific default value
			DaemonDefault *string `json:"daemon_default,omitempty"`

			// Default Default value for the config option
			Default *string `json:"default,omitempty"`

			// Desc Description of the configuration
			Desc *string `json:"desc,omitempty"`

			// EnumValues List of enums allowed
			EnumValues *[]string `json:"enum_values,omitempty"`

			// Flags List of flags associated
			Flags *[]string `json:"flags,omitempty"`

			// Level Config option level
			Level *string `json:"level,omitempty"`

			// LongDesc Elaborated description
			LongDesc *string `json:"long_desc,omitempty"`

			// Max Maximum value
			Max *string `json:"max,omitempty"`

			// Min Minimum value
			Min *string `json:"min,omitempty"`

			// Name Name of the config option
			Name *string `json:"name,omitempty"`

			// SeeAlso Related config options
			SeeAlso *[]string `json:"see_also,omitempty"`

			// Services Services associated with the config option
			Services *[]string `json:"services,omitempty"`

			// Tags Tags associated with the cluster
			Tags *[]string `json:"tags,omitempty"`

			// Type Config option type
			Type *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiClusterConfNameResponse parses an HTTP response from a DeleteApiClusterConfNameWithResponse call
func ParseDeleteApiClusterConfNameResponse(rsp *http.Response) (*DeleteApiClusterConfNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiClusterConfNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiClusterConfNameResponse parses an HTTP response from a GetApiClusterConfNameWithResponse call
func ParseGetApiClusterConfNameResponse(rsp *http.Response) (*GetApiClusterConfNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiClusterConfNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCrushRuleResponse parses an HTTP response from a GetApiCrushRuleWithResponse call
func ParseGetApiCrushRuleResponse(rsp *http.Response) (*GetApiCrushRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCrushRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// MaxSize Maximum size of Rule
			MaxSize int `json:"max_size"`

			// MinSize Minimum size of Rule
			MinSize int `json:"min_size"`

			// RuleId Rule ID
			RuleId int `json:"rule_id"`

			// RuleName Rule Name
			RuleName string `json:"rule_name"`

			// Ruleset RuleSet related to the rule
			Ruleset int `json:"ruleset"`

			// Steps Steps included in the rule
			Steps []map[string]interface{} `json:"steps"`

			// Type Type of Rule
			Type int `json:"type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV20JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiCrushRuleResponse parses an HTTP response from a PostApiCrushRuleWithResponse call
func ParsePostApiCrushRuleResponse(rsp *http.Response) (*PostApiCrushRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiCrushRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiCrushRuleNameResponse parses an HTTP response from a DeleteApiCrushRuleNameWithResponse call
func ParseDeleteApiCrushRuleNameResponse(rsp *http.Response) (*DeleteApiCrushRuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiCrushRuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiCrushRuleNameResponse parses an HTTP response from a GetApiCrushRuleNameWithResponse call
func ParseGetApiCrushRuleNameResponse(rsp *http.Response) (*GetApiCrushRuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCrushRuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiDaemonDaemonNameResponse parses an HTTP response from a PutApiDaemonDaemonNameWithResponse call
func ParsePutApiDaemonDaemonNameResponse(rsp *http.Response) (*PutApiDaemonDaemonNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDaemonDaemonNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiErasureCodeProfileResponse parses an HTTP response from a GetApiErasureCodeProfileWithResponse call
func ParseGetApiErasureCodeProfileResponse(rsp *http.Response) (*GetApiErasureCodeProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiErasureCodeProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CrushFailureDomain *string `json:"crush-failure-domain,omitempty"`

			// K Number of data chunks
			K *int `json:"k,omitempty"`

			// M Number of coding chunks
			M *int `json:"m,omitempty"`

			// Name Name of the profile
			Name *string `json:"name,omitempty"`

			// Plugin Plugin Info
			Plugin    *string `json:"plugin,omitempty"`
			Technique *string `json:"technique,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiErasureCodeProfileResponse parses an HTTP response from a PostApiErasureCodeProfileWithResponse call
func ParsePostApiErasureCodeProfileResponse(rsp *http.Response) (*PostApiErasureCodeProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiErasureCodeProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiErasureCodeProfileNameResponse parses an HTTP response from a DeleteApiErasureCodeProfileNameWithResponse call
func ParseDeleteApiErasureCodeProfileNameResponse(rsp *http.Response) (*DeleteApiErasureCodeProfileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiErasureCodeProfileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiErasureCodeProfileNameResponse parses an HTTP response from a GetApiErasureCodeProfileNameWithResponse call
func ParseGetApiErasureCodeProfileNameResponse(rsp *http.Response) (*GetApiErasureCodeProfileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiErasureCodeProfileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiFeatureTogglesResponse parses an HTTP response from a GetApiFeatureTogglesWithResponse call
func ParseGetApiFeatureTogglesResponse(rsp *http.Response) (*GetApiFeatureTogglesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFeatureTogglesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cephfs    bool `json:"cephfs"`
			Dashboard bool `json:"dashboard"`
			Iscsi     bool `json:"iscsi"`
			Mirroring bool `json:"mirroring"`
			Nfs       bool `json:"nfs"`
			Rbd       bool `json:"rbd"`
			Rgw       bool `json:"rgw"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiFeedbackResponse parses an HTTP response from a GetApiFeedbackWithResponse call
func ParseGetApiFeedbackResponse(rsp *http.Response) (*GetApiFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiFeedbackResponse parses an HTTP response from a PostApiFeedbackWithResponse call
func ParsePostApiFeedbackResponse(rsp *http.Response) (*PostApiFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiFeedbackApiKeyResponse parses an HTTP response from a DeleteApiFeedbackApiKeyWithResponse call
func ParseDeleteApiFeedbackApiKeyResponse(rsp *http.Response) (*DeleteApiFeedbackApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiFeedbackApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiFeedbackApiKeyResponse parses an HTTP response from a GetApiFeedbackApiKeyWithResponse call
func ParseGetApiFeedbackApiKeyResponse(rsp *http.Response) (*GetApiFeedbackApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFeedbackApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiFeedbackApiKeyResponse parses an HTTP response from a PostApiFeedbackApiKeyWithResponse call
func ParsePostApiFeedbackApiKeyResponse(rsp *http.Response) (*PostApiFeedbackApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiFeedbackApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiGrafanaDashboardsResponse parses an HTTP response from a PostApiGrafanaDashboardsWithResponse call
func ParsePostApiGrafanaDashboardsResponse(rsp *http.Response) (*PostApiGrafanaDashboardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiGrafanaDashboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiGrafanaUrlResponse parses an HTTP response from a GetApiGrafanaUrlWithResponse call
func ParseGetApiGrafanaUrlResponse(rsp *http.Response) (*GetApiGrafanaUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGrafanaUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Instance grafana instance
			Instance string `json:"instance"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiGrafanaValidationParamsResponse parses an HTTP response from a GetApiGrafanaValidationParamsWithResponse call
func ParseGetApiGrafanaValidationParamsResponse(rsp *http.Response) (*GetApiGrafanaValidationParamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGrafanaValidationParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHealthFullResponse parses an HTTP response from a GetApiHealthFullWithResponse call
func ParseGetApiHealthFullResponse(rsp *http.Response) (*GetApiHealthFullResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHealthFullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHealthGetClusterCapacityResponse parses an HTTP response from a GetApiHealthGetClusterCapacityWithResponse call
func ParseGetApiHealthGetClusterCapacityResponse(rsp *http.Response) (*GetApiHealthGetClusterCapacityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHealthGetClusterCapacityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHealthGetClusterFsidResponse parses an HTTP response from a GetApiHealthGetClusterFsidWithResponse call
func ParseGetApiHealthGetClusterFsidResponse(rsp *http.Response) (*GetApiHealthGetClusterFsidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHealthGetClusterFsidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHealthMinimalResponse parses an HTTP response from a GetApiHealthMinimalWithResponse call
func ParseGetApiHealthMinimalResponse(rsp *http.Response) (*GetApiHealthMinimalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHealthMinimalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClientPerf struct {
				ReadBytesSec          int `json:"read_bytes_sec"`
				ReadOpPerSec          int `json:"read_op_per_sec"`
				RecoveringBytesPerSec int `json:"recovering_bytes_per_sec"`
				WriteBytesSec         int `json:"write_bytes_sec"`
				WriteOpPerSec         int `json:"write_op_per_sec"`
			} `json:"client_perf"`
			Df struct {
				Stats struct {
					TotalAvailBytes   int `json:"total_avail_bytes"`
					TotalBytes        int `json:"total_bytes"`
					TotalUsedRawBytes int `json:"total_used_raw_bytes"`
				} `json:"stats"`
			} `json:"df"`
			FsMap struct {
				Filesystems []struct {
					Mdsmap struct {
						Balancer string `json:"balancer"`
						Compat   struct {
							Compat   string `json:"compat"`
							Incompat string `json:"incompat"`
							RoCompat string `json:"ro_compat"`
						} `json:"compat"`
						Created                   string `json:"created"`
						Damaged                   []int  `json:"damaged"`
						DataPools                 []int  `json:"data_pools"`
						Enabled                   bool   `json:"enabled"`
						Epoch                     int    `json:"epoch"`
						EverAllowedFeatures       int    `json:"ever_allowed_features"`
						ExplicitlyAllowedFeatures int    `json:"explicitly_allowed_features"`
						Failed                    []int  `json:"failed"`
						Flags                     int    `json:"flags"`
						FsName                    string `json:"fs_name"`
						In                        []int  `json:"in"`
						Info                      string `json:"info"`
						LastFailure               int    `json:"last_failure"`
						LastFailureOsdEpoch       int    `json:"last_failure_osd_epoch"`
						MaxFileSize               int    `json:"max_file_size"`
						MaxMds                    int    `json:"max_mds"`
						MetadataPool              int    `json:"metadata_pool"`
						Modified                  string `json:"modified"`
						RequiredClientFeatures    string `json:"required_client_features"`
						Root                      int    `json:"root"`
						SessionAutoclose          int    `json:"session_autoclose"`
						SessionTimeout            int    `json:"session_timeout"`
						StandbyCountWanted        int    `json:"standby_count_wanted"`
						Stopped                   []int  `json:"stopped"`
						Tableserver               int    `json:"tableserver"`
						Up                        string `json:"up"`
					} `json:"mdsmap"`
					Standbys string `json:"standbys"`
				} `json:"filesystems"`
			} `json:"fs_map"`
			Health struct {
				Checks string `json:"checks"`
				Mutes  string `json:"mutes"`
				Status string `json:"status"`
			} `json:"health"`
			Hosts        int `json:"hosts"`
			IscsiDaemons struct {
				Down int `json:"down"`
				Up   int `json:"up"`
			} `json:"iscsi_daemons"`
			MgrMap struct {
				ActiveName string `json:"active_name"`
				Standbys   string `json:"standbys"`
			} `json:"mgr_map"`
			MonStatus struct {
				Monmap struct {
					Mons string `json:"mons"`
				} `json:"monmap"`
				Quorum []int `json:"quorum"`
			} `json:"mon_status"`
			OsdMap struct {
				Osds []struct {
					In int `json:"in"`
					Up int `json:"up"`
				} `json:"osds"`
			} `json:"osd_map"`
			PgInfo struct {
				ObjectStats struct {
					NumObjectCopies     int `json:"num_object_copies"`
					NumObjects          int `json:"num_objects"`
					NumObjectsDegraded  int `json:"num_objects_degraded"`
					NumObjectsMisplaced int `json:"num_objects_misplaced"`
					NumObjectsUnfound   int `json:"num_objects_unfound"`
				} `json:"object_stats"`
				PgsPerOsd int    `json:"pgs_per_osd"`
				Statuses  string `json:"statuses"`
			} `json:"pg_info"`
			Pools       string `json:"pools"`
			Rgw         int    `json:"rgw"`
			ScrubStatus string `json:"scrub_status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiHostResponse parses an HTTP response from a GetApiHostWithResponse call
func ParseGetApiHostResponse(rsp *http.Response) (*GetApiHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Addr Host address
			Addr string `json:"addr"`

			// CephVersion Ceph version
			CephVersion string `json:"ceph_version"`

			// Hostname Hostname
			Hostname string `json:"hostname"`

			// Labels Labels related to the host
			Labels []string `json:"labels"`

			// ServiceInstances Service instances related to the host
			ServiceInstances []struct {
				// Count Number of instances of the service
				Count int `json:"count"`

				// Type type of service
				Type string `json:"type"`
			} `json:"service_instances"`
			ServiceType string `json:"service_type"`

			// Services Services related to the host
			Services []struct {
				// Id Service Id
				Id string `json:"id"`

				// Type type of service
				Type string `json:"type"`
			} `json:"services"`

			// Sources Host Sources
			Sources struct {
				Ceph         bool `json:"ceph"`
				Orchestrator bool `json:"orchestrator"`
			} `json:"sources"`
			Status string `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV13JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiHostResponse parses an HTTP response from a PostApiHostWithResponse call
func ParsePostApiHostResponse(rsp *http.Response) (*PostApiHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiHostHostnameResponse parses an HTTP response from a DeleteApiHostHostnameWithResponse call
func ParseDeleteApiHostHostnameResponse(rsp *http.Response) (*DeleteApiHostHostnameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiHostHostnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHostHostnameResponse parses an HTTP response from a GetApiHostHostnameWithResponse call
func ParseGetApiHostHostnameResponse(rsp *http.Response) (*GetApiHostHostnameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostHostnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiHostHostnameResponse parses an HTTP response from a PutApiHostHostnameWithResponse call
func ParsePutApiHostHostnameResponse(rsp *http.Response) (*PutApiHostHostnameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiHostHostnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV01JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiHostHostnameDaemonsResponse parses an HTTP response from a GetApiHostHostnameDaemonsWithResponse call
func ParseGetApiHostHostnameDaemonsResponse(rsp *http.Response) (*GetApiHostHostnameDaemonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostHostnameDaemonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHostHostnameDevicesResponse parses an HTTP response from a GetApiHostHostnameDevicesWithResponse call
func ParseGetApiHostHostnameDevicesResponse(rsp *http.Response) (*GetApiHostHostnameDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostHostnameDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiHostHostnameIdentifyDeviceResponse parses an HTTP response from a PostApiHostHostnameIdentifyDeviceWithResponse call
func ParsePostApiHostHostnameIdentifyDeviceResponse(rsp *http.Response) (*PostApiHostHostnameIdentifyDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHostHostnameIdentifyDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHostHostnameInventoryResponse parses an HTTP response from a GetApiHostHostnameInventoryWithResponse call
func ParseGetApiHostHostnameInventoryResponse(rsp *http.Response) (*GetApiHostHostnameInventoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostHostnameInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Addr Host address
			Addr string `json:"addr"`

			// Devices Host devices
			Devices []struct {
				// Available If the device can be provisioned to an OSD
				Available bool `json:"available"`

				// DeviceId Device's udev ID
				DeviceId string `json:"device_id"`

				// HumanReadableType Device type. ssd or hdd
				HumanReadableType string `json:"human_readable_type"`
				LsmData           struct {
					Errors     []string `json:"errors"`
					Health     string   `json:"health"`
					LedSupport struct {
						FAILstatus   string `json:"FAILstatus"`
						FAILsupport  string `json:"FAILsupport"`
						IDENTstatus  string `json:"IDENTstatus"`
						IDENTsupport string `json:"IDENTsupport"`
					} `json:"ledSupport"`
					LinkSpeed string `json:"linkSpeed"`
					MediaType string `json:"mediaType"`
					Rpm       string `json:"rpm"`
					SerialNum string `json:"serialNum"`
					Transport string `json:"transport"`
				} `json:"lsm_data"`
				Lvs []struct {
					BlockUuid       string `json:"block_uuid"`
					ClusterFsid     string `json:"cluster_fsid"`
					ClusterName     string `json:"cluster_name"`
					Name            string `json:"name"`
					OsdFsid         string `json:"osd_fsid"`
					OsdId           string `json:"osd_id"`
					OsdspecAffinity string `json:"osdspec_affinity"`
					Type            string `json:"type"`
				} `json:"lvs"`

				// OsdIds Device OSD IDs
				OsdIds []int `json:"osd_ids"`

				// Path Device path
				Path            string   `json:"path"`
				RejectedReasons []string `json:"rejected_reasons"`
				SysApi          struct {
					HumanReadableSize string `json:"human_readable_size"`
					Locked            int    `json:"locked"`
					Model             string `json:"model"`
					NrRequests        string `json:"nr_requests"`
					Partitions        struct {
						PartitionName struct {
							Holders           []string `json:"holders"`
							HumanReadableSize string   `json:"human_readable_size"`
							Sectors           string   `json:"sectors"`
							Sectorsize        int      `json:"sectorsize"`
							Size              int      `json:"size"`
							Start             string   `json:"start"`
						} `json:"partition_name"`
					} `json:"partitions"`
					Path            string `json:"path"`
					Removable       string `json:"removable"`
					Rev             string `json:"rev"`
					Ro              string `json:"ro"`
					Rotational      string `json:"rotational"`
					SasAddress      string `json:"sas_address"`
					SasDeviceHandle string `json:"sas_device_handle"`
					SchedulerMode   string `json:"scheduler_mode"`
					Sectors         int    `json:"sectors"`
					Sectorsize      string `json:"sectorsize"`
					Size            int    `json:"size"`
					SupportDiscard  string `json:"support_discard"`
					Vendor          string `json:"vendor"`
				} `json:"sys_api"`
			} `json:"devices"`

			// Labels Host labels
			Labels []string `json:"labels"`

			// Name Hostname
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiHostHostnameSmartResponse parses an HTTP response from a GetApiHostHostnameSmartWithResponse call
func ParseGetApiHostHostnameSmartResponse(rsp *http.Response) (*GetApiHostHostnameSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHostHostnameSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiIscsiDiscoveryauthResponse parses an HTTP response from a GetApiIscsiDiscoveryauthWithResponse call
func ParseGetApiIscsiDiscoveryauthResponse(rsp *http.Response) (*GetApiIscsiDiscoveryauthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiIscsiDiscoveryauthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			MutualPassword *string `json:"mutual_password,omitempty"`
			MutualUser     *string `json:"mutual_user,omitempty"`

			// Password password
			Password *string `json:"password,omitempty"`

			// User username
			User *string `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiIscsiDiscoveryauthResponse parses an HTTP response from a PutApiIscsiDiscoveryauthWithResponse call
func ParsePutApiIscsiDiscoveryauthResponse(rsp *http.Response) (*PutApiIscsiDiscoveryauthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiIscsiDiscoveryauthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiIscsiTargetResponse parses an HTTP response from a GetApiIscsiTargetWithResponse call
func ParseGetApiIscsiTargetResponse(rsp *http.Response) (*GetApiIscsiTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiIscsiTargetResponse parses an HTTP response from a PostApiIscsiTargetWithResponse call
func ParsePostApiIscsiTargetResponse(rsp *http.Response) (*PostApiIscsiTargetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiIscsiTargetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiIscsiTargetTargetIqnResponse parses an HTTP response from a DeleteApiIscsiTargetTargetIqnWithResponse call
func ParseDeleteApiIscsiTargetTargetIqnResponse(rsp *http.Response) (*DeleteApiIscsiTargetTargetIqnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiIscsiTargetTargetIqnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiIscsiTargetTargetIqnResponse parses an HTTP response from a GetApiIscsiTargetTargetIqnWithResponse call
func ParseGetApiIscsiTargetTargetIqnResponse(rsp *http.Response) (*GetApiIscsiTargetTargetIqnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiIscsiTargetTargetIqnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiIscsiTargetTargetIqnResponse parses an HTTP response from a PutApiIscsiTargetTargetIqnWithResponse call
func ParsePutApiIscsiTargetTargetIqnResponse(rsp *http.Response) (*PutApiIscsiTargetTargetIqnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiIscsiTargetTargetIqnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiLogsAllResponse parses an HTTP response from a GetApiLogsAllWithResponse call
func ParseGetApiLogsAllResponse(rsp *http.Response) (*GetApiLogsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLogsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AuditLog Audit log
			AuditLog []struct {
				Addrs struct {
					Addrvec []struct {
						// Addr IP Address
						Addr  string `json:"addr"`
						Nonce int    `json:"nonce"`
						Type  string `json:"type"`
					} `json:"addrvec"`
				} `json:"addrs"`
				Channel  string `json:"channel"`
				Message  string `json:"message"`
				Name     string `json:"name"`
				Priority string `json:"priority"`
				Rank     string `json:"rank"`
				Seq      int    `json:"seq"`
				Stamp    string `json:"stamp"`
			} `json:"audit_log"`
			Clog []string `json:"clog"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiMgrModuleResponse parses an HTTP response from a GetApiMgrModuleWithResponse call
func ParseGetApiMgrModuleResponse(rsp *http.Response) (*GetApiMgrModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMgrModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// AlwaysOn Is it an always on module?
			AlwaysOn *bool `json:"always_on,omitempty"`

			// Enabled Is Module Enabled
			Enabled *bool `json:"enabled,omitempty"`

			// Name Module Name
			Name *string `json:"name,omitempty"`

			// Options Module Options
			Options *struct {
				// OptionName Options
				OptionName struct {
					// DefaultValue Default value for the option
					DefaultValue int `json:"default_value"`

					// Desc Description of the option
					Desc        string   `json:"desc"`
					EnumAllowed []string `json:"enum_allowed"`

					// Flags List of flags associated
					Flags int `json:"flags"`

					// Level Option level
					Level string `json:"level"`

					// LongDesc Elaborated description
					LongDesc string `json:"long_desc"`

					// Max Maximum value
					Max string `json:"max"`

					// Min Minimum value
					Min string `json:"min"`

					// Name Name of the option
					Name string `json:"name"`

					// SeeAlso Related options
					SeeAlso []string `json:"see_also"`

					// Tags Tags associated with the option
					Tags []string `json:"tags"`

					// Type Type of the option
					Type string `json:"type"`
				} `json:"Option_name"`
			} `json:"options,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiMgrModuleModuleNameResponse parses an HTTP response from a GetApiMgrModuleModuleNameWithResponse call
func ParseGetApiMgrModuleModuleNameResponse(rsp *http.Response) (*GetApiMgrModuleModuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMgrModuleModuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiMgrModuleModuleNameResponse parses an HTTP response from a PutApiMgrModuleModuleNameWithResponse call
func ParsePutApiMgrModuleModuleNameResponse(rsp *http.Response) (*PutApiMgrModuleModuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiMgrModuleModuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiMgrModuleModuleNameDisableResponse parses an HTTP response from a PostApiMgrModuleModuleNameDisableWithResponse call
func ParsePostApiMgrModuleModuleNameDisableResponse(rsp *http.Response) (*PostApiMgrModuleModuleNameDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMgrModuleModuleNameDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiMgrModuleModuleNameEnableResponse parses an HTTP response from a PostApiMgrModuleModuleNameEnableWithResponse call
func ParsePostApiMgrModuleModuleNameEnableResponse(rsp *http.Response) (*PostApiMgrModuleModuleNameEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMgrModuleModuleNameEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiMgrModuleModuleNameOptionsResponse parses an HTTP response from a GetApiMgrModuleModuleNameOptionsWithResponse call
func ParseGetApiMgrModuleModuleNameOptionsResponse(rsp *http.Response) (*GetApiMgrModuleModuleNameOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMgrModuleModuleNameOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiMonitorResponse parses an HTTP response from a GetApiMonitorWithResponse call
func ParseGetApiMonitorResponse(rsp *http.Response) (*GetApiMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InQuorum []struct {
				Addr        string `json:"addr"`
				Name        string `json:"name"`
				Priority    int    `json:"priority"`
				PublicAddr  string `json:"public_addr"`
				PublicAddrs struct {
					Addrvec []struct {
						Addr  string `json:"addr"`
						Nonce int    `json:"nonce"`
						Type  string `json:"type"`
					} `json:"addrvec"`
				} `json:"public_addrs"`
				Rank  int `json:"rank"`
				Stats struct {
					NumSessions []int `json:"num_sessions"`
				} `json:"stats"`
				Weight int `json:"weight"`
			} `json:"in_quorum"`
			MonStatus struct {
				ElectionEpoch   int      `json:"election_epoch"`
				ExtraProbePeers []string `json:"extra_probe_peers"`
				FeatureMap      struct {
					Client []struct {
						Features string `json:"features"`
						Num      int    `json:"num"`
						Release  string `json:"release"`
					} `json:"client"`
					Mds []struct {
						Features string `json:"features"`
						Num      int    `json:"num"`
						Release  string `json:"release"`
					} `json:"mds"`
					Mgr []struct {
						Features string `json:"features"`
						Num      int    `json:"num"`
						Release  string `json:"release"`
					} `json:"mgr"`
					Mon []struct {
						Features string `json:"features"`
						Num      int    `json:"num"`
						Release  string `json:"release"`
					} `json:"mon"`
				} `json:"feature_map"`
				Features struct {
					QuorumCon   string   `json:"quorum_con"`
					QuorumMon   []string `json:"quorum_mon"`
					RequiredCon string   `json:"required_con"`
					RequiredMon []int    `json:"required_mon"`
				} `json:"features"`
				Monmap struct {
					Created  string `json:"created"`
					Epoch    int    `json:"epoch"`
					Features struct {
						Optional   []string `json:"optional"`
						Persistent []string `json:"persistent"`
					} `json:"features"`
					Fsid              string `json:"fsid"`
					MinMonRelease     int    `json:"min_mon_release"`
					MinMonReleaseName string `json:"min_mon_release_name"`
					Modified          string `json:"modified"`
					Mons              []struct {
						Addr        string `json:"addr"`
						Name        string `json:"name"`
						Priority    int    `json:"priority"`
						PublicAddr  string `json:"public_addr"`
						PublicAddrs struct {
							Addrvec []struct {
								Addr  string `json:"addr"`
								Nonce int    `json:"nonce"`
								Type  string `json:"type"`
							} `json:"addrvec"`
						} `json:"public_addrs"`
						Rank  int `json:"rank"`
						Stats struct {
							NumSessions []int `json:"num_sessions"`
						} `json:"stats"`
						Weight int `json:"weight"`
					} `json:"mons"`
				} `json:"monmap"`
				Name          string   `json:"name"`
				OutsideQuorum []string `json:"outside_quorum"`
				Quorum        []int    `json:"quorum"`
				QuorumAge     int      `json:"quorum_age"`
				Rank          int      `json:"rank"`
				State         string   `json:"state"`
				SyncProvider  []string `json:"sync_provider"`
			} `json:"mon_status"`
			OutQuorum []int `json:"out_quorum"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiNfsGaneshaClusterResponse parses an HTTP response from a GetApiNfsGaneshaClusterWithResponse call
func ParseGetApiNfsGaneshaClusterResponse(rsp *http.Response) (*GetApiNfsGaneshaClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNfsGaneshaClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiNfsGaneshaExportResponse parses an HTTP response from a GetApiNfsGaneshaExportWithResponse call
func ParseGetApiNfsGaneshaExportResponse(rsp *http.Response) (*GetApiNfsGaneshaExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNfsGaneshaExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// AccessType Export access type
			AccessType *string `json:"access_type,omitempty"`

			// Clients List of client configurations
			Clients *[]struct {
				// AccessType Client access type
				AccessType string `json:"access_type"`

				// Addresses list of IP addresses
				Addresses []string `json:"addresses"`

				// Squash Client squash policy
				Squash string `json:"squash"`
			} `json:"clients,omitempty"`

			// ClusterId Cluster identifier
			ClusterId *string `json:"cluster_id,omitempty"`

			// ExportId Export ID
			ExportId *int `json:"export_id,omitempty"`

			// Fsal FSAL configuration
			Fsal *struct {
				// FsName CephFS filesystem name
				FsName *string `json:"fs_name,omitempty"`

				// Name name of FSAL
				Name string `json:"name"`

				// SecLabelXattr Name of xattr for security label
				SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

				// UserId User id
				UserId *string `json:"user_id,omitempty"`
			} `json:"fsal,omitempty"`

			// Path Export path
			Path *string `json:"path,omitempty"`

			// Protocols List of protocol types
			Protocols *[]int `json:"protocols,omitempty"`

			// Pseudo Pseudo FS path
			Pseudo *string `json:"pseudo,omitempty"`

			// SecurityLabel Security label
			SecurityLabel *string `json:"security_label,omitempty"`

			// Squash Export squash policy
			Squash *string `json:"squash,omitempty"`

			// Transports List of transport types
			Transports *[]string `json:"transports,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiNfsGaneshaExportResponse parses an HTTP response from a PostApiNfsGaneshaExportWithResponse call
func ParsePostApiNfsGaneshaExportResponse(rsp *http.Response) (*PostApiNfsGaneshaExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiNfsGaneshaExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// AccessType Export access type
			AccessType string `json:"access_type"`

			// Clients List of client configurations
			Clients []struct {
				// AccessType Client access type
				AccessType string `json:"access_type"`

				// Addresses list of IP addresses
				Addresses []string `json:"addresses"`

				// Squash Client squash policy
				Squash string `json:"squash"`
			} `json:"clients"`

			// ClusterId Cluster identifier
			ClusterId string `json:"cluster_id"`

			// ExportId Export ID
			ExportId int `json:"export_id"`

			// Fsal FSAL configuration
			Fsal struct {
				// FsName CephFS filesystem name
				FsName *string `json:"fs_name,omitempty"`

				// Name name of FSAL
				Name string `json:"name"`

				// SecLabelXattr Name of xattr for security label
				SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

				// UserId User id
				UserId *string `json:"user_id,omitempty"`
			} `json:"fsal"`

			// Path Export path
			Path string `json:"path"`

			// Protocols List of protocol types
			Protocols []int `json:"protocols"`

			// Pseudo Pseudo FS path
			Pseudo string `json:"pseudo"`

			// SecurityLabel Security label
			SecurityLabel string `json:"security_label"`

			// Squash Export squash policy
			Squash string `json:"squash"`

			// Transports List of transport types
			Transports []string `json:"transports"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV20JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiNfsGaneshaExportClusterIdExportIdResponse parses an HTTP response from a DeleteApiNfsGaneshaExportClusterIdExportIdWithResponse call
func ParseDeleteApiNfsGaneshaExportClusterIdExportIdResponse(rsp *http.Response) (*DeleteApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiNfsGaneshaExportClusterIdExportIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiNfsGaneshaExportClusterIdExportIdResponse parses an HTTP response from a GetApiNfsGaneshaExportClusterIdExportIdWithResponse call
func ParseGetApiNfsGaneshaExportClusterIdExportIdResponse(rsp *http.Response) (*GetApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNfsGaneshaExportClusterIdExportIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccessType Export access type
			AccessType string `json:"access_type"`

			// Clients List of client configurations
			Clients []struct {
				// AccessType Client access type
				AccessType string `json:"access_type"`

				// Addresses list of IP addresses
				Addresses []string `json:"addresses"`

				// Squash Client squash policy
				Squash string `json:"squash"`
			} `json:"clients"`

			// ClusterId Cluster identifier
			ClusterId string `json:"cluster_id"`

			// ExportId Export ID
			ExportId int `json:"export_id"`

			// Fsal FSAL configuration
			Fsal struct {
				// FsName CephFS filesystem name
				FsName *string `json:"fs_name,omitempty"`

				// Name name of FSAL
				Name string `json:"name"`

				// SecLabelXattr Name of xattr for security label
				SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

				// UserId User id
				UserId *string `json:"user_id,omitempty"`
			} `json:"fsal"`

			// Path Export path
			Path string `json:"path"`

			// Protocols List of protocol types
			Protocols []int `json:"protocols"`

			// Pseudo Pseudo FS path
			Pseudo string `json:"pseudo"`

			// SecurityLabel Security label
			SecurityLabel string `json:"security_label"`

			// Squash Export squash policy
			Squash string `json:"squash"`

			// Transports List of transport types
			Transports []string `json:"transports"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiNfsGaneshaExportClusterIdExportIdResponse parses an HTTP response from a PutApiNfsGaneshaExportClusterIdExportIdWithResponse call
func ParsePutApiNfsGaneshaExportClusterIdExportIdResponse(rsp *http.Response) (*PutApiNfsGaneshaExportClusterIdExportIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiNfsGaneshaExportClusterIdExportIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccessType Export access type
			AccessType string `json:"access_type"`

			// Clients List of client configurations
			Clients []struct {
				// AccessType Client access type
				AccessType string `json:"access_type"`

				// Addresses list of IP addresses
				Addresses []string `json:"addresses"`

				// Squash Client squash policy
				Squash string `json:"squash"`
			} `json:"clients"`

			// ClusterId Cluster identifier
			ClusterId string `json:"cluster_id"`

			// ExportId Export ID
			ExportId int `json:"export_id"`

			// Fsal FSAL configuration
			Fsal struct {
				// FsName CephFS filesystem name
				FsName *string `json:"fs_name,omitempty"`

				// Name name of FSAL
				Name string `json:"name"`

				// SecLabelXattr Name of xattr for security label
				SecLabelXattr *string `json:"sec_label_xattr,omitempty"`

				// UserId User id
				UserId *string `json:"user_id,omitempty"`
			} `json:"fsal"`

			// Path Export path
			Path string `json:"path"`

			// Protocols List of protocol types
			Protocols []int `json:"protocols"`

			// Pseudo Pseudo FS path
			Pseudo string `json:"pseudo"`

			// SecurityLabel Security label
			SecurityLabel string `json:"security_label"`

			// Squash Export squash policy
			Squash string `json:"squash"`

			// Transports List of transport types
			Transports []string `json:"transports"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV20JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiOsdResponse parses an HTTP response from a GetApiOsdWithResponse call
func ParseGetApiOsdResponse(rsp *http.Response) (*GetApiOsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiOsdResponse parses an HTTP response from a PostApiOsdWithResponse call
func ParsePostApiOsdResponse(rsp *http.Response) (*PostApiOsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdFlagsResponse parses an HTTP response from a GetApiOsdFlagsWithResponse call
func ParseGetApiOsdFlagsResponse(rsp *http.Response) (*GetApiOsdFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ListOfFlags []string `json:"list_of_flags"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiOsdFlagsResponse parses an HTTP response from a PutApiOsdFlagsWithResponse call
func ParsePutApiOsdFlagsResponse(rsp *http.Response) (*PutApiOsdFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOsdFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ListOfFlags []string `json:"list_of_flags"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiOsdFlagsIndividualResponse parses an HTTP response from a GetApiOsdFlagsIndividualWithResponse call
func ParseGetApiOsdFlagsIndividualResponse(rsp *http.Response) (*GetApiOsdFlagsIndividualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdFlagsIndividualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Flags List of active flags
			Flags []string `json:"flags"`

			// Osd OSD ID
			Osd int `json:"osd"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiOsdFlagsIndividualResponse parses an HTTP response from a PutApiOsdFlagsIndividualWithResponse call
func ParsePutApiOsdFlagsIndividualResponse(rsp *http.Response) (*PutApiOsdFlagsIndividualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOsdFlagsIndividualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Added List of added flags
			Added []string `json:"added"`

			// Ids List of updated OSDs
			Ids []int `json:"ids"`

			// Removed List of removed flags
			Removed []string `json:"removed"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiOsdSafeToDeleteResponse parses an HTTP response from a GetApiOsdSafeToDeleteWithResponse call
func ParseGetApiOsdSafeToDeleteResponse(rsp *http.Response) (*GetApiOsdSafeToDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSafeToDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdSafeToDestroyResponse parses an HTTP response from a GetApiOsdSafeToDestroyWithResponse call
func ParseGetApiOsdSafeToDestroyResponse(rsp *http.Response) (*GetApiOsdSafeToDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSafeToDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active []int `json:"active"`

			// IsSafeToDestroy Is OSD safe to destroy?
			IsSafeToDestroy bool     `json:"is_safe_to_destroy"`
			MissingStats    []string `json:"missing_stats"`

			// SafeToDestroy Is OSD safe to destroy?
			SafeToDestroy []string `json:"safe_to_destroy"`

			// StoredPgs Stored Pool groups in Osd
			StoredPgs []string `json:"stored_pgs"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiOsdSettingsResponse parses an HTTP response from a GetApiOsdSettingsWithResponse call
func ParseGetApiOsdSettingsResponse(rsp *http.Response) (*GetApiOsdSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiOsdSvcIdResponse parses an HTTP response from a DeleteApiOsdSvcIdWithResponse call
func ParseDeleteApiOsdSvcIdResponse(rsp *http.Response) (*DeleteApiOsdSvcIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiOsdSvcIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdSvcIdResponse parses an HTTP response from a GetApiOsdSvcIdWithResponse call
func ParseGetApiOsdSvcIdResponse(rsp *http.Response) (*GetApiOsdSvcIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSvcIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiOsdSvcIdResponse parses an HTTP response from a PutApiOsdSvcIdWithResponse call
func ParsePutApiOsdSvcIdResponse(rsp *http.Response) (*PutApiOsdSvcIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOsdSvcIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiOsdSvcIdDestroyResponse parses an HTTP response from a PostApiOsdSvcIdDestroyWithResponse call
func ParsePostApiOsdSvcIdDestroyResponse(rsp *http.Response) (*PostApiOsdSvcIdDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOsdSvcIdDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdSvcIdDevicesResponse parses an HTTP response from a GetApiOsdSvcIdDevicesWithResponse call
func ParseGetApiOsdSvcIdDevicesResponse(rsp *http.Response) (*GetApiOsdSvcIdDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSvcIdDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdSvcIdHistogramResponse parses an HTTP response from a GetApiOsdSvcIdHistogramWithResponse call
func ParseGetApiOsdSvcIdHistogramResponse(rsp *http.Response) (*GetApiOsdSvcIdHistogramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSvcIdHistogramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiOsdSvcIdMarkResponse parses an HTTP response from a PutApiOsdSvcIdMarkWithResponse call
func ParsePutApiOsdSvcIdMarkResponse(rsp *http.Response) (*PutApiOsdSvcIdMarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiOsdSvcIdMarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiOsdSvcIdPurgeResponse parses an HTTP response from a PostApiOsdSvcIdPurgeWithResponse call
func ParsePostApiOsdSvcIdPurgeResponse(rsp *http.Response) (*PostApiOsdSvcIdPurgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOsdSvcIdPurgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiOsdSvcIdReweightResponse parses an HTTP response from a PostApiOsdSvcIdReweightWithResponse call
func ParsePostApiOsdSvcIdReweightResponse(rsp *http.Response) (*PostApiOsdSvcIdReweightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOsdSvcIdReweightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiOsdSvcIdScrubResponse parses an HTTP response from a PostApiOsdSvcIdScrubWithResponse call
func ParsePostApiOsdSvcIdScrubResponse(rsp *http.Response) (*PostApiOsdSvcIdScrubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiOsdSvcIdScrubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiOsdSvcIdSmartResponse parses an HTTP response from a GetApiOsdSvcIdSmartWithResponse call
func ParseGetApiOsdSvcIdSmartResponse(rsp *http.Response) (*GetApiOsdSvcIdSmartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiOsdSvcIdSmartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersResponse parses an HTTP response from a GetApiPerfCountersWithResponse call
func ParseGetApiPerfCountersResponse(rsp *http.Response) (*GetApiPerfCountersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// MonA Service ID
			MonA struct {
				DotCacheBytes struct {
					Description string `json:"description"`
					Nick        string `json:"nick"`
					Priority    int    `json:"priority"`
					Type        int    `json:"type"`
					Units       int    `json:"units"`
					Value       int    `json:"value"`
				} `json:".cache_bytes"`
			} `json:"mon.a"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPerfCountersMdsServiceIdResponse parses an HTTP response from a GetApiPerfCountersMdsServiceIdWithResponse call
func ParseGetApiPerfCountersMdsServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersMdsServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersMdsServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersMgrServiceIdResponse parses an HTTP response from a GetApiPerfCountersMgrServiceIdWithResponse call
func ParseGetApiPerfCountersMgrServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersMgrServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersMgrServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersMonServiceIdResponse parses an HTTP response from a GetApiPerfCountersMonServiceIdWithResponse call
func ParseGetApiPerfCountersMonServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersMonServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersMonServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersOsdServiceIdResponse parses an HTTP response from a GetApiPerfCountersOsdServiceIdWithResponse call
func ParseGetApiPerfCountersOsdServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersOsdServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersOsdServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersRbdMirrorServiceIdResponse parses an HTTP response from a GetApiPerfCountersRbdMirrorServiceIdWithResponse call
func ParseGetApiPerfCountersRbdMirrorServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersRbdMirrorServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersRbdMirrorServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersRgwServiceIdResponse parses an HTTP response from a GetApiPerfCountersRgwServiceIdWithResponse call
func ParseGetApiPerfCountersRgwServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersRgwServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersRgwServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPerfCountersTcmuRunnerServiceIdResponse parses an HTTP response from a GetApiPerfCountersTcmuRunnerServiceIdWithResponse call
func ParseGetApiPerfCountersTcmuRunnerServiceIdResponse(rsp *http.Response) (*GetApiPerfCountersTcmuRunnerServiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPerfCountersTcmuRunnerServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPoolResponse parses an HTTP response from a GetApiPoolWithResponse call
func ParseGetApiPoolResponse(rsp *http.Response) (*GetApiPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationMetadata            *[]string `json:"application_metadata,omitempty"`
			Auid                           *int      `json:"auid,omitempty"`
			CacheMinEvictAge               *int      `json:"cache_min_evict_age,omitempty"`
			CacheMinFlushAge               *int      `json:"cache_min_flush_age,omitempty"`
			CacheMode                      *string   `json:"cache_mode,omitempty"`
			CacheTargetDirtyHighRatioMicro *int      `json:"cache_target_dirty_high_ratio_micro,omitempty"`
			CacheTargetDirtyRatioMicro     *int      `json:"cache_target_dirty_ratio_micro,omitempty"`
			CacheTargetFullRatioMicro      *int      `json:"cache_target_full_ratio_micro,omitempty"`
			CreateTime                     *string   `json:"create_time,omitempty"`
			CrushRule                      *string   `json:"crush_rule,omitempty"`
			ErasureCodeProfile             *string   `json:"erasure_code_profile,omitempty"`
			ExpectedNumObjects             *int      `json:"expected_num_objects,omitempty"`
			FastRead                       *bool     `json:"fast_read,omitempty"`
			Flags                          *int      `json:"flags,omitempty"`

			// FlagsNames flags name
			FlagsNames           *string   `json:"flags_names,omitempty"`
			GradeTable           *[]string `json:"grade_table,omitempty"`
			HitSetCount          *int      `json:"hit_set_count,omitempty"`
			HitSetGradeDecayRate *int      `json:"hit_set_grade_decay_rate,omitempty"`
			HitSetParams         *struct {
				Type string `json:"type"`
			} `json:"hit_set_params,omitempty"`
			HitSetPeriod                 *int    `json:"hit_set_period,omitempty"`
			HitSetSearchLastN            *int    `json:"hit_set_search_last_n,omitempty"`
			LastChange                   *string `json:"last_change,omitempty"`
			LastForceOpResend            *string `json:"last_force_op_resend,omitempty"`
			LastForceOpResendPreluminous *string `json:"last_force_op_resend_preluminous,omitempty"`
			LastForceOpResendPrenautilus *string `json:"last_force_op_resend_prenautilus,omitempty"`
			LastPgMergeMeta              *struct {
				LastEpochClean   int    `json:"last_epoch_clean"`
				LastEpochStarted int    `json:"last_epoch_started"`
				ReadyEpoch       int    `json:"ready_epoch"`
				SourcePgid       string `json:"source_pgid"`
				SourceVersion    string `json:"source_version"`
				TargetVersion    string `json:"target_version"`
			} `json:"last_pg_merge_meta,omitempty"`
			MinReadRecencyForPromote  *int `json:"min_read_recency_for_promote,omitempty"`
			MinSize                   *int `json:"min_size,omitempty"`
			MinWriteRecencyForPromote *int `json:"min_write_recency_for_promote,omitempty"`
			ObjectHash                *int `json:"object_hash,omitempty"`
			Options                   *struct {
				PgNumMax int `json:"pg_num_max"`
				PgNumMin int `json:"pg_num_min"`
			} `json:"options,omitempty"`
			PgAutoscaleMode      *string `json:"pg_autoscale_mode,omitempty"`
			PgNum                *int    `json:"pg_num,omitempty"`
			PgNumPending         *int    `json:"pg_num_pending,omitempty"`
			PgNumTarget          *int    `json:"pg_num_target,omitempty"`
			PgPlacementNum       *int    `json:"pg_placement_num,omitempty"`
			PgPlacementNumTarget *int    `json:"pg_placement_num_target,omitempty"`

			// Pool pool id
			Pool *int `json:"pool,omitempty"`

			// PoolName pool name
			PoolName        *string   `json:"pool_name,omitempty"`
			PoolSnaps       *[]string `json:"pool_snaps,omitempty"`
			QuotaMaxBytes   *int      `json:"quota_max_bytes,omitempty"`
			QuotaMaxObjects *int      `json:"quota_max_objects,omitempty"`
			ReadTier        *int      `json:"read_tier,omitempty"`
			RemovedSnaps    *[]string `json:"removed_snaps,omitempty"`

			// Size pool size
			Size             *int      `json:"size,omitempty"`
			SnapEpoch        *int      `json:"snap_epoch,omitempty"`
			SnapMode         *string   `json:"snap_mode,omitempty"`
			SnapSeq          *int      `json:"snap_seq,omitempty"`
			StripeWidth      *int      `json:"stripe_width,omitempty"`
			TargetMaxBytes   *int      `json:"target_max_bytes,omitempty"`
			TargetMaxObjects *int      `json:"target_max_objects,omitempty"`
			TierOf           *int      `json:"tier_of,omitempty"`
			Tiers            *[]string `json:"tiers,omitempty"`

			// Type type of pool
			Type         *string `json:"type,omitempty"`
			UseGmtHitset *bool   `json:"use_gmt_hitset,omitempty"`
			WriteTier    *int    `json:"write_tier,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPoolResponse parses an HTTP response from a PostApiPoolWithResponse call
func ParsePostApiPoolResponse(rsp *http.Response) (*PostApiPoolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPoolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiPoolPoolNameResponse parses an HTTP response from a DeleteApiPoolPoolNameWithResponse call
func ParseDeleteApiPoolPoolNameResponse(rsp *http.Response) (*DeleteApiPoolPoolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPoolPoolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPoolPoolNameResponse parses an HTTP response from a GetApiPoolPoolNameWithResponse call
func ParseGetApiPoolPoolNameResponse(rsp *http.Response) (*GetApiPoolPoolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoolPoolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiPoolPoolNameResponse parses an HTTP response from a PutApiPoolPoolNameWithResponse call
func ParsePutApiPoolPoolNameResponse(rsp *http.Response) (*PutApiPoolPoolNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPoolPoolNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPoolPoolNameConfigurationResponse parses an HTTP response from a GetApiPoolPoolNameConfigurationWithResponse call
func ParseGetApiPoolPoolNameConfigurationResponse(rsp *http.Response) (*GetApiPoolPoolNameConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoolPoolNameConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPrometheusResponse parses an HTTP response from a GetApiPrometheusWithResponse call
func ParseGetApiPrometheusResponse(rsp *http.Response) (*GetApiPrometheusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPrometheusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPrometheusDataResponse parses an HTTP response from a GetApiPrometheusDataWithResponse call
func ParseGetApiPrometheusDataResponse(rsp *http.Response) (*GetApiPrometheusDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPrometheusDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPrometheusNotificationsResponse parses an HTTP response from a GetApiPrometheusNotificationsWithResponse call
func ParseGetApiPrometheusNotificationsResponse(rsp *http.Response) (*GetApiPrometheusNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPrometheusNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPrometheusRulesResponse parses an HTTP response from a GetApiPrometheusRulesWithResponse call
func ParseGetApiPrometheusRulesResponse(rsp *http.Response) (*GetApiPrometheusRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPrometheusRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiPrometheusSilenceResponse parses an HTTP response from a PostApiPrometheusSilenceWithResponse call
func ParsePostApiPrometheusSilenceResponse(rsp *http.Response) (*PostApiPrometheusSilenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPrometheusSilenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiPrometheusSilenceSIdResponse parses an HTTP response from a DeleteApiPrometheusSilenceSIdWithResponse call
func ParseDeleteApiPrometheusSilenceSIdResponse(rsp *http.Response) (*DeleteApiPrometheusSilenceSIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPrometheusSilenceSIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPrometheusSilencesResponse parses an HTTP response from a GetApiPrometheusSilencesWithResponse call
func ParseGetApiPrometheusSilencesResponse(rsp *http.Response) (*GetApiPrometheusSilencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPrometheusSilencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwBucketResponse parses an HTTP response from a GetApiRgwBucketWithResponse call
func ParseGetApiRgwBucketResponse(rsp *http.Response) (*GetApiRgwBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRgwBucketResponse parses an HTTP response from a PostApiRgwBucketWithResponse call
func ParsePostApiRgwBucketResponse(rsp *http.Response) (*PostApiRgwBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwBucketDeleteEncryptionResponse parses an HTTP response from a DeleteApiRgwBucketDeleteEncryptionWithResponse call
func ParseDeleteApiRgwBucketDeleteEncryptionResponse(rsp *http.Response) (*DeleteApiRgwBucketDeleteEncryptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwBucketDeleteEncryptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwBucketGetEncryptionResponse parses an HTTP response from a GetApiRgwBucketGetEncryptionWithResponse call
func ParseGetApiRgwBucketGetEncryptionResponse(rsp *http.Response) (*GetApiRgwBucketGetEncryptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwBucketGetEncryptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwBucketGetEncryptionConfigResponse parses an HTTP response from a GetApiRgwBucketGetEncryptionConfigWithResponse call
func ParseGetApiRgwBucketGetEncryptionConfigResponse(rsp *http.Response) (*GetApiRgwBucketGetEncryptionConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwBucketGetEncryptionConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiRgwBucketSetEncryptionConfigResponse parses an HTTP response from a PutApiRgwBucketSetEncryptionConfigWithResponse call
func ParsePutApiRgwBucketSetEncryptionConfigResponse(rsp *http.Response) (*PutApiRgwBucketSetEncryptionConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRgwBucketSetEncryptionConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwBucketBucketResponse parses an HTTP response from a DeleteApiRgwBucketBucketWithResponse call
func ParseDeleteApiRgwBucketBucketResponse(rsp *http.Response) (*DeleteApiRgwBucketBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwBucketBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwBucketBucketResponse parses an HTTP response from a GetApiRgwBucketBucketWithResponse call
func ParseGetApiRgwBucketBucketResponse(rsp *http.Response) (*GetApiRgwBucketBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwBucketBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiRgwBucketBucketResponse parses an HTTP response from a PutApiRgwBucketBucketWithResponse call
func ParsePutApiRgwBucketBucketResponse(rsp *http.Response) (*PutApiRgwBucketBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRgwBucketBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwDaemonResponse parses an HTTP response from a GetApiRgwDaemonWithResponse call
func ParseGetApiRgwDaemonResponse(rsp *http.Response) (*GetApiRgwDaemonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwDaemonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Id Daemon ID
			Id *string `json:"id,omitempty"`

			// Port Port
			Port           *int    `json:"port,omitempty"`
			ServerHostname *string `json:"server_hostname,omitempty"`

			// Version Ceph Version
			Version *string `json:"version,omitempty"`

			// ZoneName Zone
			ZoneName *string `json:"zone_name,omitempty"`

			// ZonegroupName Zone Group
			ZonegroupName *string `json:"zonegroup_name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiRgwDaemonSvcIdResponse parses an HTTP response from a GetApiRgwDaemonSvcIdWithResponse call
func ParseGetApiRgwDaemonSvcIdResponse(rsp *http.Response) (*GetApiRgwDaemonSvcIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwDaemonSvcIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwRolesResponse parses an HTTP response from a GetApiRgwRolesWithResponse call
func ParseGetApiRgwRolesResponse(rsp *http.Response) (*GetApiRgwRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRgwRolesResponse parses an HTTP response from a PostApiRgwRolesWithResponse call
func ParsePostApiRgwRolesResponse(rsp *http.Response) (*PostApiRgwRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwSiteResponse parses an HTTP response from a GetApiRgwSiteWithResponse call
func ParseGetApiRgwSiteResponse(rsp *http.Response) (*GetApiRgwSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwUserResponse parses an HTTP response from a GetApiRgwUserWithResponse call
func ParseGetApiRgwUserResponse(rsp *http.Response) (*GetApiRgwUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ListOfUsers list of rgw users
			ListOfUsers []string `json:"list_of_users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiRgwUserResponse parses an HTTP response from a PostApiRgwUserWithResponse call
func ParsePostApiRgwUserResponse(rsp *http.Response) (*PostApiRgwUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwUserGetEmailsResponse parses an HTTP response from a GetApiRgwUserGetEmailsWithResponse call
func ParseGetApiRgwUserGetEmailsResponse(rsp *http.Response) (*GetApiRgwUserGetEmailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwUserGetEmailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwUserUidResponse parses an HTTP response from a DeleteApiRgwUserUidWithResponse call
func ParseDeleteApiRgwUserUidResponse(rsp *http.Response) (*DeleteApiRgwUserUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwUserUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwUserUidResponse parses an HTTP response from a GetApiRgwUserUidWithResponse call
func ParseGetApiRgwUserUidResponse(rsp *http.Response) (*GetApiRgwUserUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwUserUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiRgwUserUidResponse parses an HTTP response from a PutApiRgwUserUidWithResponse call
func ParsePutApiRgwUserUidResponse(rsp *http.Response) (*PutApiRgwUserUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRgwUserUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwUserUidCapabilityResponse parses an HTTP response from a DeleteApiRgwUserUidCapabilityWithResponse call
func ParseDeleteApiRgwUserUidCapabilityResponse(rsp *http.Response) (*DeleteApiRgwUserUidCapabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwUserUidCapabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRgwUserUidCapabilityResponse parses an HTTP response from a PostApiRgwUserUidCapabilityWithResponse call
func ParsePostApiRgwUserUidCapabilityResponse(rsp *http.Response) (*PostApiRgwUserUidCapabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwUserUidCapabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwUserUidKeyResponse parses an HTTP response from a DeleteApiRgwUserUidKeyWithResponse call
func ParseDeleteApiRgwUserUidKeyResponse(rsp *http.Response) (*DeleteApiRgwUserUidKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwUserUidKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRgwUserUidKeyResponse parses an HTTP response from a PostApiRgwUserUidKeyWithResponse call
func ParsePostApiRgwUserUidKeyResponse(rsp *http.Response) (*PostApiRgwUserUidKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwUserUidKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRgwUserUidQuotaResponse parses an HTTP response from a GetApiRgwUserUidQuotaWithResponse call
func ParseGetApiRgwUserUidQuotaResponse(rsp *http.Response) (*GetApiRgwUserUidQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRgwUserUidQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiRgwUserUidQuotaResponse parses an HTTP response from a PutApiRgwUserUidQuotaWithResponse call
func ParsePutApiRgwUserUidQuotaResponse(rsp *http.Response) (*PutApiRgwUserUidQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRgwUserUidQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRgwUserUidSubuserResponse parses an HTTP response from a PostApiRgwUserUidSubuserWithResponse call
func ParsePostApiRgwUserUidSubuserResponse(rsp *http.Response) (*PostApiRgwUserUidSubuserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRgwUserUidSubuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRgwUserUidSubuserSubuserResponse parses an HTTP response from a DeleteApiRgwUserUidSubuserSubuserWithResponse call
func ParseDeleteApiRgwUserUidSubuserSubuserResponse(rsp *http.Response) (*DeleteApiRgwUserUidSubuserSubuserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRgwUserUidSubuserSubuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRoleResponse parses an HTTP response from a GetApiRoleWithResponse call
func ParseGetApiRoleResponse(rsp *http.Response) (*GetApiRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Description Role Descriptions
			Description *string `json:"description,omitempty"`

			// Name Role Name
			Name              *string `json:"name,omitempty"`
			ScopesPermissions *struct {
				Cephfs []string `json:"cephfs"`
			} `json:"scopes_permissions,omitempty"`
			System *bool `json:"system,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiRoleResponse parses an HTTP response from a PostApiRoleWithResponse call
func ParsePostApiRoleResponse(rsp *http.Response) (*PostApiRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiRoleNameResponse parses an HTTP response from a DeleteApiRoleNameWithResponse call
func ParseDeleteApiRoleNameResponse(rsp *http.Response) (*DeleteApiRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRoleNameResponse parses an HTTP response from a GetApiRoleNameWithResponse call
func ParseGetApiRoleNameResponse(rsp *http.Response) (*GetApiRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiRoleNameResponse parses an HTTP response from a PutApiRoleNameWithResponse call
func ParsePutApiRoleNameResponse(rsp *http.Response) (*PutApiRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiRoleNameCloneResponse parses an HTTP response from a PostApiRoleNameCloneWithResponse call
func ParsePostApiRoleNameCloneResponse(rsp *http.Response) (*PostApiRoleNameCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoleNameCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiServiceResponse parses an HTTP response from a GetApiServiceWithResponse call
func ParseGetApiServiceResponse(rsp *http.Response) (*GetApiServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiServiceResponse parses an HTTP response from a PostApiServiceWithResponse call
func ParsePostApiServiceResponse(rsp *http.Response) (*PostApiServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiServiceKnownTypesResponse parses an HTTP response from a GetApiServiceKnownTypesWithResponse call
func ParseGetApiServiceKnownTypesResponse(rsp *http.Response) (*GetApiServiceKnownTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiServiceKnownTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiServiceServiceNameResponse parses an HTTP response from a DeleteApiServiceServiceNameWithResponse call
func ParseDeleteApiServiceServiceNameResponse(rsp *http.Response) (*DeleteApiServiceServiceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiServiceServiceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiServiceServiceNameResponse parses an HTTP response from a GetApiServiceServiceNameWithResponse call
func ParseGetApiServiceServiceNameResponse(rsp *http.Response) (*GetApiServiceServiceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiServiceServiceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiServiceServiceNameResponse parses an HTTP response from a PutApiServiceServiceNameWithResponse call
func ParsePutApiServiceServiceNameResponse(rsp *http.Response) (*PutApiServiceServiceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiServiceServiceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiServiceServiceNameDaemonsResponse parses an HTTP response from a GetApiServiceServiceNameDaemonsWithResponse call
func ParseGetApiServiceServiceNameDaemonsResponse(rsp *http.Response) (*GetApiServiceServiceNameDaemonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiServiceServiceNameDaemonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSettingsResponse parses an HTTP response from a GetApiSettingsWithResponse call
func ParseGetApiSettingsResponse(rsp *http.Response) (*GetApiSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Default Default Settings
			Default *bool `json:"default,omitempty"`

			// Name Settings Name
			Name *string `json:"name,omitempty"`

			// Type Type of Settings
			Type *string `json:"type,omitempty"`

			// Value Settings Value
			Value *bool `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiSettingsResponse parses an HTTP response from a PutApiSettingsWithResponse call
func ParsePutApiSettingsResponse(rsp *http.Response) (*PutApiSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiSettingsNameResponse parses an HTTP response from a DeleteApiSettingsNameWithResponse call
func ParseDeleteApiSettingsNameResponse(rsp *http.Response) (*DeleteApiSettingsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiSettingsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSettingsNameResponse parses an HTTP response from a GetApiSettingsNameWithResponse call
func ParseGetApiSettingsNameResponse(rsp *http.Response) (*GetApiSettingsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSettingsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiSettingsNameResponse parses an HTTP response from a PutApiSettingsNameWithResponse call
func ParsePutApiSettingsNameResponse(rsp *http.Response) (*PutApiSettingsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSettingsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSummaryResponse parses an HTTP response from a GetApiSummaryWithResponse call
func ParseGetApiSummaryResponse(rsp *http.Response) (*GetApiSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ExecutingTasks []string `json:"executing_tasks"`
			FinishedTasks  []struct {
				BeginTime string `json:"begin_time"`
				Duration  int    `json:"duration"`
				EndTime   string `json:"end_time"`
				Exception string `json:"exception"`
				Metadata  struct {
					Pool int `json:"pool"`
				} `json:"metadata"`
				Name     string `json:"name"`
				Progress int    `json:"progress"`
				RetValue string `json:"ret_value"`
				Success  bool   `json:"success"`
			} `json:"finished_tasks"`
			HaveMonConnection string `json:"have_mon_connection"`
			HealthStatus      string `json:"health_status"`
			MgrHost           string `json:"mgr_host"`
			MgrId             string `json:"mgr_id"`
			RbdMirroring      struct {
				Errors   int `json:"errors"`
				Warnings int `json:"warnings"`
			} `json:"rbd_mirroring"`
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiTaskResponse parses an HTTP response from a GetApiTaskWithResponse call
func ParseGetApiTaskResponse(rsp *http.Response) (*GetApiTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ExecutingTasks ongoing executing tasks
			ExecutingTasks string `json:"executing_tasks"`
			FinishedTasks  []struct {
				// BeginTime Task begin time
				BeginTime string `json:"begin_time"`
				Duration  int    `json:"duration"`

				// EndTime Task end time
				EndTime   string `json:"end_time"`
				Exception bool   `json:"exception"`
				Metadata  struct {
					Pool int `json:"pool"`
				} `json:"metadata"`

				// Name finished tasks name
				Name string `json:"name"`

				// Progress Progress of tasks
				Progress int  `json:"progress"`
				RetValue bool `json:"ret_value"`
				Success  bool `json:"success"`
			} `json:"finished_tasks"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiTelemetryResponse parses an HTTP response from a PutApiTelemetryWithResponse call
func ParsePutApiTelemetryResponse(rsp *http.Response) (*PutApiTelemetryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiTelemetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiTelemetryReportResponse parses an HTTP response from a GetApiTelemetryReportWithResponse call
func ParseGetApiTelemetryReportResponse(rsp *http.Response) (*GetApiTelemetryReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTelemetryReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DeviceReport string `json:"device_report"`
			Report       struct {
				Balancer struct {
					Active bool   `json:"active"`
					Mode   string `json:"mode"`
				} `json:"balancer"`
				Channels          []string `json:"channels"`
				ChannelsAvailable []string `json:"channels_available"`
				Config            struct {
					ActiveChanged  []string `json:"active_changed"`
					ClusterChanged []string `json:"cluster_changed"`
				} `json:"config"`
				Crashes []int  `json:"crashes"`
				Created string `json:"created"`
				Crush   struct {
					BucketAlgs struct {
						Straw2 int `json:"straw2"`
					} `json:"bucket_algs"`
					BucketSizes struct {
						N1 int `json:"1"`
						N3 int `json:"3"`
					} `json:"bucket_sizes"`
					BucketTypes struct {
						N1  int `json:"1"`
						N11 int `json:"11"`
					} `json:"bucket_types"`
					CompatWeightSet bool  `json:"compat_weight_set"`
					DeviceClasses   []int `json:"device_classes"`
					NumBuckets      int   `json:"num_buckets"`
					NumDevices      int   `json:"num_devices"`
					NumRules        int   `json:"num_rules"`
					NumTypes        int   `json:"num_types"`
					NumWeightSets   int   `json:"num_weight_sets"`
					Tunables        struct {
						AllowedBucketAlgs        int    `json:"allowed_bucket_algs"`
						ChooseLocalFallbackTries int    `json:"choose_local_fallback_tries"`
						ChooseLocalTries         int    `json:"choose_local_tries"`
						ChooseTotalTries         int    `json:"choose_total_tries"`
						ChooseleafDescendOnce    int    `json:"chooseleaf_descend_once"`
						ChooseleafStable         int    `json:"chooseleaf_stable"`
						ChooseleafVaryR          int    `json:"chooseleaf_vary_r"`
						HasV2Rules               int    `json:"has_v2_rules"`
						HasV3Rules               int    `json:"has_v3_rules"`
						HasV4Buckets             int    `json:"has_v4_buckets"`
						HasV5Rules               int    `json:"has_v5_rules"`
						LegacyTunables           int    `json:"legacy_tunables"`
						MinimumRequiredVersion   string `json:"minimum_required_version"`
						OptimalTunables          int    `json:"optimal_tunables"`
						Profile                  string `json:"profile"`
						RequireFeatureTunables   int    `json:"require_feature_tunables"`
						RequireFeatureTunables2  int    `json:"require_feature_tunables2"`
						RequireFeatureTunables3  int    `json:"require_feature_tunables3"`
						RequireFeatureTunables5  int    `json:"require_feature_tunables5"`
						StrawCalcVersion         int    `json:"straw_calc_version"`
					} `json:"tunables"`
				} `json:"crush"`
				Fs struct {
					Count        int `json:"count"`
					FeatureFlags struct {
						EnableMultiple      bool `json:"enable_multiple"`
						EverEnabledMultiple bool `json:"ever_enabled_multiple"`
					} `json:"feature_flags"`
					Filesystems   []int `json:"filesystems"`
					NumStandbyMds int   `json:"num_standby_mds"`
					TotalNumMds   int   `json:"total_num_mds"`
				} `json:"fs"`
				Hosts struct {
					Num        int `json:"num"`
					NumWithMds int `json:"num_with_mds"`
					NumWithMgr int `json:"num_with_mgr"`
					NumWithMon int `json:"num_with_mon"`
					NumWithOsd int `json:"num_with_osd"`
				} `json:"hosts"`
				Leaderboard bool   `json:"leaderboard"`
				License     string `json:"license"`
				Metadata    struct {
					Mon struct {
						Arch struct {
							X8664 int `json:"x86_64"`
						} `json:"arch"`
						CephVersion struct {
							CephVersion16003151Gf202994fcf int `json:"ceph version 16.0.0-3151-gf202994fcf"`
						} `json:"ceph_version"`
						Cpu struct {
							IntelRCoreTMI78665UCPU190GHz int `json:"Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz"`
						} `json:"cpu"`
						Distro struct {
							Centos int `json:"centos"`
						} `json:"distro"`
						DistroDescription struct {
							CentOSLinux8Core int `json:"CentOS Linux 8 (Core)"`
						} `json:"distro_description"`
						KernelDescription struct {
							Hash1SMPWedJul1195301UTC2020 int `json:"#1 SMP Wed Jul 1 19:53:01 UTC 2020"`
						} `json:"kernel_description"`
						KernelVersion struct {
							N577200Fc32X8664 int `json:"5.7.7-200.fc32.x86_64"`
						} `json:"kernel_version"`
						Os struct {
							Linux int `json:"Linux"`
						} `json:"os"`
					} `json:"mon"`
					Osd struct {
						Arch struct {
							X8664 int `json:"x86_64"`
						} `json:"arch"`
						CephVersion struct {
							CephVersion16003151Gf202994fcf int `json:"ceph version 16.0.0-3151-gf202994fcf"`
						} `json:"ceph_version"`
						Cpu struct {
							IntelRCoreTMI78665UCPU190GHz int `json:"Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz"`
						} `json:"cpu"`
						Distro struct {
							Centos int `json:"centos"`
						} `json:"distro"`
						DistroDescription struct {
							CentOSLinux8Core int `json:"CentOS Linux 8 (Core)"`
						} `json:"distro_description"`
						KernelDescription struct {
							Hash1SMPWedJul1195301UTC2020 int `json:"#1 SMP Wed Jul 1 19:53:01 UTC 2020"`
						} `json:"kernel_description"`
						KernelVersion struct {
							N577200Fc32X8664 int `json:"5.7.7-200.fc32.x86_64"`
						} `json:"kernel_version"`
						Os struct {
							Linux int `json:"Linux"`
						} `json:"os"`
						OsdObjectstore struct {
							Bluestore int `json:"bluestore"`
						} `json:"osd_objectstore"`
						Rotational struct {
							N1 int `json:"1"`
						} `json:"rotational"`
					} `json:"osd"`
				} `json:"metadata"`
				Mon struct {
					Count    int `json:"count"`
					Features struct {
						Optional   []int    `json:"optional"`
						Persistent []string `json:"persistent"`
					} `json:"features"`
					Ipv4AddrMons  int `json:"ipv4_addr_mons"`
					Ipv6AddrMons  int `json:"ipv6_addr_mons"`
					MinMonRelease int `json:"min_mon_release"`
					V1AddrMons    int `json:"v1_addr_mons"`
					V2AddrMons    int `json:"v2_addr_mons"`
				} `json:"mon"`
				Osd struct {
					ClusterNetwork         bool   `json:"cluster_network"`
					Count                  int    `json:"count"`
					RequireMinCompatClient string `json:"require_min_compat_client"`
					RequireOsdRelease      string `json:"require_osd_release"`
				} `json:"osd"`
				Pools []struct {
					CacheMode          string `json:"cache_mode"`
					ErasureCodeProfile string `json:"erasure_code_profile"`
					MinSize            int    `json:"min_size"`
					PgAutoscaleMode    string `json:"pg_autoscale_mode"`
					PgNum              int    `json:"pg_num"`
					PgpNum             int    `json:"pgp_num"`
					Pool               int    `json:"pool"`
					Size               int    `json:"size"`
					TargetMaxBytes     int    `json:"target_max_bytes"`
					TargetMaxObjects   int    `json:"target_max_objects"`
					Type               string `json:"type"`
				} `json:"pools"`
				Rbd struct {
					MirroringByPool []bool `json:"mirroring_by_pool"`
					NumImagesByPool []int  `json:"num_images_by_pool"`
					NumPools        int    `json:"num_pools"`
				} `json:"rbd"`
				ReportId        string `json:"report_id"`
				ReportTimestamp string `json:"report_timestamp"`
				ReportVersion   int    `json:"report_version"`
				Rgw             struct {
					Count      int      `json:"count"`
					Frontends  []string `json:"frontends"`
					Zonegroups int      `json:"zonegroups"`
					Zones      int      `json:"zones"`
				} `json:"rgw"`
				Services struct {
					Rgw int `json:"rgw"`
				} `json:"services"`
				Usage struct {
					PgNum           int `json:"pg_num"`
					Pools           int `json:"pools"`
					TotalAvailBytes int `json:"total_avail_bytes"`
					TotalBytes      int `json:"total_bytes"`
					TotalUsedBytes  int `json:"total_used_bytes"`
				} `json:"usage"`
			} `json:"report"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiUserResponse parses an HTTP response from a GetApiUserWithResponse call
func ParseGetApiUserResponse(rsp *http.Response) (*GetApiUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Email User email address
			Email string `json:"email"`

			// Enabled Is the user enabled?
			Enabled bool `json:"enabled"`

			// LastUpdate Details last updated
			LastUpdate int `json:"lastUpdate"`

			// Name User Name
			Name string `json:"name"`

			// PwdExpirationDate Password Expiration date
			PwdExpirationDate string `json:"pwdExpirationDate"`

			// PwdUpdateRequired Is Password Update Required?
			PwdUpdateRequired bool `json:"pwdUpdateRequired"`

			// Roles User Roles
			Roles []string `json:"roles"`

			// Username Username of the user
			Username string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndCephApiV10JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUserResponse parses an HTTP response from a PostApiUserWithResponse call
func ParsePostApiUserResponse(rsp *http.Response) (*PostApiUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiUserValidatePasswordResponse parses an HTTP response from a PostApiUserValidatePasswordWithResponse call
func ParsePostApiUserValidatePasswordResponse(rsp *http.Response) (*PostApiUserValidatePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUserValidatePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiUserUsernameResponse parses an HTTP response from a DeleteApiUserUsernameWithResponse call
func ParseDeleteApiUserUsernameResponse(rsp *http.Response) (*DeleteApiUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUserUsernameResponse parses an HTTP response from a GetApiUserUsernameWithResponse call
func ParseGetApiUserUsernameResponse(rsp *http.Response) (*GetApiUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiUserUsernameResponse parses an HTTP response from a PutApiUserUsernameWithResponse call
func ParsePutApiUserUsernameResponse(rsp *http.Response) (*PutApiUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiUserUsernameChangePasswordResponse parses an HTTP response from a PostApiUserUsernameChangePasswordWithResponse call
func ParsePostApiUserUsernameChangePasswordResponse(rsp *http.Response) (*PostApiUserUsernameChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUserUsernameChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
