// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/data/repo/ent/invitation"
	"github.com/openhdc/openhdc/internal/data/repo/ent/member"
	"github.com/openhdc/openhdc/internal/data/repo/ent/organization"
	"github.com/openhdc/openhdc/internal/data/repo/ent/predicate"
	"github.com/openhdc/openhdc/internal/data/repo/ent/team"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetSlug sets the "slug" field.
func (ou *OrganizationUpdate) SetSlug(s string) *OrganizationUpdate {
	ou.mutation.SetSlug(s)
	return ou
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSlug(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetSlug(*s)
	}
	return ou
}

// SetLogo sets the "logo" field.
func (ou *OrganizationUpdate) SetLogo(s string) *OrganizationUpdate {
	ou.mutation.SetLogo(s)
	return ou
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLogo(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLogo(*s)
	}
	return ou
}

// ClearLogo clears the value of the "logo" field.
func (ou *OrganizationUpdate) ClearLogo() *OrganizationUpdate {
	ou.mutation.ClearLogo()
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrganizationUpdate) SetCreatedAt(s string) *OrganizationUpdate {
	ou.mutation.SetCreatedAt(s)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreatedAt(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCreatedAt(*s)
	}
	return ou
}

// SetMetadata sets the "metadata" field.
func (ou *OrganizationUpdate) SetMetadata(s string) *OrganizationUpdate {
	ou.mutation.SetMetadata(s)
	return ou
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableMetadata(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetMetadata(*s)
	}
	return ou
}

// ClearMetadata clears the value of the "metadata" field.
func (ou *OrganizationUpdate) ClearMetadata() *OrganizationUpdate {
	ou.mutation.ClearMetadata()
	return ou
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (ou *OrganizationUpdate) AddTeamIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddTeamIDs(ids...)
	return ou
}

// AddTeams adds the "teams" edges to the Team entity.
func (ou *OrganizationUpdate) AddTeams(t ...*Team) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTeamIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (ou *OrganizationUpdate) AddMemberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddMemberIDs(ids...)
	return ou
}

// AddMembers adds the "members" edges to the Member entity.
func (ou *OrganizationUpdate) AddMembers(m ...*Member) *OrganizationUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.AddMemberIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (ou *OrganizationUpdate) AddInvitationIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddInvitationIDs(ids...)
	return ou
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (ou *OrganizationUpdate) AddInvitations(i ...*Invitation) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddInvitationIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (ou *OrganizationUpdate) ClearTeams() *OrganizationUpdate {
	ou.mutation.ClearTeams()
	return ou
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (ou *OrganizationUpdate) RemoveTeamIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveTeamIDs(ids...)
	return ou
}

// RemoveTeams removes "teams" edges to Team entities.
func (ou *OrganizationUpdate) RemoveTeams(t ...*Team) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTeamIDs(ids...)
}

// ClearMembers clears all "members" edges to the Member entity.
func (ou *OrganizationUpdate) ClearMembers() *OrganizationUpdate {
	ou.mutation.ClearMembers()
	return ou
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (ou *OrganizationUpdate) RemoveMemberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveMemberIDs(ids...)
	return ou
}

// RemoveMembers removes "members" edges to Member entities.
func (ou *OrganizationUpdate) RemoveMembers(m ...*Member) *OrganizationUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.RemoveMemberIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (ou *OrganizationUpdate) ClearInvitations() *OrganizationUpdate {
	ou.mutation.ClearInvitations()
	return ou
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (ou *OrganizationUpdate) RemoveInvitationIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveInvitationIDs(ids...)
	return ou
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (ou *OrganizationUpdate) RemoveInvitations(i ...*Invitation) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveInvitationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ou.mutation.Logo(); ok {
		_spec.SetField(organization.FieldLogo, field.TypeString, value)
	}
	if ou.mutation.LogoCleared() {
		_spec.ClearField(organization.FieldLogo, field.TypeString)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := ou.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeString, value)
	}
	if ou.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeString)
	}
	if ou.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !ou.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !ou.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetSlug sets the "slug" field.
func (ouo *OrganizationUpdateOne) SetSlug(s string) *OrganizationUpdateOne {
	ouo.mutation.SetSlug(s)
	return ouo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSlug(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetSlug(*s)
	}
	return ouo
}

// SetLogo sets the "logo" field.
func (ouo *OrganizationUpdateOne) SetLogo(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLogo(s)
	return ouo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLogo(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLogo(*s)
	}
	return ouo
}

// ClearLogo clears the value of the "logo" field.
func (ouo *OrganizationUpdateOne) ClearLogo() *OrganizationUpdateOne {
	ouo.mutation.ClearLogo()
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrganizationUpdateOne) SetCreatedAt(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCreatedAt(s)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreatedAt(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCreatedAt(*s)
	}
	return ouo
}

// SetMetadata sets the "metadata" field.
func (ouo *OrganizationUpdateOne) SetMetadata(s string) *OrganizationUpdateOne {
	ouo.mutation.SetMetadata(s)
	return ouo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableMetadata(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetMetadata(*s)
	}
	return ouo
}

// ClearMetadata clears the value of the "metadata" field.
func (ouo *OrganizationUpdateOne) ClearMetadata() *OrganizationUpdateOne {
	ouo.mutation.ClearMetadata()
	return ouo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (ouo *OrganizationUpdateOne) AddTeamIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddTeamIDs(ids...)
	return ouo
}

// AddTeams adds the "teams" edges to the Team entity.
func (ouo *OrganizationUpdateOne) AddTeams(t ...*Team) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTeamIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (ouo *OrganizationUpdateOne) AddMemberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddMemberIDs(ids...)
	return ouo
}

// AddMembers adds the "members" edges to the Member entity.
func (ouo *OrganizationUpdateOne) AddMembers(m ...*Member) *OrganizationUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.AddMemberIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (ouo *OrganizationUpdateOne) AddInvitationIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddInvitationIDs(ids...)
	return ouo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (ouo *OrganizationUpdateOne) AddInvitations(i ...*Invitation) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddInvitationIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (ouo *OrganizationUpdateOne) ClearTeams() *OrganizationUpdateOne {
	ouo.mutation.ClearTeams()
	return ouo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveTeamIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveTeamIDs(ids...)
	return ouo
}

// RemoveTeams removes "teams" edges to Team entities.
func (ouo *OrganizationUpdateOne) RemoveTeams(t ...*Team) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTeamIDs(ids...)
}

// ClearMembers clears all "members" edges to the Member entity.
func (ouo *OrganizationUpdateOne) ClearMembers() *OrganizationUpdateOne {
	ouo.mutation.ClearMembers()
	return ouo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveMemberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveMemberIDs(ids...)
	return ouo
}

// RemoveMembers removes "members" edges to Member entities.
func (ouo *OrganizationUpdateOne) RemoveMembers(m ...*Member) *OrganizationUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.RemoveMemberIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (ouo *OrganizationUpdateOne) ClearInvitations() *OrganizationUpdateOne {
	ouo.mutation.ClearInvitations()
	return ouo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveInvitationIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveInvitationIDs(ids...)
	return ouo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (ouo *OrganizationUpdateOne) RemoveInvitations(i ...*Invitation) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveInvitationIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Slug(); ok {
		_spec.SetField(organization.FieldSlug, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Logo(); ok {
		_spec.SetField(organization.FieldLogo, field.TypeString, value)
	}
	if ouo.mutation.LogoCleared() {
		_spec.ClearField(organization.FieldLogo, field.TypeString)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Metadata(); ok {
		_spec.SetField(organization.FieldMetadata, field.TypeString, value)
	}
	if ouo.mutation.MetadataCleared() {
		_spec.ClearField(organization.FieldMetadata, field.TypeString)
	}
	if ouo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !ouo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TeamsTable,
			Columns: []string{organization.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !ouo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitationsTable,
			Columns: []string{organization.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
