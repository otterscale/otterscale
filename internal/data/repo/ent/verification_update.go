// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/data/repo/ent/predicate"
	"github.com/openhdc/openhdc/internal/data/repo/ent/verification"
)

// VerificationUpdate is the builder for updating Verification entities.
type VerificationUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationMutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vu *VerificationUpdate) Where(ps ...predicate.Verification) *VerificationUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetIdentifier sets the "identifier" field.
func (vu *VerificationUpdate) SetIdentifier(s string) *VerificationUpdate {
	vu.mutation.SetIdentifier(s)
	return vu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableIdentifier(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetIdentifier(*s)
	}
	return vu
}

// SetValue sets the "value" field.
func (vu *VerificationUpdate) SetValue(s string) *VerificationUpdate {
	vu.mutation.SetValue(s)
	return vu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableValue(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetValue(*s)
	}
	return vu
}

// SetExpiresAt sets the "expires_at" field.
func (vu *VerificationUpdate) SetExpiresAt(s string) *VerificationUpdate {
	vu.mutation.SetExpiresAt(s)
	return vu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableExpiresAt(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetExpiresAt(*s)
	}
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VerificationUpdate) SetCreatedAt(s string) *VerificationUpdate {
	vu.mutation.SetCreatedAt(s)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableCreatedAt(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetCreatedAt(*s)
	}
	return vu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (vu *VerificationUpdate) ClearCreatedAt() *VerificationUpdate {
	vu.mutation.ClearCreatedAt()
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VerificationUpdate) SetUpdatedAt(s string) *VerificationUpdate {
	vu.mutation.SetUpdatedAt(s)
	return vu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableUpdatedAt(s *string) *VerificationUpdate {
	if s != nil {
		vu.SetUpdatedAt(*s)
	}
	return vu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vu *VerificationUpdate) ClearUpdatedAt() *VerificationUpdate {
	vu.mutation.ClearUpdatedAt()
	return vu
}

// Mutation returns the VerificationMutation object of the builder.
func (vu *VerificationUpdate) Mutation() *VerificationMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VerificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VerificationUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VerificationUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Identifier(); ok {
		_spec.SetField(verification.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := vu.mutation.Value(); ok {
		_spec.SetField(verification.FieldValue, field.TypeString, value)
	}
	if value, ok := vu.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeString, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(verification.FieldCreatedAt, field.TypeString, value)
	}
	if vu.mutation.CreatedAtCleared() {
		_spec.ClearField(verification.FieldCreatedAt, field.TypeString)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeString, value)
	}
	if vu.mutation.UpdatedAtCleared() {
		_spec.ClearField(verification.FieldUpdatedAt, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VerificationUpdateOne is the builder for updating a single Verification entity.
type VerificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationMutation
}

// SetIdentifier sets the "identifier" field.
func (vuo *VerificationUpdateOne) SetIdentifier(s string) *VerificationUpdateOne {
	vuo.mutation.SetIdentifier(s)
	return vuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableIdentifier(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetIdentifier(*s)
	}
	return vuo
}

// SetValue sets the "value" field.
func (vuo *VerificationUpdateOne) SetValue(s string) *VerificationUpdateOne {
	vuo.mutation.SetValue(s)
	return vuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableValue(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetValue(*s)
	}
	return vuo
}

// SetExpiresAt sets the "expires_at" field.
func (vuo *VerificationUpdateOne) SetExpiresAt(s string) *VerificationUpdateOne {
	vuo.mutation.SetExpiresAt(s)
	return vuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableExpiresAt(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetExpiresAt(*s)
	}
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VerificationUpdateOne) SetCreatedAt(s string) *VerificationUpdateOne {
	vuo.mutation.SetCreatedAt(s)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableCreatedAt(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetCreatedAt(*s)
	}
	return vuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (vuo *VerificationUpdateOne) ClearCreatedAt() *VerificationUpdateOne {
	vuo.mutation.ClearCreatedAt()
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VerificationUpdateOne) SetUpdatedAt(s string) *VerificationUpdateOne {
	vuo.mutation.SetUpdatedAt(s)
	return vuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableUpdatedAt(s *string) *VerificationUpdateOne {
	if s != nil {
		vuo.SetUpdatedAt(*s)
	}
	return vuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vuo *VerificationUpdateOne) ClearUpdatedAt() *VerificationUpdateOne {
	vuo.mutation.ClearUpdatedAt()
	return vuo
}

// Mutation returns the VerificationMutation object of the builder.
func (vuo *VerificationUpdateOne) Mutation() *VerificationMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vuo *VerificationUpdateOne) Where(ps ...predicate.Verification) *VerificationUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VerificationUpdateOne) Select(field string, fields ...string) *VerificationUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Verification entity.
func (vuo *VerificationUpdateOne) Save(ctx context.Context) (*Verification, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VerificationUpdateOne) SaveX(ctx context.Context) *Verification {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VerificationUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VerificationUpdateOne) sqlSave(ctx context.Context) (_node *Verification, err error) {
	_spec := sqlgraph.NewUpdateSpec(verification.Table, verification.Columns, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Verification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verification.FieldID)
		for _, f := range fields {
			if !verification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Identifier(); ok {
		_spec.SetField(verification.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Value(); ok {
		_spec.SetField(verification.FieldValue, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ExpiresAt(); ok {
		_spec.SetField(verification.FieldExpiresAt, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(verification.FieldCreatedAt, field.TypeString, value)
	}
	if vuo.mutation.CreatedAtCleared() {
		_spec.ClearField(verification.FieldCreatedAt, field.TypeString)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(verification.FieldUpdatedAt, field.TypeString, value)
	}
	if vuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(verification.FieldUpdatedAt, field.TypeString)
	}
	_node = &Verification{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
