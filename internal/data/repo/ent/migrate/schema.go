// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountColumns holds the columns for the "account" table.
	AccountColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "account_id", Type: field.TypeString, Size: 2147483647},
		{Name: "provider_id", Type: field.TypeString, Size: 2147483647},
		{Name: "access_token", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "refresh_token", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "id_token", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "access_token_expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "refresh_token_expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "scope", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "password", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString, Size: 2147483647},
	}
	// AccountTable holds the schema information for the "account" table.
	AccountTable = &schema.Table{
		Name:       "account",
		Columns:    AccountColumns,
		PrimaryKey: []*schema.Column{AccountColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_user_accounts",
				Columns:    []*schema.Column{AccountColumns[12]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// InvitationColumns holds the columns for the "invitation" table.
	InvitationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "email", Type: field.TypeString, Size: 2147483647},
		{Name: "role", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "team_id", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Size: 2147483647},
		{Name: "expires_at", Type: field.TypeString, Size: 2147483647},
		{Name: "organization_id", Type: field.TypeString, Size: 2147483647},
		{Name: "inviter_id", Type: field.TypeString, Size: 2147483647},
	}
	// InvitationTable holds the schema information for the "invitation" table.
	InvitationTable = &schema.Table{
		Name:       "invitation",
		Columns:    InvitationColumns,
		PrimaryKey: []*schema.Column{InvitationColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invitation_organization_invitations",
				Columns:    []*schema.Column{InvitationColumns[6]},
				RefColumns: []*schema.Column{OrganizationColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "invitation_user_invitations",
				Columns:    []*schema.Column{InvitationColumns[7]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// JwksColumns holds the columns for the "jwks" table.
	JwksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "public_key", Type: field.TypeString, Size: 2147483647},
		{Name: "private_key", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
	}
	// JwksTable holds the schema information for the "jwks" table.
	JwksTable = &schema.Table{
		Name:       "jwks",
		Columns:    JwksColumns,
		PrimaryKey: []*schema.Column{JwksColumns[0]},
	}
	// MemberColumns holds the columns for the "member" table.
	MemberColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "role", Type: field.TypeString, Size: 2147483647},
		{Name: "team_id", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeString, Size: 2147483647},
		{Name: "organization_id", Type: field.TypeString, Size: 2147483647},
		{Name: "user_id", Type: field.TypeString, Size: 2147483647},
	}
	// MemberTable holds the schema information for the "member" table.
	MemberTable = &schema.Table{
		Name:       "member",
		Columns:    MemberColumns,
		PrimaryKey: []*schema.Column{MemberColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "member_organization_members",
				Columns:    []*schema.Column{MemberColumns[4]},
				RefColumns: []*schema.Column{OrganizationColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "member_user_members",
				Columns:    []*schema.Column{MemberColumns[5]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OrganizationColumns holds the columns for the "organization" table.
	OrganizationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "slug", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "logo", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeString, Size: 2147483647},
		{Name: "metadata", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// OrganizationTable holds the schema information for the "organization" table.
	OrganizationTable = &schema.Table{
		Name:       "organization",
		Columns:    OrganizationColumns,
		PrimaryKey: []*schema.Column{OrganizationColumns[0]},
	}
	// SessionColumns holds the columns for the "session" table.
	SessionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "ip_address", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "user_agent", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "impersonated_by", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "active_organization_id", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "user_id", Type: field.TypeString, Size: 2147483647},
	}
	// SessionTable holds the schema information for the "session" table.
	SessionTable = &schema.Table{
		Name:       "session",
		Columns:    SessionColumns,
		PrimaryKey: []*schema.Column{SessionColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "session_user_sessions",
				Columns:    []*schema.Column{SessionColumns[9]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TeamColumns holds the columns for the "team" table.
	TeamColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "organization_id", Type: field.TypeString, Size: 2147483647},
	}
	// TeamTable holds the schema information for the "team" table.
	TeamTable = &schema.Table{
		Name:       "team",
		Columns:    TeamColumns,
		PrimaryKey: []*schema.Column{TeamColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_organization_teams",
				Columns:    []*schema.Column{TeamColumns[4]},
				RefColumns: []*schema.Column{OrganizationColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "email_verified", Type: field.TypeBool},
		{Name: "image", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "banned", Type: field.TypeBool, Nullable: true},
		{Name: "ban_reason", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "ban_expires", Type: field.TypeTime, Nullable: true},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// VerificationColumns holds the columns for the "verification" table.
	VerificationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "identifier", Type: field.TypeString, Size: 2147483647},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "expires_at", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "updated_at", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// VerificationTable holds the schema information for the "verification" table.
	VerificationTable = &schema.Table{
		Name:       "verification",
		Columns:    VerificationColumns,
		PrimaryKey: []*schema.Column{VerificationColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountTable,
		InvitationTable,
		JwksTable,
		MemberTable,
		OrganizationTable,
		SessionTable,
		TeamTable,
		UserTable,
		VerificationTable,
	}
)

func init() {
	AccountTable.ForeignKeys[0].RefTable = UserTable
	AccountTable.Annotation = &entsql.Annotation{
		Table: "account",
	}
	InvitationTable.ForeignKeys[0].RefTable = OrganizationTable
	InvitationTable.ForeignKeys[1].RefTable = UserTable
	InvitationTable.Annotation = &entsql.Annotation{
		Table: "invitation",
	}
	JwksTable.Annotation = &entsql.Annotation{
		Table: "jwks",
	}
	MemberTable.ForeignKeys[0].RefTable = OrganizationTable
	MemberTable.ForeignKeys[1].RefTable = UserTable
	MemberTable.Annotation = &entsql.Annotation{
		Table: "member",
	}
	OrganizationTable.Annotation = &entsql.Annotation{
		Table: "organization",
	}
	SessionTable.ForeignKeys[0].RefTable = UserTable
	SessionTable.Annotation = &entsql.Annotation{
		Table: "session",
	}
	TeamTable.ForeignKeys[0].RefTable = OrganizationTable
	TeamTable.Annotation = &entsql.Annotation{
		Table: "team",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	VerificationTable.Annotation = &entsql.Annotation{
		Table: "verification",
	}
}
