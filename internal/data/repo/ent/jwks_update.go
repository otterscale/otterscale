// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openhdc/openhdc/internal/data/repo/ent/jwks"
	"github.com/openhdc/openhdc/internal/data/repo/ent/predicate"
)

// JWKSUpdate is the builder for updating JWKS entities.
type JWKSUpdate struct {
	config
	hooks    []Hook
	mutation *JWKSMutation
}

// Where appends a list predicates to the JWKSUpdate builder.
func (ju *JWKSUpdate) Where(ps ...predicate.JWKS) *JWKSUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetPublicKey sets the "public_key" field.
func (ju *JWKSUpdate) SetPublicKey(s string) *JWKSUpdate {
	ju.mutation.SetPublicKey(s)
	return ju
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (ju *JWKSUpdate) SetNillablePublicKey(s *string) *JWKSUpdate {
	if s != nil {
		ju.SetPublicKey(*s)
	}
	return ju
}

// SetPrivateKey sets the "private_key" field.
func (ju *JWKSUpdate) SetPrivateKey(s string) *JWKSUpdate {
	ju.mutation.SetPrivateKey(s)
	return ju
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (ju *JWKSUpdate) SetNillablePrivateKey(s *string) *JWKSUpdate {
	if s != nil {
		ju.SetPrivateKey(*s)
	}
	return ju
}

// SetCreatedAt sets the "created_at" field.
func (ju *JWKSUpdate) SetCreatedAt(t time.Time) *JWKSUpdate {
	ju.mutation.SetCreatedAt(t)
	return ju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ju *JWKSUpdate) SetNillableCreatedAt(t *time.Time) *JWKSUpdate {
	if t != nil {
		ju.SetCreatedAt(*t)
	}
	return ju
}

// Mutation returns the JWKSMutation object of the builder.
func (ju *JWKSUpdate) Mutation() *JWKSMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JWKSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JWKSUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JWKSUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JWKSUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JWKSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jwks.Table, jwks.Columns, sqlgraph.NewFieldSpec(jwks.FieldID, field.TypeString))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.PublicKey(); ok {
		_spec.SetField(jwks.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := ju.mutation.PrivateKey(); ok {
		_spec.SetField(jwks.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := ju.mutation.CreatedAt(); ok {
		_spec.SetField(jwks.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JWKSUpdateOne is the builder for updating a single JWKS entity.
type JWKSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JWKSMutation
}

// SetPublicKey sets the "public_key" field.
func (juo *JWKSUpdateOne) SetPublicKey(s string) *JWKSUpdateOne {
	juo.mutation.SetPublicKey(s)
	return juo
}

// SetNillablePublicKey sets the "public_key" field if the given value is not nil.
func (juo *JWKSUpdateOne) SetNillablePublicKey(s *string) *JWKSUpdateOne {
	if s != nil {
		juo.SetPublicKey(*s)
	}
	return juo
}

// SetPrivateKey sets the "private_key" field.
func (juo *JWKSUpdateOne) SetPrivateKey(s string) *JWKSUpdateOne {
	juo.mutation.SetPrivateKey(s)
	return juo
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (juo *JWKSUpdateOne) SetNillablePrivateKey(s *string) *JWKSUpdateOne {
	if s != nil {
		juo.SetPrivateKey(*s)
	}
	return juo
}

// SetCreatedAt sets the "created_at" field.
func (juo *JWKSUpdateOne) SetCreatedAt(t time.Time) *JWKSUpdateOne {
	juo.mutation.SetCreatedAt(t)
	return juo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (juo *JWKSUpdateOne) SetNillableCreatedAt(t *time.Time) *JWKSUpdateOne {
	if t != nil {
		juo.SetCreatedAt(*t)
	}
	return juo
}

// Mutation returns the JWKSMutation object of the builder.
func (juo *JWKSUpdateOne) Mutation() *JWKSMutation {
	return juo.mutation
}

// Where appends a list predicates to the JWKSUpdate builder.
func (juo *JWKSUpdateOne) Where(ps ...predicate.JWKS) *JWKSUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JWKSUpdateOne) Select(field string, fields ...string) *JWKSUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated JWKS entity.
func (juo *JWKSUpdateOne) Save(ctx context.Context) (*JWKS, error) {
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JWKSUpdateOne) SaveX(ctx context.Context) *JWKS {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JWKSUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JWKSUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JWKSUpdateOne) sqlSave(ctx context.Context) (_node *JWKS, err error) {
	_spec := sqlgraph.NewUpdateSpec(jwks.Table, jwks.Columns, sqlgraph.NewFieldSpec(jwks.FieldID, field.TypeString))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JWKS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jwks.FieldID)
		for _, f := range fields {
			if !jwks.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jwks.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.PublicKey(); ok {
		_spec.SetField(jwks.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := juo.mutation.PrivateKey(); ok {
		_spec.SetField(jwks.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := juo.mutation.CreatedAt(); ok {
		_spec.SetField(jwks.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &JWKS{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
