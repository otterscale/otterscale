// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/orchestrator/v1/orchestrator.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/orchestrator/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrchestratorServiceName is the fully-qualified name of the OrchestratorService service.
	OrchestratorServiceName = "otterscale.orchestrator.v1.OrchestratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrchestratorServiceIsMachineDeployedProcedure is the fully-qualified name of the
	// OrchestratorService's IsMachineDeployed RPC.
	OrchestratorServiceIsMachineDeployedProcedure = "/otterscale.orchestrator.v1.OrchestratorService/IsMachineDeployed"
	// OrchestratorServiceListStatusesProcedure is the fully-qualified name of the OrchestratorService's
	// ListStatuses RPC.
	OrchestratorServiceListStatusesProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListStatuses"
	// OrchestratorServiceListEssentialsProcedure is the fully-qualified name of the
	// OrchestratorService's ListEssentials RPC.
	OrchestratorServiceListEssentialsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListEssentials"
	// OrchestratorServiceCreateSingleNodeProcedure is the fully-qualified name of the
	// OrchestratorService's CreateSingleNode RPC.
	OrchestratorServiceCreateSingleNodeProcedure = "/otterscale.orchestrator.v1.OrchestratorService/CreateSingleNode"
	// OrchestratorServiceCreateHighAvailabilityClusterProcedure is the fully-qualified name of the
	// OrchestratorService's CreateHighAvailabilityCluster RPC.
	OrchestratorServiceCreateHighAvailabilityClusterProcedure = "/otterscale.orchestrator.v1.OrchestratorService/CreateHighAvailabilityCluster"
	// OrchestratorServiceAddUnitsProcedure is the fully-qualified name of the OrchestratorService's
	// AddUnits RPC.
	OrchestratorServiceAddUnitsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/AddUnits"
	// OrchestratorServiceListKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// OrchestratorService's ListKubernetesNodeLabels RPC.
	OrchestratorServiceListKubernetesNodeLabelsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListKubernetesNodeLabels"
	// OrchestratorServiceUpdateKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// OrchestratorService's UpdateKubernetesNodeLabels RPC.
	OrchestratorServiceUpdateKubernetesNodeLabelsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/UpdateKubernetesNodeLabels"
	// OrchestratorServiceListGPURelationsByMachineProcedure is the fully-qualified name of the
	// OrchestratorService's ListGPURelationsByMachine RPC.
	OrchestratorServiceListGPURelationsByMachineProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListGPURelationsByMachine"
	// OrchestratorServiceListGPURelationsByModelProcedure is the fully-qualified name of the
	// OrchestratorService's ListGPURelationsByModel RPC.
	OrchestratorServiceListGPURelationsByModelProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListGPURelationsByModel"
)

// OrchestratorServiceClient is a client for the otterscale.orchestrator.v1.OrchestratorService
// service.
type OrchestratorServiceClient interface {
	IsMachineDeployed(context.Context, *v1.IsMachineDeployedRequest) (*v1.IsMachineDeployedResponse, error)
	ListStatuses(context.Context, *v1.ListStatusesRequest) (*v1.ListStatusesResponse, error)
	ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error)
	CreateSingleNode(context.Context, *v1.CreateSingleNodeRequest) (*emptypb.Empty, error)
	CreateHighAvailabilityCluster(context.Context, *v1.CreateHighAvailabilityClusterRequest) (*emptypb.Empty, error)
	AddUnits(context.Context, *v1.AddUnitsRequest) (*emptypb.Empty, error)
	ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error)
	UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error)
	ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error)
	ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error)
}

// NewOrchestratorServiceClient constructs a client for the
// otterscale.orchestrator.v1.OrchestratorService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrchestratorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrchestratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orchestratorServiceMethods := v1.File_api_orchestrator_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	return &orchestratorServiceClient{
		isMachineDeployed: connect.NewClient[v1.IsMachineDeployedRequest, v1.IsMachineDeployedResponse](
			httpClient,
			baseURL+OrchestratorServiceIsMachineDeployedProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("IsMachineDeployed")),
			connect.WithClientOptions(opts...),
		),
		listStatuses: connect.NewClient[v1.ListStatusesRequest, v1.ListStatusesResponse](
			httpClient,
			baseURL+OrchestratorServiceListStatusesProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListStatuses")),
			connect.WithClientOptions(opts...),
		),
		listEssentials: connect.NewClient[v1.ListEssentialsRequest, v1.ListEssentialsResponse](
			httpClient,
			baseURL+OrchestratorServiceListEssentialsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListEssentials")),
			connect.WithClientOptions(opts...),
		),
		createSingleNode: connect.NewClient[v1.CreateSingleNodeRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceCreateSingleNodeProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateSingleNode")),
			connect.WithClientOptions(opts...),
		),
		createHighAvailabilityCluster: connect.NewClient[v1.CreateHighAvailabilityClusterRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceCreateHighAvailabilityClusterProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateHighAvailabilityCluster")),
			connect.WithClientOptions(opts...),
		),
		addUnits: connect.NewClient[v1.AddUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceAddUnitsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("AddUnits")),
			connect.WithClientOptions(opts...),
		),
		listKubernetesNodeLabels: connect.NewClient[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+OrchestratorServiceListKubernetesNodeLabelsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
		updateKubernetesNodeLabels: connect.NewClient[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+OrchestratorServiceUpdateKubernetesNodeLabelsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("UpdateKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
		listGPURelationsByMachine: connect.NewClient[v1.ListGPURelationsByMachineRequest, v1.ListGPURelationsByMachineResponse](
			httpClient,
			baseURL+OrchestratorServiceListGPURelationsByMachineProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByMachine")),
			connect.WithClientOptions(opts...),
		),
		listGPURelationsByModel: connect.NewClient[v1.ListGPURelationsByModelRequest, v1.ListGPURelationsByModelResponse](
			httpClient,
			baseURL+OrchestratorServiceListGPURelationsByModelProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByModel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orchestratorServiceClient implements OrchestratorServiceClient.
type orchestratorServiceClient struct {
	isMachineDeployed             *connect.Client[v1.IsMachineDeployedRequest, v1.IsMachineDeployedResponse]
	listStatuses                  *connect.Client[v1.ListStatusesRequest, v1.ListStatusesResponse]
	listEssentials                *connect.Client[v1.ListEssentialsRequest, v1.ListEssentialsResponse]
	createSingleNode              *connect.Client[v1.CreateSingleNodeRequest, emptypb.Empty]
	createHighAvailabilityCluster *connect.Client[v1.CreateHighAvailabilityClusterRequest, emptypb.Empty]
	addUnits                      *connect.Client[v1.AddUnitsRequest, emptypb.Empty]
	listKubernetesNodeLabels      *connect.Client[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse]
	updateKubernetesNodeLabels    *connect.Client[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse]
	listGPURelationsByMachine     *connect.Client[v1.ListGPURelationsByMachineRequest, v1.ListGPURelationsByMachineResponse]
	listGPURelationsByModel       *connect.Client[v1.ListGPURelationsByModelRequest, v1.ListGPURelationsByModelResponse]
}

// IsMachineDeployed calls otterscale.orchestrator.v1.OrchestratorService.IsMachineDeployed.
func (c *orchestratorServiceClient) IsMachineDeployed(ctx context.Context, req *v1.IsMachineDeployedRequest) (*v1.IsMachineDeployedResponse, error) {
	response, err := c.isMachineDeployed.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListStatuses calls otterscale.orchestrator.v1.OrchestratorService.ListStatuses.
func (c *orchestratorServiceClient) ListStatuses(ctx context.Context, req *v1.ListStatusesRequest) (*v1.ListStatusesResponse, error) {
	response, err := c.listStatuses.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListEssentials calls otterscale.orchestrator.v1.OrchestratorService.ListEssentials.
func (c *orchestratorServiceClient) ListEssentials(ctx context.Context, req *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error) {
	response, err := c.listEssentials.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateSingleNode calls otterscale.orchestrator.v1.OrchestratorService.CreateSingleNode.
func (c *orchestratorServiceClient) CreateSingleNode(ctx context.Context, req *v1.CreateSingleNodeRequest) (*emptypb.Empty, error) {
	response, err := c.createSingleNode.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateHighAvailabilityCluster calls
// otterscale.orchestrator.v1.OrchestratorService.CreateHighAvailabilityCluster.
func (c *orchestratorServiceClient) CreateHighAvailabilityCluster(ctx context.Context, req *v1.CreateHighAvailabilityClusterRequest) (*emptypb.Empty, error) {
	response, err := c.createHighAvailabilityCluster.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AddUnits calls otterscale.orchestrator.v1.OrchestratorService.AddUnits.
func (c *orchestratorServiceClient) AddUnits(ctx context.Context, req *v1.AddUnitsRequest) (*emptypb.Empty, error) {
	response, err := c.addUnits.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListKubernetesNodeLabels calls
// otterscale.orchestrator.v1.OrchestratorService.ListKubernetesNodeLabels.
func (c *orchestratorServiceClient) ListKubernetesNodeLabels(ctx context.Context, req *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error) {
	response, err := c.listKubernetesNodeLabels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateKubernetesNodeLabels calls
// otterscale.orchestrator.v1.OrchestratorService.UpdateKubernetesNodeLabels.
func (c *orchestratorServiceClient) UpdateKubernetesNodeLabels(ctx context.Context, req *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error) {
	response, err := c.updateKubernetesNodeLabels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListGPURelationsByMachine calls
// otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByMachine.
func (c *orchestratorServiceClient) ListGPURelationsByMachine(ctx context.Context, req *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error) {
	response, err := c.listGPURelationsByMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListGPURelationsByModel calls
// otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByModel.
func (c *orchestratorServiceClient) ListGPURelationsByModel(ctx context.Context, req *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error) {
	response, err := c.listGPURelationsByModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// OrchestratorServiceHandler is an implementation of the
// otterscale.orchestrator.v1.OrchestratorService service.
type OrchestratorServiceHandler interface {
	IsMachineDeployed(context.Context, *v1.IsMachineDeployedRequest) (*v1.IsMachineDeployedResponse, error)
	ListStatuses(context.Context, *v1.ListStatusesRequest) (*v1.ListStatusesResponse, error)
	ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error)
	CreateSingleNode(context.Context, *v1.CreateSingleNodeRequest) (*emptypb.Empty, error)
	CreateHighAvailabilityCluster(context.Context, *v1.CreateHighAvailabilityClusterRequest) (*emptypb.Empty, error)
	AddUnits(context.Context, *v1.AddUnitsRequest) (*emptypb.Empty, error)
	ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error)
	UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error)
	ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error)
	ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error)
}

// NewOrchestratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrchestratorServiceHandler(svc OrchestratorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orchestratorServiceMethods := v1.File_api_orchestrator_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	orchestratorServiceIsMachineDeployedHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceIsMachineDeployedProcedure,
		svc.IsMachineDeployed,
		connect.WithSchema(orchestratorServiceMethods.ByName("IsMachineDeployed")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListStatusesHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListStatusesProcedure,
		svc.ListStatuses,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListStatuses")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListEssentialsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListEssentialsProcedure,
		svc.ListEssentials,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListEssentials")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateSingleNodeHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceCreateSingleNodeProcedure,
		svc.CreateSingleNode,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateSingleNode")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateHighAvailabilityClusterHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceCreateHighAvailabilityClusterProcedure,
		svc.CreateHighAvailabilityCluster,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateHighAvailabilityCluster")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceAddUnitsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceAddUnitsProcedure,
		svc.AddUnits,
		connect.WithSchema(orchestratorServiceMethods.ByName("AddUnits")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListKubernetesNodeLabelsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListKubernetesNodeLabelsProcedure,
		svc.ListKubernetesNodeLabels,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceUpdateKubernetesNodeLabelsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceUpdateKubernetesNodeLabelsProcedure,
		svc.UpdateKubernetesNodeLabels,
		connect.WithSchema(orchestratorServiceMethods.ByName("UpdateKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListGPURelationsByMachineHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListGPURelationsByMachineProcedure,
		svc.ListGPURelationsByMachine,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByMachine")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListGPURelationsByModelHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListGPURelationsByModelProcedure,
		svc.ListGPURelationsByModel,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByModel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.orchestrator.v1.OrchestratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrchestratorServiceIsMachineDeployedProcedure:
			orchestratorServiceIsMachineDeployedHandler.ServeHTTP(w, r)
		case OrchestratorServiceListStatusesProcedure:
			orchestratorServiceListStatusesHandler.ServeHTTP(w, r)
		case OrchestratorServiceListEssentialsProcedure:
			orchestratorServiceListEssentialsHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateSingleNodeProcedure:
			orchestratorServiceCreateSingleNodeHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateHighAvailabilityClusterProcedure:
			orchestratorServiceCreateHighAvailabilityClusterHandler.ServeHTTP(w, r)
		case OrchestratorServiceAddUnitsProcedure:
			orchestratorServiceAddUnitsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListKubernetesNodeLabelsProcedure:
			orchestratorServiceListKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		case OrchestratorServiceUpdateKubernetesNodeLabelsProcedure:
			orchestratorServiceUpdateKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListGPURelationsByMachineProcedure:
			orchestratorServiceListGPURelationsByMachineHandler.ServeHTTP(w, r)
		case OrchestratorServiceListGPURelationsByModelProcedure:
			orchestratorServiceListGPURelationsByModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrchestratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrchestratorServiceHandler struct{}

func (UnimplementedOrchestratorServiceHandler) IsMachineDeployed(context.Context, *v1.IsMachineDeployedRequest) (*v1.IsMachineDeployedResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.IsMachineDeployed is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListStatuses(context.Context, *v1.ListStatusesRequest) (*v1.ListStatusesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListStatuses is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListEssentials is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateSingleNode(context.Context, *v1.CreateSingleNodeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.CreateSingleNode is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateHighAvailabilityCluster(context.Context, *v1.CreateHighAvailabilityClusterRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.CreateHighAvailabilityCluster is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) AddUnits(context.Context, *v1.AddUnitsRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.AddUnits is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListKubernetesNodeLabels is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.UpdateKubernetesNodeLabels is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByMachine is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByModel is not implemented"))
}
