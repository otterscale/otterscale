// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/orchestrator/v1/orchestrator.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/orchestrator/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrchestratorServiceName is the fully-qualified name of the OrchestratorService service.
	OrchestratorServiceName = "otterscale.orchestrator.v1.OrchestratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrchestratorServiceListEssentialsProcedure is the fully-qualified name of the
	// OrchestratorService's ListEssentials RPC.
	OrchestratorServiceListEssentialsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListEssentials"
	// OrchestratorServiceCreateNodeProcedure is the fully-qualified name of the OrchestratorService's
	// CreateNode RPC.
	OrchestratorServiceCreateNodeProcedure = "/otterscale.orchestrator.v1.OrchestratorService/CreateNode"
	// OrchestratorServiceCreateClusterProcedure is the fully-qualified name of the
	// OrchestratorService's CreateCluster RPC.
	OrchestratorServiceCreateClusterProcedure = "/otterscale.orchestrator.v1.OrchestratorService/CreateCluster"
	// OrchestratorServiceAddClusterUnitsProcedure is the fully-qualified name of the
	// OrchestratorService's AddClusterUnits RPC.
	OrchestratorServiceAddClusterUnitsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/AddClusterUnits"
	// OrchestratorServiceListKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// OrchestratorService's ListKubernetesNodeLabels RPC.
	OrchestratorServiceListKubernetesNodeLabelsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListKubernetesNodeLabels"
	// OrchestratorServiceUpdateKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// OrchestratorService's UpdateKubernetesNodeLabels RPC.
	OrchestratorServiceUpdateKubernetesNodeLabelsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/UpdateKubernetesNodeLabels"
	// OrchestratorServiceListGeneralPluginsProcedure is the fully-qualified name of the
	// OrchestratorService's ListGeneralPlugins RPC.
	OrchestratorServiceListGeneralPluginsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListGeneralPlugins"
	// OrchestratorServiceListGPURelationsByMachineProcedure is the fully-qualified name of the
	// OrchestratorService's ListGPURelationsByMachine RPC.
	OrchestratorServiceListGPURelationsByMachineProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListGPURelationsByMachine"
	// OrchestratorServiceListGPURelationsByModelProcedure is the fully-qualified name of the
	// OrchestratorService's ListGPURelationsByModel RPC.
	OrchestratorServiceListGPURelationsByModelProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListGPURelationsByModel"
	// OrchestratorServiceListModelPluginsProcedure is the fully-qualified name of the
	// OrchestratorService's ListModelPlugins RPC.
	OrchestratorServiceListModelPluginsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListModelPlugins"
	// OrchestratorServiceListInstancePluginsProcedure is the fully-qualified name of the
	// OrchestratorService's ListInstancePlugins RPC.
	OrchestratorServiceListInstancePluginsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListInstancePlugins"
	// OrchestratorServiceListStoragePluginsProcedure is the fully-qualified name of the
	// OrchestratorService's ListStoragePlugins RPC.
	OrchestratorServiceListStoragePluginsProcedure = "/otterscale.orchestrator.v1.OrchestratorService/ListStoragePlugins"
)

// OrchestratorServiceClient is a client for the otterscale.orchestrator.v1.OrchestratorService
// service.
type OrchestratorServiceClient interface {
	ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error)
	CreateNode(context.Context, *v1.CreateNodeRequest) (*emptypb.Empty, error)
	CreateCluster(context.Context, *v1.CreateClusterRequest) (*emptypb.Empty, error)
	AddClusterUnits(context.Context, *v1.AddClusterUnitsRequest) (*emptypb.Empty, error)
	ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error)
	UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error)
	ListGeneralPlugins(context.Context, *v1.ListGeneralPluginsRequest) (*v1.ListGeneralPluginsResponse, error)
	ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error)
	ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error)
	ListModelPlugins(context.Context, *v1.ListModelPluginsRequest) (*v1.ListModelPluginsResponse, error)
	ListInstancePlugins(context.Context, *v1.ListInstancePluginsRequest) (*v1.ListInstancePluginsResponse, error)
	ListStoragePlugins(context.Context, *v1.ListStoragePluginsRequest) (*v1.ListStoragePluginsResponse, error)
}

// NewOrchestratorServiceClient constructs a client for the
// otterscale.orchestrator.v1.OrchestratorService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrchestratorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrchestratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orchestratorServiceMethods := v1.File_api_orchestrator_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	return &orchestratorServiceClient{
		listEssentials: connect.NewClient[v1.ListEssentialsRequest, v1.ListEssentialsResponse](
			httpClient,
			baseURL+OrchestratorServiceListEssentialsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListEssentials")),
			connect.WithClientOptions(opts...),
		),
		createNode: connect.NewClient[v1.CreateNodeRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceCreateNodeProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateNode")),
			connect.WithClientOptions(opts...),
		),
		createCluster: connect.NewClient[v1.CreateClusterRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceCreateClusterProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		addClusterUnits: connect.NewClient[v1.AddClusterUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorServiceAddClusterUnitsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("AddClusterUnits")),
			connect.WithClientOptions(opts...),
		),
		listKubernetesNodeLabels: connect.NewClient[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+OrchestratorServiceListKubernetesNodeLabelsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
		updateKubernetesNodeLabels: connect.NewClient[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+OrchestratorServiceUpdateKubernetesNodeLabelsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("UpdateKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
		listGeneralPlugins: connect.NewClient[v1.ListGeneralPluginsRequest, v1.ListGeneralPluginsResponse](
			httpClient,
			baseURL+OrchestratorServiceListGeneralPluginsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListGeneralPlugins")),
			connect.WithClientOptions(opts...),
		),
		listGPURelationsByMachine: connect.NewClient[v1.ListGPURelationsByMachineRequest, v1.ListGPURelationsByMachineResponse](
			httpClient,
			baseURL+OrchestratorServiceListGPURelationsByMachineProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByMachine")),
			connect.WithClientOptions(opts...),
		),
		listGPURelationsByModel: connect.NewClient[v1.ListGPURelationsByModelRequest, v1.ListGPURelationsByModelResponse](
			httpClient,
			baseURL+OrchestratorServiceListGPURelationsByModelProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByModel")),
			connect.WithClientOptions(opts...),
		),
		listModelPlugins: connect.NewClient[v1.ListModelPluginsRequest, v1.ListModelPluginsResponse](
			httpClient,
			baseURL+OrchestratorServiceListModelPluginsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListModelPlugins")),
			connect.WithClientOptions(opts...),
		),
		listInstancePlugins: connect.NewClient[v1.ListInstancePluginsRequest, v1.ListInstancePluginsResponse](
			httpClient,
			baseURL+OrchestratorServiceListInstancePluginsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListInstancePlugins")),
			connect.WithClientOptions(opts...),
		),
		listStoragePlugins: connect.NewClient[v1.ListStoragePluginsRequest, v1.ListStoragePluginsResponse](
			httpClient,
			baseURL+OrchestratorServiceListStoragePluginsProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListStoragePlugins")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orchestratorServiceClient implements OrchestratorServiceClient.
type orchestratorServiceClient struct {
	listEssentials             *connect.Client[v1.ListEssentialsRequest, v1.ListEssentialsResponse]
	createNode                 *connect.Client[v1.CreateNodeRequest, emptypb.Empty]
	createCluster              *connect.Client[v1.CreateClusterRequest, emptypb.Empty]
	addClusterUnits            *connect.Client[v1.AddClusterUnitsRequest, emptypb.Empty]
	listKubernetesNodeLabels   *connect.Client[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse]
	updateKubernetesNodeLabels *connect.Client[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse]
	listGeneralPlugins         *connect.Client[v1.ListGeneralPluginsRequest, v1.ListGeneralPluginsResponse]
	listGPURelationsByMachine  *connect.Client[v1.ListGPURelationsByMachineRequest, v1.ListGPURelationsByMachineResponse]
	listGPURelationsByModel    *connect.Client[v1.ListGPURelationsByModelRequest, v1.ListGPURelationsByModelResponse]
	listModelPlugins           *connect.Client[v1.ListModelPluginsRequest, v1.ListModelPluginsResponse]
	listInstancePlugins        *connect.Client[v1.ListInstancePluginsRequest, v1.ListInstancePluginsResponse]
	listStoragePlugins         *connect.Client[v1.ListStoragePluginsRequest, v1.ListStoragePluginsResponse]
}

// ListEssentials calls otterscale.orchestrator.v1.OrchestratorService.ListEssentials.
func (c *orchestratorServiceClient) ListEssentials(ctx context.Context, req *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error) {
	response, err := c.listEssentials.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateNode calls otterscale.orchestrator.v1.OrchestratorService.CreateNode.
func (c *orchestratorServiceClient) CreateNode(ctx context.Context, req *v1.CreateNodeRequest) (*emptypb.Empty, error) {
	response, err := c.createNode.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateCluster calls otterscale.orchestrator.v1.OrchestratorService.CreateCluster.
func (c *orchestratorServiceClient) CreateCluster(ctx context.Context, req *v1.CreateClusterRequest) (*emptypb.Empty, error) {
	response, err := c.createCluster.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AddClusterUnits calls otterscale.orchestrator.v1.OrchestratorService.AddClusterUnits.
func (c *orchestratorServiceClient) AddClusterUnits(ctx context.Context, req *v1.AddClusterUnitsRequest) (*emptypb.Empty, error) {
	response, err := c.addClusterUnits.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListKubernetesNodeLabels calls
// otterscale.orchestrator.v1.OrchestratorService.ListKubernetesNodeLabels.
func (c *orchestratorServiceClient) ListKubernetesNodeLabels(ctx context.Context, req *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error) {
	response, err := c.listKubernetesNodeLabels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateKubernetesNodeLabels calls
// otterscale.orchestrator.v1.OrchestratorService.UpdateKubernetesNodeLabels.
func (c *orchestratorServiceClient) UpdateKubernetesNodeLabels(ctx context.Context, req *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error) {
	response, err := c.updateKubernetesNodeLabels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListGeneralPlugins calls otterscale.orchestrator.v1.OrchestratorService.ListGeneralPlugins.
func (c *orchestratorServiceClient) ListGeneralPlugins(ctx context.Context, req *v1.ListGeneralPluginsRequest) (*v1.ListGeneralPluginsResponse, error) {
	response, err := c.listGeneralPlugins.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListGPURelationsByMachine calls
// otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByMachine.
func (c *orchestratorServiceClient) ListGPURelationsByMachine(ctx context.Context, req *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error) {
	response, err := c.listGPURelationsByMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListGPURelationsByModel calls
// otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByModel.
func (c *orchestratorServiceClient) ListGPURelationsByModel(ctx context.Context, req *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error) {
	response, err := c.listGPURelationsByModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListModelPlugins calls otterscale.orchestrator.v1.OrchestratorService.ListModelPlugins.
func (c *orchestratorServiceClient) ListModelPlugins(ctx context.Context, req *v1.ListModelPluginsRequest) (*v1.ListModelPluginsResponse, error) {
	response, err := c.listModelPlugins.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListInstancePlugins calls otterscale.orchestrator.v1.OrchestratorService.ListInstancePlugins.
func (c *orchestratorServiceClient) ListInstancePlugins(ctx context.Context, req *v1.ListInstancePluginsRequest) (*v1.ListInstancePluginsResponse, error) {
	response, err := c.listInstancePlugins.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListStoragePlugins calls otterscale.orchestrator.v1.OrchestratorService.ListStoragePlugins.
func (c *orchestratorServiceClient) ListStoragePlugins(ctx context.Context, req *v1.ListStoragePluginsRequest) (*v1.ListStoragePluginsResponse, error) {
	response, err := c.listStoragePlugins.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// OrchestratorServiceHandler is an implementation of the
// otterscale.orchestrator.v1.OrchestratorService service.
type OrchestratorServiceHandler interface {
	ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error)
	CreateNode(context.Context, *v1.CreateNodeRequest) (*emptypb.Empty, error)
	CreateCluster(context.Context, *v1.CreateClusterRequest) (*emptypb.Empty, error)
	AddClusterUnits(context.Context, *v1.AddClusterUnitsRequest) (*emptypb.Empty, error)
	ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error)
	UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error)
	ListGeneralPlugins(context.Context, *v1.ListGeneralPluginsRequest) (*v1.ListGeneralPluginsResponse, error)
	ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error)
	ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error)
	ListModelPlugins(context.Context, *v1.ListModelPluginsRequest) (*v1.ListModelPluginsResponse, error)
	ListInstancePlugins(context.Context, *v1.ListInstancePluginsRequest) (*v1.ListInstancePluginsResponse, error)
	ListStoragePlugins(context.Context, *v1.ListStoragePluginsRequest) (*v1.ListStoragePluginsResponse, error)
}

// NewOrchestratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrchestratorServiceHandler(svc OrchestratorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orchestratorServiceMethods := v1.File_api_orchestrator_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	orchestratorServiceListEssentialsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListEssentialsProcedure,
		svc.ListEssentials,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListEssentials")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateNodeHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceCreateNodeProcedure,
		svc.CreateNode,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateNode")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateClusterHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceAddClusterUnitsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceAddClusterUnitsProcedure,
		svc.AddClusterUnits,
		connect.WithSchema(orchestratorServiceMethods.ByName("AddClusterUnits")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListKubernetesNodeLabelsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListKubernetesNodeLabelsProcedure,
		svc.ListKubernetesNodeLabels,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceUpdateKubernetesNodeLabelsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceUpdateKubernetesNodeLabelsProcedure,
		svc.UpdateKubernetesNodeLabels,
		connect.WithSchema(orchestratorServiceMethods.ByName("UpdateKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListGeneralPluginsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListGeneralPluginsProcedure,
		svc.ListGeneralPlugins,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListGeneralPlugins")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListGPURelationsByMachineHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListGPURelationsByMachineProcedure,
		svc.ListGPURelationsByMachine,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByMachine")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListGPURelationsByModelHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListGPURelationsByModelProcedure,
		svc.ListGPURelationsByModel,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListGPURelationsByModel")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListModelPluginsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListModelPluginsProcedure,
		svc.ListModelPlugins,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListModelPlugins")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListInstancePluginsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListInstancePluginsProcedure,
		svc.ListInstancePlugins,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListInstancePlugins")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceListStoragePluginsHandler := connect.NewUnaryHandlerSimple(
		OrchestratorServiceListStoragePluginsProcedure,
		svc.ListStoragePlugins,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListStoragePlugins")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.orchestrator.v1.OrchestratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrchestratorServiceListEssentialsProcedure:
			orchestratorServiceListEssentialsHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateNodeProcedure:
			orchestratorServiceCreateNodeHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateClusterProcedure:
			orchestratorServiceCreateClusterHandler.ServeHTTP(w, r)
		case OrchestratorServiceAddClusterUnitsProcedure:
			orchestratorServiceAddClusterUnitsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListKubernetesNodeLabelsProcedure:
			orchestratorServiceListKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		case OrchestratorServiceUpdateKubernetesNodeLabelsProcedure:
			orchestratorServiceUpdateKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListGeneralPluginsProcedure:
			orchestratorServiceListGeneralPluginsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListGPURelationsByMachineProcedure:
			orchestratorServiceListGPURelationsByMachineHandler.ServeHTTP(w, r)
		case OrchestratorServiceListGPURelationsByModelProcedure:
			orchestratorServiceListGPURelationsByModelHandler.ServeHTTP(w, r)
		case OrchestratorServiceListModelPluginsProcedure:
			orchestratorServiceListModelPluginsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListInstancePluginsProcedure:
			orchestratorServiceListInstancePluginsHandler.ServeHTTP(w, r)
		case OrchestratorServiceListStoragePluginsProcedure:
			orchestratorServiceListStoragePluginsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrchestratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrchestratorServiceHandler struct{}

func (UnimplementedOrchestratorServiceHandler) ListEssentials(context.Context, *v1.ListEssentialsRequest) (*v1.ListEssentialsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListEssentials is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateNode(context.Context, *v1.CreateNodeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.CreateNode is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateCluster(context.Context, *v1.CreateClusterRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.CreateCluster is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) AddClusterUnits(context.Context, *v1.AddClusterUnitsRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.AddClusterUnits is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListKubernetesNodeLabels(context.Context, *v1.ListKubernetesNodeLabelsRequest) (*v1.ListKubernetesNodeLabelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListKubernetesNodeLabels is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) UpdateKubernetesNodeLabels(context.Context, *v1.UpdateKubernetesNodeLabelsRequest) (*v1.UpdateKubernetesNodeLabelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.UpdateKubernetesNodeLabels is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListGeneralPlugins(context.Context, *v1.ListGeneralPluginsRequest) (*v1.ListGeneralPluginsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListGeneralPlugins is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListGPURelationsByMachine(context.Context, *v1.ListGPURelationsByMachineRequest) (*v1.ListGPURelationsByMachineResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByMachine is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListGPURelationsByModel(context.Context, *v1.ListGPURelationsByModelRequest) (*v1.ListGPURelationsByModelResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListGPURelationsByModel is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListModelPlugins(context.Context, *v1.ListModelPluginsRequest) (*v1.ListModelPluginsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListModelPlugins is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListInstancePlugins(context.Context, *v1.ListInstancePluginsRequest) (*v1.ListInstancePluginsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListInstancePlugins is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) ListStoragePlugins(context.Context, *v1.ListStoragePluginsRequest) (*v1.ListStoragePluginsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.orchestrator.v1.OrchestratorService.ListStoragePlugins is not implemented"))
}
