// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/tag/v1/tag.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/tag/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "otterscale.tag.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagServiceListTagsProcedure is the fully-qualified name of the TagService's ListTags RPC.
	TagServiceListTagsProcedure = "/otterscale.tag.v1.TagService/ListTags"
	// TagServiceGetTagProcedure is the fully-qualified name of the TagService's GetTag RPC.
	TagServiceGetTagProcedure = "/otterscale.tag.v1.TagService/GetTag"
	// TagServiceCreateTagProcedure is the fully-qualified name of the TagService's CreateTag RPC.
	TagServiceCreateTagProcedure = "/otterscale.tag.v1.TagService/CreateTag"
	// TagServiceDeleteTagProcedure is the fully-qualified name of the TagService's DeleteTag RPC.
	TagServiceDeleteTagProcedure = "/otterscale.tag.v1.TagService/DeleteTag"
)

// TagServiceClient is a client for the otterscale.tag.v1.TagService service.
type TagServiceClient interface {
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewTagServiceClient constructs a client for the otterscale.tag.v1.TagService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := v1.File_api_tag_v1_tag_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		listTags: connect.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+TagServiceListTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("ListTags")),
			connect.WithClientOptions(opts...),
		),
		getTag: connect.NewClient[v1.GetTagRequest, v1.Tag](
			httpClient,
			baseURL+TagServiceGetTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetTag")),
			connect.WithClientOptions(opts...),
		),
		createTag: connect.NewClient[v1.CreateTagRequest, v1.Tag](
			httpClient,
			baseURL+TagServiceCreateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, emptypb.Empty](
			httpClient,
			baseURL+TagServiceDeleteTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	listTags  *connect.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	getTag    *connect.Client[v1.GetTagRequest, v1.Tag]
	createTag *connect.Client[v1.CreateTagRequest, v1.Tag]
	deleteTag *connect.Client[v1.DeleteTagRequest, emptypb.Empty]
}

// ListTags calls otterscale.tag.v1.TagService.ListTags.
func (c *tagServiceClient) ListTags(ctx context.Context, req *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// GetTag calls otterscale.tag.v1.TagService.GetTag.
func (c *tagServiceClient) GetTag(ctx context.Context, req *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error) {
	return c.getTag.CallUnary(ctx, req)
}

// CreateTag calls otterscale.tag.v1.TagService.CreateTag.
func (c *tagServiceClient) CreateTag(ctx context.Context, req *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error) {
	return c.createTag.CallUnary(ctx, req)
}

// DeleteTag calls otterscale.tag.v1.TagService.DeleteTag.
func (c *tagServiceClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the otterscale.tag.v1.TagService service.
type TagServiceHandler interface {
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := v1.File_api_tag_v1_tag_proto.Services().ByName("TagService").Methods()
	tagServiceListTagsHandler := connect.NewUnaryHandler(
		TagServiceListTagsProcedure,
		svc.ListTags,
		connect.WithSchema(tagServiceMethods.ByName("ListTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetTagHandler := connect.NewUnaryHandler(
		TagServiceGetTagProcedure,
		svc.GetTag,
		connect.WithSchema(tagServiceMethods.ByName("GetTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceCreateTagHandler := connect.NewUnaryHandler(
		TagServiceCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceDeleteTagHandler := connect.NewUnaryHandler(
		TagServiceDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(tagServiceMethods.ByName("DeleteTag")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.tag.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceListTagsProcedure:
			tagServiceListTagsHandler.ServeHTTP(w, r)
		case TagServiceGetTagProcedure:
			tagServiceGetTagHandler.ServeHTTP(w, r)
		case TagServiceCreateTagProcedure:
			tagServiceCreateTagHandler.ServeHTTP(w, r)
		case TagServiceDeleteTagProcedure:
			tagServiceDeleteTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.tag.v1.TagService.ListTags is not implemented"))
}

func (UnimplementedTagServiceHandler) GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.tag.v1.TagService.GetTag is not implemented"))
}

func (UnimplementedTagServiceHandler) CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.tag.v1.TagService.CreateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.tag.v1.TagService.DeleteTag is not implemented"))
}
