// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kubevirt/kubevirt.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/kubevirt/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "otterscale.kubevirt.v1.MachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineServiceListVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// ListVirtualMachine RPC.
	MachineServiceListVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/ListVirtualMachine"
	// MachineServiceGetVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// GetVirtualMachine RPC.
	MachineServiceGetVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/GetVirtualMachine"
	// MachineServiceCreateVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// CreateVirtualMachine RPC.
	MachineServiceCreateVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/CreateVirtualMachine"
	// MachineServiceDeleteVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// DeleteVirtualMachine RPC.
	MachineServiceDeleteVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/DeleteVirtualMachine"
	// MachineServiceUpdateVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// UpdateVirtualMachine RPC.
	MachineServiceUpdateVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/UpdateVirtualMachine"
	// MachineServiceCloneVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// CloneVirtualMachine RPC.
	MachineServiceCloneVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/CloneVirtualMachine"
	// MachineServiceSnapshotVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// SnapshotVirtualMachine RPC.
	MachineServiceSnapshotVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/SnapshotVirtualMachine"
	// MachineServiceRestoreVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// RestoreVirtualMachine RPC.
	MachineServiceRestoreVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/RestoreVirtualMachine"
	// MachineServiceStartVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// StartVirtualMachine RPC.
	MachineServiceStartVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/StartVirtualMachine"
	// MachineServiceStopVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// StopVirtualMachine RPC.
	MachineServiceStopVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/StopVirtualMachine"
	// MachineServicePauseVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// PauseVirtualMachine RPC.
	MachineServicePauseVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/PauseVirtualMachine"
	// MachineServiceUnpauseVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// UnpauseVirtualMachine RPC.
	MachineServiceUnpauseVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/UnpauseVirtualMachine"
	// MachineServiceMigrateVirtualMachineProcedure is the fully-qualified name of the MachineService's
	// MigrateVirtualMachine RPC.
	MachineServiceMigrateVirtualMachineProcedure = "/otterscale.kubevirt.v1.MachineService/MigrateVirtualMachine"
	// MachineServiceCreateDataVolumeProcedure is the fully-qualified name of the MachineService's
	// CreateDataVolume RPC.
	MachineServiceCreateDataVolumeProcedure = "/otterscale.kubevirt.v1.MachineService/CreateDataVolume"
	// MachineServiceGetDataVolumeProcedure is the fully-qualified name of the MachineService's
	// GetDataVolume RPC.
	MachineServiceGetDataVolumeProcedure = "/otterscale.kubevirt.v1.MachineService/GetDataVolume"
	// MachineServiceListDataVolumeProcedure is the fully-qualified name of the MachineService's
	// ListDataVolume RPC.
	MachineServiceListDataVolumeProcedure = "/otterscale.kubevirt.v1.MachineService/ListDataVolume"
	// MachineServiceDeleteDataVolumeProcedure is the fully-qualified name of the MachineService's
	// DeleteDataVolume RPC.
	MachineServiceDeleteDataVolumeProcedure = "/otterscale.kubevirt.v1.MachineService/DeleteDataVolume"
	// MachineServiceExtendDataVolumeProcedure is the fully-qualified name of the MachineService's
	// ExtendDataVolume RPC.
	MachineServiceExtendDataVolumeProcedure = "/otterscale.kubevirt.v1.MachineService/ExtendDataVolume"
	// MachineServiceCreateNetworkProcedure is the fully-qualified name of the MachineService's
	// CreateNetwork RPC.
	MachineServiceCreateNetworkProcedure = "/otterscale.kubevirt.v1.MachineService/CreateNetwork"
	// MachineServiceGetNetworkProcedure is the fully-qualified name of the MachineService's GetNetwork
	// RPC.
	MachineServiceGetNetworkProcedure = "/otterscale.kubevirt.v1.MachineService/GetNetwork"
	// MachineServiceListNetworkProcedure is the fully-qualified name of the MachineService's
	// ListNetwork RPC.
	MachineServiceListNetworkProcedure = "/otterscale.kubevirt.v1.MachineService/ListNetwork"
	// MachineServiceDeleteNetworkProcedure is the fully-qualified name of the MachineService's
	// DeleteNetwork RPC.
	MachineServiceDeleteNetworkProcedure = "/otterscale.kubevirt.v1.MachineService/DeleteNetwork"
	// MachineServiceUpdateNetworkProcedure is the fully-qualified name of the MachineService's
	// UpdateNetwork RPC.
	MachineServiceUpdateNetworkProcedure = "/otterscale.kubevirt.v1.MachineService/UpdateNetwork"
	// MachineServiceCreateFlavorProcedure is the fully-qualified name of the MachineService's
	// CreateFlavor RPC.
	MachineServiceCreateFlavorProcedure = "/otterscale.kubevirt.v1.MachineService/CreateFlavor"
	// MachineServiceGetFlavorProcedure is the fully-qualified name of the MachineService's GetFlavor
	// RPC.
	MachineServiceGetFlavorProcedure = "/otterscale.kubevirt.v1.MachineService/GetFlavor"
	// MachineServiceListFlavorProcedure is the fully-qualified name of the MachineService's ListFlavor
	// RPC.
	MachineServiceListFlavorProcedure = "/otterscale.kubevirt.v1.MachineService/ListFlavor"
	// MachineServiceDeleteFlavorProcedure is the fully-qualified name of the MachineService's
	// DeleteFlavor RPC.
	MachineServiceDeleteFlavorProcedure = "/otterscale.kubevirt.v1.MachineService/DeleteFlavor"
)

// MachineServiceClient is a client for the otterscale.kubevirt.v1.MachineService service.
type MachineServiceClient interface {
	ListVirtualMachine(context.Context, *connect.Request[v1.ListVirtualMachineRequest]) (*connect.Response[v1.ListVirtualMachineResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error)
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error)
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolume(context.Context, *connect.Request[v1.ListDataVolumeRequest]) (*connect.Response[v1.ListDataVolumeResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error)
	ListNetwork(context.Context, *connect.Request[v1.ListNetworkRequest]) (*connect.Response[v1.ListNetworkResponse], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[emptypb.Empty], error)
	GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error)
	ListFlavor(context.Context, *connect.Request[v1.ListFlavorRequest]) (*connect.Response[v1.ListFlavorResponse], error)
	DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMachineServiceClient constructs a client for the otterscale.kubevirt.v1.MachineService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	machineServiceMethods := v1.File_api_kubevirt_kubevirt_proto.Services().ByName("MachineService").Methods()
	return &machineServiceClient{
		listVirtualMachine: connect.NewClient[v1.ListVirtualMachineRequest, v1.ListVirtualMachineResponse](
			httpClient,
			baseURL+MachineServiceListVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("ListVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.GetVirtualMachineResponse](
			httpClient,
			baseURL+MachineServiceGetVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.CreateVirtualMachineResponse](
			httpClient,
			baseURL+MachineServiceCreateVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, v1.DeleteVirtualMachineResponse](
			httpClient,
			baseURL+MachineServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachine: connect.NewClient[v1.UpdateVirtualMachineRequest, v1.UpdateVirtualMachineResponse](
			httpClient,
			baseURL+MachineServiceUpdateVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("UpdateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		cloneVirtualMachine: connect.NewClient[v1.CloneVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceCloneVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("CloneVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		snapshotVirtualMachine: connect.NewClient[v1.SnapshotVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceSnapshotVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("SnapshotVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		restoreVirtualMachine: connect.NewClient[v1.RestoreVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceRestoreVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("RestoreVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		startVirtualMachine: connect.NewClient[v1.StartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceStartVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("StartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		stopVirtualMachine: connect.NewClient[v1.StopVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceStopVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("StopVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		pauseVirtualMachine: connect.NewClient[v1.PauseVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServicePauseVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("PauseVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		unpauseVirtualMachine: connect.NewClient[v1.UnpauseVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceUnpauseVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("UnpauseVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		migrateVirtualMachine: connect.NewClient[v1.MigrateVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceMigrateVirtualMachineProcedure,
			connect.WithSchema(machineServiceMethods.ByName("MigrateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceCreateDataVolumeProcedure,
			connect.WithSchema(machineServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+MachineServiceGetDataVolumeProcedure,
			connect.WithSchema(machineServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listDataVolume: connect.NewClient[v1.ListDataVolumeRequest, v1.ListDataVolumeResponse](
			httpClient,
			baseURL+MachineServiceListDataVolumeProcedure,
			connect.WithSchema(machineServiceMethods.ByName("ListDataVolume")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceDeleteDataVolumeProcedure,
			connect.WithSchema(machineServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceExtendDataVolumeProcedure,
			connect.WithSchema(machineServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceCreateNetworkProcedure,
			connect.WithSchema(machineServiceMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v1.GetNetworkRequest, v1.Network](
			httpClient,
			baseURL+MachineServiceGetNetworkProcedure,
			connect.WithSchema(machineServiceMethods.ByName("GetNetwork")),
			connect.WithClientOptions(opts...),
		),
		listNetwork: connect.NewClient[v1.ListNetworkRequest, v1.ListNetworkResponse](
			httpClient,
			baseURL+MachineServiceListNetworkProcedure,
			connect.WithSchema(machineServiceMethods.ByName("ListNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceDeleteNetworkProcedure,
			connect.WithSchema(machineServiceMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
		updateNetwork: connect.NewClient[v1.UpdateNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceUpdateNetworkProcedure,
			connect.WithSchema(machineServiceMethods.ByName("UpdateNetwork")),
			connect.WithClientOptions(opts...),
		),
		createFlavor: connect.NewClient[v1.CreateFlavorRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceCreateFlavorProcedure,
			connect.WithSchema(machineServiceMethods.ByName("CreateFlavor")),
			connect.WithClientOptions(opts...),
		),
		getFlavor: connect.NewClient[v1.GetFlavorRequest, v1.Flavor](
			httpClient,
			baseURL+MachineServiceGetFlavorProcedure,
			connect.WithSchema(machineServiceMethods.ByName("GetFlavor")),
			connect.WithClientOptions(opts...),
		),
		listFlavor: connect.NewClient[v1.ListFlavorRequest, v1.ListFlavorResponse](
			httpClient,
			baseURL+MachineServiceListFlavorProcedure,
			connect.WithSchema(machineServiceMethods.ByName("ListFlavor")),
			connect.WithClientOptions(opts...),
		),
		deleteFlavor: connect.NewClient[v1.DeleteFlavorRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineServiceDeleteFlavorProcedure,
			connect.WithSchema(machineServiceMethods.ByName("DeleteFlavor")),
			connect.WithClientOptions(opts...),
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	listVirtualMachine     *connect.Client[v1.ListVirtualMachineRequest, v1.ListVirtualMachineResponse]
	getVirtualMachine      *connect.Client[v1.GetVirtualMachineRequest, v1.GetVirtualMachineResponse]
	createVirtualMachine   *connect.Client[v1.CreateVirtualMachineRequest, v1.CreateVirtualMachineResponse]
	deleteVirtualMachine   *connect.Client[v1.DeleteVirtualMachineRequest, v1.DeleteVirtualMachineResponse]
	updateVirtualMachine   *connect.Client[v1.UpdateVirtualMachineRequest, v1.UpdateVirtualMachineResponse]
	cloneVirtualMachine    *connect.Client[v1.CloneVirtualMachineRequest, emptypb.Empty]
	snapshotVirtualMachine *connect.Client[v1.SnapshotVirtualMachineRequest, emptypb.Empty]
	restoreVirtualMachine  *connect.Client[v1.RestoreVirtualMachineRequest, emptypb.Empty]
	startVirtualMachine    *connect.Client[v1.StartVirtualMachineRequest, emptypb.Empty]
	stopVirtualMachine     *connect.Client[v1.StopVirtualMachineRequest, emptypb.Empty]
	pauseVirtualMachine    *connect.Client[v1.PauseVirtualMachineRequest, emptypb.Empty]
	unpauseVirtualMachine  *connect.Client[v1.UnpauseVirtualMachineRequest, emptypb.Empty]
	migrateVirtualMachine  *connect.Client[v1.MigrateVirtualMachineRequest, emptypb.Empty]
	createDataVolume       *connect.Client[v1.CreateDataVolumeRequest, emptypb.Empty]
	getDataVolume          *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	listDataVolume         *connect.Client[v1.ListDataVolumeRequest, v1.ListDataVolumeResponse]
	deleteDataVolume       *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume       *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	createNetwork          *connect.Client[v1.CreateNetworkRequest, emptypb.Empty]
	getNetwork             *connect.Client[v1.GetNetworkRequest, v1.Network]
	listNetwork            *connect.Client[v1.ListNetworkRequest, v1.ListNetworkResponse]
	deleteNetwork          *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	updateNetwork          *connect.Client[v1.UpdateNetworkRequest, emptypb.Empty]
	createFlavor           *connect.Client[v1.CreateFlavorRequest, emptypb.Empty]
	getFlavor              *connect.Client[v1.GetFlavorRequest, v1.Flavor]
	listFlavor             *connect.Client[v1.ListFlavorRequest, v1.ListFlavorResponse]
	deleteFlavor           *connect.Client[v1.DeleteFlavorRequest, emptypb.Empty]
}

// ListVirtualMachine calls otterscale.kubevirt.v1.MachineService.ListVirtualMachine.
func (c *machineServiceClient) ListVirtualMachine(ctx context.Context, req *connect.Request[v1.ListVirtualMachineRequest]) (*connect.Response[v1.ListVirtualMachineResponse], error) {
	return c.listVirtualMachine.CallUnary(ctx, req)
}

// GetVirtualMachine calls otterscale.kubevirt.v1.MachineService.GetVirtualMachine.
func (c *machineServiceClient) GetVirtualMachine(ctx context.Context, req *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error) {
	return c.getVirtualMachine.CallUnary(ctx, req)
}

// CreateVirtualMachine calls otterscale.kubevirt.v1.MachineService.CreateVirtualMachine.
func (c *machineServiceClient) CreateVirtualMachine(ctx context.Context, req *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error) {
	return c.createVirtualMachine.CallUnary(ctx, req)
}

// DeleteVirtualMachine calls otterscale.kubevirt.v1.MachineService.DeleteVirtualMachine.
func (c *machineServiceClient) DeleteVirtualMachine(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error) {
	return c.deleteVirtualMachine.CallUnary(ctx, req)
}

// UpdateVirtualMachine calls otterscale.kubevirt.v1.MachineService.UpdateVirtualMachine.
func (c *machineServiceClient) UpdateVirtualMachine(ctx context.Context, req *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error) {
	return c.updateVirtualMachine.CallUnary(ctx, req)
}

// CloneVirtualMachine calls otterscale.kubevirt.v1.MachineService.CloneVirtualMachine.
func (c *machineServiceClient) CloneVirtualMachine(ctx context.Context, req *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cloneVirtualMachine.CallUnary(ctx, req)
}

// SnapshotVirtualMachine calls otterscale.kubevirt.v1.MachineService.SnapshotVirtualMachine.
func (c *machineServiceClient) SnapshotVirtualMachine(ctx context.Context, req *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.snapshotVirtualMachine.CallUnary(ctx, req)
}

// RestoreVirtualMachine calls otterscale.kubevirt.v1.MachineService.RestoreVirtualMachine.
func (c *machineServiceClient) RestoreVirtualMachine(ctx context.Context, req *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.restoreVirtualMachine.CallUnary(ctx, req)
}

// StartVirtualMachine calls otterscale.kubevirt.v1.MachineService.StartVirtualMachine.
func (c *machineServiceClient) StartVirtualMachine(ctx context.Context, req *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startVirtualMachine.CallUnary(ctx, req)
}

// StopVirtualMachine calls otterscale.kubevirt.v1.MachineService.StopVirtualMachine.
func (c *machineServiceClient) StopVirtualMachine(ctx context.Context, req *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopVirtualMachine.CallUnary(ctx, req)
}

// PauseVirtualMachine calls otterscale.kubevirt.v1.MachineService.PauseVirtualMachine.
func (c *machineServiceClient) PauseVirtualMachine(ctx context.Context, req *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseVirtualMachine.CallUnary(ctx, req)
}

// UnpauseVirtualMachine calls otterscale.kubevirt.v1.MachineService.UnpauseVirtualMachine.
func (c *machineServiceClient) UnpauseVirtualMachine(ctx context.Context, req *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unpauseVirtualMachine.CallUnary(ctx, req)
}

// MigrateVirtualMachine calls otterscale.kubevirt.v1.MachineService.MigrateVirtualMachine.
func (c *machineServiceClient) MigrateVirtualMachine(ctx context.Context, req *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.migrateVirtualMachine.CallUnary(ctx, req)
}

// CreateDataVolume calls otterscale.kubevirt.v1.MachineService.CreateDataVolume.
func (c *machineServiceClient) CreateDataVolume(ctx context.Context, req *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createDataVolume.CallUnary(ctx, req)
}

// GetDataVolume calls otterscale.kubevirt.v1.MachineService.GetDataVolume.
func (c *machineServiceClient) GetDataVolume(ctx context.Context, req *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.getDataVolume.CallUnary(ctx, req)
}

// ListDataVolume calls otterscale.kubevirt.v1.MachineService.ListDataVolume.
func (c *machineServiceClient) ListDataVolume(ctx context.Context, req *connect.Request[v1.ListDataVolumeRequest]) (*connect.Response[v1.ListDataVolumeResponse], error) {
	return c.listDataVolume.CallUnary(ctx, req)
}

// DeleteDataVolume calls otterscale.kubevirt.v1.MachineService.DeleteDataVolume.
func (c *machineServiceClient) DeleteDataVolume(ctx context.Context, req *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDataVolume.CallUnary(ctx, req)
}

// ExtendDataVolume calls otterscale.kubevirt.v1.MachineService.ExtendDataVolume.
func (c *machineServiceClient) ExtendDataVolume(ctx context.Context, req *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.extendDataVolume.CallUnary(ctx, req)
}

// CreateNetwork calls otterscale.kubevirt.v1.MachineService.CreateNetwork.
func (c *machineServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// GetNetwork calls otterscale.kubevirt.v1.MachineService.GetNetwork.
func (c *machineServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// ListNetwork calls otterscale.kubevirt.v1.MachineService.ListNetwork.
func (c *machineServiceClient) ListNetwork(ctx context.Context, req *connect.Request[v1.ListNetworkRequest]) (*connect.Response[v1.ListNetworkResponse], error) {
	return c.listNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls otterscale.kubevirt.v1.MachineService.DeleteNetwork.
func (c *machineServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// UpdateNetwork calls otterscale.kubevirt.v1.MachineService.UpdateNetwork.
func (c *machineServiceClient) UpdateNetwork(ctx context.Context, req *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateNetwork.CallUnary(ctx, req)
}

// CreateFlavor calls otterscale.kubevirt.v1.MachineService.CreateFlavor.
func (c *machineServiceClient) CreateFlavor(ctx context.Context, req *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createFlavor.CallUnary(ctx, req)
}

// GetFlavor calls otterscale.kubevirt.v1.MachineService.GetFlavor.
func (c *machineServiceClient) GetFlavor(ctx context.Context, req *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return c.getFlavor.CallUnary(ctx, req)
}

// ListFlavor calls otterscale.kubevirt.v1.MachineService.ListFlavor.
func (c *machineServiceClient) ListFlavor(ctx context.Context, req *connect.Request[v1.ListFlavorRequest]) (*connect.Response[v1.ListFlavorResponse], error) {
	return c.listFlavor.CallUnary(ctx, req)
}

// DeleteFlavor calls otterscale.kubevirt.v1.MachineService.DeleteFlavor.
func (c *machineServiceClient) DeleteFlavor(ctx context.Context, req *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFlavor.CallUnary(ctx, req)
}

// MachineServiceHandler is an implementation of the otterscale.kubevirt.v1.MachineService service.
type MachineServiceHandler interface {
	ListVirtualMachine(context.Context, *connect.Request[v1.ListVirtualMachineRequest]) (*connect.Response[v1.ListVirtualMachineResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error)
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error)
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolume(context.Context, *connect.Request[v1.ListDataVolumeRequest]) (*connect.Response[v1.ListDataVolumeResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error)
	ListNetwork(context.Context, *connect.Request[v1.ListNetworkRequest]) (*connect.Response[v1.ListNetworkResponse], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[emptypb.Empty], error)
	GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error)
	ListFlavor(context.Context, *connect.Request[v1.ListFlavorRequest]) (*connect.Response[v1.ListFlavorResponse], error)
	DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	machineServiceMethods := v1.File_api_kubevirt_kubevirt_proto.Services().ByName("MachineService").Methods()
	machineServiceListVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceListVirtualMachineProcedure,
		svc.ListVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("ListVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceGetVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCreateVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceUpdateVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceUpdateVirtualMachineProcedure,
		svc.UpdateVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("UpdateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCloneVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceCloneVirtualMachineProcedure,
		svc.CloneVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("CloneVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceSnapshotVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceSnapshotVirtualMachineProcedure,
		svc.SnapshotVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("SnapshotVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceRestoreVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceRestoreVirtualMachineProcedure,
		svc.RestoreVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("RestoreVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceStartVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceStartVirtualMachineProcedure,
		svc.StartVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("StartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceStopVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceStopVirtualMachineProcedure,
		svc.StopVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("StopVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServicePauseVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServicePauseVirtualMachineProcedure,
		svc.PauseVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("PauseVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceUnpauseVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceUnpauseVirtualMachineProcedure,
		svc.UnpauseVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("UnpauseVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceMigrateVirtualMachineHandler := connect.NewUnaryHandler(
		MachineServiceMigrateVirtualMachineProcedure,
		svc.MigrateVirtualMachine,
		connect.WithSchema(machineServiceMethods.ByName("MigrateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCreateDataVolumeHandler := connect.NewUnaryHandler(
		MachineServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(machineServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceGetDataVolumeHandler := connect.NewUnaryHandler(
		MachineServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(machineServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListDataVolumeHandler := connect.NewUnaryHandler(
		MachineServiceListDataVolumeProcedure,
		svc.ListDataVolume,
		connect.WithSchema(machineServiceMethods.ByName("ListDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteDataVolumeHandler := connect.NewUnaryHandler(
		MachineServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(machineServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceExtendDataVolumeHandler := connect.NewUnaryHandler(
		MachineServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(machineServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCreateNetworkHandler := connect.NewUnaryHandler(
		MachineServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(machineServiceMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceGetNetworkHandler := connect.NewUnaryHandler(
		MachineServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(machineServiceMethods.ByName("GetNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListNetworkHandler := connect.NewUnaryHandler(
		MachineServiceListNetworkProcedure,
		svc.ListNetwork,
		connect.WithSchema(machineServiceMethods.ByName("ListNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		MachineServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(machineServiceMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceUpdateNetworkHandler := connect.NewUnaryHandler(
		MachineServiceUpdateNetworkProcedure,
		svc.UpdateNetwork,
		connect.WithSchema(machineServiceMethods.ByName("UpdateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceCreateFlavorHandler := connect.NewUnaryHandler(
		MachineServiceCreateFlavorProcedure,
		svc.CreateFlavor,
		connect.WithSchema(machineServiceMethods.ByName("CreateFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceGetFlavorHandler := connect.NewUnaryHandler(
		MachineServiceGetFlavorProcedure,
		svc.GetFlavor,
		connect.WithSchema(machineServiceMethods.ByName("GetFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListFlavorHandler := connect.NewUnaryHandler(
		MachineServiceListFlavorProcedure,
		svc.ListFlavor,
		connect.WithSchema(machineServiceMethods.ByName("ListFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteFlavorHandler := connect.NewUnaryHandler(
		MachineServiceDeleteFlavorProcedure,
		svc.DeleteFlavor,
		connect.WithSchema(machineServiceMethods.ByName("DeleteFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.kubevirt.v1.MachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MachineServiceListVirtualMachineProcedure:
			machineServiceListVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceGetVirtualMachineProcedure:
			machineServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceCreateVirtualMachineProcedure:
			machineServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceDeleteVirtualMachineProcedure:
			machineServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceUpdateVirtualMachineProcedure:
			machineServiceUpdateVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceCloneVirtualMachineProcedure:
			machineServiceCloneVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceSnapshotVirtualMachineProcedure:
			machineServiceSnapshotVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceRestoreVirtualMachineProcedure:
			machineServiceRestoreVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceStartVirtualMachineProcedure:
			machineServiceStartVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceStopVirtualMachineProcedure:
			machineServiceStopVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServicePauseVirtualMachineProcedure:
			machineServicePauseVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceUnpauseVirtualMachineProcedure:
			machineServiceUnpauseVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceMigrateVirtualMachineProcedure:
			machineServiceMigrateVirtualMachineHandler.ServeHTTP(w, r)
		case MachineServiceCreateDataVolumeProcedure:
			machineServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case MachineServiceGetDataVolumeProcedure:
			machineServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case MachineServiceListDataVolumeProcedure:
			machineServiceListDataVolumeHandler.ServeHTTP(w, r)
		case MachineServiceDeleteDataVolumeProcedure:
			machineServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case MachineServiceExtendDataVolumeProcedure:
			machineServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case MachineServiceCreateNetworkProcedure:
			machineServiceCreateNetworkHandler.ServeHTTP(w, r)
		case MachineServiceGetNetworkProcedure:
			machineServiceGetNetworkHandler.ServeHTTP(w, r)
		case MachineServiceListNetworkProcedure:
			machineServiceListNetworkHandler.ServeHTTP(w, r)
		case MachineServiceDeleteNetworkProcedure:
			machineServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case MachineServiceUpdateNetworkProcedure:
			machineServiceUpdateNetworkHandler.ServeHTTP(w, r)
		case MachineServiceCreateFlavorProcedure:
			machineServiceCreateFlavorHandler.ServeHTTP(w, r)
		case MachineServiceGetFlavorProcedure:
			machineServiceGetFlavorHandler.ServeHTTP(w, r)
		case MachineServiceListFlavorProcedure:
			machineServiceListFlavorHandler.ServeHTTP(w, r)
		case MachineServiceDeleteFlavorProcedure:
			machineServiceDeleteFlavorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) ListVirtualMachine(context.Context, *connect.Request[v1.ListVirtualMachineRequest]) (*connect.Response[v1.ListVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.ListVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.GetVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.UpdateVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.CloneVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.SnapshotVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.RestoreVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.StartVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.StopVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.PauseVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.UnpauseVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.MigrateVirtualMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.CreateDataVolume is not implemented"))
}

func (UnimplementedMachineServiceHandler) GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.GetDataVolume is not implemented"))
}

func (UnimplementedMachineServiceHandler) ListDataVolume(context.Context, *connect.Request[v1.ListDataVolumeRequest]) (*connect.Response[v1.ListDataVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.ListDataVolume is not implemented"))
}

func (UnimplementedMachineServiceHandler) DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.DeleteDataVolume is not implemented"))
}

func (UnimplementedMachineServiceHandler) ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.ExtendDataVolume is not implemented"))
}

func (UnimplementedMachineServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.CreateNetwork is not implemented"))
}

func (UnimplementedMachineServiceHandler) GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.GetNetwork is not implemented"))
}

func (UnimplementedMachineServiceHandler) ListNetwork(context.Context, *connect.Request[v1.ListNetworkRequest]) (*connect.Response[v1.ListNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.ListNetwork is not implemented"))
}

func (UnimplementedMachineServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.DeleteNetwork is not implemented"))
}

func (UnimplementedMachineServiceHandler) UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.UpdateNetwork is not implemented"))
}

func (UnimplementedMachineServiceHandler) CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.CreateFlavor is not implemented"))
}

func (UnimplementedMachineServiceHandler) GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.GetFlavor is not implemented"))
}

func (UnimplementedMachineServiceHandler) ListFlavor(context.Context, *connect.Request[v1.ListFlavorRequest]) (*connect.Response[v1.ListFlavorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.ListFlavor is not implemented"))
}

func (UnimplementedMachineServiceHandler) DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.MachineService.DeleteFlavor is not implemented"))
}
