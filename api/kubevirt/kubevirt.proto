edition = "2023";

package otterscale.kubevirt.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/openhdc/otterscale/api/kubevirt/v1;pb";

enum VMStatus {
  UNKNOWN = 0;
  PROVISIONING = 1;
  STARTING = 2;
  RUNNING = 3;
  TERMINATING = 4;
  STOPPED = 5;
  PAUSED = 6;
  MIGRATING = 7;
}

enum OpStatus {
  IN_PROGRESS = 0;
  SUCCEEDED = 1;
  FAILED = 2;
}

service MachineService {
  rpc ListVirtualMachine(ListVirtualMachineRequest) returns (ListVirtualMachineResponse);
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (GetVirtualMachineResponse);
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (CreateVirtualMachineResponse);
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse);
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (UpdateVirtualMachineResponse);
  rpc CloneVirtualMachine(CloneVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc SnapshotVirtualMachine(SnapshotVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc RestoreVirtualMachine(RestoreVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc StartVirtualMachine(StartVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc StopVirtualMachine(StopVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc PauseVirtualMachine(PauseVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc UnpauseVirtualMachine(UnpauseVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (google.protobuf.Empty);

  rpc CreateDataVolume(CreateDataVolumeRequest) returns (google.protobuf.Empty);
  rpc GetDataVolume(GetDataVolumeRequest) returns (DataVolume);
  rpc ListDataVolume(ListDataVolumeRequest) returns (ListDataVolumeResponse);
  rpc DeleteDataVolume(DeleteDataVolumeRequest) returns (google.protobuf.Empty);
  rpc ExtendDataVolume(ExtendDataVolumeRequest) returns (google.protobuf.Empty);

  rpc CreateNetwork(CreateNetworkRequest) returns (google.protobuf.Empty);
  rpc GetNetwork(GetNetworkRequest) returns (Network);
  rpc ListNetwork(ListNetworkRequest) returns (ListNetworkResponse);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc UpdateNetwork(UpdateNetworkRequest) returns (google.protobuf.Empty);

  rpc CreateFlavor(CreateFlavorRequest) returns (google.protobuf.Empty);
  rpc GetFlavor(GetFlavorRequest) returns (Flavor);
  rpc ListFlavor(ListFlavorRequest) returns (ListFlavorResponse);
  rpc DeleteFlavor(DeleteFlavorRequest) returns (google.protobuf.Empty);
}

message VirtualMachine {
  string name = 1;
  string namespace = 2;
  Flavor flavor = 3;
  Network network = 4;
  repeated DataVolume data_volumes = 5;
  VMStatus status = 6;
  VMSnapshot snapshot = 7;
  VMClone clone = 8;
  VMRestore restore = 9;
  VMMigrate migrate = 10;
}

message VMOperations {
  message Status {
    OpStatus status = 1;
    string message = 2;
    string reason = 3;
  }
  string name = 1;
  google.protobuf.Timestamp create_time = 2;
  string description = 3;
  Status status = 4;
}

message VMSnapshot {
  VMOperations ops = 1;
}

message VMClone {
  VMOperations ops = 1;
}

message VMRestore {
  VMOperations ops = 1;
}

message VMMigrate {
  VMOperations ops = 1;
}

message Flavor {
  float cpu_cores = 1;
  int64 memory_bytes = 2;
}

message DataVolume {
  string type = 1;
  string name = 2;
  string namespace = 3;
  string source = 4;
  int64 volume_bytes = 5;
}

message Network {
  string name = 1;
  string namespace = 2;
  string service_type = 3;
  int32 port = 4;
  int32 node_port = 5;
  int32 container_port = 6;
}

message Device {
  string name = 1;
  string type = 2;
}

message Disk {
  string name = 1;
  string type = 2;
}

message USBDevice {
  string name = 1;
  string type = 2;
}

message PCIeDevice {
  string name = 1;
  string type = 2;
}

message ListVirtualMachineRequest {
  string namespace = 1;
}

message ListVirtualMachineResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message GetVirtualMachineRequest {
  string name = 1;
  string namespace = 2;
}

message GetVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message CreateVirtualMachineRequest {
  string name = 1;
  string namespace = 2;
  DataVolume data_volume = 3;
  string network_name = 4;
  string flavor = 5;
  string script = 6;
  repeated Disk disks = 7;
  repeated USBDevice usb_devices = 8;
  repeated PCIeDevice pcie_devices = 9;
}

message CreateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message UpdateVirtualMachineRequest {
  string name = 1;
  string namespace = 2;
  string flavor = 3;
  repeated Disk disks = 4;
  repeated USBDevice usb_devices = 5;
  repeated PCIeDevice pcie_devices = 6;
}

message UpdateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message DeleteVirtualMachineRequest {
  string name = 1;
  string namespace = 2;
}

message DeleteVirtualMachineResponse {
  google.protobuf.Empty empty = 1;
}

message SnapshotVirtualMachineRequest {
  string vm_name = 1;
  string vm_namespace = 2;
  string target_name = 3;
}

message CloneVirtualMachineRequest {
  string vm_name = 1;
  string vm_namespace = 2;
  string target_name = 3;
}

message RestoreVirtualMachineRequest {
  string vm_name = 1;
  string snapshot_name = 2;
}

message MigrateVirtualMachineRequest {
  string vm_name = 1;
  string vm_namespace = 2;
}

message StartVirtualMachineRequest {
  string vm_name = 1;
}

message StopVirtualMachineRequest {
  string vm_name = 1;
}

message PauseVirtualMachineRequest {
  string vm_name = 1;
}

message UnpauseVirtualMachineRequest {
  string vm_name = 1;
}

message CreateDataVolumeRequest {
  DataVolume data_volume = 1;
}

message ListDataVolumeRequest {
  string namespace = 1;
}

message ListDataVolumeResponse {
  repeated DataVolume data_volumes = 1;
}

message GetDataVolumeRequest {
  string name = 1;
  string namespace = 2;
}

message DeleteDataVolumeRequest {
  string name = 1;
  string namespace = 2;
}

message ExtendDataVolumeRequest {
  string name = 1;
  string namespace = 2;
  int64 size_bytes = 3;
}

message CreateNetworkRequest {
  Network network = 1;
}

message ListNetworkRequest {
  string namespace = 1;
}

message ListNetworkResponse {
  repeated Network networks = 1;
}

message GetNetworkRequest {
  string name = 1;
  string namespace = 2;
}

message DeleteNetworkRequest {
  string name = 1;
  string namespace = 2;
}

message UpdateNetworkRequest {
  Network network = 1;
}

message CreateFlavorRequest {
  Flavor flavor = 1;
}

message ListFlavorRequest {
  string namespace = 1;
}

message ListFlavorResponse {
  repeated Flavor flavors = 1;
}

message GetFlavorRequest {
  string name = 1;
  string namespace = 2;
}

message DeleteFlavorRequest {
  string name = 1;
  string namespace = 2;
}