// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kubevirt/v1/kubevirt.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/kubevirt/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubeVirtServiceName is the fully-qualified name of the KubeVirtService service.
	KubeVirtServiceName = "otterscale.kubevirt.v1.KubeVirtService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubeVirtServiceCreateVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// CreateVirtualMachine RPC.
	KubeVirtServiceCreateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateVirtualMachine"
	// KubeVirtServiceGetVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// GetVirtualMachine RPC.
	KubeVirtServiceGetVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetVirtualMachine"
	// KubeVirtServiceListVirtualMachinesProcedure is the fully-qualified name of the KubeVirtService's
	// ListVirtualMachines RPC.
	KubeVirtServiceListVirtualMachinesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListVirtualMachines"
	// KubeVirtServiceUpdateVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// UpdateVirtualMachine RPC.
	KubeVirtServiceUpdateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/UpdateVirtualMachine"
	// KubeVirtServiceDeleteVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteVirtualMachine RPC.
	KubeVirtServiceDeleteVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteVirtualMachine"
	// KubeVirtServiceStartVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// StartVirtualMachine RPC.
	KubeVirtServiceStartVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/StartVirtualMachine"
	// KubeVirtServiceStopVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// StopVirtualMachine RPC.
	KubeVirtServiceStopVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/StopVirtualMachine"
	// KubeVirtServicePauseVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// PauseVirtualMachine RPC.
	KubeVirtServicePauseVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/PauseVirtualMachine"
	// KubeVirtServiceResumeVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// ResumeVirtualMachine RPC.
	KubeVirtServiceResumeVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ResumeVirtualMachine"
	// KubeVirtServiceCloneVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// CloneVirtualMachine RPC.
	KubeVirtServiceCloneVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CloneVirtualMachine"
	// KubeVirtServiceSnapshotVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's SnapshotVirtualMachine RPC.
	KubeVirtServiceSnapshotVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/SnapshotVirtualMachine"
	// KubeVirtServiceRestoreVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's RestoreVirtualMachine RPC.
	KubeVirtServiceRestoreVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/RestoreVirtualMachine"
	// KubeVirtServiceMigrateVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's MigrateVirtualMachine RPC.
	KubeVirtServiceMigrateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/MigrateVirtualMachine"
	// KubeVirtServiceGetVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// KubeVirtService's GetVirtualMachineSnapshot RPC.
	KubeVirtServiceGetVirtualMachineSnapshotProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetVirtualMachineSnapshot"
	// KubeVirtServiceListVirtualMachineSnapshotsProcedure is the fully-qualified name of the
	// KubeVirtService's ListVirtualMachineSnapshots RPC.
	KubeVirtServiceListVirtualMachineSnapshotsProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListVirtualMachineSnapshots"
	// KubeVirtServiceDeleteVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// KubeVirtService's DeleteVirtualMachineSnapshot RPC.
	KubeVirtServiceDeleteVirtualMachineSnapshotProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteVirtualMachineSnapshot"
	// KubeVirtServiceCreateDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// CreateDataVolume RPC.
	KubeVirtServiceCreateDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateDataVolume"
	// KubeVirtServiceGetDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// GetDataVolume RPC.
	KubeVirtServiceGetDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetDataVolume"
	// KubeVirtServiceListDataVolumesProcedure is the fully-qualified name of the KubeVirtService's
	// ListDataVolumes RPC.
	KubeVirtServiceListDataVolumesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListDataVolumes"
	// KubeVirtServiceDeleteDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteDataVolume RPC.
	KubeVirtServiceDeleteDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteDataVolume"
	// KubeVirtServiceExtendDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// ExtendDataVolume RPC.
	KubeVirtServiceExtendDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ExtendDataVolume"
	// KubeVirtServiceCreateVMServiceProcedure is the fully-qualified name of the KubeVirtService's
	// CreateVMService RPC.
	KubeVirtServiceCreateVMServiceProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateVMService"
	// KubeVirtServiceGetVMServiceProcedure is the fully-qualified name of the KubeVirtService's
	// GetVMService RPC.
	KubeVirtServiceGetVMServiceProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetVMService"
	// KubeVirtServiceListVMServicesProcedure is the fully-qualified name of the KubeVirtService's
	// ListVMServices RPC.
	KubeVirtServiceListVMServicesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListVMServices"
	// KubeVirtServiceUpdateVMServiceProcedure is the fully-qualified name of the KubeVirtService's
	// UpdateVMService RPC.
	KubeVirtServiceUpdateVMServiceProcedure = "/otterscale.kubevirt.v1.KubeVirtService/UpdateVMService"
	// KubeVirtServiceDeleteVMServiceProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteVMService RPC.
	KubeVirtServiceDeleteVMServiceProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteVMService"
	// KubeVirtServiceCreateInstanceTypeProcedure is the fully-qualified name of the KubeVirtService's
	// CreateInstanceType RPC.
	KubeVirtServiceCreateInstanceTypeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateInstanceType"
	// KubeVirtServiceGetInstanceTypeProcedure is the fully-qualified name of the KubeVirtService's
	// GetInstanceType RPC.
	KubeVirtServiceGetInstanceTypeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetInstanceType"
	// KubeVirtServiceListInstanceTypesProcedure is the fully-qualified name of the KubeVirtService's
	// ListInstanceTypes RPC.
	KubeVirtServiceListInstanceTypesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListInstanceTypes"
	// KubeVirtServiceDeleteInstanceTypeProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteInstanceType RPC.
	KubeVirtServiceDeleteInstanceTypeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteInstanceType"
)

// KubeVirtServiceClient is a client for the otterscale.kubevirt.v1.KubeVirtService service.
type KubeVirtServiceClient interface {
	// Virtual Machine Operations
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Control Operations
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeVirtualMachine(context.Context, *connect.Request[v1.ResumeVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Advanced Operations
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	GetVirtualMachineSnapshot(context.Context, *connect.Request[v1.GetVirtualMachineSnapshotRequest]) (*connect.Response[v1.VirtualMachineSnapshot], error)
	ListVirtualMachineSnapshots(context.Context, *connect.Request[v1.ListVirtualMachineSnapshotsRequest]) (*connect.Response[v1.ListVirtualMachineSnapshotsResponse], error)
	DeleteVirtualMachineSnapshot(context.Context, *connect.Request[v1.DeleteVirtualMachineSnapshotRequest]) (*connect.Response[emptypb.Empty], error)
	// Data Volume Operations
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	// VMService Operations
	CreateVMService(context.Context, *connect.Request[v1.CreateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	GetVMService(context.Context, *connect.Request[v1.GetVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	ListVMServices(context.Context, *connect.Request[v1.ListVMServicesRequest]) (*connect.Response[v1.ListVMServicesResponse], error)
	UpdateVMService(context.Context, *connect.Request[v1.UpdateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	DeleteVMService(context.Context, *connect.Request[v1.DeleteVMServiceRequest]) (*connect.Response[emptypb.Empty], error)
	// InstanceType Operations
	CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error)
	DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKubeVirtServiceClient constructs a client for the otterscale.kubevirt.v1.KubeVirtService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubeVirtServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubeVirtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubeVirtServiceMethods := v1.File_api_kubevirt_v1_kubevirt_proto.Services().ByName("KubeVirtService").Methods()
	return &kubeVirtServiceClient{
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceCreateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceGetVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+KubeVirtServiceListVirtualMachinesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachine: connect.NewClient[v1.UpdateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceUpdateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		startVirtualMachine: connect.NewClient[v1.StartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceStartVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("StartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		stopVirtualMachine: connect.NewClient[v1.StopVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceStopVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("StopVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		pauseVirtualMachine: connect.NewClient[v1.PauseVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServicePauseVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("PauseVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		resumeVirtualMachine: connect.NewClient[v1.ResumeVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceResumeVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ResumeVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		cloneVirtualMachine: connect.NewClient[v1.CloneVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceCloneVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CloneVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		snapshotVirtualMachine: connect.NewClient[v1.SnapshotVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceSnapshotVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("SnapshotVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		restoreVirtualMachine: connect.NewClient[v1.RestoreVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceRestoreVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("RestoreVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		migrateVirtualMachine: connect.NewClient[v1.MigrateVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceMigrateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("MigrateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachineSnapshot: connect.NewClient[v1.GetVirtualMachineSnapshotRequest, v1.VirtualMachineSnapshot](
			httpClient,
			baseURL+KubeVirtServiceGetVirtualMachineSnapshotProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachineSnapshots: connect.NewClient[v1.ListVirtualMachineSnapshotsRequest, v1.ListVirtualMachineSnapshotsResponse](
			httpClient,
			baseURL+KubeVirtServiceListVirtualMachineSnapshotsProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachineSnapshots")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineSnapshot: connect.NewClient[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteVirtualMachineSnapshotProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+KubeVirtServiceCreateDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+KubeVirtServiceGetDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listDataVolumes: connect.NewClient[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse](
			httpClient,
			baseURL+KubeVirtServiceListDataVolumesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListDataVolumes")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceExtendDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createVMService: connect.NewClient[v1.CreateVMServiceRequest, v1.KubeVirtVMService](
			httpClient,
			baseURL+KubeVirtServiceCreateVMServiceProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVMService")),
			connect.WithClientOptions(opts...),
		),
		getVMService: connect.NewClient[v1.GetVMServiceRequest, v1.KubeVirtVMService](
			httpClient,
			baseURL+KubeVirtServiceGetVMServiceProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetVMService")),
			connect.WithClientOptions(opts...),
		),
		listVMServices: connect.NewClient[v1.ListVMServicesRequest, v1.ListVMServicesResponse](
			httpClient,
			baseURL+KubeVirtServiceListVMServicesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListVMServices")),
			connect.WithClientOptions(opts...),
		),
		updateVMService: connect.NewClient[v1.UpdateVMServiceRequest, v1.KubeVirtVMService](
			httpClient,
			baseURL+KubeVirtServiceUpdateVMServiceProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVMService")),
			connect.WithClientOptions(opts...),
		),
		deleteVMService: connect.NewClient[v1.DeleteVMServiceRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteVMServiceProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVMService")),
			connect.WithClientOptions(opts...),
		),
		createInstanceType: connect.NewClient[v1.CreateInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+KubeVirtServiceCreateInstanceTypeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateInstanceType")),
			connect.WithClientOptions(opts...),
		),
		getInstanceType: connect.NewClient[v1.GetInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+KubeVirtServiceGetInstanceTypeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetInstanceType")),
			connect.WithClientOptions(opts...),
		),
		listInstanceTypes: connect.NewClient[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse](
			httpClient,
			baseURL+KubeVirtServiceListInstanceTypesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListInstanceTypes")),
			connect.WithClientOptions(opts...),
		),
		deleteInstanceType: connect.NewClient[v1.DeleteInstanceTypeRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteInstanceTypeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteInstanceType")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubeVirtServiceClient implements KubeVirtServiceClient.
type kubeVirtServiceClient struct {
	createVirtualMachine         *connect.Client[v1.CreateVirtualMachineRequest, v1.VirtualMachine]
	getVirtualMachine            *connect.Client[v1.GetVirtualMachineRequest, v1.VirtualMachine]
	listVirtualMachines          *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	updateVirtualMachine         *connect.Client[v1.UpdateVirtualMachineRequest, v1.VirtualMachine]
	deleteVirtualMachine         *connect.Client[v1.DeleteVirtualMachineRequest, emptypb.Empty]
	startVirtualMachine          *connect.Client[v1.StartVirtualMachineRequest, emptypb.Empty]
	stopVirtualMachine           *connect.Client[v1.StopVirtualMachineRequest, emptypb.Empty]
	pauseVirtualMachine          *connect.Client[v1.PauseVirtualMachineRequest, emptypb.Empty]
	resumeVirtualMachine         *connect.Client[v1.ResumeVirtualMachineRequest, emptypb.Empty]
	cloneVirtualMachine          *connect.Client[v1.CloneVirtualMachineRequest, emptypb.Empty]
	snapshotVirtualMachine       *connect.Client[v1.SnapshotVirtualMachineRequest, emptypb.Empty]
	restoreVirtualMachine        *connect.Client[v1.RestoreVirtualMachineRequest, emptypb.Empty]
	migrateVirtualMachine        *connect.Client[v1.MigrateVirtualMachineRequest, emptypb.Empty]
	getVirtualMachineSnapshot    *connect.Client[v1.GetVirtualMachineSnapshotRequest, v1.VirtualMachineSnapshot]
	listVirtualMachineSnapshots  *connect.Client[v1.ListVirtualMachineSnapshotsRequest, v1.ListVirtualMachineSnapshotsResponse]
	deleteVirtualMachineSnapshot *connect.Client[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty]
	createDataVolume             *connect.Client[v1.CreateDataVolumeRequest, v1.DataVolume]
	getDataVolume                *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	listDataVolumes              *connect.Client[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse]
	deleteDataVolume             *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume             *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	createVMService              *connect.Client[v1.CreateVMServiceRequest, v1.KubeVirtVMService]
	getVMService                 *connect.Client[v1.GetVMServiceRequest, v1.KubeVirtVMService]
	listVMServices               *connect.Client[v1.ListVMServicesRequest, v1.ListVMServicesResponse]
	updateVMService              *connect.Client[v1.UpdateVMServiceRequest, v1.KubeVirtVMService]
	deleteVMService              *connect.Client[v1.DeleteVMServiceRequest, emptypb.Empty]
	createInstanceType           *connect.Client[v1.CreateInstanceTypeRequest, v1.InstanceType]
	getInstanceType              *connect.Client[v1.GetInstanceTypeRequest, v1.InstanceType]
	listInstanceTypes            *connect.Client[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse]
	deleteInstanceType           *connect.Client[v1.DeleteInstanceTypeRequest, emptypb.Empty]
}

// CreateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.CreateVirtualMachine.
func (c *kubeVirtServiceClient) CreateVirtualMachine(ctx context.Context, req *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.createVirtualMachine.CallUnary(ctx, req)
}

// GetVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachine.
func (c *kubeVirtServiceClient) GetVirtualMachine(ctx context.Context, req *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.getVirtualMachine.CallUnary(ctx, req)
}

// ListVirtualMachines calls otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachines.
func (c *kubeVirtServiceClient) ListVirtualMachines(ctx context.Context, req *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return c.listVirtualMachines.CallUnary(ctx, req)
}

// UpdateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.UpdateVirtualMachine.
func (c *kubeVirtServiceClient) UpdateVirtualMachine(ctx context.Context, req *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.updateVirtualMachine.CallUnary(ctx, req)
}

// DeleteVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachine.
func (c *kubeVirtServiceClient) DeleteVirtualMachine(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVirtualMachine.CallUnary(ctx, req)
}

// StartVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.StartVirtualMachine.
func (c *kubeVirtServiceClient) StartVirtualMachine(ctx context.Context, req *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startVirtualMachine.CallUnary(ctx, req)
}

// StopVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.StopVirtualMachine.
func (c *kubeVirtServiceClient) StopVirtualMachine(ctx context.Context, req *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopVirtualMachine.CallUnary(ctx, req)
}

// PauseVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.PauseVirtualMachine.
func (c *kubeVirtServiceClient) PauseVirtualMachine(ctx context.Context, req *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseVirtualMachine.CallUnary(ctx, req)
}

// ResumeVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.ResumeVirtualMachine.
func (c *kubeVirtServiceClient) ResumeVirtualMachine(ctx context.Context, req *connect.Request[v1.ResumeVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeVirtualMachine.CallUnary(ctx, req)
}

// CloneVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.CloneVirtualMachine.
func (c *kubeVirtServiceClient) CloneVirtualMachine(ctx context.Context, req *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cloneVirtualMachine.CallUnary(ctx, req)
}

// SnapshotVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.SnapshotVirtualMachine.
func (c *kubeVirtServiceClient) SnapshotVirtualMachine(ctx context.Context, req *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.snapshotVirtualMachine.CallUnary(ctx, req)
}

// RestoreVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.RestoreVirtualMachine.
func (c *kubeVirtServiceClient) RestoreVirtualMachine(ctx context.Context, req *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.restoreVirtualMachine.CallUnary(ctx, req)
}

// MigrateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.MigrateVirtualMachine.
func (c *kubeVirtServiceClient) MigrateVirtualMachine(ctx context.Context, req *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.migrateVirtualMachine.CallUnary(ctx, req)
}

// GetVirtualMachineSnapshot calls otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachineSnapshot.
func (c *kubeVirtServiceClient) GetVirtualMachineSnapshot(ctx context.Context, req *connect.Request[v1.GetVirtualMachineSnapshotRequest]) (*connect.Response[v1.VirtualMachineSnapshot], error) {
	return c.getVirtualMachineSnapshot.CallUnary(ctx, req)
}

// ListVirtualMachineSnapshots calls
// otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachineSnapshots.
func (c *kubeVirtServiceClient) ListVirtualMachineSnapshots(ctx context.Context, req *connect.Request[v1.ListVirtualMachineSnapshotsRequest]) (*connect.Response[v1.ListVirtualMachineSnapshotsResponse], error) {
	return c.listVirtualMachineSnapshots.CallUnary(ctx, req)
}

// DeleteVirtualMachineSnapshot calls
// otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachineSnapshot.
func (c *kubeVirtServiceClient) DeleteVirtualMachineSnapshot(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineSnapshotRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVirtualMachineSnapshot.CallUnary(ctx, req)
}

// CreateDataVolume calls otterscale.kubevirt.v1.KubeVirtService.CreateDataVolume.
func (c *kubeVirtServiceClient) CreateDataVolume(ctx context.Context, req *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.createDataVolume.CallUnary(ctx, req)
}

// GetDataVolume calls otterscale.kubevirt.v1.KubeVirtService.GetDataVolume.
func (c *kubeVirtServiceClient) GetDataVolume(ctx context.Context, req *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.getDataVolume.CallUnary(ctx, req)
}

// ListDataVolumes calls otterscale.kubevirt.v1.KubeVirtService.ListDataVolumes.
func (c *kubeVirtServiceClient) ListDataVolumes(ctx context.Context, req *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return c.listDataVolumes.CallUnary(ctx, req)
}

// DeleteDataVolume calls otterscale.kubevirt.v1.KubeVirtService.DeleteDataVolume.
func (c *kubeVirtServiceClient) DeleteDataVolume(ctx context.Context, req *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDataVolume.CallUnary(ctx, req)
}

// ExtendDataVolume calls otterscale.kubevirt.v1.KubeVirtService.ExtendDataVolume.
func (c *kubeVirtServiceClient) ExtendDataVolume(ctx context.Context, req *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.extendDataVolume.CallUnary(ctx, req)
}

// CreateVMService calls otterscale.kubevirt.v1.KubeVirtService.CreateVMService.
func (c *kubeVirtServiceClient) CreateVMService(ctx context.Context, req *connect.Request[v1.CreateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return c.createVMService.CallUnary(ctx, req)
}

// GetVMService calls otterscale.kubevirt.v1.KubeVirtService.GetVMService.
func (c *kubeVirtServiceClient) GetVMService(ctx context.Context, req *connect.Request[v1.GetVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return c.getVMService.CallUnary(ctx, req)
}

// ListVMServices calls otterscale.kubevirt.v1.KubeVirtService.ListVMServices.
func (c *kubeVirtServiceClient) ListVMServices(ctx context.Context, req *connect.Request[v1.ListVMServicesRequest]) (*connect.Response[v1.ListVMServicesResponse], error) {
	return c.listVMServices.CallUnary(ctx, req)
}

// UpdateVMService calls otterscale.kubevirt.v1.KubeVirtService.UpdateVMService.
func (c *kubeVirtServiceClient) UpdateVMService(ctx context.Context, req *connect.Request[v1.UpdateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return c.updateVMService.CallUnary(ctx, req)
}

// DeleteVMService calls otterscale.kubevirt.v1.KubeVirtService.DeleteVMService.
func (c *kubeVirtServiceClient) DeleteVMService(ctx context.Context, req *connect.Request[v1.DeleteVMServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVMService.CallUnary(ctx, req)
}

// CreateInstanceType calls otterscale.kubevirt.v1.KubeVirtService.CreateInstanceType.
func (c *kubeVirtServiceClient) CreateInstanceType(ctx context.Context, req *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return c.createInstanceType.CallUnary(ctx, req)
}

// GetInstanceType calls otterscale.kubevirt.v1.KubeVirtService.GetInstanceType.
func (c *kubeVirtServiceClient) GetInstanceType(ctx context.Context, req *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return c.getInstanceType.CallUnary(ctx, req)
}

// ListInstanceTypes calls otterscale.kubevirt.v1.KubeVirtService.ListInstanceTypes.
func (c *kubeVirtServiceClient) ListInstanceTypes(ctx context.Context, req *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error) {
	return c.listInstanceTypes.CallUnary(ctx, req)
}

// DeleteInstanceType calls otterscale.kubevirt.v1.KubeVirtService.DeleteInstanceType.
func (c *kubeVirtServiceClient) DeleteInstanceType(ctx context.Context, req *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteInstanceType.CallUnary(ctx, req)
}

// KubeVirtServiceHandler is an implementation of the otterscale.kubevirt.v1.KubeVirtService
// service.
type KubeVirtServiceHandler interface {
	// Virtual Machine Operations
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Control Operations
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeVirtualMachine(context.Context, *connect.Request[v1.ResumeVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Advanced Operations
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	GetVirtualMachineSnapshot(context.Context, *connect.Request[v1.GetVirtualMachineSnapshotRequest]) (*connect.Response[v1.VirtualMachineSnapshot], error)
	ListVirtualMachineSnapshots(context.Context, *connect.Request[v1.ListVirtualMachineSnapshotsRequest]) (*connect.Response[v1.ListVirtualMachineSnapshotsResponse], error)
	DeleteVirtualMachineSnapshot(context.Context, *connect.Request[v1.DeleteVirtualMachineSnapshotRequest]) (*connect.Response[emptypb.Empty], error)
	// Data Volume Operations
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	// VMService Operations
	CreateVMService(context.Context, *connect.Request[v1.CreateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	GetVMService(context.Context, *connect.Request[v1.GetVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	ListVMServices(context.Context, *connect.Request[v1.ListVMServicesRequest]) (*connect.Response[v1.ListVMServicesResponse], error)
	UpdateVMService(context.Context, *connect.Request[v1.UpdateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error)
	DeleteVMService(context.Context, *connect.Request[v1.DeleteVMServiceRequest]) (*connect.Response[emptypb.Empty], error)
	// InstanceType Operations
	CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error)
	DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKubeVirtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubeVirtServiceHandler(svc KubeVirtServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubeVirtServiceMethods := v1.File_api_kubevirt_v1_kubevirt_proto.Services().ByName("KubeVirtService").Methods()
	kubeVirtServiceCreateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListVirtualMachinesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceUpdateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceUpdateVirtualMachineProcedure,
		svc.UpdateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceStartVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceStartVirtualMachineProcedure,
		svc.StartVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("StartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceStopVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceStopVirtualMachineProcedure,
		svc.StopVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("StopVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServicePauseVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServicePauseVirtualMachineProcedure,
		svc.PauseVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("PauseVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceResumeVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceResumeVirtualMachineProcedure,
		svc.ResumeVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ResumeVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCloneVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceCloneVirtualMachineProcedure,
		svc.CloneVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CloneVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceSnapshotVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceSnapshotVirtualMachineProcedure,
		svc.SnapshotVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("SnapshotVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceRestoreVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceRestoreVirtualMachineProcedure,
		svc.RestoreVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("RestoreVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceMigrateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceMigrateVirtualMachineProcedure,
		svc.MigrateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("MigrateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetVirtualMachineSnapshotHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetVirtualMachineSnapshotProcedure,
		svc.GetVirtualMachineSnapshot,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListVirtualMachineSnapshotsHandler := connect.NewUnaryHandler(
		KubeVirtServiceListVirtualMachineSnapshotsProcedure,
		svc.ListVirtualMachineSnapshots,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachineSnapshots")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteVirtualMachineSnapshotHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteVirtualMachineSnapshotProcedure,
		svc.DeleteVirtualMachineSnapshot,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListDataVolumesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListDataVolumesProcedure,
		svc.ListDataVolumes,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListDataVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceExtendDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateVMServiceHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateVMServiceProcedure,
		svc.CreateVMService,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVMService")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetVMServiceHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetVMServiceProcedure,
		svc.GetVMService,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetVMService")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListVMServicesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListVMServicesProcedure,
		svc.ListVMServices,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListVMServices")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceUpdateVMServiceHandler := connect.NewUnaryHandler(
		KubeVirtServiceUpdateVMServiceProcedure,
		svc.UpdateVMService,
		connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVMService")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteVMServiceHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteVMServiceProcedure,
		svc.DeleteVMService,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVMService")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateInstanceTypeHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateInstanceTypeProcedure,
		svc.CreateInstanceType,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetInstanceTypeHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetInstanceTypeProcedure,
		svc.GetInstanceType,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListInstanceTypesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListInstanceTypesProcedure,
		svc.ListInstanceTypes,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListInstanceTypes")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteInstanceTypeHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteInstanceTypeProcedure,
		svc.DeleteInstanceType,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.kubevirt.v1.KubeVirtService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubeVirtServiceCreateVirtualMachineProcedure:
			kubeVirtServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetVirtualMachineProcedure:
			kubeVirtServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceListVirtualMachinesProcedure:
			kubeVirtServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case KubeVirtServiceUpdateVirtualMachineProcedure:
			kubeVirtServiceUpdateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteVirtualMachineProcedure:
			kubeVirtServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceStartVirtualMachineProcedure:
			kubeVirtServiceStartVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceStopVirtualMachineProcedure:
			kubeVirtServiceStopVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServicePauseVirtualMachineProcedure:
			kubeVirtServicePauseVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceResumeVirtualMachineProcedure:
			kubeVirtServiceResumeVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceCloneVirtualMachineProcedure:
			kubeVirtServiceCloneVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceSnapshotVirtualMachineProcedure:
			kubeVirtServiceSnapshotVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceRestoreVirtualMachineProcedure:
			kubeVirtServiceRestoreVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceMigrateVirtualMachineProcedure:
			kubeVirtServiceMigrateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetVirtualMachineSnapshotProcedure:
			kubeVirtServiceGetVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case KubeVirtServiceListVirtualMachineSnapshotsProcedure:
			kubeVirtServiceListVirtualMachineSnapshotsHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteVirtualMachineSnapshotProcedure:
			kubeVirtServiceDeleteVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateDataVolumeProcedure:
			kubeVirtServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetDataVolumeProcedure:
			kubeVirtServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceListDataVolumesProcedure:
			kubeVirtServiceListDataVolumesHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteDataVolumeProcedure:
			kubeVirtServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceExtendDataVolumeProcedure:
			kubeVirtServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateVMServiceProcedure:
			kubeVirtServiceCreateVMServiceHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetVMServiceProcedure:
			kubeVirtServiceGetVMServiceHandler.ServeHTTP(w, r)
		case KubeVirtServiceListVMServicesProcedure:
			kubeVirtServiceListVMServicesHandler.ServeHTTP(w, r)
		case KubeVirtServiceUpdateVMServiceProcedure:
			kubeVirtServiceUpdateVMServiceHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteVMServiceProcedure:
			kubeVirtServiceDeleteVMServiceHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateInstanceTypeProcedure:
			kubeVirtServiceCreateInstanceTypeHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetInstanceTypeProcedure:
			kubeVirtServiceGetInstanceTypeHandler.ServeHTTP(w, r)
		case KubeVirtServiceListInstanceTypesProcedure:
			kubeVirtServiceListInstanceTypesHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteInstanceTypeProcedure:
			kubeVirtServiceDeleteInstanceTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubeVirtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubeVirtServiceHandler struct{}

func (UnimplementedKubeVirtServiceHandler) CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachines is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.UpdateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.StartVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.StopVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.PauseVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ResumeVirtualMachine(context.Context, *connect.Request[v1.ResumeVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ResumeVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CloneVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.SnapshotVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.RestoreVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.MigrateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetVirtualMachineSnapshot(context.Context, *connect.Request[v1.GetVirtualMachineSnapshotRequest]) (*connect.Response[v1.VirtualMachineSnapshot], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListVirtualMachineSnapshots(context.Context, *connect.Request[v1.ListVirtualMachineSnapshotsRequest]) (*connect.Response[v1.ListVirtualMachineSnapshotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachineSnapshots is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteVirtualMachineSnapshot(context.Context, *connect.Request[v1.DeleteVirtualMachineSnapshotRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListDataVolumes is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ExtendDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateVMService(context.Context, *connect.Request[v1.CreateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateVMService is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetVMService(context.Context, *connect.Request[v1.GetVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetVMService is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListVMServices(context.Context, *connect.Request[v1.ListVMServicesRequest]) (*connect.Response[v1.ListVMServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListVMServices is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) UpdateVMService(context.Context, *connect.Request[v1.UpdateVMServiceRequest]) (*connect.Response[v1.KubeVirtVMService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.UpdateVMService is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteVMService(context.Context, *connect.Request[v1.DeleteVMServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteVMService is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateInstanceType is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetInstanceType is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListInstanceTypes is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteInstanceType is not implemented"))
}
