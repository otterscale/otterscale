// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kubevirt/v1/kubevirt.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/kubevirt/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubeVirtServiceName is the fully-qualified name of the KubeVirtService service.
	KubeVirtServiceName = "otterscale.kubevirt.v1.KubeVirtService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubeVirtServiceCreateVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// CreateVirtualMachine RPC.
	KubeVirtServiceCreateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateVirtualMachine"
	// KubeVirtServiceGetVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// GetVirtualMachine RPC.
	KubeVirtServiceGetVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetVirtualMachine"
	// KubeVirtServiceListVirtualMachinesProcedure is the fully-qualified name of the KubeVirtService's
	// ListVirtualMachines RPC.
	KubeVirtServiceListVirtualMachinesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListVirtualMachines"
	// KubeVirtServiceUpdateVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// UpdateVirtualMachine RPC.
	KubeVirtServiceUpdateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/UpdateVirtualMachine"
	// KubeVirtServiceDeleteVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteVirtualMachine RPC.
	KubeVirtServiceDeleteVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteVirtualMachine"
	// KubeVirtServiceStartVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// StartVirtualMachine RPC.
	KubeVirtServiceStartVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/StartVirtualMachine"
	// KubeVirtServiceStopVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// StopVirtualMachine RPC.
	KubeVirtServiceStopVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/StopVirtualMachine"
	// KubeVirtServicePauseVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// PauseVirtualMachine RPC.
	KubeVirtServicePauseVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/PauseVirtualMachine"
	// KubeVirtServiceUnpauseVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's UnpauseVirtualMachine RPC.
	KubeVirtServiceUnpauseVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/UnpauseVirtualMachine"
	// KubeVirtServiceCloneVirtualMachineProcedure is the fully-qualified name of the KubeVirtService's
	// CloneVirtualMachine RPC.
	KubeVirtServiceCloneVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CloneVirtualMachine"
	// KubeVirtServiceSnapshotVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's SnapshotVirtualMachine RPC.
	KubeVirtServiceSnapshotVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/SnapshotVirtualMachine"
	// KubeVirtServiceRestoreVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's RestoreVirtualMachine RPC.
	KubeVirtServiceRestoreVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/RestoreVirtualMachine"
	// KubeVirtServiceMigrateVirtualMachineProcedure is the fully-qualified name of the
	// KubeVirtService's MigrateVirtualMachine RPC.
	KubeVirtServiceMigrateVirtualMachineProcedure = "/otterscale.kubevirt.v1.KubeVirtService/MigrateVirtualMachine"
	// KubeVirtServiceCreateDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// CreateDataVolume RPC.
	KubeVirtServiceCreateDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateDataVolume"
	// KubeVirtServiceGetDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// GetDataVolume RPC.
	KubeVirtServiceGetDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetDataVolume"
	// KubeVirtServiceListDataVolumesProcedure is the fully-qualified name of the KubeVirtService's
	// ListDataVolumes RPC.
	KubeVirtServiceListDataVolumesProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListDataVolumes"
	// KubeVirtServiceDeleteDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteDataVolume RPC.
	KubeVirtServiceDeleteDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteDataVolume"
	// KubeVirtServiceExtendDataVolumeProcedure is the fully-qualified name of the KubeVirtService's
	// ExtendDataVolume RPC.
	KubeVirtServiceExtendDataVolumeProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ExtendDataVolume"
	// KubeVirtServiceCreateNetworkProcedure is the fully-qualified name of the KubeVirtService's
	// CreateNetwork RPC.
	KubeVirtServiceCreateNetworkProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateNetwork"
	// KubeVirtServiceGetNetworkProcedure is the fully-qualified name of the KubeVirtService's
	// GetNetwork RPC.
	KubeVirtServiceGetNetworkProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetNetwork"
	// KubeVirtServiceListNetworksProcedure is the fully-qualified name of the KubeVirtService's
	// ListNetworks RPC.
	KubeVirtServiceListNetworksProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListNetworks"
	// KubeVirtServiceUpdateNetworkProcedure is the fully-qualified name of the KubeVirtService's
	// UpdateNetwork RPC.
	KubeVirtServiceUpdateNetworkProcedure = "/otterscale.kubevirt.v1.KubeVirtService/UpdateNetwork"
	// KubeVirtServiceDeleteNetworkProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteNetwork RPC.
	KubeVirtServiceDeleteNetworkProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteNetwork"
	// KubeVirtServiceCreateFlavorProcedure is the fully-qualified name of the KubeVirtService's
	// CreateFlavor RPC.
	KubeVirtServiceCreateFlavorProcedure = "/otterscale.kubevirt.v1.KubeVirtService/CreateFlavor"
	// KubeVirtServiceGetFlavorProcedure is the fully-qualified name of the KubeVirtService's GetFlavor
	// RPC.
	KubeVirtServiceGetFlavorProcedure = "/otterscale.kubevirt.v1.KubeVirtService/GetFlavor"
	// KubeVirtServiceListFlavorsProcedure is the fully-qualified name of the KubeVirtService's
	// ListFlavors RPC.
	KubeVirtServiceListFlavorsProcedure = "/otterscale.kubevirt.v1.KubeVirtService/ListFlavors"
	// KubeVirtServiceDeleteFlavorProcedure is the fully-qualified name of the KubeVirtService's
	// DeleteFlavor RPC.
	KubeVirtServiceDeleteFlavorProcedure = "/otterscale.kubevirt.v1.KubeVirtService/DeleteFlavor"
)

// KubeVirtServiceClient is a client for the otterscale.kubevirt.v1.KubeVirtService service.
type KubeVirtServiceClient interface {
	// Virtual Machine Operations
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Control Operations
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Advanced Operations
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Data Volume Operations
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	// Network Operations
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	// Flavor Operations
	CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[v1.Flavor], error)
	GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error)
	ListFlavors(context.Context, *connect.Request[v1.ListFlavorsRequest]) (*connect.Response[v1.ListFlavorsResponse], error)
	DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKubeVirtServiceClient constructs a client for the otterscale.kubevirt.v1.KubeVirtService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubeVirtServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubeVirtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubeVirtServiceMethods := v1.File_api_kubevirt_v1_kubevirt_proto.Services().ByName("KubeVirtService").Methods()
	return &kubeVirtServiceClient{
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceCreateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceGetVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+KubeVirtServiceListVirtualMachinesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachine: connect.NewClient[v1.UpdateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+KubeVirtServiceUpdateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		startVirtualMachine: connect.NewClient[v1.StartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceStartVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("StartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		stopVirtualMachine: connect.NewClient[v1.StopVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceStopVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("StopVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		pauseVirtualMachine: connect.NewClient[v1.PauseVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServicePauseVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("PauseVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		unpauseVirtualMachine: connect.NewClient[v1.UnpauseVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceUnpauseVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("UnpauseVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		cloneVirtualMachine: connect.NewClient[v1.CloneVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceCloneVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CloneVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		snapshotVirtualMachine: connect.NewClient[v1.SnapshotVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceSnapshotVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("SnapshotVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		restoreVirtualMachine: connect.NewClient[v1.RestoreVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceRestoreVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("RestoreVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		migrateVirtualMachine: connect.NewClient[v1.MigrateVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceMigrateVirtualMachineProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("MigrateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+KubeVirtServiceCreateDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+KubeVirtServiceGetDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listDataVolumes: connect.NewClient[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse](
			httpClient,
			baseURL+KubeVirtServiceListDataVolumesProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListDataVolumes")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceExtendDataVolumeProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.KubeVirtNetwork](
			httpClient,
			baseURL+KubeVirtServiceCreateNetworkProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[v1.GetNetworkRequest, v1.KubeVirtNetwork](
			httpClient,
			baseURL+KubeVirtServiceGetNetworkProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetNetwork")),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+KubeVirtServiceListNetworksProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListNetworks")),
			connect.WithClientOptions(opts...),
		),
		updateNetwork: connect.NewClient[v1.UpdateNetworkRequest, v1.KubeVirtNetwork](
			httpClient,
			baseURL+KubeVirtServiceUpdateNetworkProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteNetworkProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
		createFlavor: connect.NewClient[v1.CreateFlavorRequest, v1.Flavor](
			httpClient,
			baseURL+KubeVirtServiceCreateFlavorProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("CreateFlavor")),
			connect.WithClientOptions(opts...),
		),
		getFlavor: connect.NewClient[v1.GetFlavorRequest, v1.Flavor](
			httpClient,
			baseURL+KubeVirtServiceGetFlavorProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("GetFlavor")),
			connect.WithClientOptions(opts...),
		),
		listFlavors: connect.NewClient[v1.ListFlavorsRequest, v1.ListFlavorsResponse](
			httpClient,
			baseURL+KubeVirtServiceListFlavorsProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("ListFlavors")),
			connect.WithClientOptions(opts...),
		),
		deleteFlavor: connect.NewClient[v1.DeleteFlavorRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeVirtServiceDeleteFlavorProcedure,
			connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteFlavor")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubeVirtServiceClient implements KubeVirtServiceClient.
type kubeVirtServiceClient struct {
	createVirtualMachine   *connect.Client[v1.CreateVirtualMachineRequest, v1.VirtualMachine]
	getVirtualMachine      *connect.Client[v1.GetVirtualMachineRequest, v1.VirtualMachine]
	listVirtualMachines    *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	updateVirtualMachine   *connect.Client[v1.UpdateVirtualMachineRequest, v1.VirtualMachine]
	deleteVirtualMachine   *connect.Client[v1.DeleteVirtualMachineRequest, emptypb.Empty]
	startVirtualMachine    *connect.Client[v1.StartVirtualMachineRequest, emptypb.Empty]
	stopVirtualMachine     *connect.Client[v1.StopVirtualMachineRequest, emptypb.Empty]
	pauseVirtualMachine    *connect.Client[v1.PauseVirtualMachineRequest, emptypb.Empty]
	unpauseVirtualMachine  *connect.Client[v1.UnpauseVirtualMachineRequest, emptypb.Empty]
	cloneVirtualMachine    *connect.Client[v1.CloneVirtualMachineRequest, emptypb.Empty]
	snapshotVirtualMachine *connect.Client[v1.SnapshotVirtualMachineRequest, emptypb.Empty]
	restoreVirtualMachine  *connect.Client[v1.RestoreVirtualMachineRequest, emptypb.Empty]
	migrateVirtualMachine  *connect.Client[v1.MigrateVirtualMachineRequest, emptypb.Empty]
	createDataVolume       *connect.Client[v1.CreateDataVolumeRequest, v1.DataVolume]
	getDataVolume          *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	listDataVolumes        *connect.Client[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse]
	deleteDataVolume       *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume       *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	createNetwork          *connect.Client[v1.CreateNetworkRequest, v1.KubeVirtNetwork]
	getNetwork             *connect.Client[v1.GetNetworkRequest, v1.KubeVirtNetwork]
	listNetworks           *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	updateNetwork          *connect.Client[v1.UpdateNetworkRequest, v1.KubeVirtNetwork]
	deleteNetwork          *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	createFlavor           *connect.Client[v1.CreateFlavorRequest, v1.Flavor]
	getFlavor              *connect.Client[v1.GetFlavorRequest, v1.Flavor]
	listFlavors            *connect.Client[v1.ListFlavorsRequest, v1.ListFlavorsResponse]
	deleteFlavor           *connect.Client[v1.DeleteFlavorRequest, emptypb.Empty]
}

// CreateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.CreateVirtualMachine.
func (c *kubeVirtServiceClient) CreateVirtualMachine(ctx context.Context, req *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.createVirtualMachine.CallUnary(ctx, req)
}

// GetVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachine.
func (c *kubeVirtServiceClient) GetVirtualMachine(ctx context.Context, req *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.getVirtualMachine.CallUnary(ctx, req)
}

// ListVirtualMachines calls otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachines.
func (c *kubeVirtServiceClient) ListVirtualMachines(ctx context.Context, req *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return c.listVirtualMachines.CallUnary(ctx, req)
}

// UpdateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.UpdateVirtualMachine.
func (c *kubeVirtServiceClient) UpdateVirtualMachine(ctx context.Context, req *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.updateVirtualMachine.CallUnary(ctx, req)
}

// DeleteVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachine.
func (c *kubeVirtServiceClient) DeleteVirtualMachine(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVirtualMachine.CallUnary(ctx, req)
}

// StartVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.StartVirtualMachine.
func (c *kubeVirtServiceClient) StartVirtualMachine(ctx context.Context, req *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startVirtualMachine.CallUnary(ctx, req)
}

// StopVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.StopVirtualMachine.
func (c *kubeVirtServiceClient) StopVirtualMachine(ctx context.Context, req *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopVirtualMachine.CallUnary(ctx, req)
}

// PauseVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.PauseVirtualMachine.
func (c *kubeVirtServiceClient) PauseVirtualMachine(ctx context.Context, req *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseVirtualMachine.CallUnary(ctx, req)
}

// UnpauseVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.UnpauseVirtualMachine.
func (c *kubeVirtServiceClient) UnpauseVirtualMachine(ctx context.Context, req *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unpauseVirtualMachine.CallUnary(ctx, req)
}

// CloneVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.CloneVirtualMachine.
func (c *kubeVirtServiceClient) CloneVirtualMachine(ctx context.Context, req *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cloneVirtualMachine.CallUnary(ctx, req)
}

// SnapshotVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.SnapshotVirtualMachine.
func (c *kubeVirtServiceClient) SnapshotVirtualMachine(ctx context.Context, req *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.snapshotVirtualMachine.CallUnary(ctx, req)
}

// RestoreVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.RestoreVirtualMachine.
func (c *kubeVirtServiceClient) RestoreVirtualMachine(ctx context.Context, req *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.restoreVirtualMachine.CallUnary(ctx, req)
}

// MigrateVirtualMachine calls otterscale.kubevirt.v1.KubeVirtService.MigrateVirtualMachine.
func (c *kubeVirtServiceClient) MigrateVirtualMachine(ctx context.Context, req *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.migrateVirtualMachine.CallUnary(ctx, req)
}

// CreateDataVolume calls otterscale.kubevirt.v1.KubeVirtService.CreateDataVolume.
func (c *kubeVirtServiceClient) CreateDataVolume(ctx context.Context, req *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.createDataVolume.CallUnary(ctx, req)
}

// GetDataVolume calls otterscale.kubevirt.v1.KubeVirtService.GetDataVolume.
func (c *kubeVirtServiceClient) GetDataVolume(ctx context.Context, req *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.getDataVolume.CallUnary(ctx, req)
}

// ListDataVolumes calls otterscale.kubevirt.v1.KubeVirtService.ListDataVolumes.
func (c *kubeVirtServiceClient) ListDataVolumes(ctx context.Context, req *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return c.listDataVolumes.CallUnary(ctx, req)
}

// DeleteDataVolume calls otterscale.kubevirt.v1.KubeVirtService.DeleteDataVolume.
func (c *kubeVirtServiceClient) DeleteDataVolume(ctx context.Context, req *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDataVolume.CallUnary(ctx, req)
}

// ExtendDataVolume calls otterscale.kubevirt.v1.KubeVirtService.ExtendDataVolume.
func (c *kubeVirtServiceClient) ExtendDataVolume(ctx context.Context, req *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.extendDataVolume.CallUnary(ctx, req)
}

// CreateNetwork calls otterscale.kubevirt.v1.KubeVirtService.CreateNetwork.
func (c *kubeVirtServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// GetNetwork calls otterscale.kubevirt.v1.KubeVirtService.GetNetwork.
func (c *kubeVirtServiceClient) GetNetwork(ctx context.Context, req *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// ListNetworks calls otterscale.kubevirt.v1.KubeVirtService.ListNetworks.
func (c *kubeVirtServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// UpdateNetwork calls otterscale.kubevirt.v1.KubeVirtService.UpdateNetwork.
func (c *kubeVirtServiceClient) UpdateNetwork(ctx context.Context, req *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return c.updateNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls otterscale.kubevirt.v1.KubeVirtService.DeleteNetwork.
func (c *kubeVirtServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// CreateFlavor calls otterscale.kubevirt.v1.KubeVirtService.CreateFlavor.
func (c *kubeVirtServiceClient) CreateFlavor(ctx context.Context, req *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return c.createFlavor.CallUnary(ctx, req)
}

// GetFlavor calls otterscale.kubevirt.v1.KubeVirtService.GetFlavor.
func (c *kubeVirtServiceClient) GetFlavor(ctx context.Context, req *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return c.getFlavor.CallUnary(ctx, req)
}

// ListFlavors calls otterscale.kubevirt.v1.KubeVirtService.ListFlavors.
func (c *kubeVirtServiceClient) ListFlavors(ctx context.Context, req *connect.Request[v1.ListFlavorsRequest]) (*connect.Response[v1.ListFlavorsResponse], error) {
	return c.listFlavors.CallUnary(ctx, req)
}

// DeleteFlavor calls otterscale.kubevirt.v1.KubeVirtService.DeleteFlavor.
func (c *kubeVirtServiceClient) DeleteFlavor(ctx context.Context, req *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFlavor.CallUnary(ctx, req)
}

// KubeVirtServiceHandler is an implementation of the otterscale.kubevirt.v1.KubeVirtService
// service.
type KubeVirtServiceHandler interface {
	// Virtual Machine Operations
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Control Operations
	StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Virtual Machine Advanced Operations
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	// Data Volume Operations
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	// Network Operations
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	// Flavor Operations
	CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[v1.Flavor], error)
	GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error)
	ListFlavors(context.Context, *connect.Request[v1.ListFlavorsRequest]) (*connect.Response[v1.ListFlavorsResponse], error)
	DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKubeVirtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubeVirtServiceHandler(svc KubeVirtServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubeVirtServiceMethods := v1.File_api_kubevirt_v1_kubevirt_proto.Services().ByName("KubeVirtService").Methods()
	kubeVirtServiceCreateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListVirtualMachinesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceUpdateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceUpdateVirtualMachineProcedure,
		svc.UpdateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceStartVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceStartVirtualMachineProcedure,
		svc.StartVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("StartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceStopVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceStopVirtualMachineProcedure,
		svc.StopVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("StopVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServicePauseVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServicePauseVirtualMachineProcedure,
		svc.PauseVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("PauseVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceUnpauseVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceUnpauseVirtualMachineProcedure,
		svc.UnpauseVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("UnpauseVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCloneVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceCloneVirtualMachineProcedure,
		svc.CloneVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CloneVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceSnapshotVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceSnapshotVirtualMachineProcedure,
		svc.SnapshotVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("SnapshotVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceRestoreVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceRestoreVirtualMachineProcedure,
		svc.RestoreVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("RestoreVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceMigrateVirtualMachineHandler := connect.NewUnaryHandler(
		KubeVirtServiceMigrateVirtualMachineProcedure,
		svc.MigrateVirtualMachine,
		connect.WithSchema(kubeVirtServiceMethods.ByName("MigrateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListDataVolumesHandler := connect.NewUnaryHandler(
		KubeVirtServiceListDataVolumesProcedure,
		svc.ListDataVolumes,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListDataVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceExtendDataVolumeHandler := connect.NewUnaryHandler(
		KubeVirtServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateNetworkHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetNetworkHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListNetworksHandler := connect.NewUnaryHandler(
		KubeVirtServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceUpdateNetworkHandler := connect.NewUnaryHandler(
		KubeVirtServiceUpdateNetworkProcedure,
		svc.UpdateNetwork,
		connect.WithSchema(kubeVirtServiceMethods.ByName("UpdateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceCreateFlavorHandler := connect.NewUnaryHandler(
		KubeVirtServiceCreateFlavorProcedure,
		svc.CreateFlavor,
		connect.WithSchema(kubeVirtServiceMethods.ByName("CreateFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceGetFlavorHandler := connect.NewUnaryHandler(
		KubeVirtServiceGetFlavorProcedure,
		svc.GetFlavor,
		connect.WithSchema(kubeVirtServiceMethods.ByName("GetFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceListFlavorsHandler := connect.NewUnaryHandler(
		KubeVirtServiceListFlavorsProcedure,
		svc.ListFlavors,
		connect.WithSchema(kubeVirtServiceMethods.ByName("ListFlavors")),
		connect.WithHandlerOptions(opts...),
	)
	kubeVirtServiceDeleteFlavorHandler := connect.NewUnaryHandler(
		KubeVirtServiceDeleteFlavorProcedure,
		svc.DeleteFlavor,
		connect.WithSchema(kubeVirtServiceMethods.ByName("DeleteFlavor")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.kubevirt.v1.KubeVirtService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubeVirtServiceCreateVirtualMachineProcedure:
			kubeVirtServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetVirtualMachineProcedure:
			kubeVirtServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceListVirtualMachinesProcedure:
			kubeVirtServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case KubeVirtServiceUpdateVirtualMachineProcedure:
			kubeVirtServiceUpdateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteVirtualMachineProcedure:
			kubeVirtServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceStartVirtualMachineProcedure:
			kubeVirtServiceStartVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceStopVirtualMachineProcedure:
			kubeVirtServiceStopVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServicePauseVirtualMachineProcedure:
			kubeVirtServicePauseVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceUnpauseVirtualMachineProcedure:
			kubeVirtServiceUnpauseVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceCloneVirtualMachineProcedure:
			kubeVirtServiceCloneVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceSnapshotVirtualMachineProcedure:
			kubeVirtServiceSnapshotVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceRestoreVirtualMachineProcedure:
			kubeVirtServiceRestoreVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceMigrateVirtualMachineProcedure:
			kubeVirtServiceMigrateVirtualMachineHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateDataVolumeProcedure:
			kubeVirtServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetDataVolumeProcedure:
			kubeVirtServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceListDataVolumesProcedure:
			kubeVirtServiceListDataVolumesHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteDataVolumeProcedure:
			kubeVirtServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceExtendDataVolumeProcedure:
			kubeVirtServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateNetworkProcedure:
			kubeVirtServiceCreateNetworkHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetNetworkProcedure:
			kubeVirtServiceGetNetworkHandler.ServeHTTP(w, r)
		case KubeVirtServiceListNetworksProcedure:
			kubeVirtServiceListNetworksHandler.ServeHTTP(w, r)
		case KubeVirtServiceUpdateNetworkProcedure:
			kubeVirtServiceUpdateNetworkHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteNetworkProcedure:
			kubeVirtServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case KubeVirtServiceCreateFlavorProcedure:
			kubeVirtServiceCreateFlavorHandler.ServeHTTP(w, r)
		case KubeVirtServiceGetFlavorProcedure:
			kubeVirtServiceGetFlavorHandler.ServeHTTP(w, r)
		case KubeVirtServiceListFlavorsProcedure:
			kubeVirtServiceListFlavorsHandler.ServeHTTP(w, r)
		case KubeVirtServiceDeleteFlavorProcedure:
			kubeVirtServiceDeleteFlavorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubeVirtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubeVirtServiceHandler struct{}

func (UnimplementedKubeVirtServiceHandler) CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListVirtualMachines is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.UpdateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) StartVirtualMachine(context.Context, *connect.Request[v1.StartVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.StartVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) StopVirtualMachine(context.Context, *connect.Request[v1.StopVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.StopVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) PauseVirtualMachine(context.Context, *connect.Request[v1.PauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.PauseVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) UnpauseVirtualMachine(context.Context, *connect.Request[v1.UnpauseVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.UnpauseVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CloneVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) SnapshotVirtualMachine(context.Context, *connect.Request[v1.SnapshotVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.SnapshotVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) RestoreVirtualMachine(context.Context, *connect.Request[v1.RestoreVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.RestoreVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) MigrateVirtualMachine(context.Context, *connect.Request[v1.MigrateVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.MigrateVirtualMachine is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListDataVolumes is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ExtendDataVolume is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateNetwork is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetNetwork(context.Context, *connect.Request[v1.GetNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetNetwork is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListNetworks is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) UpdateNetwork(context.Context, *connect.Request[v1.UpdateNetworkRequest]) (*connect.Response[v1.KubeVirtNetwork], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.UpdateNetwork is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteNetwork is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) CreateFlavor(context.Context, *connect.Request[v1.CreateFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.CreateFlavor is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) GetFlavor(context.Context, *connect.Request[v1.GetFlavorRequest]) (*connect.Response[v1.Flavor], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.GetFlavor is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) ListFlavors(context.Context, *connect.Request[v1.ListFlavorsRequest]) (*connect.Response[v1.ListFlavorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.ListFlavors is not implemented"))
}

func (UnimplementedKubeVirtServiceHandler) DeleteFlavor(context.Context, *connect.Request[v1.DeleteFlavorRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.kubevirt.v1.KubeVirtService.DeleteFlavor is not implemented"))
}
