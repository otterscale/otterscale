edition = "2023";

package otterscale.kubevirt.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/openhdc/otterscale/api/kubevirt/v1;pb";

// Virtual Machine Management Service for KubeVirt
service KubeVirtService {
  // Virtual Machine Operations
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine);
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine);
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse);
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (VirtualMachine);
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (google.protobuf.Empty);
  // Virtual Machine Control Operations
  rpc StartVirtualMachine(StartVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc StopVirtualMachine(StopVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc PauseVirtualMachine(PauseVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc ResumeVirtualMachine(ResumeVirtualMachineRequest) returns (google.protobuf.Empty);
  // Virtual Machine Advanced Operations
  rpc CloneVirtualMachine(CloneVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc SnapshotVirtualMachine(SnapshotVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc RestoreVirtualMachine(RestoreVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc GetVirtualMachineSnapshot(GetVirtualMachineSnapshotRequest) returns (VirtualMachineSnapshot);
  rpc ListVirtualMachineSnapshots(ListVirtualMachineSnapshotsRequest) returns (ListVirtualMachineSnapshotsResponse);
  rpc DeleteVirtualMachineSnapshot(DeleteVirtualMachineSnapshotRequest) returns (google.protobuf.Empty);
  // Data Volume Operations
  rpc CreateDataVolume(CreateDataVolumeRequest) returns (DataVolume);
  rpc GetDataVolume(GetDataVolumeRequest) returns (DataVolume);
  rpc ListDataVolumes(ListDataVolumesRequest) returns (ListDataVolumesResponse);
  rpc DeleteDataVolume(DeleteDataVolumeRequest) returns (google.protobuf.Empty);
  rpc ExtendDataVolume(ExtendDataVolumeRequest) returns (google.protobuf.Empty);
  // VMService Operations
  rpc CreateVirtualMachineService(CreateVirtualMachineServiceRequest) returns (VirtualMachineService);
  rpc GetVirtualMachineService(GetVirtualMachineServiceRequest) returns (VirtualMachineService);
  rpc ListVirtualMachineServices(ListVirtualMachineServicesRequest) returns (ListVirtualMachineServicesResponse);
  rpc UpdateVirtualMachineService(UpdateVirtualMachineServiceRequest) returns (VirtualMachineService);
  rpc DeleteVirtualMachineService(DeleteVirtualMachineServiceRequest) returns (google.protobuf.Empty);
  // InstanceType Operations
  rpc CreateInstanceType(CreateInstanceTypeRequest) returns (InstanceType);
  rpc GetInstanceType(GetInstanceTypeRequest) returns (InstanceType);
  rpc ListInstanceTypes(ListInstanceTypesRequest) returns (ListInstanceTypesResponse);
  rpc DeleteInstanceType(DeleteInstanceTypeRequest) returns (google.protobuf.Empty);
}

// Common messages
message Metadata {
  string name = 1;
  string namespace = 2;
  map<string, string> labels = 3;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Virtual Machine messages
message VirtualMachine {
  Metadata metadata = 1;
  string network_name = 11;
  string startup_script = 12;
  string node_name = 13;
  VirtualMachineResources resoureces = 21;
  repeated VirtualMachineDisk disks = 22; 
  string status_phase  = 31;
}

message VirtualMachineSnapshot{
  string name = 1;
  string namespace = 2;
  string source_name = 3;
  string source_namespace = 4;
  google.protobuf.Timestamp created_at = 5;
  string description = 6;
  string status_phase  = 11;
  string last_condition_message = 12;
  string last_condition_reason = 13;
}

message VirtualMachineResources{
  uint32 cpu_cores = 1;
  int64 memory_bytes = 2;
}

// Resource definitions
message InstanceType {
  Metadata metadata = 1;
  float cpu_cores = 2;
  int64 memory_bytes = 3;
}

message DataVolume {
  Metadata metadata = 1;
  string source = 2;
  string type = 3;
  int64 size_bytes = 4;
  string access_mode = 5;
  string storage_class = 6;
  string status_phase = 7;
  string status_progress = 8;
  string status_claim_name = 9;
  string last_condition_message = 10;
  string last_condition_reason = 11;
  string last_condition_status = 12;
}

message VirtualMachineService {
  Metadata metadata = 1;
  VirtualMachineServiceSpec   spec   = 11;
  VirtualMachineServiceStatus status = 12;
}

message VirtualMachineServiceSpec {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    NODE_PORT        = 2;
    LOAD_BALANCER    = 3;
  }

  string virtual_machine_name = 1;
  Type type = 2;
  repeated ServicePort ports = 11;
  map<string, string> selector = 21;
}

message ServicePort {
  enum Protocol {
    PROTOCOL_UNSPECIFIED = 0;
    TCP  = 1;
    UDP  = 2;
  }

  string name = 1;
  int32  port = 2;
  Protocol protocol = 4;
  int32  node_port = 5;
}

message VirtualMachineServiceStatus {
  string           cluster_ip             = 1; 
  repeated string  cluster_ips            = 2; 
  repeated string  load_balancer_ingress  = 3; 
}

// Request/Response messages
message ListVirtualMachinesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListVirtualMachinesResponse {
  repeated VirtualMachine virtualMachines = 1;
}

message GetVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message VirtualMachineDisk {
  enum type {
      UNSPECIFIED = 0;
      DATAVOLUME = 1;
      PERSISTENTVOLUMECLAIM = 2;
      CONFIGMAP = 3;
      SECRET = 4;
      CLOUDINITNOCLOUD = 5;
  }
  string name = 1;
  type disk_type = 2;
  string bus = 3;
  string source = 4;
}

message CreateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string network_name = 5;
  string startup_script = 6;
  map<string, string> labels = 11;
  repeated VirtualMachineDisk disks = 21;
  oneof resources {
    string instancetype = 31;
    VirtualMachineResources custom = 32;
  }
}

message UpdateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string network_name = 5;
  map<string, string> labels = 11;
  repeated VirtualMachineDisk disks = 31;
}

message DeleteVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message StartVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message StopVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message PauseVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message ResumeVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message SnapshotVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string snapshot_name = 5;
  string description = 11;
}

message CloneVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string target_name = 3;
  string target_namespace = 4;
  string source_name = 5;
  string source_namespace = 6;
}

message RestoreVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string snapshot_name = 5;
}

message MigrateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string target_node = 5;
}

message GetVirtualMachineSnapshotRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message ListVirtualMachineSnapshotsRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string vmName = 4;
}

message DeleteVirtualMachineSnapshotRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message ListVirtualMachineSnapshotsResponse {
  repeated VirtualMachineSnapshot snapshots = 1;
}

message CreateDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  DataVolume data_volume = 3;
  bool is_bootable = 4;
}

message ListDataVolumesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListDataVolumesResponse {
  repeated DataVolume datavolumes = 1;
}

message GetDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message DeleteDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message ExtendDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  int64 size_bytes = 5;
}

message CreateVirtualMachineServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  VirtualMachineService virtual_machine_service = 4; 
}

message ListVirtualMachineServicesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListVirtualMachineServicesResponse {
  repeated VirtualMachineService virtual_machine_services = 1;
}

message GetVirtualMachineServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message UpdateVirtualMachineServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  VirtualMachineService virtual_machine_service = 5;
}

message DeleteVirtualMachineServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message CreateInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  InstanceType instanceType = 3;
}

message ListInstanceTypesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
}

message ListInstanceTypesResponse {
  repeated InstanceType instanceTypes = 1;
}

message GetInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
}

message DeleteInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
}
