edition = "2023";

package otterscale.kubevirt.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/openhdc/otterscale/api/kubevirt/v1;pb";

// Virtual Machine Management Service for KubeVirt
service KubeVirtService {
  // Virtual Machine Operations
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine);
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine);
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse);
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (VirtualMachine);
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (google.protobuf.Empty);
  // Virtual Machine Control Operations
  rpc StartVirtualMachine(StartVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc StopVirtualMachine(StopVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc PauseVirtualMachine(PauseVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc UnpauseVirtualMachine(UnpauseVirtualMachineRequest) returns (google.protobuf.Empty);
  // Virtual Machine Advanced Operations
  rpc CloneVirtualMachine(CloneVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc SnapshotVirtualMachine(SnapshotVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc RestoreVirtualMachine(RestoreVirtualMachineRequest) returns (google.protobuf.Empty);
  rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (google.protobuf.Empty);
  // Data Volume Operations
  rpc CreateDataVolume(CreateDataVolumeRequest) returns (DataVolume);
  rpc GetDataVolume(GetDataVolumeRequest) returns (DataVolume);
  rpc ListDataVolumes(ListDataVolumesRequest) returns (ListDataVolumesResponse);
  rpc DeleteDataVolume(DeleteDataVolumeRequest) returns (google.protobuf.Empty);
  rpc ExtendDataVolume(ExtendDataVolumeRequest) returns (google.protobuf.Empty);
  // VMService Operations
  rpc CreateVMService(CreateVMServiceRequest) returns (KubeVirtVMService);
  rpc GetVMService(GetVMServiceRequest) returns (KubeVirtVMService);
  rpc ListVMServices(ListVMServicesRequest) returns (ListVMServicesResponse);
  rpc UpdateVMService(UpdateVMServiceRequest) returns (KubeVirtVMService);
  rpc DeleteVMService(DeleteVMServiceRequest) returns (google.protobuf.Empty);
  // InstanceType Operations
  rpc CreateInstanceType(CreateInstanceTypeRequest) returns (InstanceType);
  rpc GetInstanceType(GetInstanceTypeRequest) returns (InstanceType);
  rpc ListInstanceTypes(ListInstanceTypesRequest) returns (ListInstanceTypesResponse);
  rpc DeleteInstanceType(DeleteInstanceTypeRequest) returns (google.protobuf.Empty);
}

// Common messages
message Metadata {
  string name = 1;
  string namespace = 2;
  map<string, string> labels = 3;
  map<string, string> annotations = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

// Virtual Machine messages
message VirtualMachine {
  enum Status {
    UNSPECIFIED = 0;
    PROVISIONING = 1;
    STARTING = 2;
    RUNNING = 3;
    TERMINATING = 4;
    STOPPED = 5;
    PAUSED = 6;
    MIGRATING = 7;
  }
  message Operation{
    message Result {
      enum Status {
        UNSPECIFIED = 0;
        IN_PROGRESS = 1;
        SUCCEEDED = 2;
        FAILED = 3;
      }
      Status status = 1;
      string message = 2;
      string reason = 3;
    }
    string name = 1;
    string type = 2;
    string description = 3;
    google.protobuf.Timestamp created_at = 4;
    Result status = 11;
  }

  Metadata metadata = 1;
  VirtualMachineSpec spec = 11;
  Status status = 12;
  repeated Operation snapshots = 21;
  repeated Operation clones = 22;
  repeated Operation migrates = 23;
  repeated Operation restores = 24;
}

message VirtualMachineSpec {
  string instanceType_name = 1;
  string network_name = 2;
  string startup_script = 3;
  repeated string data_volumes = 11;
  // usb, pcie, disk ...
  repeated Device devices = 12;
}

// Resource definitions
message InstanceType {
  Metadata metadata = 1;
  float cpu_cores = 2;
  int64 memory_bytes = 3;
}

message DataVolume {
  Metadata metadata = 1;
  string source = 2;
  string type = 3;
  int64 size_bytes = 4;
}

message KubeVirtVMService {
  Metadata metadata = 1;
  KubeVirtVMServiceSpec   spec   = 11;
  KubeVirtVMServiceStatus status = 12;
}

message KubeVirtVMServiceSpec {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    CLUSTER_IP       = 1;
    NODE_PORT        = 2;
    LOAD_BALANCER    = 3;
  }

  enum Protocol {
    PROTOCOL_UNSPECIFIED = 0;
    TCP  = 1;
    UDP  = 2;
  }

  string v_m_name = 1;
  Type type = 2;
  repeated ServicePort ports = 11;
  map<string, string> selector = 21;
}

message ServicePort {
  string name = 1;
  int32  port = 2;
  string target_port = 3;
  KubeVirtVMServiceSpec.Protocol protocol = 4;
  int32  node_port = 5;
}

message KubeVirtVMServiceStatus {
  string           cluster_ip             = 1; 
  repeated string  cluster_ips            = 2; 
  repeated string  load_balancer_ingress  = 3; 
}

message Device {
  string name = 1;
  string type = 2;
}

// Request/Response messages
message ListVirtualMachinesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListVirtualMachinesResponse {
  repeated VirtualMachine virtualMachines = 1;
}

message GetVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message CreateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  Metadata metadata = 3;
  VirtualMachineSpec spec = 4;
}

message UpdateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string instanceType_name = 5;
  string network_name = 6;
  string startup_script = 7;

  map<string, string> labels = 11;
  map<string, string> annotations = 12;

  repeated string data_volumes = 21;
  repeated Device devices = 22;
}

message DeleteVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message StartVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message StopVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message PauseVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message UnpauseVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message SnapshotVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string snapshot_name = 5;
}

message CloneVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string target_name = 3;
  string target_namespace = 4;
  string source_name = 5;
  string source_namespace = 6;
}

message RestoreVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  string snapshot_name = 5;
}

message MigrateVirtualMachineRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  // [TODO]
  string target_node = 5;
}

message CreateDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  DataVolume data_volume = 3;
}

message ListDataVolumesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListDataVolumesResponse {
  repeated DataVolume datavolumes = 1;
}

message GetDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message DeleteDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message ExtendDataVolumeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  int64 size_bytes = 5;
}

message CreateVMServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  KubeVirtVMService v_m_service = 4; 
}

message ListVMServicesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
}

message ListVMServicesResponse {
  repeated KubeVirtVMService v_m_services = 1;
}

message GetVMServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message UpdateVMServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
  KubeVirtVMService v_m_service = 5;
}

message DeleteVMServiceRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
  string namespace = 4;
}

message CreateInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  InstanceType instanceType = 3;
}

message ListInstanceTypesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
}

message ListInstanceTypesResponse {
  repeated InstanceType instanceTypes = 1;
}

message GetInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
}

message DeleteInstanceTypeRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string name = 3;
}
