// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kube/v1/kube.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/openhdc/api/kube/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubeServiceName is the fully-qualified name of the KubeService service.
	KubeServiceName = "openhdc.kube.v1.KubeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubeServiceInstallReleaseProcedure is the fully-qualified name of the KubeService's
	// InstallRelease RPC.
	KubeServiceInstallReleaseProcedure = "/openhdc.kube.v1.KubeService/InstallRelease"
	// KubeServiceUninstallReleaseProcedure is the fully-qualified name of the KubeService's
	// UninstallRelease RPC.
	KubeServiceUninstallReleaseProcedure = "/openhdc.kube.v1.KubeService/UninstallRelease"
	// KubeServiceUpgradeReleaseProcedure is the fully-qualified name of the KubeService's
	// UpgradeRelease RPC.
	KubeServiceUpgradeReleaseProcedure = "/openhdc.kube.v1.KubeService/UpgradeRelease"
	// KubeServiceRollbackReleaseProcedure is the fully-qualified name of the KubeService's
	// RollbackRelease RPC.
	KubeServiceRollbackReleaseProcedure = "/openhdc.kube.v1.KubeService/RollbackRelease"
	// KubeServiceListRepositoriesProcedure is the fully-qualified name of the KubeService's
	// ListRepositories RPC.
	KubeServiceListRepositoriesProcedure = "/openhdc.kube.v1.KubeService/ListRepositories"
	// KubeServiceUpdateRepositoryChartsProcedure is the fully-qualified name of the KubeService's
	// UpdateRepositoryCharts RPC.
	KubeServiceUpdateRepositoryChartsProcedure = "/openhdc.kube.v1.KubeService/UpdateRepositoryCharts"
	// KubeServiceListChartsProcedure is the fully-qualified name of the KubeService's ListCharts RPC.
	KubeServiceListChartsProcedure = "/openhdc.kube.v1.KubeService/ListCharts"
	// KubeServiceGetChartProcedure is the fully-qualified name of the KubeService's GetChart RPC.
	KubeServiceGetChartProcedure = "/openhdc.kube.v1.KubeService/GetChart"
	// KubeServiceListApplicationsProcedure is the fully-qualified name of the KubeService's
	// ListApplications RPC.
	KubeServiceListApplicationsProcedure = "/openhdc.kube.v1.KubeService/ListApplications"
	// KubeServiceGetApplicationProcedure is the fully-qualified name of the KubeService's
	// GetApplication RPC.
	KubeServiceGetApplicationProcedure = "/openhdc.kube.v1.KubeService/GetApplication"
)

// KubeServiceClient is a client for the openhdc.kube.v1.KubeService service.
type KubeServiceClient interface {
	// Helm Release
	InstallRelease(context.Context, *connect.Request[v1.InstallReleaseRequest]) (*connect.Response[v1.Release], error)
	UninstallRelease(context.Context, *connect.Request[v1.UninstallReleaseRequest]) (*connect.Response[v1.Release], error)
	UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	// Helm Repository
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	UpdateRepositoryCharts(context.Context, *connect.Request[v1.UpdateRepositoryChartsRequest]) (*connect.Response[v1.Repository], error)
	// App Store
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
	GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Chart], error)
	// Native
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
}

// NewKubeServiceClient constructs a client for the openhdc.kube.v1.KubeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubeServiceMethods := v1.File_api_kube_v1_kube_proto.Services().ByName("KubeService").Methods()
	return &kubeServiceClient{
		installRelease: connect.NewClient[v1.InstallReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceInstallReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("InstallRelease")),
			connect.WithClientOptions(opts...),
		),
		uninstallRelease: connect.NewClient[v1.UninstallReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceUninstallReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("UninstallRelease")),
			connect.WithClientOptions(opts...),
		),
		upgradeRelease: connect.NewClient[v1.UpgradeReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceUpgradeReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("UpgradeRelease")),
			connect.WithClientOptions(opts...),
		),
		rollbackRelease: connect.NewClient[v1.RollbackReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeServiceRollbackReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("RollbackRelease")),
			connect.WithClientOptions(opts...),
		),
		listRepositories: connect.NewClient[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse](
			httpClient,
			baseURL+KubeServiceListRepositoriesProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListRepositories")),
			connect.WithClientOptions(opts...),
		),
		updateRepositoryCharts: connect.NewClient[v1.UpdateRepositoryChartsRequest, v1.Repository](
			httpClient,
			baseURL+KubeServiceUpdateRepositoryChartsProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("UpdateRepositoryCharts")),
			connect.WithClientOptions(opts...),
		),
		listCharts: connect.NewClient[v1.ListChartsRequest, v1.ListChartsResponse](
			httpClient,
			baseURL+KubeServiceListChartsProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListCharts")),
			connect.WithClientOptions(opts...),
		),
		getChart: connect.NewClient[v1.GetChartRequest, v1.Chart](
			httpClient,
			baseURL+KubeServiceGetChartProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("GetChart")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+KubeServiceListApplicationsProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.Application](
			httpClient,
			baseURL+KubeServiceGetApplicationProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubeServiceClient implements KubeServiceClient.
type kubeServiceClient struct {
	installRelease         *connect.Client[v1.InstallReleaseRequest, v1.Release]
	uninstallRelease       *connect.Client[v1.UninstallReleaseRequest, v1.Release]
	upgradeRelease         *connect.Client[v1.UpgradeReleaseRequest, v1.Release]
	rollbackRelease        *connect.Client[v1.RollbackReleaseRequest, emptypb.Empty]
	listRepositories       *connect.Client[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse]
	updateRepositoryCharts *connect.Client[v1.UpdateRepositoryChartsRequest, v1.Repository]
	listCharts             *connect.Client[v1.ListChartsRequest, v1.ListChartsResponse]
	getChart               *connect.Client[v1.GetChartRequest, v1.Chart]
	listApplications       *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	getApplication         *connect.Client[v1.GetApplicationRequest, v1.Application]
}

// InstallRelease calls openhdc.kube.v1.KubeService.InstallRelease.
func (c *kubeServiceClient) InstallRelease(ctx context.Context, req *connect.Request[v1.InstallReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.installRelease.CallUnary(ctx, req)
}

// UninstallRelease calls openhdc.kube.v1.KubeService.UninstallRelease.
func (c *kubeServiceClient) UninstallRelease(ctx context.Context, req *connect.Request[v1.UninstallReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.uninstallRelease.CallUnary(ctx, req)
}

// UpgradeRelease calls openhdc.kube.v1.KubeService.UpgradeRelease.
func (c *kubeServiceClient) UpgradeRelease(ctx context.Context, req *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.upgradeRelease.CallUnary(ctx, req)
}

// RollbackRelease calls openhdc.kube.v1.KubeService.RollbackRelease.
func (c *kubeServiceClient) RollbackRelease(ctx context.Context, req *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.rollbackRelease.CallUnary(ctx, req)
}

// ListRepositories calls openhdc.kube.v1.KubeService.ListRepositories.
func (c *kubeServiceClient) ListRepositories(ctx context.Context, req *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return c.listRepositories.CallUnary(ctx, req)
}

// UpdateRepositoryCharts calls openhdc.kube.v1.KubeService.UpdateRepositoryCharts.
func (c *kubeServiceClient) UpdateRepositoryCharts(ctx context.Context, req *connect.Request[v1.UpdateRepositoryChartsRequest]) (*connect.Response[v1.Repository], error) {
	return c.updateRepositoryCharts.CallUnary(ctx, req)
}

// ListCharts calls openhdc.kube.v1.KubeService.ListCharts.
func (c *kubeServiceClient) ListCharts(ctx context.Context, req *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return c.listCharts.CallUnary(ctx, req)
}

// GetChart calls openhdc.kube.v1.KubeService.GetChart.
func (c *kubeServiceClient) GetChart(ctx context.Context, req *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Chart], error) {
	return c.getChart.CallUnary(ctx, req)
}

// ListApplications calls openhdc.kube.v1.KubeService.ListApplications.
func (c *kubeServiceClient) ListApplications(ctx context.Context, req *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// GetApplication calls openhdc.kube.v1.KubeService.GetApplication.
func (c *kubeServiceClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// KubeServiceHandler is an implementation of the openhdc.kube.v1.KubeService service.
type KubeServiceHandler interface {
	// Helm Release
	InstallRelease(context.Context, *connect.Request[v1.InstallReleaseRequest]) (*connect.Response[v1.Release], error)
	UninstallRelease(context.Context, *connect.Request[v1.UninstallReleaseRequest]) (*connect.Response[v1.Release], error)
	UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	// Helm Repository
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	UpdateRepositoryCharts(context.Context, *connect.Request[v1.UpdateRepositoryChartsRequest]) (*connect.Response[v1.Repository], error)
	// App Store
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
	GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Chart], error)
	// Native
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
}

// NewKubeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubeServiceHandler(svc KubeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubeServiceMethods := v1.File_api_kube_v1_kube_proto.Services().ByName("KubeService").Methods()
	kubeServiceInstallReleaseHandler := connect.NewUnaryHandler(
		KubeServiceInstallReleaseProcedure,
		svc.InstallRelease,
		connect.WithSchema(kubeServiceMethods.ByName("InstallRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceUninstallReleaseHandler := connect.NewUnaryHandler(
		KubeServiceUninstallReleaseProcedure,
		svc.UninstallRelease,
		connect.WithSchema(kubeServiceMethods.ByName("UninstallRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceUpgradeReleaseHandler := connect.NewUnaryHandler(
		KubeServiceUpgradeReleaseProcedure,
		svc.UpgradeRelease,
		connect.WithSchema(kubeServiceMethods.ByName("UpgradeRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceRollbackReleaseHandler := connect.NewUnaryHandler(
		KubeServiceRollbackReleaseProcedure,
		svc.RollbackRelease,
		connect.WithSchema(kubeServiceMethods.ByName("RollbackRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceListRepositoriesHandler := connect.NewUnaryHandler(
		KubeServiceListRepositoriesProcedure,
		svc.ListRepositories,
		connect.WithSchema(kubeServiceMethods.ByName("ListRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceUpdateRepositoryChartsHandler := connect.NewUnaryHandler(
		KubeServiceUpdateRepositoryChartsProcedure,
		svc.UpdateRepositoryCharts,
		connect.WithSchema(kubeServiceMethods.ByName("UpdateRepositoryCharts")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceListChartsHandler := connect.NewUnaryHandler(
		KubeServiceListChartsProcedure,
		svc.ListCharts,
		connect.WithSchema(kubeServiceMethods.ByName("ListCharts")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceGetChartHandler := connect.NewUnaryHandler(
		KubeServiceGetChartProcedure,
		svc.GetChart,
		connect.WithSchema(kubeServiceMethods.ByName("GetChart")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceListApplicationsHandler := connect.NewUnaryHandler(
		KubeServiceListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(kubeServiceMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceGetApplicationHandler := connect.NewUnaryHandler(
		KubeServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(kubeServiceMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openhdc.kube.v1.KubeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubeServiceInstallReleaseProcedure:
			kubeServiceInstallReleaseHandler.ServeHTTP(w, r)
		case KubeServiceUninstallReleaseProcedure:
			kubeServiceUninstallReleaseHandler.ServeHTTP(w, r)
		case KubeServiceUpgradeReleaseProcedure:
			kubeServiceUpgradeReleaseHandler.ServeHTTP(w, r)
		case KubeServiceRollbackReleaseProcedure:
			kubeServiceRollbackReleaseHandler.ServeHTTP(w, r)
		case KubeServiceListRepositoriesProcedure:
			kubeServiceListRepositoriesHandler.ServeHTTP(w, r)
		case KubeServiceUpdateRepositoryChartsProcedure:
			kubeServiceUpdateRepositoryChartsHandler.ServeHTTP(w, r)
		case KubeServiceListChartsProcedure:
			kubeServiceListChartsHandler.ServeHTTP(w, r)
		case KubeServiceGetChartProcedure:
			kubeServiceGetChartHandler.ServeHTTP(w, r)
		case KubeServiceListApplicationsProcedure:
			kubeServiceListApplicationsHandler.ServeHTTP(w, r)
		case KubeServiceGetApplicationProcedure:
			kubeServiceGetApplicationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubeServiceHandler struct{}

func (UnimplementedKubeServiceHandler) InstallRelease(context.Context, *connect.Request[v1.InstallReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.InstallRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) UninstallRelease(context.Context, *connect.Request[v1.UninstallReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.UninstallRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.UpgradeRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.RollbackRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListRepositories is not implemented"))
}

func (UnimplementedKubeServiceHandler) UpdateRepositoryCharts(context.Context, *connect.Request[v1.UpdateRepositoryChartsRequest]) (*connect.Response[v1.Repository], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.UpdateRepositoryCharts is not implemented"))
}

func (UnimplementedKubeServiceHandler) ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListCharts is not implemented"))
}

func (UnimplementedKubeServiceHandler) GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Chart], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.GetChart is not implemented"))
}

func (UnimplementedKubeServiceHandler) ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListApplications is not implemented"))
}

func (UnimplementedKubeServiceHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.GetApplication is not implemented"))
}
