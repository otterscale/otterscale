// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/kube/v1/kube.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/openhdc/api/kube/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubeServiceName is the fully-qualified name of the KubeService service.
	KubeServiceName = "openhdc.kube.v1.KubeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubeServiceListReleasesProcedure is the fully-qualified name of the KubeService's ListReleases
	// RPC.
	KubeServiceListReleasesProcedure = "/openhdc.kube.v1.KubeService/ListReleases"
	// KubeServiceCreateReleaseProcedure is the fully-qualified name of the KubeService's CreateRelease
	// RPC.
	KubeServiceCreateReleaseProcedure = "/openhdc.kube.v1.KubeService/CreateRelease"
	// KubeServiceDeleteReleaseProcedure is the fully-qualified name of the KubeService's DeleteRelease
	// RPC.
	KubeServiceDeleteReleaseProcedure = "/openhdc.kube.v1.KubeService/DeleteRelease"
	// KubeServiceUpgradeReleaseProcedure is the fully-qualified name of the KubeService's
	// UpgradeRelease RPC.
	KubeServiceUpgradeReleaseProcedure = "/openhdc.kube.v1.KubeService/UpgradeRelease"
	// KubeServiceRollbackReleaseProcedure is the fully-qualified name of the KubeService's
	// RollbackRelease RPC.
	KubeServiceRollbackReleaseProcedure = "/openhdc.kube.v1.KubeService/RollbackRelease"
	// KubeServiceListRepositoriesProcedure is the fully-qualified name of the KubeService's
	// ListRepositories RPC.
	KubeServiceListRepositoriesProcedure = "/openhdc.kube.v1.KubeService/ListRepositories"
	// KubeServiceCreateRepositoryProcedure is the fully-qualified name of the KubeService's
	// CreateRepository RPC.
	KubeServiceCreateRepositoryProcedure = "/openhdc.kube.v1.KubeService/CreateRepository"
	// KubeServiceUpdateRepositoryProcedure is the fully-qualified name of the KubeService's
	// UpdateRepository RPC.
	KubeServiceUpdateRepositoryProcedure = "/openhdc.kube.v1.KubeService/UpdateRepository"
	// KubeServiceDeleteRepositoryProcedure is the fully-qualified name of the KubeService's
	// DeleteRepository RPC.
	KubeServiceDeleteRepositoryProcedure = "/openhdc.kube.v1.KubeService/DeleteRepository"
	// KubeServiceListApplicationsProcedure is the fully-qualified name of the KubeService's
	// ListApplications RPC.
	KubeServiceListApplicationsProcedure = "/openhdc.kube.v1.KubeService/ListApplications"
	// KubeServiceGetApplicationProcedure is the fully-qualified name of the KubeService's
	// GetApplication RPC.
	KubeServiceGetApplicationProcedure = "/openhdc.kube.v1.KubeService/GetApplication"
)

// KubeServiceClient is a client for the openhdc.kube.v1.KubeService service.
type KubeServiceClient interface {
	// Helm Release
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[v1.Release], error)
	// Helm Repository
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	CreateRepository(context.Context, *connect.Request[v1.CreateRepositoryRequest]) (*connect.Response[v1.Repository], error)
	UpdateRepository(context.Context, *connect.Request[v1.UpdateRepositoryRequest]) (*connect.Response[v1.Repository], error)
	DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[emptypb.Empty], error)
	// Native
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
}

// NewKubeServiceClient constructs a client for the openhdc.kube.v1.KubeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubeServiceMethods := v1.File_api_kube_v1_kube_proto.Services().ByName("KubeService").Methods()
	return &kubeServiceClient{
		listReleases: connect.NewClient[v1.ListReleasesRequest, v1.ListReleasesResponse](
			httpClient,
			baseURL+KubeServiceListReleasesProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListReleases")),
			connect.WithClientOptions(opts...),
		),
		createRelease: connect.NewClient[v1.CreateReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceCreateReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("CreateRelease")),
			connect.WithClientOptions(opts...),
		),
		deleteRelease: connect.NewClient[v1.DeleteReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeServiceDeleteReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("DeleteRelease")),
			connect.WithClientOptions(opts...),
		),
		upgradeRelease: connect.NewClient[v1.UpgradeReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceUpgradeReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("UpgradeRelease")),
			connect.WithClientOptions(opts...),
		),
		rollbackRelease: connect.NewClient[v1.RollbackReleaseRequest, v1.Release](
			httpClient,
			baseURL+KubeServiceRollbackReleaseProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("RollbackRelease")),
			connect.WithClientOptions(opts...),
		),
		listRepositories: connect.NewClient[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse](
			httpClient,
			baseURL+KubeServiceListRepositoriesProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListRepositories")),
			connect.WithClientOptions(opts...),
		),
		createRepository: connect.NewClient[v1.CreateRepositoryRequest, v1.Repository](
			httpClient,
			baseURL+KubeServiceCreateRepositoryProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("CreateRepository")),
			connect.WithClientOptions(opts...),
		),
		updateRepository: connect.NewClient[v1.UpdateRepositoryRequest, v1.Repository](
			httpClient,
			baseURL+KubeServiceUpdateRepositoryProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("UpdateRepository")),
			connect.WithClientOptions(opts...),
		),
		deleteRepository: connect.NewClient[v1.DeleteRepositoryRequest, emptypb.Empty](
			httpClient,
			baseURL+KubeServiceDeleteRepositoryProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("DeleteRepository")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+KubeServiceListApplicationsProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.Application](
			httpClient,
			baseURL+KubeServiceGetApplicationProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubeServiceClient implements KubeServiceClient.
type kubeServiceClient struct {
	listReleases     *connect.Client[v1.ListReleasesRequest, v1.ListReleasesResponse]
	createRelease    *connect.Client[v1.CreateReleaseRequest, v1.Release]
	deleteRelease    *connect.Client[v1.DeleteReleaseRequest, emptypb.Empty]
	upgradeRelease   *connect.Client[v1.UpgradeReleaseRequest, v1.Release]
	rollbackRelease  *connect.Client[v1.RollbackReleaseRequest, v1.Release]
	listRepositories *connect.Client[v1.ListRepositoriesRequest, v1.ListRepositoriesResponse]
	createRepository *connect.Client[v1.CreateRepositoryRequest, v1.Repository]
	updateRepository *connect.Client[v1.UpdateRepositoryRequest, v1.Repository]
	deleteRepository *connect.Client[v1.DeleteRepositoryRequest, emptypb.Empty]
	listApplications *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	getApplication   *connect.Client[v1.GetApplicationRequest, v1.Application]
}

// ListReleases calls openhdc.kube.v1.KubeService.ListReleases.
func (c *kubeServiceClient) ListReleases(ctx context.Context, req *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return c.listReleases.CallUnary(ctx, req)
}

// CreateRelease calls openhdc.kube.v1.KubeService.CreateRelease.
func (c *kubeServiceClient) CreateRelease(ctx context.Context, req *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.createRelease.CallUnary(ctx, req)
}

// DeleteRelease calls openhdc.kube.v1.KubeService.DeleteRelease.
func (c *kubeServiceClient) DeleteRelease(ctx context.Context, req *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRelease.CallUnary(ctx, req)
}

// UpgradeRelease calls openhdc.kube.v1.KubeService.UpgradeRelease.
func (c *kubeServiceClient) UpgradeRelease(ctx context.Context, req *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.upgradeRelease.CallUnary(ctx, req)
}

// RollbackRelease calls openhdc.kube.v1.KubeService.RollbackRelease.
func (c *kubeServiceClient) RollbackRelease(ctx context.Context, req *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.rollbackRelease.CallUnary(ctx, req)
}

// ListRepositories calls openhdc.kube.v1.KubeService.ListRepositories.
func (c *kubeServiceClient) ListRepositories(ctx context.Context, req *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return c.listRepositories.CallUnary(ctx, req)
}

// CreateRepository calls openhdc.kube.v1.KubeService.CreateRepository.
func (c *kubeServiceClient) CreateRepository(ctx context.Context, req *connect.Request[v1.CreateRepositoryRequest]) (*connect.Response[v1.Repository], error) {
	return c.createRepository.CallUnary(ctx, req)
}

// UpdateRepository calls openhdc.kube.v1.KubeService.UpdateRepository.
func (c *kubeServiceClient) UpdateRepository(ctx context.Context, req *connect.Request[v1.UpdateRepositoryRequest]) (*connect.Response[v1.Repository], error) {
	return c.updateRepository.CallUnary(ctx, req)
}

// DeleteRepository calls openhdc.kube.v1.KubeService.DeleteRepository.
func (c *kubeServiceClient) DeleteRepository(ctx context.Context, req *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRepository.CallUnary(ctx, req)
}

// ListApplications calls openhdc.kube.v1.KubeService.ListApplications.
func (c *kubeServiceClient) ListApplications(ctx context.Context, req *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// GetApplication calls openhdc.kube.v1.KubeService.GetApplication.
func (c *kubeServiceClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// KubeServiceHandler is an implementation of the openhdc.kube.v1.KubeService service.
type KubeServiceHandler interface {
	// Helm Release
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[v1.Release], error)
	// Helm Repository
	ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error)
	CreateRepository(context.Context, *connect.Request[v1.CreateRepositoryRequest]) (*connect.Response[v1.Repository], error)
	UpdateRepository(context.Context, *connect.Request[v1.UpdateRepositoryRequest]) (*connect.Response[v1.Repository], error)
	DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[emptypb.Empty], error)
	// Native
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
}

// NewKubeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubeServiceHandler(svc KubeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubeServiceMethods := v1.File_api_kube_v1_kube_proto.Services().ByName("KubeService").Methods()
	kubeServiceListReleasesHandler := connect.NewUnaryHandler(
		KubeServiceListReleasesProcedure,
		svc.ListReleases,
		connect.WithSchema(kubeServiceMethods.ByName("ListReleases")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceCreateReleaseHandler := connect.NewUnaryHandler(
		KubeServiceCreateReleaseProcedure,
		svc.CreateRelease,
		connect.WithSchema(kubeServiceMethods.ByName("CreateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceDeleteReleaseHandler := connect.NewUnaryHandler(
		KubeServiceDeleteReleaseProcedure,
		svc.DeleteRelease,
		connect.WithSchema(kubeServiceMethods.ByName("DeleteRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceUpgradeReleaseHandler := connect.NewUnaryHandler(
		KubeServiceUpgradeReleaseProcedure,
		svc.UpgradeRelease,
		connect.WithSchema(kubeServiceMethods.ByName("UpgradeRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceRollbackReleaseHandler := connect.NewUnaryHandler(
		KubeServiceRollbackReleaseProcedure,
		svc.RollbackRelease,
		connect.WithSchema(kubeServiceMethods.ByName("RollbackRelease")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceListRepositoriesHandler := connect.NewUnaryHandler(
		KubeServiceListRepositoriesProcedure,
		svc.ListRepositories,
		connect.WithSchema(kubeServiceMethods.ByName("ListRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceCreateRepositoryHandler := connect.NewUnaryHandler(
		KubeServiceCreateRepositoryProcedure,
		svc.CreateRepository,
		connect.WithSchema(kubeServiceMethods.ByName("CreateRepository")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceUpdateRepositoryHandler := connect.NewUnaryHandler(
		KubeServiceUpdateRepositoryProcedure,
		svc.UpdateRepository,
		connect.WithSchema(kubeServiceMethods.ByName("UpdateRepository")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceDeleteRepositoryHandler := connect.NewUnaryHandler(
		KubeServiceDeleteRepositoryProcedure,
		svc.DeleteRepository,
		connect.WithSchema(kubeServiceMethods.ByName("DeleteRepository")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceListApplicationsHandler := connect.NewUnaryHandler(
		KubeServiceListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(kubeServiceMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceGetApplicationHandler := connect.NewUnaryHandler(
		KubeServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(kubeServiceMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openhdc.kube.v1.KubeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubeServiceListReleasesProcedure:
			kubeServiceListReleasesHandler.ServeHTTP(w, r)
		case KubeServiceCreateReleaseProcedure:
			kubeServiceCreateReleaseHandler.ServeHTTP(w, r)
		case KubeServiceDeleteReleaseProcedure:
			kubeServiceDeleteReleaseHandler.ServeHTTP(w, r)
		case KubeServiceUpgradeReleaseProcedure:
			kubeServiceUpgradeReleaseHandler.ServeHTTP(w, r)
		case KubeServiceRollbackReleaseProcedure:
			kubeServiceRollbackReleaseHandler.ServeHTTP(w, r)
		case KubeServiceListRepositoriesProcedure:
			kubeServiceListRepositoriesHandler.ServeHTTP(w, r)
		case KubeServiceCreateRepositoryProcedure:
			kubeServiceCreateRepositoryHandler.ServeHTTP(w, r)
		case KubeServiceUpdateRepositoryProcedure:
			kubeServiceUpdateRepositoryHandler.ServeHTTP(w, r)
		case KubeServiceDeleteRepositoryProcedure:
			kubeServiceDeleteRepositoryHandler.ServeHTTP(w, r)
		case KubeServiceListApplicationsProcedure:
			kubeServiceListApplicationsHandler.ServeHTTP(w, r)
		case KubeServiceGetApplicationProcedure:
			kubeServiceGetApplicationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubeServiceHandler struct{}

func (UnimplementedKubeServiceHandler) ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListReleases is not implemented"))
}

func (UnimplementedKubeServiceHandler) CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.CreateRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.DeleteRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) UpgradeRelease(context.Context, *connect.Request[v1.UpgradeReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.UpgradeRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.RollbackRelease is not implemented"))
}

func (UnimplementedKubeServiceHandler) ListRepositories(context.Context, *connect.Request[v1.ListRepositoriesRequest]) (*connect.Response[v1.ListRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListRepositories is not implemented"))
}

func (UnimplementedKubeServiceHandler) CreateRepository(context.Context, *connect.Request[v1.CreateRepositoryRequest]) (*connect.Response[v1.Repository], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.CreateRepository is not implemented"))
}

func (UnimplementedKubeServiceHandler) UpdateRepository(context.Context, *connect.Request[v1.UpdateRepositoryRequest]) (*connect.Response[v1.Repository], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.UpdateRepository is not implemented"))
}

func (UnimplementedKubeServiceHandler) DeleteRepository(context.Context, *connect.Request[v1.DeleteRepositoryRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.DeleteRepository is not implemented"))
}

func (UnimplementedKubeServiceHandler) ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.ListApplications is not implemented"))
}

func (UnimplementedKubeServiceHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.kube.v1.KubeService.GetApplication is not implemented"))
}
