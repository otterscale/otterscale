edition = "2024";

package otterscale.machine.v1;

import "api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/otterscale/otterscale/api/machine/v1;pb";

service MachineService {
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc GetMachine(GetMachineRequest) returns (Machine) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc CreateMachine(CreateMachineRequest) returns (Machine) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc DeleteMachine(DeleteMachineRequest) returns (google.protobuf.Empty) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc AddMachineTags(AddMachineTagsRequest) returns (google.protobuf.Empty) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc RemoveMachineTags(RemoveMachineTagsRequest) returns (google.protobuf.Empty) {
    option (otterscale.api.feature) = {
      name: "mch-general"
    };
  };

  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option (otterscale.api.feature) = {
      name: "mch-tag"
    };
  };

  rpc GetTag(GetTagRequest) returns (Tag) {
    option (otterscale.api.feature) = {
      name: "mch-tag"
    };
  };

  rpc CreateTag(CreateTagRequest) returns (Tag) {
    option (otterscale.api.feature) = {
      name: "mch-tag"
    };
  };

  rpc DeleteTag(DeleteTagRequest) returns (google.protobuf.Empty) {
    option (otterscale.api.feature) = {
      name: "mch-tag"
    };
  };
}

message Machine {
  message NUMANode {
    int64 index = 1;
    int64 cpu_cores = 2;
    int64 memory_mb = 3;
  }
  message BlockDevice {
    bool boot_disk = 1;
    string name = 11;
    string serial = 12;
    string model = 21;
    string firmware_version = 22;
    double storage_mb = 31;
    string type = 41;
    repeated string tags = 51;
    string used_for = 61;
  }
  message NetworkInterface {
    bool boot_interface = 1;
    string name = 11;
    string mac_address = 12;
    bool link_connected = 21;
    int64 link_speed = 22;
    int64 interface_speed = 23;
    string type = 31;
    string fabric_name = 41;
    int64 fabric_id = 42;
    string vlan_name = 43;
    int64 vlan_id = 44;
    string subnet_name = 51;
    int64 subnet_id = 52;
    string ip_address = 61;
    bool dhcp_on = 71;
  }
  message NodeDevice {
    string vendor_id = 1;
    string vendor_name = 2;
    string product_id = 3;
    string product_name = 4;
    string bus_name = 5;
    string pci_address = 6;
  }
  string id = 1;
  google.protobuf.Timestamp last_commissioned = 2;
  string hardware_uuid = 101;
  string hostname = 102;
  string fqdn = 103;
  repeated string tags = 104;
  string description = 105;
  string status = 201;
  string status_message = 202;
  string power_state = 301;
  string power_type = 302;
  string osystem = 401;
  string distro_series = 402;
  string hwe_kernel = 403;
  string architecture = 404;
  int64 cpu_speed = 405;
  int64 cpu_count = 406;
  int64 memory_mb = 407;
  double storage_mb = 408;
  repeated string ip_addresses = 409;
  map<string, string> workload_annotations = 501;
  map<string, string> hardware_information = 601;
  string bios_boot_method = 602;
  repeated NUMANode numa_nodes = 701;
  repeated BlockDevice block_devices = 801;
  repeated NetworkInterface network_interfaces = 802;
  repeated NodeDevice gpu_devices = 803;
}

message Tag {
  string name = 1;
  string comment = 2;
}

message ListMachinesRequest {
  string scope = 1;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message GetMachineRequest {
  string id = 1;
}

message CreateMachineRequest {
  string id = 1;
  bool enable_ssh = 2;
  bool skip_bmc_config = 3;
  bool skip_networking = 4;
  bool skip_storage = 5;
  string scope = 11;
  repeated string tags = 21;
}

message DeleteMachineRequest {
  string id = 1;
  bool force = 2;
  bool purge_disk = 3;
}

message PowerOffMachineRequest {
  string id = 1;
  string comment = 2;
}

message AddMachineTagsRequest {
  string id = 1;
  repeated string tags = 2;
}

message RemoveMachineTagsRequest {
  string id = 1;
  repeated string tags = 2;
}

message ListTagsRequest {}

message ListTagsResponse {
  repeated Tag tags = 1;
}

message GetTagRequest {
  string name = 1;
}

message CreateTagRequest {
  string name = 1;
  string comment = 2;
}

message DeleteTagRequest {
  string name = 1;
}
