// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/license/v1/license.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/license/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LicenseServiceName is the fully-qualified name of the LicenseService service.
	LicenseServiceName = "otterscale.license.v1.LicenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LicenseServiceEnterpriseProcedure is the fully-qualified name of the LicenseService's Enterprise
	// RPC.
	LicenseServiceEnterpriseProcedure = "/otterscale.license.v1.LicenseService/Enterprise"
)

// LicenseServiceClient is a client for the otterscale.license.v1.LicenseService service.
type LicenseServiceClient interface {
	Enterprise(context.Context, *connect.Request[v1.Ping]) (*connect.Response[v1.Pong], error)
}

// NewLicenseServiceClient constructs a client for the otterscale.license.v1.LicenseService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLicenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LicenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	licenseServiceMethods := v1.File_api_license_v1_license_proto.Services().ByName("LicenseService").Methods()
	return &licenseServiceClient{
		enterprise: connect.NewClient[v1.Ping, v1.Pong](
			httpClient,
			baseURL+LicenseServiceEnterpriseProcedure,
			connect.WithSchema(licenseServiceMethods.ByName("Enterprise")),
			connect.WithClientOptions(opts...),
		),
	}
}

// licenseServiceClient implements LicenseServiceClient.
type licenseServiceClient struct {
	enterprise *connect.Client[v1.Ping, v1.Pong]
}

// Enterprise calls otterscale.license.v1.LicenseService.Enterprise.
func (c *licenseServiceClient) Enterprise(ctx context.Context, req *connect.Request[v1.Ping]) (*connect.Response[v1.Pong], error) {
	return c.enterprise.CallUnary(ctx, req)
}

// LicenseServiceHandler is an implementation of the otterscale.license.v1.LicenseService service.
type LicenseServiceHandler interface {
	Enterprise(context.Context, *connect.Request[v1.Ping]) (*connect.Response[v1.Pong], error)
}

// NewLicenseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLicenseServiceHandler(svc LicenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	licenseServiceMethods := v1.File_api_license_v1_license_proto.Services().ByName("LicenseService").Methods()
	licenseServiceEnterpriseHandler := connect.NewUnaryHandler(
		LicenseServiceEnterpriseProcedure,
		svc.Enterprise,
		connect.WithSchema(licenseServiceMethods.ByName("Enterprise")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.license.v1.LicenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LicenseServiceEnterpriseProcedure:
			licenseServiceEnterpriseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLicenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLicenseServiceHandler struct{}

func (UnimplementedLicenseServiceHandler) Enterprise(context.Context, *connect.Request[v1.Ping]) (*connect.Response[v1.Pong], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.license.v1.LicenseService.Enterprise is not implemented"))
}
