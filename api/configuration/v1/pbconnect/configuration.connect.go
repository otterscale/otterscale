// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/configuration/v1/configuration.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/configuration/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "otterscale.configuration.v1.ConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigurationServiceGetConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's GetConfiguration RPC.
	ConfigurationServiceGetConfigurationProcedure = "/otterscale.configuration.v1.ConfigurationService/GetConfiguration"
	// ConfigurationServiceUpdateNTPServerProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateNTPServer RPC.
	ConfigurationServiceUpdateNTPServerProcedure = "/otterscale.configuration.v1.ConfigurationService/UpdateNTPServer"
	// ConfigurationServiceUpdatePackageRepositoryProcedure is the fully-qualified name of the
	// ConfigurationService's UpdatePackageRepository RPC.
	ConfigurationServiceUpdatePackageRepositoryProcedure = "/otterscale.configuration.v1.ConfigurationService/UpdatePackageRepository"
	// ConfigurationServiceCreateBootImageProcedure is the fully-qualified name of the
	// ConfigurationService's CreateBootImage RPC.
	ConfigurationServiceCreateBootImageProcedure = "/otterscale.configuration.v1.ConfigurationService/CreateBootImage"
	// ConfigurationServiceSetDefaultBootImageProcedure is the fully-qualified name of the
	// ConfigurationService's SetDefaultBootImage RPC.
	ConfigurationServiceSetDefaultBootImageProcedure = "/otterscale.configuration.v1.ConfigurationService/SetDefaultBootImage"
	// ConfigurationServiceImportBootImagesProcedure is the fully-qualified name of the
	// ConfigurationService's ImportBootImages RPC.
	ConfigurationServiceImportBootImagesProcedure = "/otterscale.configuration.v1.ConfigurationService/ImportBootImages"
	// ConfigurationServiceIsImportingBootImagesProcedure is the fully-qualified name of the
	// ConfigurationService's IsImportingBootImages RPC.
	ConfigurationServiceIsImportingBootImagesProcedure = "/otterscale.configuration.v1.ConfigurationService/IsImportingBootImages"
	// ConfigurationServiceListBootImageSelectionsProcedure is the fully-qualified name of the
	// ConfigurationService's ListBootImageSelections RPC.
	ConfigurationServiceListBootImageSelectionsProcedure = "/otterscale.configuration.v1.ConfigurationService/ListBootImageSelections"
)

// ConfigurationServiceClient is a client for the otterscale.configuration.v1.ConfigurationService
// service.
type ConfigurationServiceClient interface {
	GetConfiguration(context.Context, *v1.GetConfigurationRequest) (*v1.Configuration, error)
	UpdateNTPServer(context.Context, *v1.UpdateNTPServerRequest) (*v1.Configuration_NTPServer, error)
	UpdatePackageRepository(context.Context, *v1.UpdatePackageRepositoryRequest) (*v1.Configuration_PackageRepository, error)
	CreateBootImage(context.Context, *v1.CreateBootImageRequest) (*v1.Configuration_BootImage, error)
	SetDefaultBootImage(context.Context, *v1.SetDefaultBootImageRequest) (*emptypb.Empty, error)
	ImportBootImages(context.Context, *v1.ImportBootImagesRequest) (*emptypb.Empty, error)
	IsImportingBootImages(context.Context, *v1.IsImportingBootImagesRequest) (*v1.IsImportingBootImagesResponse, error)
	ListBootImageSelections(context.Context, *v1.ListBootImageSelectionsRequest) (*v1.ListBootImageSelectionsResponse, error)
}

// NewConfigurationServiceClient constructs a client for the
// otterscale.configuration.v1.ConfigurationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configurationServiceMethods := v1.File_api_configuration_v1_configuration_proto.Services().ByName("ConfigurationService").Methods()
	return &configurationServiceClient{
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.Configuration](
			httpClient,
			baseURL+ConfigurationServiceGetConfigurationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetConfiguration")),
			connect.WithClientOptions(opts...),
		),
		updateNTPServer: connect.NewClient[v1.UpdateNTPServerRequest, v1.Configuration_NTPServer](
			httpClient,
			baseURL+ConfigurationServiceUpdateNTPServerProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateNTPServer")),
			connect.WithClientOptions(opts...),
		),
		updatePackageRepository: connect.NewClient[v1.UpdatePackageRepositoryRequest, v1.Configuration_PackageRepository](
			httpClient,
			baseURL+ConfigurationServiceUpdatePackageRepositoryProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdatePackageRepository")),
			connect.WithClientOptions(opts...),
		),
		createBootImage: connect.NewClient[v1.CreateBootImageRequest, v1.Configuration_BootImage](
			httpClient,
			baseURL+ConfigurationServiceCreateBootImageProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("CreateBootImage")),
			connect.WithClientOptions(opts...),
		),
		setDefaultBootImage: connect.NewClient[v1.SetDefaultBootImageRequest, emptypb.Empty](
			httpClient,
			baseURL+ConfigurationServiceSetDefaultBootImageProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("SetDefaultBootImage")),
			connect.WithClientOptions(opts...),
		),
		importBootImages: connect.NewClient[v1.ImportBootImagesRequest, emptypb.Empty](
			httpClient,
			baseURL+ConfigurationServiceImportBootImagesProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("ImportBootImages")),
			connect.WithClientOptions(opts...),
		),
		isImportingBootImages: connect.NewClient[v1.IsImportingBootImagesRequest, v1.IsImportingBootImagesResponse](
			httpClient,
			baseURL+ConfigurationServiceIsImportingBootImagesProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("IsImportingBootImages")),
			connect.WithClientOptions(opts...),
		),
		listBootImageSelections: connect.NewClient[v1.ListBootImageSelectionsRequest, v1.ListBootImageSelectionsResponse](
			httpClient,
			baseURL+ConfigurationServiceListBootImageSelectionsProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("ListBootImageSelections")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	getConfiguration        *connect.Client[v1.GetConfigurationRequest, v1.Configuration]
	updateNTPServer         *connect.Client[v1.UpdateNTPServerRequest, v1.Configuration_NTPServer]
	updatePackageRepository *connect.Client[v1.UpdatePackageRepositoryRequest, v1.Configuration_PackageRepository]
	createBootImage         *connect.Client[v1.CreateBootImageRequest, v1.Configuration_BootImage]
	setDefaultBootImage     *connect.Client[v1.SetDefaultBootImageRequest, emptypb.Empty]
	importBootImages        *connect.Client[v1.ImportBootImagesRequest, emptypb.Empty]
	isImportingBootImages   *connect.Client[v1.IsImportingBootImagesRequest, v1.IsImportingBootImagesResponse]
	listBootImageSelections *connect.Client[v1.ListBootImageSelectionsRequest, v1.ListBootImageSelectionsResponse]
}

// GetConfiguration calls otterscale.configuration.v1.ConfigurationService.GetConfiguration.
func (c *configurationServiceClient) GetConfiguration(ctx context.Context, req *v1.GetConfigurationRequest) (*v1.Configuration, error) {
	response, err := c.getConfiguration.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateNTPServer calls otterscale.configuration.v1.ConfigurationService.UpdateNTPServer.
func (c *configurationServiceClient) UpdateNTPServer(ctx context.Context, req *v1.UpdateNTPServerRequest) (*v1.Configuration_NTPServer, error) {
	response, err := c.updateNTPServer.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdatePackageRepository calls
// otterscale.configuration.v1.ConfigurationService.UpdatePackageRepository.
func (c *configurationServiceClient) UpdatePackageRepository(ctx context.Context, req *v1.UpdatePackageRepositoryRequest) (*v1.Configuration_PackageRepository, error) {
	response, err := c.updatePackageRepository.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateBootImage calls otterscale.configuration.v1.ConfigurationService.CreateBootImage.
func (c *configurationServiceClient) CreateBootImage(ctx context.Context, req *v1.CreateBootImageRequest) (*v1.Configuration_BootImage, error) {
	response, err := c.createBootImage.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// SetDefaultBootImage calls otterscale.configuration.v1.ConfigurationService.SetDefaultBootImage.
func (c *configurationServiceClient) SetDefaultBootImage(ctx context.Context, req *v1.SetDefaultBootImageRequest) (*emptypb.Empty, error) {
	response, err := c.setDefaultBootImage.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ImportBootImages calls otterscale.configuration.v1.ConfigurationService.ImportBootImages.
func (c *configurationServiceClient) ImportBootImages(ctx context.Context, req *v1.ImportBootImagesRequest) (*emptypb.Empty, error) {
	response, err := c.importBootImages.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// IsImportingBootImages calls
// otterscale.configuration.v1.ConfigurationService.IsImportingBootImages.
func (c *configurationServiceClient) IsImportingBootImages(ctx context.Context, req *v1.IsImportingBootImagesRequest) (*v1.IsImportingBootImagesResponse, error) {
	response, err := c.isImportingBootImages.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListBootImageSelections calls
// otterscale.configuration.v1.ConfigurationService.ListBootImageSelections.
func (c *configurationServiceClient) ListBootImageSelections(ctx context.Context, req *v1.ListBootImageSelectionsRequest) (*v1.ListBootImageSelectionsResponse, error) {
	response, err := c.listBootImageSelections.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ConfigurationServiceHandler is an implementation of the
// otterscale.configuration.v1.ConfigurationService service.
type ConfigurationServiceHandler interface {
	GetConfiguration(context.Context, *v1.GetConfigurationRequest) (*v1.Configuration, error)
	UpdateNTPServer(context.Context, *v1.UpdateNTPServerRequest) (*v1.Configuration_NTPServer, error)
	UpdatePackageRepository(context.Context, *v1.UpdatePackageRepositoryRequest) (*v1.Configuration_PackageRepository, error)
	CreateBootImage(context.Context, *v1.CreateBootImageRequest) (*v1.Configuration_BootImage, error)
	SetDefaultBootImage(context.Context, *v1.SetDefaultBootImageRequest) (*emptypb.Empty, error)
	ImportBootImages(context.Context, *v1.ImportBootImagesRequest) (*emptypb.Empty, error)
	IsImportingBootImages(context.Context, *v1.IsImportingBootImagesRequest) (*v1.IsImportingBootImagesResponse, error)
	ListBootImageSelections(context.Context, *v1.ListBootImageSelectionsRequest) (*v1.ListBootImageSelectionsResponse, error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configurationServiceMethods := v1.File_api_configuration_v1_configuration_proto.Services().ByName("ConfigurationService").Methods()
	configurationServiceGetConfigurationHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(configurationServiceMethods.ByName("GetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateNTPServerHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceUpdateNTPServerProcedure,
		svc.UpdateNTPServer,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateNTPServer")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdatePackageRepositoryHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceUpdatePackageRepositoryProcedure,
		svc.UpdatePackageRepository,
		connect.WithSchema(configurationServiceMethods.ByName("UpdatePackageRepository")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceCreateBootImageHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceCreateBootImageProcedure,
		svc.CreateBootImage,
		connect.WithSchema(configurationServiceMethods.ByName("CreateBootImage")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceSetDefaultBootImageHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceSetDefaultBootImageProcedure,
		svc.SetDefaultBootImage,
		connect.WithSchema(configurationServiceMethods.ByName("SetDefaultBootImage")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceImportBootImagesHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceImportBootImagesProcedure,
		svc.ImportBootImages,
		connect.WithSchema(configurationServiceMethods.ByName("ImportBootImages")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceIsImportingBootImagesHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceIsImportingBootImagesProcedure,
		svc.IsImportingBootImages,
		connect.WithSchema(configurationServiceMethods.ByName("IsImportingBootImages")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceListBootImageSelectionsHandler := connect.NewUnaryHandlerSimple(
		ConfigurationServiceListBootImageSelectionsProcedure,
		svc.ListBootImageSelections,
		connect.WithSchema(configurationServiceMethods.ByName("ListBootImageSelections")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.configuration.v1.ConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigurationServiceGetConfigurationProcedure:
			configurationServiceGetConfigurationHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateNTPServerProcedure:
			configurationServiceUpdateNTPServerHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdatePackageRepositoryProcedure:
			configurationServiceUpdatePackageRepositoryHandler.ServeHTTP(w, r)
		case ConfigurationServiceCreateBootImageProcedure:
			configurationServiceCreateBootImageHandler.ServeHTTP(w, r)
		case ConfigurationServiceSetDefaultBootImageProcedure:
			configurationServiceSetDefaultBootImageHandler.ServeHTTP(w, r)
		case ConfigurationServiceImportBootImagesProcedure:
			configurationServiceImportBootImagesHandler.ServeHTTP(w, r)
		case ConfigurationServiceIsImportingBootImagesProcedure:
			configurationServiceIsImportingBootImagesHandler.ServeHTTP(w, r)
		case ConfigurationServiceListBootImageSelectionsProcedure:
			configurationServiceListBootImageSelectionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) GetConfiguration(context.Context, *v1.GetConfigurationRequest) (*v1.Configuration, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.GetConfiguration is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateNTPServer(context.Context, *v1.UpdateNTPServerRequest) (*v1.Configuration_NTPServer, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.UpdateNTPServer is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdatePackageRepository(context.Context, *v1.UpdatePackageRepositoryRequest) (*v1.Configuration_PackageRepository, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.UpdatePackageRepository is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) CreateBootImage(context.Context, *v1.CreateBootImageRequest) (*v1.Configuration_BootImage, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.CreateBootImage is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) SetDefaultBootImage(context.Context, *v1.SetDefaultBootImageRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.SetDefaultBootImage is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ImportBootImages(context.Context, *v1.ImportBootImagesRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.ImportBootImages is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) IsImportingBootImages(context.Context, *v1.IsImportingBootImagesRequest) (*v1.IsImportingBootImagesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.IsImportingBootImages is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) ListBootImageSelections(context.Context, *v1.ListBootImageSelectionsRequest) (*v1.ListBootImageSelectionsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.configuration.v1.ConfigurationService.ListBootImageSelections is not implemented"))
}
