// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/environment/v1/environment.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/environment/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentServiceName is the fully-qualified name of the EnvironmentService service.
	EnvironmentServiceName = "otterscale.environment.v1.EnvironmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentServiceCheckHealthProcedure is the fully-qualified name of the EnvironmentService's
	// CheckHealth RPC.
	EnvironmentServiceCheckHealthProcedure = "/otterscale.environment.v1.EnvironmentService/CheckHealth"
	// EnvironmentServiceWatchStatusProcedure is the fully-qualified name of the EnvironmentService's
	// WatchStatus RPC.
	EnvironmentServiceWatchStatusProcedure = "/otterscale.environment.v1.EnvironmentService/WatchStatus"
	// EnvironmentServiceUpdateStatusProcedure is the fully-qualified name of the EnvironmentService's
	// UpdateStatus RPC.
	EnvironmentServiceUpdateStatusProcedure = "/otterscale.environment.v1.EnvironmentService/UpdateStatus"
	// EnvironmentServiceUpdateConfigProcedure is the fully-qualified name of the EnvironmentService's
	// UpdateConfig RPC.
	EnvironmentServiceUpdateConfigProcedure = "/otterscale.environment.v1.EnvironmentService/UpdateConfig"
	// EnvironmentServiceGetConfigHelmRepositoriesProcedure is the fully-qualified name of the
	// EnvironmentService's GetConfigHelmRepositories RPC.
	EnvironmentServiceGetConfigHelmRepositoriesProcedure = "/otterscale.environment.v1.EnvironmentService/GetConfigHelmRepositories"
	// EnvironmentServiceUpdateConfigHelmRepositoriesProcedure is the fully-qualified name of the
	// EnvironmentService's UpdateConfigHelmRepositories RPC.
	EnvironmentServiceUpdateConfigHelmRepositoriesProcedure = "/otterscale.environment.v1.EnvironmentService/UpdateConfigHelmRepositories"
	// EnvironmentServiceGetPrometheusProcedure is the fully-qualified name of the EnvironmentService's
	// GetPrometheus RPC.
	EnvironmentServiceGetPrometheusProcedure = "/otterscale.environment.v1.EnvironmentService/GetPrometheus"
	// EnvironmentServiceGetPremiumTierProcedure is the fully-qualified name of the EnvironmentService's
	// GetPremiumTier RPC.
	EnvironmentServiceGetPremiumTierProcedure = "/otterscale.environment.v1.EnvironmentService/GetPremiumTier"
)

// EnvironmentServiceClient is a client for the otterscale.environment.v1.EnvironmentService
// service.
type EnvironmentServiceClient interface {
	CheckHealth(context.Context, *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error)
	WatchStatus(context.Context, *v1.WatchStatusRequest) (*connect.ServerStreamForClient[v1.WatchStatusResponse], error)
	UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error)
	UpdateConfig(context.Context, *v1.UpdateConfigRequest) (*emptypb.Empty, error)
	GetConfigHelmRepositories(context.Context, *v1.GetConfigHelmRepositoriesRequest) (*v1.GetConfigHelmRepositoriesResponse, error)
	UpdateConfigHelmRepositories(context.Context, *v1.UpdateConfigHelmRepositoriesRequest) (*emptypb.Empty, error)
	GetPrometheus(context.Context, *v1.GetPrometheusRequest) (*v1.Prometheus, error)
	GetPremiumTier(context.Context, *v1.GetPremiumTierRequest) (*v1.PremiumTier, error)
}

// NewEnvironmentServiceClient constructs a client for the
// otterscale.environment.v1.EnvironmentService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	environmentServiceMethods := v1.File_api_environment_v1_environment_proto.Services().ByName("EnvironmentService").Methods()
	return &environmentServiceClient{
		checkHealth: connect.NewClient[v1.CheckHealthRequest, v1.CheckHealthResponse](
			httpClient,
			baseURL+EnvironmentServiceCheckHealthProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("CheckHealth")),
			connect.WithClientOptions(opts...),
		),
		watchStatus: connect.NewClient[v1.WatchStatusRequest, v1.WatchStatusResponse](
			httpClient,
			baseURL+EnvironmentServiceWatchStatusProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("WatchStatus")),
			connect.WithClientOptions(opts...),
		),
		updateStatus: connect.NewClient[v1.UpdateStatusRequest, emptypb.Empty](
			httpClient,
			baseURL+EnvironmentServiceUpdateStatusProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("UpdateStatus")),
			connect.WithClientOptions(opts...),
		),
		updateConfig: connect.NewClient[v1.UpdateConfigRequest, emptypb.Empty](
			httpClient,
			baseURL+EnvironmentServiceUpdateConfigProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("UpdateConfig")),
			connect.WithClientOptions(opts...),
		),
		getConfigHelmRepositories: connect.NewClient[v1.GetConfigHelmRepositoriesRequest, v1.GetConfigHelmRepositoriesResponse](
			httpClient,
			baseURL+EnvironmentServiceGetConfigHelmRepositoriesProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("GetConfigHelmRepositories")),
			connect.WithClientOptions(opts...),
		),
		updateConfigHelmRepositories: connect.NewClient[v1.UpdateConfigHelmRepositoriesRequest, emptypb.Empty](
			httpClient,
			baseURL+EnvironmentServiceUpdateConfigHelmRepositoriesProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("UpdateConfigHelmRepositories")),
			connect.WithClientOptions(opts...),
		),
		getPrometheus: connect.NewClient[v1.GetPrometheusRequest, v1.Prometheus](
			httpClient,
			baseURL+EnvironmentServiceGetPrometheusProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("GetPrometheus")),
			connect.WithClientOptions(opts...),
		),
		getPremiumTier: connect.NewClient[v1.GetPremiumTierRequest, v1.PremiumTier](
			httpClient,
			baseURL+EnvironmentServiceGetPremiumTierProcedure,
			connect.WithSchema(environmentServiceMethods.ByName("GetPremiumTier")),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentServiceClient implements EnvironmentServiceClient.
type environmentServiceClient struct {
	checkHealth                  *connect.Client[v1.CheckHealthRequest, v1.CheckHealthResponse]
	watchStatus                  *connect.Client[v1.WatchStatusRequest, v1.WatchStatusResponse]
	updateStatus                 *connect.Client[v1.UpdateStatusRequest, emptypb.Empty]
	updateConfig                 *connect.Client[v1.UpdateConfigRequest, emptypb.Empty]
	getConfigHelmRepositories    *connect.Client[v1.GetConfigHelmRepositoriesRequest, v1.GetConfigHelmRepositoriesResponse]
	updateConfigHelmRepositories *connect.Client[v1.UpdateConfigHelmRepositoriesRequest, emptypb.Empty]
	getPrometheus                *connect.Client[v1.GetPrometheusRequest, v1.Prometheus]
	getPremiumTier               *connect.Client[v1.GetPremiumTierRequest, v1.PremiumTier]
}

// CheckHealth calls otterscale.environment.v1.EnvironmentService.CheckHealth.
func (c *environmentServiceClient) CheckHealth(ctx context.Context, req *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error) {
	response, err := c.checkHealth.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// WatchStatus calls otterscale.environment.v1.EnvironmentService.WatchStatus.
func (c *environmentServiceClient) WatchStatus(ctx context.Context, req *v1.WatchStatusRequest) (*connect.ServerStreamForClient[v1.WatchStatusResponse], error) {
	return c.watchStatus.CallServerStream(ctx, connect.NewRequest(req))
}

// UpdateStatus calls otterscale.environment.v1.EnvironmentService.UpdateStatus.
func (c *environmentServiceClient) UpdateStatus(ctx context.Context, req *v1.UpdateStatusRequest) (*emptypb.Empty, error) {
	response, err := c.updateStatus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateConfig calls otterscale.environment.v1.EnvironmentService.UpdateConfig.
func (c *environmentServiceClient) UpdateConfig(ctx context.Context, req *v1.UpdateConfigRequest) (*emptypb.Empty, error) {
	response, err := c.updateConfig.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetConfigHelmRepositories calls
// otterscale.environment.v1.EnvironmentService.GetConfigHelmRepositories.
func (c *environmentServiceClient) GetConfigHelmRepositories(ctx context.Context, req *v1.GetConfigHelmRepositoriesRequest) (*v1.GetConfigHelmRepositoriesResponse, error) {
	response, err := c.getConfigHelmRepositories.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateConfigHelmRepositories calls
// otterscale.environment.v1.EnvironmentService.UpdateConfigHelmRepositories.
func (c *environmentServiceClient) UpdateConfigHelmRepositories(ctx context.Context, req *v1.UpdateConfigHelmRepositoriesRequest) (*emptypb.Empty, error) {
	response, err := c.updateConfigHelmRepositories.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetPrometheus calls otterscale.environment.v1.EnvironmentService.GetPrometheus.
func (c *environmentServiceClient) GetPrometheus(ctx context.Context, req *v1.GetPrometheusRequest) (*v1.Prometheus, error) {
	response, err := c.getPrometheus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetPremiumTier calls otterscale.environment.v1.EnvironmentService.GetPremiumTier.
func (c *environmentServiceClient) GetPremiumTier(ctx context.Context, req *v1.GetPremiumTierRequest) (*v1.PremiumTier, error) {
	response, err := c.getPremiumTier.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// EnvironmentServiceHandler is an implementation of the
// otterscale.environment.v1.EnvironmentService service.
type EnvironmentServiceHandler interface {
	CheckHealth(context.Context, *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error)
	WatchStatus(context.Context, *v1.WatchStatusRequest, *connect.ServerStream[v1.WatchStatusResponse]) error
	UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error)
	UpdateConfig(context.Context, *v1.UpdateConfigRequest) (*emptypb.Empty, error)
	GetConfigHelmRepositories(context.Context, *v1.GetConfigHelmRepositoriesRequest) (*v1.GetConfigHelmRepositoriesResponse, error)
	UpdateConfigHelmRepositories(context.Context, *v1.UpdateConfigHelmRepositoriesRequest) (*emptypb.Empty, error)
	GetPrometheus(context.Context, *v1.GetPrometheusRequest) (*v1.Prometheus, error)
	GetPremiumTier(context.Context, *v1.GetPremiumTierRequest) (*v1.PremiumTier, error)
}

// NewEnvironmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentServiceHandler(svc EnvironmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentServiceMethods := v1.File_api_environment_v1_environment_proto.Services().ByName("EnvironmentService").Methods()
	environmentServiceCheckHealthHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceCheckHealthProcedure,
		svc.CheckHealth,
		connect.WithSchema(environmentServiceMethods.ByName("CheckHealth")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceWatchStatusHandler := connect.NewServerStreamHandlerSimple(
		EnvironmentServiceWatchStatusProcedure,
		svc.WatchStatus,
		connect.WithSchema(environmentServiceMethods.ByName("WatchStatus")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceUpdateStatusHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceUpdateStatusProcedure,
		svc.UpdateStatus,
		connect.WithSchema(environmentServiceMethods.ByName("UpdateStatus")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceUpdateConfigHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceUpdateConfigProcedure,
		svc.UpdateConfig,
		connect.WithSchema(environmentServiceMethods.ByName("UpdateConfig")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetConfigHelmRepositoriesHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceGetConfigHelmRepositoriesProcedure,
		svc.GetConfigHelmRepositories,
		connect.WithSchema(environmentServiceMethods.ByName("GetConfigHelmRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceUpdateConfigHelmRepositoriesHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceUpdateConfigHelmRepositoriesProcedure,
		svc.UpdateConfigHelmRepositories,
		connect.WithSchema(environmentServiceMethods.ByName("UpdateConfigHelmRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetPrometheusHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceGetPrometheusProcedure,
		svc.GetPrometheus,
		connect.WithSchema(environmentServiceMethods.ByName("GetPrometheus")),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetPremiumTierHandler := connect.NewUnaryHandlerSimple(
		EnvironmentServiceGetPremiumTierProcedure,
		svc.GetPremiumTier,
		connect.WithSchema(environmentServiceMethods.ByName("GetPremiumTier")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.environment.v1.EnvironmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentServiceCheckHealthProcedure:
			environmentServiceCheckHealthHandler.ServeHTTP(w, r)
		case EnvironmentServiceWatchStatusProcedure:
			environmentServiceWatchStatusHandler.ServeHTTP(w, r)
		case EnvironmentServiceUpdateStatusProcedure:
			environmentServiceUpdateStatusHandler.ServeHTTP(w, r)
		case EnvironmentServiceUpdateConfigProcedure:
			environmentServiceUpdateConfigHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetConfigHelmRepositoriesProcedure:
			environmentServiceGetConfigHelmRepositoriesHandler.ServeHTTP(w, r)
		case EnvironmentServiceUpdateConfigHelmRepositoriesProcedure:
			environmentServiceUpdateConfigHelmRepositoriesHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetPrometheusProcedure:
			environmentServiceGetPrometheusHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetPremiumTierProcedure:
			environmentServiceGetPremiumTierHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentServiceHandler struct{}

func (UnimplementedEnvironmentServiceHandler) CheckHealth(context.Context, *v1.CheckHealthRequest) (*v1.CheckHealthResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.CheckHealth is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) WatchStatus(context.Context, *v1.WatchStatusRequest, *connect.ServerStream[v1.WatchStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.WatchStatus is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.UpdateStatus is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) UpdateConfig(context.Context, *v1.UpdateConfigRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.UpdateConfig is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetConfigHelmRepositories(context.Context, *v1.GetConfigHelmRepositoriesRequest) (*v1.GetConfigHelmRepositoriesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.GetConfigHelmRepositories is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) UpdateConfigHelmRepositories(context.Context, *v1.UpdateConfigHelmRepositoriesRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.UpdateConfigHelmRepositories is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetPrometheus(context.Context, *v1.GetPrometheusRequest) (*v1.Prometheus, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.GetPrometheus is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetPremiumTier(context.Context, *v1.GetPremiumTierRequest) (*v1.PremiumTier, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.environment.v1.EnvironmentService.GetPremiumTier is not implemented"))
}
