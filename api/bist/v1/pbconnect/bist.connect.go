// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/bist/v1/bist.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/bist/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BISTServiceName is the fully-qualified name of the BISTService service.
	BISTServiceName = "otterscale.bist.v1.BISTService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BISTServiceListTestResultsProcedure is the fully-qualified name of the BISTService's
	// ListTestResults RPC.
	BISTServiceListTestResultsProcedure = "/otterscale.bist.v1.BISTService/ListTestResults"
	// BISTServiceCreateTestResultProcedure is the fully-qualified name of the BISTService's
	// CreateTestResult RPC.
	BISTServiceCreateTestResultProcedure = "/otterscale.bist.v1.BISTService/CreateTestResult"
	// BISTServiceDeleteTestResultProcedure is the fully-qualified name of the BISTService's
	// DeleteTestResult RPC.
	BISTServiceDeleteTestResultProcedure = "/otterscale.bist.v1.BISTService/DeleteTestResult"
	// BISTServiceListObjectServicesProcedure is the fully-qualified name of the BISTService's
	// ListObjectServices RPC.
	BISTServiceListObjectServicesProcedure = "/otterscale.bist.v1.BISTService/ListObjectServices"
)

// BISTServiceClient is a client for the otterscale.bist.v1.BISTService service.
type BISTServiceClient interface {
	ListTestResults(context.Context, *connect.Request[v1.ListTestResultsRequest]) (*connect.Response[v1.ListTestResultsResponse], error)
	CreateTestResult(context.Context, *connect.Request[v1.CreateTestResultRequest]) (*connect.Response[v1.TestResult], error)
	DeleteTestResult(context.Context, *connect.Request[v1.DeleteTestResultRequest]) (*connect.Response[emptypb.Empty], error)
	ListObjectServices(context.Context, *connect.Request[v1.ListObjectServicesRequest]) (*connect.Response[v1.ListObjectServicesResponse], error)
}

// NewBISTServiceClient constructs a client for the otterscale.bist.v1.BISTService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBISTServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BISTServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bISTServiceMethods := v1.File_api_bist_v1_bist_proto.Services().ByName("BISTService").Methods()
	return &bISTServiceClient{
		listTestResults: connect.NewClient[v1.ListTestResultsRequest, v1.ListTestResultsResponse](
			httpClient,
			baseURL+BISTServiceListTestResultsProcedure,
			connect.WithSchema(bISTServiceMethods.ByName("ListTestResults")),
			connect.WithClientOptions(opts...),
		),
		createTestResult: connect.NewClient[v1.CreateTestResultRequest, v1.TestResult](
			httpClient,
			baseURL+BISTServiceCreateTestResultProcedure,
			connect.WithSchema(bISTServiceMethods.ByName("CreateTestResult")),
			connect.WithClientOptions(opts...),
		),
		deleteTestResult: connect.NewClient[v1.DeleteTestResultRequest, emptypb.Empty](
			httpClient,
			baseURL+BISTServiceDeleteTestResultProcedure,
			connect.WithSchema(bISTServiceMethods.ByName("DeleteTestResult")),
			connect.WithClientOptions(opts...),
		),
		listObjectServices: connect.NewClient[v1.ListObjectServicesRequest, v1.ListObjectServicesResponse](
			httpClient,
			baseURL+BISTServiceListObjectServicesProcedure,
			connect.WithSchema(bISTServiceMethods.ByName("ListObjectServices")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bISTServiceClient implements BISTServiceClient.
type bISTServiceClient struct {
	listTestResults    *connect.Client[v1.ListTestResultsRequest, v1.ListTestResultsResponse]
	createTestResult   *connect.Client[v1.CreateTestResultRequest, v1.TestResult]
	deleteTestResult   *connect.Client[v1.DeleteTestResultRequest, emptypb.Empty]
	listObjectServices *connect.Client[v1.ListObjectServicesRequest, v1.ListObjectServicesResponse]
}

// ListTestResults calls otterscale.bist.v1.BISTService.ListTestResults.
func (c *bISTServiceClient) ListTestResults(ctx context.Context, req *connect.Request[v1.ListTestResultsRequest]) (*connect.Response[v1.ListTestResultsResponse], error) {
	return c.listTestResults.CallUnary(ctx, req)
}

// CreateTestResult calls otterscale.bist.v1.BISTService.CreateTestResult.
func (c *bISTServiceClient) CreateTestResult(ctx context.Context, req *connect.Request[v1.CreateTestResultRequest]) (*connect.Response[v1.TestResult], error) {
	return c.createTestResult.CallUnary(ctx, req)
}

// DeleteTestResult calls otterscale.bist.v1.BISTService.DeleteTestResult.
func (c *bISTServiceClient) DeleteTestResult(ctx context.Context, req *connect.Request[v1.DeleteTestResultRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTestResult.CallUnary(ctx, req)
}

// ListObjectServices calls otterscale.bist.v1.BISTService.ListObjectServices.
func (c *bISTServiceClient) ListObjectServices(ctx context.Context, req *connect.Request[v1.ListObjectServicesRequest]) (*connect.Response[v1.ListObjectServicesResponse], error) {
	return c.listObjectServices.CallUnary(ctx, req)
}

// BISTServiceHandler is an implementation of the otterscale.bist.v1.BISTService service.
type BISTServiceHandler interface {
	ListTestResults(context.Context, *connect.Request[v1.ListTestResultsRequest]) (*connect.Response[v1.ListTestResultsResponse], error)
	CreateTestResult(context.Context, *connect.Request[v1.CreateTestResultRequest]) (*connect.Response[v1.TestResult], error)
	DeleteTestResult(context.Context, *connect.Request[v1.DeleteTestResultRequest]) (*connect.Response[emptypb.Empty], error)
	ListObjectServices(context.Context, *connect.Request[v1.ListObjectServicesRequest]) (*connect.Response[v1.ListObjectServicesResponse], error)
}

// NewBISTServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBISTServiceHandler(svc BISTServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bISTServiceMethods := v1.File_api_bist_v1_bist_proto.Services().ByName("BISTService").Methods()
	bISTServiceListTestResultsHandler := connect.NewUnaryHandler(
		BISTServiceListTestResultsProcedure,
		svc.ListTestResults,
		connect.WithSchema(bISTServiceMethods.ByName("ListTestResults")),
		connect.WithHandlerOptions(opts...),
	)
	bISTServiceCreateTestResultHandler := connect.NewUnaryHandler(
		BISTServiceCreateTestResultProcedure,
		svc.CreateTestResult,
		connect.WithSchema(bISTServiceMethods.ByName("CreateTestResult")),
		connect.WithHandlerOptions(opts...),
	)
	bISTServiceDeleteTestResultHandler := connect.NewUnaryHandler(
		BISTServiceDeleteTestResultProcedure,
		svc.DeleteTestResult,
		connect.WithSchema(bISTServiceMethods.ByName("DeleteTestResult")),
		connect.WithHandlerOptions(opts...),
	)
	bISTServiceListObjectServicesHandler := connect.NewUnaryHandler(
		BISTServiceListObjectServicesProcedure,
		svc.ListObjectServices,
		connect.WithSchema(bISTServiceMethods.ByName("ListObjectServices")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.bist.v1.BISTService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BISTServiceListTestResultsProcedure:
			bISTServiceListTestResultsHandler.ServeHTTP(w, r)
		case BISTServiceCreateTestResultProcedure:
			bISTServiceCreateTestResultHandler.ServeHTTP(w, r)
		case BISTServiceDeleteTestResultProcedure:
			bISTServiceDeleteTestResultHandler.ServeHTTP(w, r)
		case BISTServiceListObjectServicesProcedure:
			bISTServiceListObjectServicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBISTServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBISTServiceHandler struct{}

func (UnimplementedBISTServiceHandler) ListTestResults(context.Context, *connect.Request[v1.ListTestResultsRequest]) (*connect.Response[v1.ListTestResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bist.v1.BISTService.ListTestResults is not implemented"))
}

func (UnimplementedBISTServiceHandler) CreateTestResult(context.Context, *connect.Request[v1.CreateTestResultRequest]) (*connect.Response[v1.TestResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bist.v1.BISTService.CreateTestResult is not implemented"))
}

func (UnimplementedBISTServiceHandler) DeleteTestResult(context.Context, *connect.Request[v1.DeleteTestResultRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bist.v1.BISTService.DeleteTestResult is not implemented"))
}

func (UnimplementedBISTServiceHandler) ListObjectServices(context.Context, *connect.Request[v1.ListObjectServicesRequest]) (*connect.Response[v1.ListObjectServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bist.v1.BISTService.ListObjectServices is not implemented"))
}
