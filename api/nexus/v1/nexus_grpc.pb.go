// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: api/nexus/v1/nexus.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nexus_GetConfiguration_FullMethodName        = "/openhdc.nexus.v1.Nexus/GetConfiguration"
	Nexus_UpdateNTPServer_FullMethodName         = "/openhdc.nexus.v1.Nexus/UpdateNTPServer"
	Nexus_UpdatePackageRepository_FullMethodName = "/openhdc.nexus.v1.Nexus/UpdatePackageRepository"
	Nexus_CreateBootImage_FullMethodName         = "/openhdc.nexus.v1.Nexus/CreateBootImage"
	Nexus_SetDefaultBootImage_FullMethodName     = "/openhdc.nexus.v1.Nexus/SetDefaultBootImage"
	Nexus_ImportBootImages_FullMethodName        = "/openhdc.nexus.v1.Nexus/ImportBootImages"
	Nexus_IsImportingBootImages_FullMethodName   = "/openhdc.nexus.v1.Nexus/IsImportingBootImages"
	Nexus_ListBootImageSelections_FullMethodName = "/openhdc.nexus.v1.Nexus/ListBootImageSelections"
	Nexus_ListNetworks_FullMethodName            = "/openhdc.nexus.v1.Nexus/ListNetworks"
	Nexus_CreateNetwork_FullMethodName           = "/openhdc.nexus.v1.Nexus/CreateNetwork"
	Nexus_CreateIPRange_FullMethodName           = "/openhdc.nexus.v1.Nexus/CreateIPRange"
	Nexus_DeleteNetwork_FullMethodName           = "/openhdc.nexus.v1.Nexus/DeleteNetwork"
	Nexus_DeleteIPRange_FullMethodName           = "/openhdc.nexus.v1.Nexus/DeleteIPRange"
	Nexus_UpdateFabric_FullMethodName            = "/openhdc.nexus.v1.Nexus/UpdateFabric"
	Nexus_UpdateVLAN_FullMethodName              = "/openhdc.nexus.v1.Nexus/UpdateVLAN"
	Nexus_UpdateSubnet_FullMethodName            = "/openhdc.nexus.v1.Nexus/UpdateSubnet"
	Nexus_UpdateIPRange_FullMethodName           = "/openhdc.nexus.v1.Nexus/UpdateIPRange"
	Nexus_ListMachines_FullMethodName            = "/openhdc.nexus.v1.Nexus/ListMachines"
	Nexus_GetMachine_FullMethodName              = "/openhdc.nexus.v1.Nexus/GetMachine"
	Nexus_CreateMachine_FullMethodName           = "/openhdc.nexus.v1.Nexus/CreateMachine"
	Nexus_PowerOnMachine_FullMethodName          = "/openhdc.nexus.v1.Nexus/PowerOnMachine"
	Nexus_PowerOffMachine_FullMethodName         = "/openhdc.nexus.v1.Nexus/PowerOffMachine"
	Nexus_AddMachineTags_FullMethodName          = "/openhdc.nexus.v1.Nexus/AddMachineTags"
	Nexus_RemoveMachineTags_FullMethodName       = "/openhdc.nexus.v1.Nexus/RemoveMachineTags"
	Nexus_ListScopes_FullMethodName              = "/openhdc.nexus.v1.Nexus/ListScopes"
	Nexus_CreateScope_FullMethodName             = "/openhdc.nexus.v1.Nexus/CreateScope"
	Nexus_ListFacilities_FullMethodName          = "/openhdc.nexus.v1.Nexus/ListFacilities"
	Nexus_GetFacility_FullMethodName             = "/openhdc.nexus.v1.Nexus/GetFacility"
	Nexus_CreateFacility_FullMethodName          = "/openhdc.nexus.v1.Nexus/CreateFacility"
	Nexus_UpdateFacility_FullMethodName          = "/openhdc.nexus.v1.Nexus/UpdateFacility"
	Nexus_DeleteFacility_FullMethodName          = "/openhdc.nexus.v1.Nexus/DeleteFacility"
	Nexus_ExposeFacility_FullMethodName          = "/openhdc.nexus.v1.Nexus/ExposeFacility"
	Nexus_AddFacilityUnits_FullMethodName        = "/openhdc.nexus.v1.Nexus/AddFacilityUnits"
	Nexus_ListActions_FullMethodName             = "/openhdc.nexus.v1.Nexus/ListActions"
	Nexus_DoAction_FullMethodName                = "/openhdc.nexus.v1.Nexus/DoAction"
	Nexus_ListCharms_FullMethodName              = "/openhdc.nexus.v1.Nexus/ListCharms"
	Nexus_GetCharm_FullMethodName                = "/openhdc.nexus.v1.Nexus/GetCharm"
	Nexus_GetCharmMetadata_FullMethodName        = "/openhdc.nexus.v1.Nexus/GetCharmMetadata"
	Nexus_ListCharmArtifacts_FullMethodName      = "/openhdc.nexus.v1.Nexus/ListCharmArtifacts"
	Nexus_ListApplications_FullMethodName        = "/openhdc.nexus.v1.Nexus/ListApplications"
	Nexus_GetApplication_FullMethodName          = "/openhdc.nexus.v1.Nexus/GetApplication"
	Nexus_ListReleases_FullMethodName            = "/openhdc.nexus.v1.Nexus/ListReleases"
	Nexus_CreateRelease_FullMethodName           = "/openhdc.nexus.v1.Nexus/CreateRelease"
	Nexus_UpdateRelease_FullMethodName           = "/openhdc.nexus.v1.Nexus/UpdateRelease"
	Nexus_DeleteRelease_FullMethodName           = "/openhdc.nexus.v1.Nexus/DeleteRelease"
	Nexus_RollbackRelease_FullMethodName         = "/openhdc.nexus.v1.Nexus/RollbackRelease"
	Nexus_ListCharts_FullMethodName              = "/openhdc.nexus.v1.Nexus/ListCharts"
	Nexus_GetChart_FullMethodName                = "/openhdc.nexus.v1.Nexus/GetChart"
	Nexus_GetChartMetadata_FullMethodName        = "/openhdc.nexus.v1.Nexus/GetChartMetadata"
	Nexus_ListTags_FullMethodName                = "/openhdc.nexus.v1.Nexus/ListTags"
	Nexus_GetTag_FullMethodName                  = "/openhdc.nexus.v1.Nexus/GetTag"
	Nexus_CreateTag_FullMethodName               = "/openhdc.nexus.v1.Nexus/CreateTag"
	Nexus_DeleteTag_FullMethodName               = "/openhdc.nexus.v1.Nexus/DeleteTag"
)

// NexusClient is the client API for Nexus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusClient interface {
	// Configuration
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*Configuration, error)
	UpdateNTPServer(ctx context.Context, in *UpdateNTPServerRequest, opts ...grpc.CallOption) (*Configuration_NTPServer, error)
	UpdatePackageRepository(ctx context.Context, in *UpdatePackageRepositoryRequest, opts ...grpc.CallOption) (*Configuration_PackageRepository, error)
	CreateBootImage(ctx context.Context, in *CreateBootImageRequest, opts ...grpc.CallOption) (*Configuration_BootImage, error)
	SetDefaultBootImage(ctx context.Context, in *SetDefaultBootImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ImportBootImages(ctx context.Context, in *ImportBootImagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IsImportingBootImages(ctx context.Context, in *IsImportingBootImagesRequest, opts ...grpc.CallOption) (*IsImportingBootImagesResponse, error)
	ListBootImageSelections(ctx context.Context, in *ListBootImageSelectionsRequest, opts ...grpc.CallOption) (*ListBootImageSelectionsResponse, error)
	// Network
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	CreateIPRange(ctx context.Context, in *CreateIPRangeRequest, opts ...grpc.CallOption) (*Network_IPRange, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteIPRange(ctx context.Context, in *DeleteIPRangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFabric(ctx context.Context, in *UpdateFabricRequest, opts ...grpc.CallOption) (*Network_Fabric, error)
	UpdateVLAN(ctx context.Context, in *UpdateVLANRequest, opts ...grpc.CallOption) (*Network_VLAN, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Network_Subnet, error)
	UpdateIPRange(ctx context.Context, in *UpdateIPRangeRequest, opts ...grpc.CallOption) (*Network_IPRange, error)
	// Machine
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	AddMachineTags(ctx context.Context, in *AddMachineTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveMachineTags(ctx context.Context, in *RemoveMachineTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Scope
	ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error)
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*Scope, error)
	// Facility
	ListFacilities(ctx context.Context, in *ListFacilitiesRequest, opts ...grpc.CallOption) (*ListFacilitiesResponse, error)
	GetFacility(ctx context.Context, in *GetFacilityRequest, opts ...grpc.CallOption) (*Facility, error)
	CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*Facility, error)
	UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*Facility, error)
	DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExposeFacility(ctx context.Context, in *ExposeFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFacilityUnits(ctx context.Context, in *AddFacilityUnitsRequest, opts ...grpc.CallOption) (*AddFacilityUnitsResponse, error)
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	DoAction(ctx context.Context, in *DoActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCharms(ctx context.Context, in *ListCharmsRequest, opts ...grpc.CallOption) (*ListCharmsResponse, error)
	GetCharm(ctx context.Context, in *GetCharmRequest, opts ...grpc.CallOption) (*Facility_Charm, error)
	GetCharmMetadata(ctx context.Context, in *GetCharmMetadataRequest, opts ...grpc.CallOption) (*Facility_Charm_Metadata, error)
	ListCharmArtifacts(ctx context.Context, in *ListCharmArtifactsRequest, opts ...grpc.CallOption) (*ListCharmArtifactsResponse, error)
	// Application
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*Application_Release, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*Application_Release, error)
	DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCharts(ctx context.Context, in *ListChartsRequest, opts ...grpc.CallOption) (*ListChartsResponse, error)
	GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*Application_Chart, error)
	GetChartMetadata(ctx context.Context, in *GetChartMetadataRequest, opts ...grpc.CallOption) (*Application_Chart_Metadata, error)
	// Tag
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nexusClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusClient(cc grpc.ClientConnInterface) NexusClient {
	return &nexusClient{cc}
}

func (c *nexusClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*Configuration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Configuration)
	err := c.cc.Invoke(ctx, Nexus_GetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateNTPServer(ctx context.Context, in *UpdateNTPServerRequest, opts ...grpc.CallOption) (*Configuration_NTPServer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Configuration_NTPServer)
	err := c.cc.Invoke(ctx, Nexus_UpdateNTPServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdatePackageRepository(ctx context.Context, in *UpdatePackageRepositoryRequest, opts ...grpc.CallOption) (*Configuration_PackageRepository, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Configuration_PackageRepository)
	err := c.cc.Invoke(ctx, Nexus_UpdatePackageRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateBootImage(ctx context.Context, in *CreateBootImageRequest, opts ...grpc.CallOption) (*Configuration_BootImage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Configuration_BootImage)
	err := c.cc.Invoke(ctx, Nexus_CreateBootImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) SetDefaultBootImage(ctx context.Context, in *SetDefaultBootImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_SetDefaultBootImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ImportBootImages(ctx context.Context, in *ImportBootImagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_ImportBootImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) IsImportingBootImages(ctx context.Context, in *IsImportingBootImagesRequest, opts ...grpc.CallOption) (*IsImportingBootImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsImportingBootImagesResponse)
	err := c.cc.Invoke(ctx, Nexus_IsImportingBootImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListBootImageSelections(ctx context.Context, in *ListBootImageSelectionsRequest, opts ...grpc.CallOption) (*ListBootImageSelectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBootImageSelectionsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListBootImageSelections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, Nexus_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network)
	err := c.cc.Invoke(ctx, Nexus_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateIPRange(ctx context.Context, in *CreateIPRangeRequest, opts ...grpc.CallOption) (*Network_IPRange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network_IPRange)
	err := c.cc.Invoke(ctx, Nexus_CreateIPRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DeleteIPRange(ctx context.Context, in *DeleteIPRangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DeleteIPRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateFabric(ctx context.Context, in *UpdateFabricRequest, opts ...grpc.CallOption) (*Network_Fabric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network_Fabric)
	err := c.cc.Invoke(ctx, Nexus_UpdateFabric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateVLAN(ctx context.Context, in *UpdateVLANRequest, opts ...grpc.CallOption) (*Network_VLAN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network_VLAN)
	err := c.cc.Invoke(ctx, Nexus_UpdateVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Network_Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network_Subnet)
	err := c.cc.Invoke(ctx, Nexus_UpdateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateIPRange(ctx context.Context, in *UpdateIPRangeRequest, opts ...grpc.CallOption) (*Network_IPRange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network_IPRange)
	err := c.cc.Invoke(ctx, Nexus_UpdateIPRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, Nexus_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, Nexus_GetMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, Nexus_CreateMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, Nexus_PowerOnMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, Nexus_PowerOffMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) AddMachineTags(ctx context.Context, in *AddMachineTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_AddMachineTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) RemoveMachineTags(ctx context.Context, in *RemoveMachineTagsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_RemoveMachineTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListScopes(ctx context.Context, in *ListScopesRequest, opts ...grpc.CallOption) (*ListScopesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScopesResponse)
	err := c.cc.Invoke(ctx, Nexus_ListScopes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*Scope, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scope)
	err := c.cc.Invoke(ctx, Nexus_CreateScope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListFacilities(ctx context.Context, in *ListFacilitiesRequest, opts ...grpc.CallOption) (*ListFacilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFacilitiesResponse)
	err := c.cc.Invoke(ctx, Nexus_ListFacilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetFacility(ctx context.Context, in *GetFacilityRequest, opts ...grpc.CallOption) (*Facility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Facility)
	err := c.cc.Invoke(ctx, Nexus_GetFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*Facility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Facility)
	err := c.cc.Invoke(ctx, Nexus_CreateFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*Facility, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Facility)
	err := c.cc.Invoke(ctx, Nexus_UpdateFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DeleteFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ExposeFacility(ctx context.Context, in *ExposeFacilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_ExposeFacility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) AddFacilityUnits(ctx context.Context, in *AddFacilityUnitsRequest, opts ...grpc.CallOption) (*AddFacilityUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFacilityUnitsResponse)
	err := c.cc.Invoke(ctx, Nexus_AddFacilityUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DoAction(ctx context.Context, in *DoActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DoAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListCharms(ctx context.Context, in *ListCharmsRequest, opts ...grpc.CallOption) (*ListCharmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharmsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListCharms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetCharm(ctx context.Context, in *GetCharmRequest, opts ...grpc.CallOption) (*Facility_Charm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Facility_Charm)
	err := c.cc.Invoke(ctx, Nexus_GetCharm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetCharmMetadata(ctx context.Context, in *GetCharmMetadataRequest, opts ...grpc.CallOption) (*Facility_Charm_Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Facility_Charm_Metadata)
	err := c.cc.Invoke(ctx, Nexus_GetCharmMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListCharmArtifacts(ctx context.Context, in *ListCharmArtifactsRequest, opts ...grpc.CallOption) (*ListCharmArtifactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharmArtifactsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListCharmArtifacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application)
	err := c.cc.Invoke(ctx, Nexus_GetApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, Nexus_ListReleases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*Application_Release, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application_Release)
	err := c.cc.Invoke(ctx, Nexus_CreateRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*Application_Release, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application_Release)
	err := c.cc.Invoke(ctx, Nexus_UpdateRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DeleteRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_RollbackRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListCharts(ctx context.Context, in *ListChartsRequest, opts ...grpc.CallOption) (*ListChartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChartsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListCharts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*Application_Chart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application_Chart)
	err := c.cc.Invoke(ctx, Nexus_GetChart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetChartMetadata(ctx context.Context, in *GetChartMetadataRequest, opts ...grpc.CallOption) (*Application_Chart_Metadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application_Chart_Metadata)
	err := c.cc.Invoke(ctx, Nexus_GetChartMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, Nexus_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, Nexus_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tag)
	err := c.cc.Invoke(ctx, Nexus_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Nexus_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServer is the server API for Nexus service.
// All implementations must embed UnimplementedNexusServer
// for forward compatibility.
type NexusServer interface {
	// Configuration
	GetConfiguration(context.Context, *GetConfigurationRequest) (*Configuration, error)
	UpdateNTPServer(context.Context, *UpdateNTPServerRequest) (*Configuration_NTPServer, error)
	UpdatePackageRepository(context.Context, *UpdatePackageRepositoryRequest) (*Configuration_PackageRepository, error)
	CreateBootImage(context.Context, *CreateBootImageRequest) (*Configuration_BootImage, error)
	SetDefaultBootImage(context.Context, *SetDefaultBootImageRequest) (*emptypb.Empty, error)
	ImportBootImages(context.Context, *ImportBootImagesRequest) (*emptypb.Empty, error)
	IsImportingBootImages(context.Context, *IsImportingBootImagesRequest) (*IsImportingBootImagesResponse, error)
	ListBootImageSelections(context.Context, *ListBootImageSelectionsRequest) (*ListBootImageSelectionsResponse, error)
	// Network
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error)
	CreateIPRange(context.Context, *CreateIPRangeRequest) (*Network_IPRange, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error)
	DeleteIPRange(context.Context, *DeleteIPRangeRequest) (*emptypb.Empty, error)
	UpdateFabric(context.Context, *UpdateFabricRequest) (*Network_Fabric, error)
	UpdateVLAN(context.Context, *UpdateVLANRequest) (*Network_VLAN, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Network_Subnet, error)
	UpdateIPRange(context.Context, *UpdateIPRangeRequest) (*Network_IPRange, error)
	// Machine
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	GetMachine(context.Context, *GetMachineRequest) (*Machine, error)
	CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error)
	PowerOnMachine(context.Context, *PowerOnMachineRequest) (*Machine, error)
	PowerOffMachine(context.Context, *PowerOffMachineRequest) (*Machine, error)
	AddMachineTags(context.Context, *AddMachineTagsRequest) (*emptypb.Empty, error)
	RemoveMachineTags(context.Context, *RemoveMachineTagsRequest) (*emptypb.Empty, error)
	// Scope
	ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error)
	CreateScope(context.Context, *CreateScopeRequest) (*Scope, error)
	// Facility
	ListFacilities(context.Context, *ListFacilitiesRequest) (*ListFacilitiesResponse, error)
	GetFacility(context.Context, *GetFacilityRequest) (*Facility, error)
	CreateFacility(context.Context, *CreateFacilityRequest) (*Facility, error)
	UpdateFacility(context.Context, *UpdateFacilityRequest) (*Facility, error)
	DeleteFacility(context.Context, *DeleteFacilityRequest) (*emptypb.Empty, error)
	ExposeFacility(context.Context, *ExposeFacilityRequest) (*emptypb.Empty, error)
	AddFacilityUnits(context.Context, *AddFacilityUnitsRequest) (*AddFacilityUnitsResponse, error)
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	DoAction(context.Context, *DoActionRequest) (*emptypb.Empty, error)
	ListCharms(context.Context, *ListCharmsRequest) (*ListCharmsResponse, error)
	GetCharm(context.Context, *GetCharmRequest) (*Facility_Charm, error)
	GetCharmMetadata(context.Context, *GetCharmMetadataRequest) (*Facility_Charm_Metadata, error)
	ListCharmArtifacts(context.Context, *ListCharmArtifactsRequest) (*ListCharmArtifactsResponse, error)
	// Application
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	CreateRelease(context.Context, *CreateReleaseRequest) (*Application_Release, error)
	UpdateRelease(context.Context, *UpdateReleaseRequest) (*Application_Release, error)
	DeleteRelease(context.Context, *DeleteReleaseRequest) (*emptypb.Empty, error)
	RollbackRelease(context.Context, *RollbackReleaseRequest) (*emptypb.Empty, error)
	ListCharts(context.Context, *ListChartsRequest) (*ListChartsResponse, error)
	GetChart(context.Context, *GetChartRequest) (*Application_Chart, error)
	GetChartMetadata(context.Context, *GetChartMetadataRequest) (*Application_Chart_Metadata, error)
	// Tag
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	GetTag(context.Context, *GetTagRequest) (*Tag, error)
	CreateTag(context.Context, *CreateTagRequest) (*Tag, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNexusServer()
}

// UnimplementedNexusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexusServer struct{}

func (UnimplementedNexusServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedNexusServer) UpdateNTPServer(context.Context, *UpdateNTPServerRequest) (*Configuration_NTPServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNTPServer not implemented")
}
func (UnimplementedNexusServer) UpdatePackageRepository(context.Context, *UpdatePackageRepositoryRequest) (*Configuration_PackageRepository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageRepository not implemented")
}
func (UnimplementedNexusServer) CreateBootImage(context.Context, *CreateBootImageRequest) (*Configuration_BootImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBootImage not implemented")
}
func (UnimplementedNexusServer) SetDefaultBootImage(context.Context, *SetDefaultBootImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBootImage not implemented")
}
func (UnimplementedNexusServer) ImportBootImages(context.Context, *ImportBootImagesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBootImages not implemented")
}
func (UnimplementedNexusServer) IsImportingBootImages(context.Context, *IsImportingBootImagesRequest) (*IsImportingBootImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsImportingBootImages not implemented")
}
func (UnimplementedNexusServer) ListBootImageSelections(context.Context, *ListBootImageSelectionsRequest) (*ListBootImageSelectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBootImageSelections not implemented")
}
func (UnimplementedNexusServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedNexusServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedNexusServer) CreateIPRange(context.Context, *CreateIPRangeRequest) (*Network_IPRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPRange not implemented")
}
func (UnimplementedNexusServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedNexusServer) DeleteIPRange(context.Context, *DeleteIPRangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPRange not implemented")
}
func (UnimplementedNexusServer) UpdateFabric(context.Context, *UpdateFabricRequest) (*Network_Fabric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFabric not implemented")
}
func (UnimplementedNexusServer) UpdateVLAN(context.Context, *UpdateVLANRequest) (*Network_VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVLAN not implemented")
}
func (UnimplementedNexusServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Network_Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedNexusServer) UpdateIPRange(context.Context, *UpdateIPRangeRequest) (*Network_IPRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPRange not implemented")
}
func (UnimplementedNexusServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedNexusServer) GetMachine(context.Context, *GetMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedNexusServer) CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (UnimplementedNexusServer) PowerOnMachine(context.Context, *PowerOnMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOnMachine not implemented")
}
func (UnimplementedNexusServer) PowerOffMachine(context.Context, *PowerOffMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOffMachine not implemented")
}
func (UnimplementedNexusServer) AddMachineTags(context.Context, *AddMachineTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineTags not implemented")
}
func (UnimplementedNexusServer) RemoveMachineTags(context.Context, *RemoveMachineTagsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMachineTags not implemented")
}
func (UnimplementedNexusServer) ListScopes(context.Context, *ListScopesRequest) (*ListScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedNexusServer) CreateScope(context.Context, *CreateScopeRequest) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedNexusServer) ListFacilities(context.Context, *ListFacilitiesRequest) (*ListFacilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFacilities not implemented")
}
func (UnimplementedNexusServer) GetFacility(context.Context, *GetFacilityRequest) (*Facility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacility not implemented")
}
func (UnimplementedNexusServer) CreateFacility(context.Context, *CreateFacilityRequest) (*Facility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacility not implemented")
}
func (UnimplementedNexusServer) UpdateFacility(context.Context, *UpdateFacilityRequest) (*Facility, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFacility not implemented")
}
func (UnimplementedNexusServer) DeleteFacility(context.Context, *DeleteFacilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFacility not implemented")
}
func (UnimplementedNexusServer) ExposeFacility(context.Context, *ExposeFacilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposeFacility not implemented")
}
func (UnimplementedNexusServer) AddFacilityUnits(context.Context, *AddFacilityUnitsRequest) (*AddFacilityUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFacilityUnits not implemented")
}
func (UnimplementedNexusServer) ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (UnimplementedNexusServer) DoAction(context.Context, *DoActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAction not implemented")
}
func (UnimplementedNexusServer) ListCharms(context.Context, *ListCharmsRequest) (*ListCharmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharms not implemented")
}
func (UnimplementedNexusServer) GetCharm(context.Context, *GetCharmRequest) (*Facility_Charm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharm not implemented")
}
func (UnimplementedNexusServer) GetCharmMetadata(context.Context, *GetCharmMetadataRequest) (*Facility_Charm_Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharmMetadata not implemented")
}
func (UnimplementedNexusServer) ListCharmArtifacts(context.Context, *ListCharmArtifactsRequest) (*ListCharmArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharmArtifacts not implemented")
}
func (UnimplementedNexusServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedNexusServer) GetApplication(context.Context, *GetApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedNexusServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedNexusServer) CreateRelease(context.Context, *CreateReleaseRequest) (*Application_Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedNexusServer) UpdateRelease(context.Context, *UpdateReleaseRequest) (*Application_Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelease not implemented")
}
func (UnimplementedNexusServer) DeleteRelease(context.Context, *DeleteReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (UnimplementedNexusServer) RollbackRelease(context.Context, *RollbackReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackRelease not implemented")
}
func (UnimplementedNexusServer) ListCharts(context.Context, *ListChartsRequest) (*ListChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharts not implemented")
}
func (UnimplementedNexusServer) GetChart(context.Context, *GetChartRequest) (*Application_Chart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChart not implemented")
}
func (UnimplementedNexusServer) GetChartMetadata(context.Context, *GetChartMetadataRequest) (*Application_Chart_Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartMetadata not implemented")
}
func (UnimplementedNexusServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedNexusServer) GetTag(context.Context, *GetTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedNexusServer) CreateTag(context.Context, *CreateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedNexusServer) DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedNexusServer) mustEmbedUnimplementedNexusServer() {}
func (UnimplementedNexusServer) testEmbeddedByValue()               {}

// UnsafeNexusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServer will
// result in compilation errors.
type UnsafeNexusServer interface {
	mustEmbedUnimplementedNexusServer()
}

func RegisterNexusServer(s grpc.ServiceRegistrar, srv NexusServer) {
	// If the following call pancis, it indicates UnimplementedNexusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nexus_ServiceDesc, srv)
}

func _Nexus_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateNTPServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNTPServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateNTPServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateNTPServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateNTPServer(ctx, req.(*UpdateNTPServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdatePackageRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdatePackageRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdatePackageRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdatePackageRepository(ctx, req.(*UpdatePackageRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateBootImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBootImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateBootImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateBootImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateBootImage(ctx, req.(*CreateBootImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_SetDefaultBootImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultBootImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).SetDefaultBootImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_SetDefaultBootImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).SetDefaultBootImage(ctx, req.(*SetDefaultBootImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ImportBootImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBootImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ImportBootImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ImportBootImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ImportBootImages(ctx, req.(*ImportBootImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_IsImportingBootImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsImportingBootImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).IsImportingBootImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_IsImportingBootImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).IsImportingBootImages(ctx, req.(*IsImportingBootImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListBootImageSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBootImageSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListBootImageSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListBootImageSelections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListBootImageSelections(ctx, req.(*ListBootImageSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateIPRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateIPRange(ctx, req.(*CreateIPRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DeleteIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DeleteIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DeleteIPRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DeleteIPRange(ctx, req.(*DeleteIPRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateFabric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFabricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateFabric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateFabric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateFabric(ctx, req.(*UpdateFabricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateVLAN(ctx, req.(*UpdateVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateIPRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateIPRange(ctx, req.(*UpdateIPRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_PowerOnMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).PowerOnMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_PowerOnMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).PowerOnMachine(ctx, req.(*PowerOnMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_PowerOffMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOffMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).PowerOffMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_PowerOffMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).PowerOffMachine(ctx, req.(*PowerOffMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_AddMachineTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).AddMachineTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_AddMachineTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).AddMachineTags(ctx, req.(*AddMachineTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_RemoveMachineTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMachineTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).RemoveMachineTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_RemoveMachineTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).RemoveMachineTags(ctx, req.(*RemoveMachineTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListScopes(ctx, req.(*ListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListFacilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListFacilities(ctx, req.(*ListFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetFacility(ctx, req.(*GetFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateFacility(ctx, req.(*CreateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateFacility(ctx, req.(*UpdateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DeleteFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DeleteFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DeleteFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DeleteFacility(ctx, req.(*DeleteFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ExposeFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposeFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ExposeFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ExposeFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ExposeFacility(ctx, req.(*ExposeFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_AddFacilityUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFacilityUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).AddFacilityUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_AddFacilityUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).AddFacilityUnits(ctx, req.(*AddFacilityUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DoAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DoAction(ctx, req.(*DoActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListCharms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListCharms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListCharms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListCharms(ctx, req.(*ListCharmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetCharm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetCharm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetCharm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetCharm(ctx, req.(*GetCharmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetCharmMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharmMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetCharmMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetCharmMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetCharmMetadata(ctx, req.(*GetCharmMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListCharmArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharmArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListCharmArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListCharmArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListCharmArtifacts(ctx, req.(*ListCharmArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateRelease(ctx, req.(*CreateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_UpdateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).UpdateRelease(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DeleteRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DeleteRelease(ctx, req.(*DeleteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_RollbackRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).RollbackRelease(ctx, req.(*RollbackReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListCharts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListCharts(ctx, req.(*ListChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetChart(ctx, req.(*GetChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetChartMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetChartMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetChartMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetChartMetadata(ctx, req.(*GetChartMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nexus_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nexus_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nexus_ServiceDesc is the grpc.ServiceDesc for Nexus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nexus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openhdc.nexus.v1.Nexus",
	HandlerType: (*NexusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfiguration",
			Handler:    _Nexus_GetConfiguration_Handler,
		},
		{
			MethodName: "UpdateNTPServer",
			Handler:    _Nexus_UpdateNTPServer_Handler,
		},
		{
			MethodName: "UpdatePackageRepository",
			Handler:    _Nexus_UpdatePackageRepository_Handler,
		},
		{
			MethodName: "CreateBootImage",
			Handler:    _Nexus_CreateBootImage_Handler,
		},
		{
			MethodName: "SetDefaultBootImage",
			Handler:    _Nexus_SetDefaultBootImage_Handler,
		},
		{
			MethodName: "ImportBootImages",
			Handler:    _Nexus_ImportBootImages_Handler,
		},
		{
			MethodName: "IsImportingBootImages",
			Handler:    _Nexus_IsImportingBootImages_Handler,
		},
		{
			MethodName: "ListBootImageSelections",
			Handler:    _Nexus_ListBootImageSelections_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _Nexus_ListNetworks_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _Nexus_CreateNetwork_Handler,
		},
		{
			MethodName: "CreateIPRange",
			Handler:    _Nexus_CreateIPRange_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Nexus_DeleteNetwork_Handler,
		},
		{
			MethodName: "DeleteIPRange",
			Handler:    _Nexus_DeleteIPRange_Handler,
		},
		{
			MethodName: "UpdateFabric",
			Handler:    _Nexus_UpdateFabric_Handler,
		},
		{
			MethodName: "UpdateVLAN",
			Handler:    _Nexus_UpdateVLAN_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _Nexus_UpdateSubnet_Handler,
		},
		{
			MethodName: "UpdateIPRange",
			Handler:    _Nexus_UpdateIPRange_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Nexus_ListMachines_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Nexus_GetMachine_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Nexus_CreateMachine_Handler,
		},
		{
			MethodName: "PowerOnMachine",
			Handler:    _Nexus_PowerOnMachine_Handler,
		},
		{
			MethodName: "PowerOffMachine",
			Handler:    _Nexus_PowerOffMachine_Handler,
		},
		{
			MethodName: "AddMachineTags",
			Handler:    _Nexus_AddMachineTags_Handler,
		},
		{
			MethodName: "RemoveMachineTags",
			Handler:    _Nexus_RemoveMachineTags_Handler,
		},
		{
			MethodName: "ListScopes",
			Handler:    _Nexus_ListScopes_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _Nexus_CreateScope_Handler,
		},
		{
			MethodName: "ListFacilities",
			Handler:    _Nexus_ListFacilities_Handler,
		},
		{
			MethodName: "GetFacility",
			Handler:    _Nexus_GetFacility_Handler,
		},
		{
			MethodName: "CreateFacility",
			Handler:    _Nexus_CreateFacility_Handler,
		},
		{
			MethodName: "UpdateFacility",
			Handler:    _Nexus_UpdateFacility_Handler,
		},
		{
			MethodName: "DeleteFacility",
			Handler:    _Nexus_DeleteFacility_Handler,
		},
		{
			MethodName: "ExposeFacility",
			Handler:    _Nexus_ExposeFacility_Handler,
		},
		{
			MethodName: "AddFacilityUnits",
			Handler:    _Nexus_AddFacilityUnits_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _Nexus_ListActions_Handler,
		},
		{
			MethodName: "DoAction",
			Handler:    _Nexus_DoAction_Handler,
		},
		{
			MethodName: "ListCharms",
			Handler:    _Nexus_ListCharms_Handler,
		},
		{
			MethodName: "GetCharm",
			Handler:    _Nexus_GetCharm_Handler,
		},
		{
			MethodName: "GetCharmMetadata",
			Handler:    _Nexus_GetCharmMetadata_Handler,
		},
		{
			MethodName: "ListCharmArtifacts",
			Handler:    _Nexus_ListCharmArtifacts_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _Nexus_ListApplications_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _Nexus_GetApplication_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Nexus_ListReleases_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Nexus_CreateRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _Nexus_UpdateRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _Nexus_DeleteRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _Nexus_RollbackRelease_Handler,
		},
		{
			MethodName: "ListCharts",
			Handler:    _Nexus_ListCharts_Handler,
		},
		{
			MethodName: "GetChart",
			Handler:    _Nexus_GetChart_Handler,
		},
		{
			MethodName: "GetChartMetadata",
			Handler:    _Nexus_GetChartMetadata_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _Nexus_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _Nexus_GetTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Nexus_CreateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Nexus_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nexus/v1/nexus.proto",
}
