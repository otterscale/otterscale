// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/nexus/v1/nexus.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/openhdc/api/nexus/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NexusName is the fully-qualified name of the Nexus service.
	NexusName = "openhdc.nexus.v1.Nexus"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NexusVerifyEnvironmentProcedure is the fully-qualified name of the Nexus's VerifyEnvironment RPC.
	NexusVerifyEnvironmentProcedure = "/openhdc.nexus.v1.Nexus/VerifyEnvironment"
	// NexusListCephesProcedure is the fully-qualified name of the Nexus's ListCephes RPC.
	NexusListCephesProcedure = "/openhdc.nexus.v1.Nexus/ListCephes"
	// NexusListKubernetesProcedure is the fully-qualified name of the Nexus's ListKubernetes RPC.
	NexusListKubernetesProcedure = "/openhdc.nexus.v1.Nexus/ListKubernetes"
	// NexusGetConfigurationProcedure is the fully-qualified name of the Nexus's GetConfiguration RPC.
	NexusGetConfigurationProcedure = "/openhdc.nexus.v1.Nexus/GetConfiguration"
	// NexusUpdateNTPServerProcedure is the fully-qualified name of the Nexus's UpdateNTPServer RPC.
	NexusUpdateNTPServerProcedure = "/openhdc.nexus.v1.Nexus/UpdateNTPServer"
	// NexusUpdatePackageRepositoryProcedure is the fully-qualified name of the Nexus's
	// UpdatePackageRepository RPC.
	NexusUpdatePackageRepositoryProcedure = "/openhdc.nexus.v1.Nexus/UpdatePackageRepository"
	// NexusCreateBootImageProcedure is the fully-qualified name of the Nexus's CreateBootImage RPC.
	NexusCreateBootImageProcedure = "/openhdc.nexus.v1.Nexus/CreateBootImage"
	// NexusSetDefaultBootImageProcedure is the fully-qualified name of the Nexus's SetDefaultBootImage
	// RPC.
	NexusSetDefaultBootImageProcedure = "/openhdc.nexus.v1.Nexus/SetDefaultBootImage"
	// NexusImportBootImagesProcedure is the fully-qualified name of the Nexus's ImportBootImages RPC.
	NexusImportBootImagesProcedure = "/openhdc.nexus.v1.Nexus/ImportBootImages"
	// NexusIsImportingBootImagesProcedure is the fully-qualified name of the Nexus's
	// IsImportingBootImages RPC.
	NexusIsImportingBootImagesProcedure = "/openhdc.nexus.v1.Nexus/IsImportingBootImages"
	// NexusListBootImageSelectionsProcedure is the fully-qualified name of the Nexus's
	// ListBootImageSelections RPC.
	NexusListBootImageSelectionsProcedure = "/openhdc.nexus.v1.Nexus/ListBootImageSelections"
	// NexusListNetworksProcedure is the fully-qualified name of the Nexus's ListNetworks RPC.
	NexusListNetworksProcedure = "/openhdc.nexus.v1.Nexus/ListNetworks"
	// NexusCreateNetworkProcedure is the fully-qualified name of the Nexus's CreateNetwork RPC.
	NexusCreateNetworkProcedure = "/openhdc.nexus.v1.Nexus/CreateNetwork"
	// NexusCreateIPRangeProcedure is the fully-qualified name of the Nexus's CreateIPRange RPC.
	NexusCreateIPRangeProcedure = "/openhdc.nexus.v1.Nexus/CreateIPRange"
	// NexusDeleteNetworkProcedure is the fully-qualified name of the Nexus's DeleteNetwork RPC.
	NexusDeleteNetworkProcedure = "/openhdc.nexus.v1.Nexus/DeleteNetwork"
	// NexusDeleteIPRangeProcedure is the fully-qualified name of the Nexus's DeleteIPRange RPC.
	NexusDeleteIPRangeProcedure = "/openhdc.nexus.v1.Nexus/DeleteIPRange"
	// NexusUpdateFabricProcedure is the fully-qualified name of the Nexus's UpdateFabric RPC.
	NexusUpdateFabricProcedure = "/openhdc.nexus.v1.Nexus/UpdateFabric"
	// NexusUpdateVLANProcedure is the fully-qualified name of the Nexus's UpdateVLAN RPC.
	NexusUpdateVLANProcedure = "/openhdc.nexus.v1.Nexus/UpdateVLAN"
	// NexusUpdateSubnetProcedure is the fully-qualified name of the Nexus's UpdateSubnet RPC.
	NexusUpdateSubnetProcedure = "/openhdc.nexus.v1.Nexus/UpdateSubnet"
	// NexusUpdateIPRangeProcedure is the fully-qualified name of the Nexus's UpdateIPRange RPC.
	NexusUpdateIPRangeProcedure = "/openhdc.nexus.v1.Nexus/UpdateIPRange"
	// NexusListMachinesProcedure is the fully-qualified name of the Nexus's ListMachines RPC.
	NexusListMachinesProcedure = "/openhdc.nexus.v1.Nexus/ListMachines"
	// NexusGetMachineProcedure is the fully-qualified name of the Nexus's GetMachine RPC.
	NexusGetMachineProcedure = "/openhdc.nexus.v1.Nexus/GetMachine"
	// NexusCreateMachineProcedure is the fully-qualified name of the Nexus's CreateMachine RPC.
	NexusCreateMachineProcedure = "/openhdc.nexus.v1.Nexus/CreateMachine"
	// NexusPowerOnMachineProcedure is the fully-qualified name of the Nexus's PowerOnMachine RPC.
	NexusPowerOnMachineProcedure = "/openhdc.nexus.v1.Nexus/PowerOnMachine"
	// NexusPowerOffMachineProcedure is the fully-qualified name of the Nexus's PowerOffMachine RPC.
	NexusPowerOffMachineProcedure = "/openhdc.nexus.v1.Nexus/PowerOffMachine"
	// NexusAddMachineTagsProcedure is the fully-qualified name of the Nexus's AddMachineTags RPC.
	NexusAddMachineTagsProcedure = "/openhdc.nexus.v1.Nexus/AddMachineTags"
	// NexusRemoveMachineTagsProcedure is the fully-qualified name of the Nexus's RemoveMachineTags RPC.
	NexusRemoveMachineTagsProcedure = "/openhdc.nexus.v1.Nexus/RemoveMachineTags"
	// NexusListScopesProcedure is the fully-qualified name of the Nexus's ListScopes RPC.
	NexusListScopesProcedure = "/openhdc.nexus.v1.Nexus/ListScopes"
	// NexusCreateScopeProcedure is the fully-qualified name of the Nexus's CreateScope RPC.
	NexusCreateScopeProcedure = "/openhdc.nexus.v1.Nexus/CreateScope"
	// NexusListFacilitiesProcedure is the fully-qualified name of the Nexus's ListFacilities RPC.
	NexusListFacilitiesProcedure = "/openhdc.nexus.v1.Nexus/ListFacilities"
	// NexusGetFacilityProcedure is the fully-qualified name of the Nexus's GetFacility RPC.
	NexusGetFacilityProcedure = "/openhdc.nexus.v1.Nexus/GetFacility"
	// NexusCreateFacilityProcedure is the fully-qualified name of the Nexus's CreateFacility RPC.
	NexusCreateFacilityProcedure = "/openhdc.nexus.v1.Nexus/CreateFacility"
	// NexusUpdateFacilityProcedure is the fully-qualified name of the Nexus's UpdateFacility RPC.
	NexusUpdateFacilityProcedure = "/openhdc.nexus.v1.Nexus/UpdateFacility"
	// NexusDeleteFacilityProcedure is the fully-qualified name of the Nexus's DeleteFacility RPC.
	NexusDeleteFacilityProcedure = "/openhdc.nexus.v1.Nexus/DeleteFacility"
	// NexusExposeFacilityProcedure is the fully-qualified name of the Nexus's ExposeFacility RPC.
	NexusExposeFacilityProcedure = "/openhdc.nexus.v1.Nexus/ExposeFacility"
	// NexusAddFacilityUnitsProcedure is the fully-qualified name of the Nexus's AddFacilityUnits RPC.
	NexusAddFacilityUnitsProcedure = "/openhdc.nexus.v1.Nexus/AddFacilityUnits"
	// NexusListActionsProcedure is the fully-qualified name of the Nexus's ListActions RPC.
	NexusListActionsProcedure = "/openhdc.nexus.v1.Nexus/ListActions"
	// NexusDoActionProcedure is the fully-qualified name of the Nexus's DoAction RPC.
	NexusDoActionProcedure = "/openhdc.nexus.v1.Nexus/DoAction"
	// NexusListCharmsProcedure is the fully-qualified name of the Nexus's ListCharms RPC.
	NexusListCharmsProcedure = "/openhdc.nexus.v1.Nexus/ListCharms"
	// NexusGetCharmProcedure is the fully-qualified name of the Nexus's GetCharm RPC.
	NexusGetCharmProcedure = "/openhdc.nexus.v1.Nexus/GetCharm"
	// NexusGetCharmMetadataProcedure is the fully-qualified name of the Nexus's GetCharmMetadata RPC.
	NexusGetCharmMetadataProcedure = "/openhdc.nexus.v1.Nexus/GetCharmMetadata"
	// NexusListCharmArtifactsProcedure is the fully-qualified name of the Nexus's ListCharmArtifacts
	// RPC.
	NexusListCharmArtifactsProcedure = "/openhdc.nexus.v1.Nexus/ListCharmArtifacts"
	// NexusListApplicationsProcedure is the fully-qualified name of the Nexus's ListApplications RPC.
	NexusListApplicationsProcedure = "/openhdc.nexus.v1.Nexus/ListApplications"
	// NexusGetApplicationProcedure is the fully-qualified name of the Nexus's GetApplication RPC.
	NexusGetApplicationProcedure = "/openhdc.nexus.v1.Nexus/GetApplication"
	// NexusListReleasesProcedure is the fully-qualified name of the Nexus's ListReleases RPC.
	NexusListReleasesProcedure = "/openhdc.nexus.v1.Nexus/ListReleases"
	// NexusCreateReleaseProcedure is the fully-qualified name of the Nexus's CreateRelease RPC.
	NexusCreateReleaseProcedure = "/openhdc.nexus.v1.Nexus/CreateRelease"
	// NexusUpdateReleaseProcedure is the fully-qualified name of the Nexus's UpdateRelease RPC.
	NexusUpdateReleaseProcedure = "/openhdc.nexus.v1.Nexus/UpdateRelease"
	// NexusDeleteReleaseProcedure is the fully-qualified name of the Nexus's DeleteRelease RPC.
	NexusDeleteReleaseProcedure = "/openhdc.nexus.v1.Nexus/DeleteRelease"
	// NexusRollbackReleaseProcedure is the fully-qualified name of the Nexus's RollbackRelease RPC.
	NexusRollbackReleaseProcedure = "/openhdc.nexus.v1.Nexus/RollbackRelease"
	// NexusListChartsProcedure is the fully-qualified name of the Nexus's ListCharts RPC.
	NexusListChartsProcedure = "/openhdc.nexus.v1.Nexus/ListCharts"
	// NexusGetChartProcedure is the fully-qualified name of the Nexus's GetChart RPC.
	NexusGetChartProcedure = "/openhdc.nexus.v1.Nexus/GetChart"
	// NexusGetChartMetadataProcedure is the fully-qualified name of the Nexus's GetChartMetadata RPC.
	NexusGetChartMetadataProcedure = "/openhdc.nexus.v1.Nexus/GetChartMetadata"
	// NexusListTagsProcedure is the fully-qualified name of the Nexus's ListTags RPC.
	NexusListTagsProcedure = "/openhdc.nexus.v1.Nexus/ListTags"
	// NexusGetTagProcedure is the fully-qualified name of the Nexus's GetTag RPC.
	NexusGetTagProcedure = "/openhdc.nexus.v1.Nexus/GetTag"
	// NexusCreateTagProcedure is the fully-qualified name of the Nexus's CreateTag RPC.
	NexusCreateTagProcedure = "/openhdc.nexus.v1.Nexus/CreateTag"
	// NexusDeleteTagProcedure is the fully-qualified name of the Nexus's DeleteTag RPC.
	NexusDeleteTagProcedure = "/openhdc.nexus.v1.Nexus/DeleteTag"
	// NexusListStorageClassesProcedure is the fully-qualified name of the Nexus's ListStorageClasses
	// RPC.
	NexusListStorageClassesProcedure = "/openhdc.nexus.v1.Nexus/ListStorageClasses"
	// NexusCreateStorageClassProcedure is the fully-qualified name of the Nexus's CreateStorageClass
	// RPC.
	NexusCreateStorageClassProcedure = "/openhdc.nexus.v1.Nexus/CreateStorageClass"
)

// NexusClient is a client for the openhdc.nexus.v1.Nexus service.
type NexusClient interface {
	// General
	VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error)
	ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error)
	ListKubernetes(context.Context, *connect.Request[v1.ListKubernetesRequest]) (*connect.Response[v1.ListKubernetesResponse], error)
	// Configuration
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.Configuration], error)
	UpdateNTPServer(context.Context, *connect.Request[v1.UpdateNTPServerRequest]) (*connect.Response[v1.Configuration_NTPServer], error)
	UpdatePackageRepository(context.Context, *connect.Request[v1.UpdatePackageRepositoryRequest]) (*connect.Response[v1.Configuration_PackageRepository], error)
	CreateBootImage(context.Context, *connect.Request[v1.CreateBootImageRequest]) (*connect.Response[v1.Configuration_BootImage], error)
	SetDefaultBootImage(context.Context, *connect.Request[v1.SetDefaultBootImageRequest]) (*connect.Response[emptypb.Empty], error)
	ImportBootImages(context.Context, *connect.Request[v1.ImportBootImagesRequest]) (*connect.Response[emptypb.Empty], error)
	IsImportingBootImages(context.Context, *connect.Request[v1.IsImportingBootImagesRequest]) (*connect.Response[v1.IsImportingBootImagesResponse], error)
	ListBootImageSelections(context.Context, *connect.Request[v1.ListBootImageSelectionsRequest]) (*connect.Response[v1.ListBootImageSelectionsResponse], error)
	// Network
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	// Machine
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.Machine], error)
	CreateMachine(context.Context, *connect.Request[v1.CreateMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error)
	AddMachineTags(context.Context, *connect.Request[v1.AddMachineTagsRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveMachineTags(context.Context, *connect.Request[v1.RemoveMachineTagsRequest]) (*connect.Response[emptypb.Empty], error)
	// Scope
	ListScopes(context.Context, *connect.Request[v1.ListScopesRequest]) (*connect.Response[v1.ListScopesResponse], error)
	CreateScope(context.Context, *connect.Request[v1.CreateScopeRequest]) (*connect.Response[v1.Scope], error)
	// Facility
	ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error)
	CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error)
	UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error)
	DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error)
	ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error)
	DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error)
	GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error)
	GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error)
	ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error)
	// Application
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Application_Release], error)
	UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Application_Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
	GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Application_Chart], error)
	GetChartMetadata(context.Context, *connect.Request[v1.GetChartMetadataRequest]) (*connect.Response[v1.Application_Chart_Metadata], error)
	// Tag
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error)
	// StorageClass
	ListStorageClasses(context.Context, *connect.Request[v1.ListStorageClassesRequest]) (*connect.Response[v1.ListStorageClassesResponse], error)
	CreateStorageClass(context.Context, *connect.Request[v1.CreateStorageClassRequest]) (*connect.Response[v1.StorageClass], error)
}

// NewNexusClient constructs a client for the openhdc.nexus.v1.Nexus service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNexusClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NexusClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nexusMethods := v1.File_api_nexus_v1_nexus_proto.Services().ByName("Nexus").Methods()
	return &nexusClient{
		verifyEnvironment: connect.NewClient[v1.VerifyEnvironmentRequest, v1.VerifyEnvironmentResponse](
			httpClient,
			baseURL+NexusVerifyEnvironmentProcedure,
			connect.WithSchema(nexusMethods.ByName("VerifyEnvironment")),
			connect.WithClientOptions(opts...),
		),
		listCephes: connect.NewClient[v1.ListCephesRequest, v1.ListCephesResponse](
			httpClient,
			baseURL+NexusListCephesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListCephes")),
			connect.WithClientOptions(opts...),
		),
		listKubernetes: connect.NewClient[v1.ListKubernetesRequest, v1.ListKubernetesResponse](
			httpClient,
			baseURL+NexusListKubernetesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListKubernetes")),
			connect.WithClientOptions(opts...),
		),
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.Configuration](
			httpClient,
			baseURL+NexusGetConfigurationProcedure,
			connect.WithSchema(nexusMethods.ByName("GetConfiguration")),
			connect.WithClientOptions(opts...),
		),
		updateNTPServer: connect.NewClient[v1.UpdateNTPServerRequest, v1.Configuration_NTPServer](
			httpClient,
			baseURL+NexusUpdateNTPServerProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateNTPServer")),
			connect.WithClientOptions(opts...),
		),
		updatePackageRepository: connect.NewClient[v1.UpdatePackageRepositoryRequest, v1.Configuration_PackageRepository](
			httpClient,
			baseURL+NexusUpdatePackageRepositoryProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdatePackageRepository")),
			connect.WithClientOptions(opts...),
		),
		createBootImage: connect.NewClient[v1.CreateBootImageRequest, v1.Configuration_BootImage](
			httpClient,
			baseURL+NexusCreateBootImageProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateBootImage")),
			connect.WithClientOptions(opts...),
		),
		setDefaultBootImage: connect.NewClient[v1.SetDefaultBootImageRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusSetDefaultBootImageProcedure,
			connect.WithSchema(nexusMethods.ByName("SetDefaultBootImage")),
			connect.WithClientOptions(opts...),
		),
		importBootImages: connect.NewClient[v1.ImportBootImagesRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusImportBootImagesProcedure,
			connect.WithSchema(nexusMethods.ByName("ImportBootImages")),
			connect.WithClientOptions(opts...),
		),
		isImportingBootImages: connect.NewClient[v1.IsImportingBootImagesRequest, v1.IsImportingBootImagesResponse](
			httpClient,
			baseURL+NexusIsImportingBootImagesProcedure,
			connect.WithSchema(nexusMethods.ByName("IsImportingBootImages")),
			connect.WithClientOptions(opts...),
		),
		listBootImageSelections: connect.NewClient[v1.ListBootImageSelectionsRequest, v1.ListBootImageSelectionsResponse](
			httpClient,
			baseURL+NexusListBootImageSelectionsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListBootImageSelections")),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+NexusListNetworksProcedure,
			connect.WithSchema(nexusMethods.ByName("ListNetworks")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.Network](
			httpClient,
			baseURL+NexusCreateNetworkProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		createIPRange: connect.NewClient[v1.CreateIPRangeRequest, v1.Network_IPRange](
			httpClient,
			baseURL+NexusCreateIPRangeProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateIPRange")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDeleteNetworkProcedure,
			connect.WithSchema(nexusMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteIPRange: connect.NewClient[v1.DeleteIPRangeRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDeleteIPRangeProcedure,
			connect.WithSchema(nexusMethods.ByName("DeleteIPRange")),
			connect.WithClientOptions(opts...),
		),
		updateFabric: connect.NewClient[v1.UpdateFabricRequest, v1.Network_Fabric](
			httpClient,
			baseURL+NexusUpdateFabricProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateFabric")),
			connect.WithClientOptions(opts...),
		),
		updateVLAN: connect.NewClient[v1.UpdateVLANRequest, v1.Network_VLAN](
			httpClient,
			baseURL+NexusUpdateVLANProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateVLAN")),
			connect.WithClientOptions(opts...),
		),
		updateSubnet: connect.NewClient[v1.UpdateSubnetRequest, v1.Network_Subnet](
			httpClient,
			baseURL+NexusUpdateSubnetProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateSubnet")),
			connect.WithClientOptions(opts...),
		),
		updateIPRange: connect.NewClient[v1.UpdateIPRangeRequest, v1.Network_IPRange](
			httpClient,
			baseURL+NexusUpdateIPRangeProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateIPRange")),
			connect.WithClientOptions(opts...),
		),
		listMachines: connect.NewClient[v1.ListMachinesRequest, v1.ListMachinesResponse](
			httpClient,
			baseURL+NexusListMachinesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListMachines")),
			connect.WithClientOptions(opts...),
		),
		getMachine: connect.NewClient[v1.GetMachineRequest, v1.Machine](
			httpClient,
			baseURL+NexusGetMachineProcedure,
			connect.WithSchema(nexusMethods.ByName("GetMachine")),
			connect.WithClientOptions(opts...),
		),
		createMachine: connect.NewClient[v1.CreateMachineRequest, v1.Machine](
			httpClient,
			baseURL+NexusCreateMachineProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateMachine")),
			connect.WithClientOptions(opts...),
		),
		powerOnMachine: connect.NewClient[v1.PowerOnMachineRequest, v1.Machine](
			httpClient,
			baseURL+NexusPowerOnMachineProcedure,
			connect.WithSchema(nexusMethods.ByName("PowerOnMachine")),
			connect.WithClientOptions(opts...),
		),
		powerOffMachine: connect.NewClient[v1.PowerOffMachineRequest, v1.Machine](
			httpClient,
			baseURL+NexusPowerOffMachineProcedure,
			connect.WithSchema(nexusMethods.ByName("PowerOffMachine")),
			connect.WithClientOptions(opts...),
		),
		addMachineTags: connect.NewClient[v1.AddMachineTagsRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusAddMachineTagsProcedure,
			connect.WithSchema(nexusMethods.ByName("AddMachineTags")),
			connect.WithClientOptions(opts...),
		),
		removeMachineTags: connect.NewClient[v1.RemoveMachineTagsRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusRemoveMachineTagsProcedure,
			connect.WithSchema(nexusMethods.ByName("RemoveMachineTags")),
			connect.WithClientOptions(opts...),
		),
		listScopes: connect.NewClient[v1.ListScopesRequest, v1.ListScopesResponse](
			httpClient,
			baseURL+NexusListScopesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListScopes")),
			connect.WithClientOptions(opts...),
		),
		createScope: connect.NewClient[v1.CreateScopeRequest, v1.Scope](
			httpClient,
			baseURL+NexusCreateScopeProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateScope")),
			connect.WithClientOptions(opts...),
		),
		listFacilities: connect.NewClient[v1.ListFacilitiesRequest, v1.ListFacilitiesResponse](
			httpClient,
			baseURL+NexusListFacilitiesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListFacilities")),
			connect.WithClientOptions(opts...),
		),
		getFacility: connect.NewClient[v1.GetFacilityRequest, v1.Facility](
			httpClient,
			baseURL+NexusGetFacilityProcedure,
			connect.WithSchema(nexusMethods.ByName("GetFacility")),
			connect.WithClientOptions(opts...),
		),
		createFacility: connect.NewClient[v1.CreateFacilityRequest, v1.Facility](
			httpClient,
			baseURL+NexusCreateFacilityProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateFacility")),
			connect.WithClientOptions(opts...),
		),
		updateFacility: connect.NewClient[v1.UpdateFacilityRequest, v1.Facility](
			httpClient,
			baseURL+NexusUpdateFacilityProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateFacility")),
			connect.WithClientOptions(opts...),
		),
		deleteFacility: connect.NewClient[v1.DeleteFacilityRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDeleteFacilityProcedure,
			connect.WithSchema(nexusMethods.ByName("DeleteFacility")),
			connect.WithClientOptions(opts...),
		),
		exposeFacility: connect.NewClient[v1.ExposeFacilityRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusExposeFacilityProcedure,
			connect.WithSchema(nexusMethods.ByName("ExposeFacility")),
			connect.WithClientOptions(opts...),
		),
		addFacilityUnits: connect.NewClient[v1.AddFacilityUnitsRequest, v1.AddFacilityUnitsResponse](
			httpClient,
			baseURL+NexusAddFacilityUnitsProcedure,
			connect.WithSchema(nexusMethods.ByName("AddFacilityUnits")),
			connect.WithClientOptions(opts...),
		),
		listActions: connect.NewClient[v1.ListActionsRequest, v1.ListActionsResponse](
			httpClient,
			baseURL+NexusListActionsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListActions")),
			connect.WithClientOptions(opts...),
		),
		doAction: connect.NewClient[v1.DoActionRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDoActionProcedure,
			connect.WithSchema(nexusMethods.ByName("DoAction")),
			connect.WithClientOptions(opts...),
		),
		listCharms: connect.NewClient[v1.ListCharmsRequest, v1.ListCharmsResponse](
			httpClient,
			baseURL+NexusListCharmsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListCharms")),
			connect.WithClientOptions(opts...),
		),
		getCharm: connect.NewClient[v1.GetCharmRequest, v1.Facility_Charm](
			httpClient,
			baseURL+NexusGetCharmProcedure,
			connect.WithSchema(nexusMethods.ByName("GetCharm")),
			connect.WithClientOptions(opts...),
		),
		getCharmMetadata: connect.NewClient[v1.GetCharmMetadataRequest, v1.Facility_Charm_Metadata](
			httpClient,
			baseURL+NexusGetCharmMetadataProcedure,
			connect.WithSchema(nexusMethods.ByName("GetCharmMetadata")),
			connect.WithClientOptions(opts...),
		),
		listCharmArtifacts: connect.NewClient[v1.ListCharmArtifactsRequest, v1.ListCharmArtifactsResponse](
			httpClient,
			baseURL+NexusListCharmArtifactsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListCharmArtifacts")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+NexusListApplicationsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.Application](
			httpClient,
			baseURL+NexusGetApplicationProcedure,
			connect.WithSchema(nexusMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
		listReleases: connect.NewClient[v1.ListReleasesRequest, v1.ListReleasesResponse](
			httpClient,
			baseURL+NexusListReleasesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListReleases")),
			connect.WithClientOptions(opts...),
		),
		createRelease: connect.NewClient[v1.CreateReleaseRequest, v1.Application_Release](
			httpClient,
			baseURL+NexusCreateReleaseProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateRelease")),
			connect.WithClientOptions(opts...),
		),
		updateRelease: connect.NewClient[v1.UpdateReleaseRequest, v1.Application_Release](
			httpClient,
			baseURL+NexusUpdateReleaseProcedure,
			connect.WithSchema(nexusMethods.ByName("UpdateRelease")),
			connect.WithClientOptions(opts...),
		),
		deleteRelease: connect.NewClient[v1.DeleteReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDeleteReleaseProcedure,
			connect.WithSchema(nexusMethods.ByName("DeleteRelease")),
			connect.WithClientOptions(opts...),
		),
		rollbackRelease: connect.NewClient[v1.RollbackReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusRollbackReleaseProcedure,
			connect.WithSchema(nexusMethods.ByName("RollbackRelease")),
			connect.WithClientOptions(opts...),
		),
		listCharts: connect.NewClient[v1.ListChartsRequest, v1.ListChartsResponse](
			httpClient,
			baseURL+NexusListChartsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListCharts")),
			connect.WithClientOptions(opts...),
		),
		getChart: connect.NewClient[v1.GetChartRequest, v1.Application_Chart](
			httpClient,
			baseURL+NexusGetChartProcedure,
			connect.WithSchema(nexusMethods.ByName("GetChart")),
			connect.WithClientOptions(opts...),
		),
		getChartMetadata: connect.NewClient[v1.GetChartMetadataRequest, v1.Application_Chart_Metadata](
			httpClient,
			baseURL+NexusGetChartMetadataProcedure,
			connect.WithSchema(nexusMethods.ByName("GetChartMetadata")),
			connect.WithClientOptions(opts...),
		),
		listTags: connect.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+NexusListTagsProcedure,
			connect.WithSchema(nexusMethods.ByName("ListTags")),
			connect.WithClientOptions(opts...),
		),
		getTag: connect.NewClient[v1.GetTagRequest, v1.Tag](
			httpClient,
			baseURL+NexusGetTagProcedure,
			connect.WithSchema(nexusMethods.ByName("GetTag")),
			connect.WithClientOptions(opts...),
		),
		createTag: connect.NewClient[v1.CreateTagRequest, v1.Tag](
			httpClient,
			baseURL+NexusCreateTagProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, emptypb.Empty](
			httpClient,
			baseURL+NexusDeleteTagProcedure,
			connect.WithSchema(nexusMethods.ByName("DeleteTag")),
			connect.WithClientOptions(opts...),
		),
		listStorageClasses: connect.NewClient[v1.ListStorageClassesRequest, v1.ListStorageClassesResponse](
			httpClient,
			baseURL+NexusListStorageClassesProcedure,
			connect.WithSchema(nexusMethods.ByName("ListStorageClasses")),
			connect.WithClientOptions(opts...),
		),
		createStorageClass: connect.NewClient[v1.CreateStorageClassRequest, v1.StorageClass](
			httpClient,
			baseURL+NexusCreateStorageClassProcedure,
			connect.WithSchema(nexusMethods.ByName("CreateStorageClass")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nexusClient implements NexusClient.
type nexusClient struct {
	verifyEnvironment       *connect.Client[v1.VerifyEnvironmentRequest, v1.VerifyEnvironmentResponse]
	listCephes              *connect.Client[v1.ListCephesRequest, v1.ListCephesResponse]
	listKubernetes          *connect.Client[v1.ListKubernetesRequest, v1.ListKubernetesResponse]
	getConfiguration        *connect.Client[v1.GetConfigurationRequest, v1.Configuration]
	updateNTPServer         *connect.Client[v1.UpdateNTPServerRequest, v1.Configuration_NTPServer]
	updatePackageRepository *connect.Client[v1.UpdatePackageRepositoryRequest, v1.Configuration_PackageRepository]
	createBootImage         *connect.Client[v1.CreateBootImageRequest, v1.Configuration_BootImage]
	setDefaultBootImage     *connect.Client[v1.SetDefaultBootImageRequest, emptypb.Empty]
	importBootImages        *connect.Client[v1.ImportBootImagesRequest, emptypb.Empty]
	isImportingBootImages   *connect.Client[v1.IsImportingBootImagesRequest, v1.IsImportingBootImagesResponse]
	listBootImageSelections *connect.Client[v1.ListBootImageSelectionsRequest, v1.ListBootImageSelectionsResponse]
	listNetworks            *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	createNetwork           *connect.Client[v1.CreateNetworkRequest, v1.Network]
	createIPRange           *connect.Client[v1.CreateIPRangeRequest, v1.Network_IPRange]
	deleteNetwork           *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	deleteIPRange           *connect.Client[v1.DeleteIPRangeRequest, emptypb.Empty]
	updateFabric            *connect.Client[v1.UpdateFabricRequest, v1.Network_Fabric]
	updateVLAN              *connect.Client[v1.UpdateVLANRequest, v1.Network_VLAN]
	updateSubnet            *connect.Client[v1.UpdateSubnetRequest, v1.Network_Subnet]
	updateIPRange           *connect.Client[v1.UpdateIPRangeRequest, v1.Network_IPRange]
	listMachines            *connect.Client[v1.ListMachinesRequest, v1.ListMachinesResponse]
	getMachine              *connect.Client[v1.GetMachineRequest, v1.Machine]
	createMachine           *connect.Client[v1.CreateMachineRequest, v1.Machine]
	powerOnMachine          *connect.Client[v1.PowerOnMachineRequest, v1.Machine]
	powerOffMachine         *connect.Client[v1.PowerOffMachineRequest, v1.Machine]
	addMachineTags          *connect.Client[v1.AddMachineTagsRequest, emptypb.Empty]
	removeMachineTags       *connect.Client[v1.RemoveMachineTagsRequest, emptypb.Empty]
	listScopes              *connect.Client[v1.ListScopesRequest, v1.ListScopesResponse]
	createScope             *connect.Client[v1.CreateScopeRequest, v1.Scope]
	listFacilities          *connect.Client[v1.ListFacilitiesRequest, v1.ListFacilitiesResponse]
	getFacility             *connect.Client[v1.GetFacilityRequest, v1.Facility]
	createFacility          *connect.Client[v1.CreateFacilityRequest, v1.Facility]
	updateFacility          *connect.Client[v1.UpdateFacilityRequest, v1.Facility]
	deleteFacility          *connect.Client[v1.DeleteFacilityRequest, emptypb.Empty]
	exposeFacility          *connect.Client[v1.ExposeFacilityRequest, emptypb.Empty]
	addFacilityUnits        *connect.Client[v1.AddFacilityUnitsRequest, v1.AddFacilityUnitsResponse]
	listActions             *connect.Client[v1.ListActionsRequest, v1.ListActionsResponse]
	doAction                *connect.Client[v1.DoActionRequest, emptypb.Empty]
	listCharms              *connect.Client[v1.ListCharmsRequest, v1.ListCharmsResponse]
	getCharm                *connect.Client[v1.GetCharmRequest, v1.Facility_Charm]
	getCharmMetadata        *connect.Client[v1.GetCharmMetadataRequest, v1.Facility_Charm_Metadata]
	listCharmArtifacts      *connect.Client[v1.ListCharmArtifactsRequest, v1.ListCharmArtifactsResponse]
	listApplications        *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	getApplication          *connect.Client[v1.GetApplicationRequest, v1.Application]
	listReleases            *connect.Client[v1.ListReleasesRequest, v1.ListReleasesResponse]
	createRelease           *connect.Client[v1.CreateReleaseRequest, v1.Application_Release]
	updateRelease           *connect.Client[v1.UpdateReleaseRequest, v1.Application_Release]
	deleteRelease           *connect.Client[v1.DeleteReleaseRequest, emptypb.Empty]
	rollbackRelease         *connect.Client[v1.RollbackReleaseRequest, emptypb.Empty]
	listCharts              *connect.Client[v1.ListChartsRequest, v1.ListChartsResponse]
	getChart                *connect.Client[v1.GetChartRequest, v1.Application_Chart]
	getChartMetadata        *connect.Client[v1.GetChartMetadataRequest, v1.Application_Chart_Metadata]
	listTags                *connect.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	getTag                  *connect.Client[v1.GetTagRequest, v1.Tag]
	createTag               *connect.Client[v1.CreateTagRequest, v1.Tag]
	deleteTag               *connect.Client[v1.DeleteTagRequest, emptypb.Empty]
	listStorageClasses      *connect.Client[v1.ListStorageClassesRequest, v1.ListStorageClassesResponse]
	createStorageClass      *connect.Client[v1.CreateStorageClassRequest, v1.StorageClass]
}

// VerifyEnvironment calls openhdc.nexus.v1.Nexus.VerifyEnvironment.
func (c *nexusClient) VerifyEnvironment(ctx context.Context, req *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error) {
	return c.verifyEnvironment.CallUnary(ctx, req)
}

// ListCephes calls openhdc.nexus.v1.Nexus.ListCephes.
func (c *nexusClient) ListCephes(ctx context.Context, req *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error) {
	return c.listCephes.CallUnary(ctx, req)
}

// ListKubernetes calls openhdc.nexus.v1.Nexus.ListKubernetes.
func (c *nexusClient) ListKubernetes(ctx context.Context, req *connect.Request[v1.ListKubernetesRequest]) (*connect.Response[v1.ListKubernetesResponse], error) {
	return c.listKubernetes.CallUnary(ctx, req)
}

// GetConfiguration calls openhdc.nexus.v1.Nexus.GetConfiguration.
func (c *nexusClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.Configuration], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// UpdateNTPServer calls openhdc.nexus.v1.Nexus.UpdateNTPServer.
func (c *nexusClient) UpdateNTPServer(ctx context.Context, req *connect.Request[v1.UpdateNTPServerRequest]) (*connect.Response[v1.Configuration_NTPServer], error) {
	return c.updateNTPServer.CallUnary(ctx, req)
}

// UpdatePackageRepository calls openhdc.nexus.v1.Nexus.UpdatePackageRepository.
func (c *nexusClient) UpdatePackageRepository(ctx context.Context, req *connect.Request[v1.UpdatePackageRepositoryRequest]) (*connect.Response[v1.Configuration_PackageRepository], error) {
	return c.updatePackageRepository.CallUnary(ctx, req)
}

// CreateBootImage calls openhdc.nexus.v1.Nexus.CreateBootImage.
func (c *nexusClient) CreateBootImage(ctx context.Context, req *connect.Request[v1.CreateBootImageRequest]) (*connect.Response[v1.Configuration_BootImage], error) {
	return c.createBootImage.CallUnary(ctx, req)
}

// SetDefaultBootImage calls openhdc.nexus.v1.Nexus.SetDefaultBootImage.
func (c *nexusClient) SetDefaultBootImage(ctx context.Context, req *connect.Request[v1.SetDefaultBootImageRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDefaultBootImage.CallUnary(ctx, req)
}

// ImportBootImages calls openhdc.nexus.v1.Nexus.ImportBootImages.
func (c *nexusClient) ImportBootImages(ctx context.Context, req *connect.Request[v1.ImportBootImagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.importBootImages.CallUnary(ctx, req)
}

// IsImportingBootImages calls openhdc.nexus.v1.Nexus.IsImportingBootImages.
func (c *nexusClient) IsImportingBootImages(ctx context.Context, req *connect.Request[v1.IsImportingBootImagesRequest]) (*connect.Response[v1.IsImportingBootImagesResponse], error) {
	return c.isImportingBootImages.CallUnary(ctx, req)
}

// ListBootImageSelections calls openhdc.nexus.v1.Nexus.ListBootImageSelections.
func (c *nexusClient) ListBootImageSelections(ctx context.Context, req *connect.Request[v1.ListBootImageSelectionsRequest]) (*connect.Response[v1.ListBootImageSelectionsResponse], error) {
	return c.listBootImageSelections.CallUnary(ctx, req)
}

// ListNetworks calls openhdc.nexus.v1.Nexus.ListNetworks.
func (c *nexusClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// CreateNetwork calls openhdc.nexus.v1.Nexus.CreateNetwork.
func (c *nexusClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// CreateIPRange calls openhdc.nexus.v1.Nexus.CreateIPRange.
func (c *nexusClient) CreateIPRange(ctx context.Context, req *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return c.createIPRange.CallUnary(ctx, req)
}

// DeleteNetwork calls openhdc.nexus.v1.Nexus.DeleteNetwork.
func (c *nexusClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// DeleteIPRange calls openhdc.nexus.v1.Nexus.DeleteIPRange.
func (c *nexusClient) DeleteIPRange(ctx context.Context, req *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteIPRange.CallUnary(ctx, req)
}

// UpdateFabric calls openhdc.nexus.v1.Nexus.UpdateFabric.
func (c *nexusClient) UpdateFabric(ctx context.Context, req *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error) {
	return c.updateFabric.CallUnary(ctx, req)
}

// UpdateVLAN calls openhdc.nexus.v1.Nexus.UpdateVLAN.
func (c *nexusClient) UpdateVLAN(ctx context.Context, req *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error) {
	return c.updateVLAN.CallUnary(ctx, req)
}

// UpdateSubnet calls openhdc.nexus.v1.Nexus.UpdateSubnet.
func (c *nexusClient) UpdateSubnet(ctx context.Context, req *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error) {
	return c.updateSubnet.CallUnary(ctx, req)
}

// UpdateIPRange calls openhdc.nexus.v1.Nexus.UpdateIPRange.
func (c *nexusClient) UpdateIPRange(ctx context.Context, req *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return c.updateIPRange.CallUnary(ctx, req)
}

// ListMachines calls openhdc.nexus.v1.Nexus.ListMachines.
func (c *nexusClient) ListMachines(ctx context.Context, req *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// GetMachine calls openhdc.nexus.v1.Nexus.GetMachine.
func (c *nexusClient) GetMachine(ctx context.Context, req *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.getMachine.CallUnary(ctx, req)
}

// CreateMachine calls openhdc.nexus.v1.Nexus.CreateMachine.
func (c *nexusClient) CreateMachine(ctx context.Context, req *connect.Request[v1.CreateMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.createMachine.CallUnary(ctx, req)
}

// PowerOnMachine calls openhdc.nexus.v1.Nexus.PowerOnMachine.
func (c *nexusClient) PowerOnMachine(ctx context.Context, req *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.powerOnMachine.CallUnary(ctx, req)
}

// PowerOffMachine calls openhdc.nexus.v1.Nexus.PowerOffMachine.
func (c *nexusClient) PowerOffMachine(ctx context.Context, req *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.powerOffMachine.CallUnary(ctx, req)
}

// AddMachineTags calls openhdc.nexus.v1.Nexus.AddMachineTags.
func (c *nexusClient) AddMachineTags(ctx context.Context, req *connect.Request[v1.AddMachineTagsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addMachineTags.CallUnary(ctx, req)
}

// RemoveMachineTags calls openhdc.nexus.v1.Nexus.RemoveMachineTags.
func (c *nexusClient) RemoveMachineTags(ctx context.Context, req *connect.Request[v1.RemoveMachineTagsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeMachineTags.CallUnary(ctx, req)
}

// ListScopes calls openhdc.nexus.v1.Nexus.ListScopes.
func (c *nexusClient) ListScopes(ctx context.Context, req *connect.Request[v1.ListScopesRequest]) (*connect.Response[v1.ListScopesResponse], error) {
	return c.listScopes.CallUnary(ctx, req)
}

// CreateScope calls openhdc.nexus.v1.Nexus.CreateScope.
func (c *nexusClient) CreateScope(ctx context.Context, req *connect.Request[v1.CreateScopeRequest]) (*connect.Response[v1.Scope], error) {
	return c.createScope.CallUnary(ctx, req)
}

// ListFacilities calls openhdc.nexus.v1.Nexus.ListFacilities.
func (c *nexusClient) ListFacilities(ctx context.Context, req *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error) {
	return c.listFacilities.CallUnary(ctx, req)
}

// GetFacility calls openhdc.nexus.v1.Nexus.GetFacility.
func (c *nexusClient) GetFacility(ctx context.Context, req *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.getFacility.CallUnary(ctx, req)
}

// CreateFacility calls openhdc.nexus.v1.Nexus.CreateFacility.
func (c *nexusClient) CreateFacility(ctx context.Context, req *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// UpdateFacility calls openhdc.nexus.v1.Nexus.UpdateFacility.
func (c *nexusClient) UpdateFacility(ctx context.Context, req *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.updateFacility.CallUnary(ctx, req)
}

// DeleteFacility calls openhdc.nexus.v1.Nexus.DeleteFacility.
func (c *nexusClient) DeleteFacility(ctx context.Context, req *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFacility.CallUnary(ctx, req)
}

// ExposeFacility calls openhdc.nexus.v1.Nexus.ExposeFacility.
func (c *nexusClient) ExposeFacility(ctx context.Context, req *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.exposeFacility.CallUnary(ctx, req)
}

// AddFacilityUnits calls openhdc.nexus.v1.Nexus.AddFacilityUnits.
func (c *nexusClient) AddFacilityUnits(ctx context.Context, req *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error) {
	return c.addFacilityUnits.CallUnary(ctx, req)
}

// ListActions calls openhdc.nexus.v1.Nexus.ListActions.
func (c *nexusClient) ListActions(ctx context.Context, req *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// DoAction calls openhdc.nexus.v1.Nexus.DoAction.
func (c *nexusClient) DoAction(ctx context.Context, req *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.doAction.CallUnary(ctx, req)
}

// ListCharms calls openhdc.nexus.v1.Nexus.ListCharms.
func (c *nexusClient) ListCharms(ctx context.Context, req *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error) {
	return c.listCharms.CallUnary(ctx, req)
}

// GetCharm calls openhdc.nexus.v1.Nexus.GetCharm.
func (c *nexusClient) GetCharm(ctx context.Context, req *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error) {
	return c.getCharm.CallUnary(ctx, req)
}

// GetCharmMetadata calls openhdc.nexus.v1.Nexus.GetCharmMetadata.
func (c *nexusClient) GetCharmMetadata(ctx context.Context, req *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error) {
	return c.getCharmMetadata.CallUnary(ctx, req)
}

// ListCharmArtifacts calls openhdc.nexus.v1.Nexus.ListCharmArtifacts.
func (c *nexusClient) ListCharmArtifacts(ctx context.Context, req *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error) {
	return c.listCharmArtifacts.CallUnary(ctx, req)
}

// ListApplications calls openhdc.nexus.v1.Nexus.ListApplications.
func (c *nexusClient) ListApplications(ctx context.Context, req *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// GetApplication calls openhdc.nexus.v1.Nexus.GetApplication.
func (c *nexusClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// ListReleases calls openhdc.nexus.v1.Nexus.ListReleases.
func (c *nexusClient) ListReleases(ctx context.Context, req *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return c.listReleases.CallUnary(ctx, req)
}

// CreateRelease calls openhdc.nexus.v1.Nexus.CreateRelease.
func (c *nexusClient) CreateRelease(ctx context.Context, req *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Application_Release], error) {
	return c.createRelease.CallUnary(ctx, req)
}

// UpdateRelease calls openhdc.nexus.v1.Nexus.UpdateRelease.
func (c *nexusClient) UpdateRelease(ctx context.Context, req *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Application_Release], error) {
	return c.updateRelease.CallUnary(ctx, req)
}

// DeleteRelease calls openhdc.nexus.v1.Nexus.DeleteRelease.
func (c *nexusClient) DeleteRelease(ctx context.Context, req *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRelease.CallUnary(ctx, req)
}

// RollbackRelease calls openhdc.nexus.v1.Nexus.RollbackRelease.
func (c *nexusClient) RollbackRelease(ctx context.Context, req *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.rollbackRelease.CallUnary(ctx, req)
}

// ListCharts calls openhdc.nexus.v1.Nexus.ListCharts.
func (c *nexusClient) ListCharts(ctx context.Context, req *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return c.listCharts.CallUnary(ctx, req)
}

// GetChart calls openhdc.nexus.v1.Nexus.GetChart.
func (c *nexusClient) GetChart(ctx context.Context, req *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Application_Chart], error) {
	return c.getChart.CallUnary(ctx, req)
}

// GetChartMetadata calls openhdc.nexus.v1.Nexus.GetChartMetadata.
func (c *nexusClient) GetChartMetadata(ctx context.Context, req *connect.Request[v1.GetChartMetadataRequest]) (*connect.Response[v1.Application_Chart_Metadata], error) {
	return c.getChartMetadata.CallUnary(ctx, req)
}

// ListTags calls openhdc.nexus.v1.Nexus.ListTags.
func (c *nexusClient) ListTags(ctx context.Context, req *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// GetTag calls openhdc.nexus.v1.Nexus.GetTag.
func (c *nexusClient) GetTag(ctx context.Context, req *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error) {
	return c.getTag.CallUnary(ctx, req)
}

// CreateTag calls openhdc.nexus.v1.Nexus.CreateTag.
func (c *nexusClient) CreateTag(ctx context.Context, req *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error) {
	return c.createTag.CallUnary(ctx, req)
}

// DeleteTag calls openhdc.nexus.v1.Nexus.DeleteTag.
func (c *nexusClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// ListStorageClasses calls openhdc.nexus.v1.Nexus.ListStorageClasses.
func (c *nexusClient) ListStorageClasses(ctx context.Context, req *connect.Request[v1.ListStorageClassesRequest]) (*connect.Response[v1.ListStorageClassesResponse], error) {
	return c.listStorageClasses.CallUnary(ctx, req)
}

// CreateStorageClass calls openhdc.nexus.v1.Nexus.CreateStorageClass.
func (c *nexusClient) CreateStorageClass(ctx context.Context, req *connect.Request[v1.CreateStorageClassRequest]) (*connect.Response[v1.StorageClass], error) {
	return c.createStorageClass.CallUnary(ctx, req)
}

// NexusHandler is an implementation of the openhdc.nexus.v1.Nexus service.
type NexusHandler interface {
	// General
	VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error)
	ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error)
	ListKubernetes(context.Context, *connect.Request[v1.ListKubernetesRequest]) (*connect.Response[v1.ListKubernetesResponse], error)
	// Configuration
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.Configuration], error)
	UpdateNTPServer(context.Context, *connect.Request[v1.UpdateNTPServerRequest]) (*connect.Response[v1.Configuration_NTPServer], error)
	UpdatePackageRepository(context.Context, *connect.Request[v1.UpdatePackageRepositoryRequest]) (*connect.Response[v1.Configuration_PackageRepository], error)
	CreateBootImage(context.Context, *connect.Request[v1.CreateBootImageRequest]) (*connect.Response[v1.Configuration_BootImage], error)
	SetDefaultBootImage(context.Context, *connect.Request[v1.SetDefaultBootImageRequest]) (*connect.Response[emptypb.Empty], error)
	ImportBootImages(context.Context, *connect.Request[v1.ImportBootImagesRequest]) (*connect.Response[emptypb.Empty], error)
	IsImportingBootImages(context.Context, *connect.Request[v1.IsImportingBootImagesRequest]) (*connect.Response[v1.IsImportingBootImagesResponse], error)
	ListBootImageSelections(context.Context, *connect.Request[v1.ListBootImageSelectionsRequest]) (*connect.Response[v1.ListBootImageSelectionsResponse], error)
	// Network
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	// Machine
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.Machine], error)
	CreateMachine(context.Context, *connect.Request[v1.CreateMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error)
	AddMachineTags(context.Context, *connect.Request[v1.AddMachineTagsRequest]) (*connect.Response[emptypb.Empty], error)
	RemoveMachineTags(context.Context, *connect.Request[v1.RemoveMachineTagsRequest]) (*connect.Response[emptypb.Empty], error)
	// Scope
	ListScopes(context.Context, *connect.Request[v1.ListScopesRequest]) (*connect.Response[v1.ListScopesResponse], error)
	CreateScope(context.Context, *connect.Request[v1.CreateScopeRequest]) (*connect.Response[v1.Scope], error)
	// Facility
	ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error)
	CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error)
	UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error)
	DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error)
	ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error)
	DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error)
	GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error)
	GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error)
	ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error)
	// Application
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error)
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Application_Release], error)
	UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Application_Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
	GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Application_Chart], error)
	GetChartMetadata(context.Context, *connect.Request[v1.GetChartMetadataRequest]) (*connect.Response[v1.Application_Chart_Metadata], error)
	// Tag
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error)
	// StorageClass
	ListStorageClasses(context.Context, *connect.Request[v1.ListStorageClassesRequest]) (*connect.Response[v1.ListStorageClassesResponse], error)
	CreateStorageClass(context.Context, *connect.Request[v1.CreateStorageClassRequest]) (*connect.Response[v1.StorageClass], error)
}

// NewNexusHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNexusHandler(svc NexusHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nexusMethods := v1.File_api_nexus_v1_nexus_proto.Services().ByName("Nexus").Methods()
	nexusVerifyEnvironmentHandler := connect.NewUnaryHandler(
		NexusVerifyEnvironmentProcedure,
		svc.VerifyEnvironment,
		connect.WithSchema(nexusMethods.ByName("VerifyEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListCephesHandler := connect.NewUnaryHandler(
		NexusListCephesProcedure,
		svc.ListCephes,
		connect.WithSchema(nexusMethods.ByName("ListCephes")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListKubernetesHandler := connect.NewUnaryHandler(
		NexusListKubernetesProcedure,
		svc.ListKubernetes,
		connect.WithSchema(nexusMethods.ByName("ListKubernetes")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetConfigurationHandler := connect.NewUnaryHandler(
		NexusGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(nexusMethods.ByName("GetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateNTPServerHandler := connect.NewUnaryHandler(
		NexusUpdateNTPServerProcedure,
		svc.UpdateNTPServer,
		connect.WithSchema(nexusMethods.ByName("UpdateNTPServer")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdatePackageRepositoryHandler := connect.NewUnaryHandler(
		NexusUpdatePackageRepositoryProcedure,
		svc.UpdatePackageRepository,
		connect.WithSchema(nexusMethods.ByName("UpdatePackageRepository")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateBootImageHandler := connect.NewUnaryHandler(
		NexusCreateBootImageProcedure,
		svc.CreateBootImage,
		connect.WithSchema(nexusMethods.ByName("CreateBootImage")),
		connect.WithHandlerOptions(opts...),
	)
	nexusSetDefaultBootImageHandler := connect.NewUnaryHandler(
		NexusSetDefaultBootImageProcedure,
		svc.SetDefaultBootImage,
		connect.WithSchema(nexusMethods.ByName("SetDefaultBootImage")),
		connect.WithHandlerOptions(opts...),
	)
	nexusImportBootImagesHandler := connect.NewUnaryHandler(
		NexusImportBootImagesProcedure,
		svc.ImportBootImages,
		connect.WithSchema(nexusMethods.ByName("ImportBootImages")),
		connect.WithHandlerOptions(opts...),
	)
	nexusIsImportingBootImagesHandler := connect.NewUnaryHandler(
		NexusIsImportingBootImagesProcedure,
		svc.IsImportingBootImages,
		connect.WithSchema(nexusMethods.ByName("IsImportingBootImages")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListBootImageSelectionsHandler := connect.NewUnaryHandler(
		NexusListBootImageSelectionsProcedure,
		svc.ListBootImageSelections,
		connect.WithSchema(nexusMethods.ByName("ListBootImageSelections")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListNetworksHandler := connect.NewUnaryHandler(
		NexusListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(nexusMethods.ByName("ListNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateNetworkHandler := connect.NewUnaryHandler(
		NexusCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(nexusMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateIPRangeHandler := connect.NewUnaryHandler(
		NexusCreateIPRangeProcedure,
		svc.CreateIPRange,
		connect.WithSchema(nexusMethods.ByName("CreateIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDeleteNetworkHandler := connect.NewUnaryHandler(
		NexusDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(nexusMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDeleteIPRangeHandler := connect.NewUnaryHandler(
		NexusDeleteIPRangeProcedure,
		svc.DeleteIPRange,
		connect.WithSchema(nexusMethods.ByName("DeleteIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateFabricHandler := connect.NewUnaryHandler(
		NexusUpdateFabricProcedure,
		svc.UpdateFabric,
		connect.WithSchema(nexusMethods.ByName("UpdateFabric")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateVLANHandler := connect.NewUnaryHandler(
		NexusUpdateVLANProcedure,
		svc.UpdateVLAN,
		connect.WithSchema(nexusMethods.ByName("UpdateVLAN")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateSubnetHandler := connect.NewUnaryHandler(
		NexusUpdateSubnetProcedure,
		svc.UpdateSubnet,
		connect.WithSchema(nexusMethods.ByName("UpdateSubnet")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateIPRangeHandler := connect.NewUnaryHandler(
		NexusUpdateIPRangeProcedure,
		svc.UpdateIPRange,
		connect.WithSchema(nexusMethods.ByName("UpdateIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListMachinesHandler := connect.NewUnaryHandler(
		NexusListMachinesProcedure,
		svc.ListMachines,
		connect.WithSchema(nexusMethods.ByName("ListMachines")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetMachineHandler := connect.NewUnaryHandler(
		NexusGetMachineProcedure,
		svc.GetMachine,
		connect.WithSchema(nexusMethods.ByName("GetMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateMachineHandler := connect.NewUnaryHandler(
		NexusCreateMachineProcedure,
		svc.CreateMachine,
		connect.WithSchema(nexusMethods.ByName("CreateMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nexusPowerOnMachineHandler := connect.NewUnaryHandler(
		NexusPowerOnMachineProcedure,
		svc.PowerOnMachine,
		connect.WithSchema(nexusMethods.ByName("PowerOnMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nexusPowerOffMachineHandler := connect.NewUnaryHandler(
		NexusPowerOffMachineProcedure,
		svc.PowerOffMachine,
		connect.WithSchema(nexusMethods.ByName("PowerOffMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nexusAddMachineTagsHandler := connect.NewUnaryHandler(
		NexusAddMachineTagsProcedure,
		svc.AddMachineTags,
		connect.WithSchema(nexusMethods.ByName("AddMachineTags")),
		connect.WithHandlerOptions(opts...),
	)
	nexusRemoveMachineTagsHandler := connect.NewUnaryHandler(
		NexusRemoveMachineTagsProcedure,
		svc.RemoveMachineTags,
		connect.WithSchema(nexusMethods.ByName("RemoveMachineTags")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListScopesHandler := connect.NewUnaryHandler(
		NexusListScopesProcedure,
		svc.ListScopes,
		connect.WithSchema(nexusMethods.ByName("ListScopes")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateScopeHandler := connect.NewUnaryHandler(
		NexusCreateScopeProcedure,
		svc.CreateScope,
		connect.WithSchema(nexusMethods.ByName("CreateScope")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListFacilitiesHandler := connect.NewUnaryHandler(
		NexusListFacilitiesProcedure,
		svc.ListFacilities,
		connect.WithSchema(nexusMethods.ByName("ListFacilities")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetFacilityHandler := connect.NewUnaryHandler(
		NexusGetFacilityProcedure,
		svc.GetFacility,
		connect.WithSchema(nexusMethods.ByName("GetFacility")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateFacilityHandler := connect.NewUnaryHandler(
		NexusCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(nexusMethods.ByName("CreateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateFacilityHandler := connect.NewUnaryHandler(
		NexusUpdateFacilityProcedure,
		svc.UpdateFacility,
		connect.WithSchema(nexusMethods.ByName("UpdateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDeleteFacilityHandler := connect.NewUnaryHandler(
		NexusDeleteFacilityProcedure,
		svc.DeleteFacility,
		connect.WithSchema(nexusMethods.ByName("DeleteFacility")),
		connect.WithHandlerOptions(opts...),
	)
	nexusExposeFacilityHandler := connect.NewUnaryHandler(
		NexusExposeFacilityProcedure,
		svc.ExposeFacility,
		connect.WithSchema(nexusMethods.ByName("ExposeFacility")),
		connect.WithHandlerOptions(opts...),
	)
	nexusAddFacilityUnitsHandler := connect.NewUnaryHandler(
		NexusAddFacilityUnitsProcedure,
		svc.AddFacilityUnits,
		connect.WithSchema(nexusMethods.ByName("AddFacilityUnits")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListActionsHandler := connect.NewUnaryHandler(
		NexusListActionsProcedure,
		svc.ListActions,
		connect.WithSchema(nexusMethods.ByName("ListActions")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDoActionHandler := connect.NewUnaryHandler(
		NexusDoActionProcedure,
		svc.DoAction,
		connect.WithSchema(nexusMethods.ByName("DoAction")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListCharmsHandler := connect.NewUnaryHandler(
		NexusListCharmsProcedure,
		svc.ListCharms,
		connect.WithSchema(nexusMethods.ByName("ListCharms")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetCharmHandler := connect.NewUnaryHandler(
		NexusGetCharmProcedure,
		svc.GetCharm,
		connect.WithSchema(nexusMethods.ByName("GetCharm")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetCharmMetadataHandler := connect.NewUnaryHandler(
		NexusGetCharmMetadataProcedure,
		svc.GetCharmMetadata,
		connect.WithSchema(nexusMethods.ByName("GetCharmMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListCharmArtifactsHandler := connect.NewUnaryHandler(
		NexusListCharmArtifactsProcedure,
		svc.ListCharmArtifacts,
		connect.WithSchema(nexusMethods.ByName("ListCharmArtifacts")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListApplicationsHandler := connect.NewUnaryHandler(
		NexusListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(nexusMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetApplicationHandler := connect.NewUnaryHandler(
		NexusGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(nexusMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListReleasesHandler := connect.NewUnaryHandler(
		NexusListReleasesProcedure,
		svc.ListReleases,
		connect.WithSchema(nexusMethods.ByName("ListReleases")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateReleaseHandler := connect.NewUnaryHandler(
		NexusCreateReleaseProcedure,
		svc.CreateRelease,
		connect.WithSchema(nexusMethods.ByName("CreateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	nexusUpdateReleaseHandler := connect.NewUnaryHandler(
		NexusUpdateReleaseProcedure,
		svc.UpdateRelease,
		connect.WithSchema(nexusMethods.ByName("UpdateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDeleteReleaseHandler := connect.NewUnaryHandler(
		NexusDeleteReleaseProcedure,
		svc.DeleteRelease,
		connect.WithSchema(nexusMethods.ByName("DeleteRelease")),
		connect.WithHandlerOptions(opts...),
	)
	nexusRollbackReleaseHandler := connect.NewUnaryHandler(
		NexusRollbackReleaseProcedure,
		svc.RollbackRelease,
		connect.WithSchema(nexusMethods.ByName("RollbackRelease")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListChartsHandler := connect.NewUnaryHandler(
		NexusListChartsProcedure,
		svc.ListCharts,
		connect.WithSchema(nexusMethods.ByName("ListCharts")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetChartHandler := connect.NewUnaryHandler(
		NexusGetChartProcedure,
		svc.GetChart,
		connect.WithSchema(nexusMethods.ByName("GetChart")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetChartMetadataHandler := connect.NewUnaryHandler(
		NexusGetChartMetadataProcedure,
		svc.GetChartMetadata,
		connect.WithSchema(nexusMethods.ByName("GetChartMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListTagsHandler := connect.NewUnaryHandler(
		NexusListTagsProcedure,
		svc.ListTags,
		connect.WithSchema(nexusMethods.ByName("ListTags")),
		connect.WithHandlerOptions(opts...),
	)
	nexusGetTagHandler := connect.NewUnaryHandler(
		NexusGetTagProcedure,
		svc.GetTag,
		connect.WithSchema(nexusMethods.ByName("GetTag")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateTagHandler := connect.NewUnaryHandler(
		NexusCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(nexusMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	nexusDeleteTagHandler := connect.NewUnaryHandler(
		NexusDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(nexusMethods.ByName("DeleteTag")),
		connect.WithHandlerOptions(opts...),
	)
	nexusListStorageClassesHandler := connect.NewUnaryHandler(
		NexusListStorageClassesProcedure,
		svc.ListStorageClasses,
		connect.WithSchema(nexusMethods.ByName("ListStorageClasses")),
		connect.WithHandlerOptions(opts...),
	)
	nexusCreateStorageClassHandler := connect.NewUnaryHandler(
		NexusCreateStorageClassProcedure,
		svc.CreateStorageClass,
		connect.WithSchema(nexusMethods.ByName("CreateStorageClass")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openhdc.nexus.v1.Nexus/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NexusVerifyEnvironmentProcedure:
			nexusVerifyEnvironmentHandler.ServeHTTP(w, r)
		case NexusListCephesProcedure:
			nexusListCephesHandler.ServeHTTP(w, r)
		case NexusListKubernetesProcedure:
			nexusListKubernetesHandler.ServeHTTP(w, r)
		case NexusGetConfigurationProcedure:
			nexusGetConfigurationHandler.ServeHTTP(w, r)
		case NexusUpdateNTPServerProcedure:
			nexusUpdateNTPServerHandler.ServeHTTP(w, r)
		case NexusUpdatePackageRepositoryProcedure:
			nexusUpdatePackageRepositoryHandler.ServeHTTP(w, r)
		case NexusCreateBootImageProcedure:
			nexusCreateBootImageHandler.ServeHTTP(w, r)
		case NexusSetDefaultBootImageProcedure:
			nexusSetDefaultBootImageHandler.ServeHTTP(w, r)
		case NexusImportBootImagesProcedure:
			nexusImportBootImagesHandler.ServeHTTP(w, r)
		case NexusIsImportingBootImagesProcedure:
			nexusIsImportingBootImagesHandler.ServeHTTP(w, r)
		case NexusListBootImageSelectionsProcedure:
			nexusListBootImageSelectionsHandler.ServeHTTP(w, r)
		case NexusListNetworksProcedure:
			nexusListNetworksHandler.ServeHTTP(w, r)
		case NexusCreateNetworkProcedure:
			nexusCreateNetworkHandler.ServeHTTP(w, r)
		case NexusCreateIPRangeProcedure:
			nexusCreateIPRangeHandler.ServeHTTP(w, r)
		case NexusDeleteNetworkProcedure:
			nexusDeleteNetworkHandler.ServeHTTP(w, r)
		case NexusDeleteIPRangeProcedure:
			nexusDeleteIPRangeHandler.ServeHTTP(w, r)
		case NexusUpdateFabricProcedure:
			nexusUpdateFabricHandler.ServeHTTP(w, r)
		case NexusUpdateVLANProcedure:
			nexusUpdateVLANHandler.ServeHTTP(w, r)
		case NexusUpdateSubnetProcedure:
			nexusUpdateSubnetHandler.ServeHTTP(w, r)
		case NexusUpdateIPRangeProcedure:
			nexusUpdateIPRangeHandler.ServeHTTP(w, r)
		case NexusListMachinesProcedure:
			nexusListMachinesHandler.ServeHTTP(w, r)
		case NexusGetMachineProcedure:
			nexusGetMachineHandler.ServeHTTP(w, r)
		case NexusCreateMachineProcedure:
			nexusCreateMachineHandler.ServeHTTP(w, r)
		case NexusPowerOnMachineProcedure:
			nexusPowerOnMachineHandler.ServeHTTP(w, r)
		case NexusPowerOffMachineProcedure:
			nexusPowerOffMachineHandler.ServeHTTP(w, r)
		case NexusAddMachineTagsProcedure:
			nexusAddMachineTagsHandler.ServeHTTP(w, r)
		case NexusRemoveMachineTagsProcedure:
			nexusRemoveMachineTagsHandler.ServeHTTP(w, r)
		case NexusListScopesProcedure:
			nexusListScopesHandler.ServeHTTP(w, r)
		case NexusCreateScopeProcedure:
			nexusCreateScopeHandler.ServeHTTP(w, r)
		case NexusListFacilitiesProcedure:
			nexusListFacilitiesHandler.ServeHTTP(w, r)
		case NexusGetFacilityProcedure:
			nexusGetFacilityHandler.ServeHTTP(w, r)
		case NexusCreateFacilityProcedure:
			nexusCreateFacilityHandler.ServeHTTP(w, r)
		case NexusUpdateFacilityProcedure:
			nexusUpdateFacilityHandler.ServeHTTP(w, r)
		case NexusDeleteFacilityProcedure:
			nexusDeleteFacilityHandler.ServeHTTP(w, r)
		case NexusExposeFacilityProcedure:
			nexusExposeFacilityHandler.ServeHTTP(w, r)
		case NexusAddFacilityUnitsProcedure:
			nexusAddFacilityUnitsHandler.ServeHTTP(w, r)
		case NexusListActionsProcedure:
			nexusListActionsHandler.ServeHTTP(w, r)
		case NexusDoActionProcedure:
			nexusDoActionHandler.ServeHTTP(w, r)
		case NexusListCharmsProcedure:
			nexusListCharmsHandler.ServeHTTP(w, r)
		case NexusGetCharmProcedure:
			nexusGetCharmHandler.ServeHTTP(w, r)
		case NexusGetCharmMetadataProcedure:
			nexusGetCharmMetadataHandler.ServeHTTP(w, r)
		case NexusListCharmArtifactsProcedure:
			nexusListCharmArtifactsHandler.ServeHTTP(w, r)
		case NexusListApplicationsProcedure:
			nexusListApplicationsHandler.ServeHTTP(w, r)
		case NexusGetApplicationProcedure:
			nexusGetApplicationHandler.ServeHTTP(w, r)
		case NexusListReleasesProcedure:
			nexusListReleasesHandler.ServeHTTP(w, r)
		case NexusCreateReleaseProcedure:
			nexusCreateReleaseHandler.ServeHTTP(w, r)
		case NexusUpdateReleaseProcedure:
			nexusUpdateReleaseHandler.ServeHTTP(w, r)
		case NexusDeleteReleaseProcedure:
			nexusDeleteReleaseHandler.ServeHTTP(w, r)
		case NexusRollbackReleaseProcedure:
			nexusRollbackReleaseHandler.ServeHTTP(w, r)
		case NexusListChartsProcedure:
			nexusListChartsHandler.ServeHTTP(w, r)
		case NexusGetChartProcedure:
			nexusGetChartHandler.ServeHTTP(w, r)
		case NexusGetChartMetadataProcedure:
			nexusGetChartMetadataHandler.ServeHTTP(w, r)
		case NexusListTagsProcedure:
			nexusListTagsHandler.ServeHTTP(w, r)
		case NexusGetTagProcedure:
			nexusGetTagHandler.ServeHTTP(w, r)
		case NexusCreateTagProcedure:
			nexusCreateTagHandler.ServeHTTP(w, r)
		case NexusDeleteTagProcedure:
			nexusDeleteTagHandler.ServeHTTP(w, r)
		case NexusListStorageClassesProcedure:
			nexusListStorageClassesHandler.ServeHTTP(w, r)
		case NexusCreateStorageClassProcedure:
			nexusCreateStorageClassHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNexusHandler returns CodeUnimplemented from all methods.
type UnimplementedNexusHandler struct{}

func (UnimplementedNexusHandler) VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.VerifyEnvironment is not implemented"))
}

func (UnimplementedNexusHandler) ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListCephes is not implemented"))
}

func (UnimplementedNexusHandler) ListKubernetes(context.Context, *connect.Request[v1.ListKubernetesRequest]) (*connect.Response[v1.ListKubernetesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListKubernetes is not implemented"))
}

func (UnimplementedNexusHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.Configuration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetConfiguration is not implemented"))
}

func (UnimplementedNexusHandler) UpdateNTPServer(context.Context, *connect.Request[v1.UpdateNTPServerRequest]) (*connect.Response[v1.Configuration_NTPServer], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateNTPServer is not implemented"))
}

func (UnimplementedNexusHandler) UpdatePackageRepository(context.Context, *connect.Request[v1.UpdatePackageRepositoryRequest]) (*connect.Response[v1.Configuration_PackageRepository], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdatePackageRepository is not implemented"))
}

func (UnimplementedNexusHandler) CreateBootImage(context.Context, *connect.Request[v1.CreateBootImageRequest]) (*connect.Response[v1.Configuration_BootImage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateBootImage is not implemented"))
}

func (UnimplementedNexusHandler) SetDefaultBootImage(context.Context, *connect.Request[v1.SetDefaultBootImageRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.SetDefaultBootImage is not implemented"))
}

func (UnimplementedNexusHandler) ImportBootImages(context.Context, *connect.Request[v1.ImportBootImagesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ImportBootImages is not implemented"))
}

func (UnimplementedNexusHandler) IsImportingBootImages(context.Context, *connect.Request[v1.IsImportingBootImagesRequest]) (*connect.Response[v1.IsImportingBootImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.IsImportingBootImages is not implemented"))
}

func (UnimplementedNexusHandler) ListBootImageSelections(context.Context, *connect.Request[v1.ListBootImageSelectionsRequest]) (*connect.Response[v1.ListBootImageSelectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListBootImageSelections is not implemented"))
}

func (UnimplementedNexusHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListNetworks is not implemented"))
}

func (UnimplementedNexusHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateNetwork is not implemented"))
}

func (UnimplementedNexusHandler) CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateIPRange is not implemented"))
}

func (UnimplementedNexusHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DeleteNetwork is not implemented"))
}

func (UnimplementedNexusHandler) DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DeleteIPRange is not implemented"))
}

func (UnimplementedNexusHandler) UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateFabric is not implemented"))
}

func (UnimplementedNexusHandler) UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateVLAN is not implemented"))
}

func (UnimplementedNexusHandler) UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateSubnet is not implemented"))
}

func (UnimplementedNexusHandler) UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateIPRange is not implemented"))
}

func (UnimplementedNexusHandler) ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListMachines is not implemented"))
}

func (UnimplementedNexusHandler) GetMachine(context.Context, *connect.Request[v1.GetMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetMachine is not implemented"))
}

func (UnimplementedNexusHandler) CreateMachine(context.Context, *connect.Request[v1.CreateMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateMachine is not implemented"))
}

func (UnimplementedNexusHandler) PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.PowerOnMachine is not implemented"))
}

func (UnimplementedNexusHandler) PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.PowerOffMachine is not implemented"))
}

func (UnimplementedNexusHandler) AddMachineTags(context.Context, *connect.Request[v1.AddMachineTagsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.AddMachineTags is not implemented"))
}

func (UnimplementedNexusHandler) RemoveMachineTags(context.Context, *connect.Request[v1.RemoveMachineTagsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.RemoveMachineTags is not implemented"))
}

func (UnimplementedNexusHandler) ListScopes(context.Context, *connect.Request[v1.ListScopesRequest]) (*connect.Response[v1.ListScopesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListScopes is not implemented"))
}

func (UnimplementedNexusHandler) CreateScope(context.Context, *connect.Request[v1.CreateScopeRequest]) (*connect.Response[v1.Scope], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateScope is not implemented"))
}

func (UnimplementedNexusHandler) ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListFacilities is not implemented"))
}

func (UnimplementedNexusHandler) GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetFacility is not implemented"))
}

func (UnimplementedNexusHandler) CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateFacility is not implemented"))
}

func (UnimplementedNexusHandler) UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateFacility is not implemented"))
}

func (UnimplementedNexusHandler) DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DeleteFacility is not implemented"))
}

func (UnimplementedNexusHandler) ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ExposeFacility is not implemented"))
}

func (UnimplementedNexusHandler) AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.AddFacilityUnits is not implemented"))
}

func (UnimplementedNexusHandler) ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListActions is not implemented"))
}

func (UnimplementedNexusHandler) DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DoAction is not implemented"))
}

func (UnimplementedNexusHandler) ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListCharms is not implemented"))
}

func (UnimplementedNexusHandler) GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetCharm is not implemented"))
}

func (UnimplementedNexusHandler) GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetCharmMetadata is not implemented"))
}

func (UnimplementedNexusHandler) ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListCharmArtifacts is not implemented"))
}

func (UnimplementedNexusHandler) ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListApplications is not implemented"))
}

func (UnimplementedNexusHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.Application], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetApplication is not implemented"))
}

func (UnimplementedNexusHandler) ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListReleases is not implemented"))
}

func (UnimplementedNexusHandler) CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Application_Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateRelease is not implemented"))
}

func (UnimplementedNexusHandler) UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Application_Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.UpdateRelease is not implemented"))
}

func (UnimplementedNexusHandler) DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DeleteRelease is not implemented"))
}

func (UnimplementedNexusHandler) RollbackRelease(context.Context, *connect.Request[v1.RollbackReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.RollbackRelease is not implemented"))
}

func (UnimplementedNexusHandler) ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListCharts is not implemented"))
}

func (UnimplementedNexusHandler) GetChart(context.Context, *connect.Request[v1.GetChartRequest]) (*connect.Response[v1.Application_Chart], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetChart is not implemented"))
}

func (UnimplementedNexusHandler) GetChartMetadata(context.Context, *connect.Request[v1.GetChartMetadataRequest]) (*connect.Response[v1.Application_Chart_Metadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetChartMetadata is not implemented"))
}

func (UnimplementedNexusHandler) ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListTags is not implemented"))
}

func (UnimplementedNexusHandler) GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.Tag], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.GetTag is not implemented"))
}

func (UnimplementedNexusHandler) CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.Tag], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateTag is not implemented"))
}

func (UnimplementedNexusHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.DeleteTag is not implemented"))
}

func (UnimplementedNexusHandler) ListStorageClasses(context.Context, *connect.Request[v1.ListStorageClassesRequest]) (*connect.Response[v1.ListStorageClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.ListStorageClasses is not implemented"))
}

func (UnimplementedNexusHandler) CreateStorageClass(context.Context, *connect.Request[v1.CreateStorageClassRequest]) (*connect.Response[v1.StorageClass], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.nexus.v1.Nexus.CreateStorageClass is not implemented"))
}
