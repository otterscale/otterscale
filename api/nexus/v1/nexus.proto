edition = "2023";

package openhdc.nexus.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/openhdc/openhdc/api/nexus/v1;pb";

service Nexus {
  // Configuration
  rpc GetConfiguration(GetConfigurationRequest) returns (Configuration);
  rpc UpdateNTPServer(UpdateNTPServerRequest) returns (Configuration.NTPServer);
  rpc UpdatePackageRepository(UpdatePackageRepositoryRequest) returns (Configuration.PackageRepository);
  rpc UpdateDefaultBootResource(UpdateDefaultBootResourceRequest) returns (Configuration.BootResource);
  rpc SyncBootResources(SyncBootResourcesRequest) returns (google.protobuf.Empty);

  // Network
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (Network);
  rpc CreateIPRange(CreateIPRangeRequest) returns (Network.IPRange);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc DeleteIPRange(DeleteIPRangeRequest) returns (google.protobuf.Empty);
  rpc UpdateFabric(UpdateFabricRequest) returns (Network.Fabric);
  rpc UpdateVLAN(UpdateVLANRequest) returns (Network.VLAN);
  rpc UpdateSubnet(UpdateSubnetRequest) returns (Network.Subnet);
  rpc UpdateIPRange(UpdateIPRangeRequest) returns (Network.IPRange);

  // Machine
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);
  rpc GetMachine(GetMachineRequest) returns (Machine);
  rpc CommissionMachine(CommissionMachineRequest) returns (Machine);
  rpc PowerOnMachine(PowerOnMachineRequest) returns (Machine);
  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine);
  rpc AddMachines(AddMachinesRequest) returns (AddMachinesResponse);

  // Scope
  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse);
  rpc CreateScope(CreateScopeRequest) returns (Scope);

  // Facility
  rpc ListFacilities(ListFacilitiesRequest) returns (ListFacilitiesResponse);
  rpc GetFacility(GetFacilityRequest) returns (Facility);
  rpc CreateFacility(CreateFacilityRequest) returns (Facility);
  rpc UpdateFacility(UpdateFacilityRequest) returns (Facility);
  rpc DeleteFacility(DeleteFacilityRequest) returns (google.protobuf.Empty);
  rpc ExposeFacility(ExposeFacilityRequest) returns (google.protobuf.Empty);
  rpc AddFacilityUnits(AddFacilityUnitsRequest) returns (google.protobuf.Empty);
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse);
  rpc RunAction(RunActionRequest) returns (google.protobuf.Empty);

  // Application
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);
  rpc GetApplication(GetApplicationRequest) returns (Application);
  rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse);
  rpc CreateRelease(CreateReleaseRequest) returns (Application.Release);
  rpc UpdateRelease(UpdateReleaseRequest) returns (Application.Release);
  rpc DeleteRelease(DeleteReleaseRequest) returns (google.protobuf.Empty);
  rpc RollbackRelease(RollbackReleaseRequest) returns (google.protobuf.Empty);
  rpc ListCharts(ListChartsRequest) returns (ListChartsResponse);
  rpc GetChart(GetChartRequest) returns (Application.Release.Chart);
  rpc GetChartMetadata(GetChartMetadataRequest) returns (Application.Release.Chart.Metadata);
}

message Configuration {
  message NTPServer {
    repeated string addresses = 1;
  }
  message PackageRepository {
    int64 id = 1;
    string name = 2;
    string url = 3;
    bool enabled = 4;
  }
  message BootResource {
    string name = 1;
    string architecture = 2;
    string status = 3;
    bool default = 11;
    string distro_series = 12;
  }
  NTPServer ntp_server = 1;
  repeated PackageRepository package_repositories = 2;
  repeated BootResource boot_resources = 3;
}

message Network {
  message IPAddress {
    string type = 1;
    string ip = 2;
    string user = 3;
    string machine_id = 11;
    string node_type = 12;
    string hostname = 13;
  }
  message IPRange {
    int64 id = 1;
    string type = 2;
    string start_ip = 3;
    string end_ip = 4;
    string comment = 5;
  }
  message Statistics {
    int64 available = 1;
    int64 total = 2;
    string usage_percent = 3;
    string available_percent = 4;
  }
  message Fabric {
    int64 id = 1;
    string name = 2;
  }
  message VLAN {
    int64 id = 1;
    int64 vid = 2;
    string name = 3;
    int64 mtu = 4;
    string description = 5;
    bool dhcp_on = 6;
  }
  message Subnet {
    int64 id = 1;
    string name = 2;
    string cidr = 3;
    string gateway_ip = 4;
    repeated string dns_servers = 5;
    string description = 6;
    bool managed_allocation = 7;
    bool active_discovery = 8;
    bool allow_proxy_access = 9;
    bool allow_dns_resolution = 10;
    repeated IPAddress ip_addresses = 11;
    repeated IPRange ip_ranges = 12;
    Statistics statistics = 13;
  }
  Fabric fabric = 1;
  VLAN vlan = 2;
  Subnet subnet = 3;
}

message Machine {
  message Placement {
    oneof type {
      bool lxd = 1;
      bool kvm = 2;
      bool machine = 3;
    }
    string machine_id = 11;
  }
  message Constraint {
    string architecture = 1;
    uint64 cpu_cores = 2;
    uint64 memory_mb = 3;
    repeated string tags = 11;
  }
  message Factor {
    Placement placement = 1;
    Constraint constraint = 2;
  }
  message NUMANode {
    int64 index = 1;
    int64 cpu_cores = 2;
    int64 memory_mb = 3;
  }
  message BlockDevice {
    bool boot_disk = 1;
    string name = 11;
    string serial = 12;
    string model = 21;
    string firmware_version = 22;
    double storage_mb = 31;
    string type = 41;
    repeated string tags = 51;
    string used_for = 61;
  }
  message NetworkInterface {
    bool boot_interface = 1;
    string name = 11;
    string mac_address = 12;
    bool link_connected = 21;
    int64 link_speed = 22;
    int64 interface_speed = 23;
    string type = 31;
    string fabric_name = 41;
    int64 fabric_id = 42;
    string vlan_name = 43;
    int64 vlan_id = 44;
    string subnet_name = 51;
    int64 subnet_id = 52;
    string ip_address = 61;
    bool dhcp_on = 71;
  }
  string id = 1;
  string hardware_uuid = 101;
  string hostname = 102;
  string fqdn = 103;
  repeated string tags = 104;
  string description = 105;
  string status = 201;
  string power_state = 301;
  string power_type = 302;
  string osystem = 401;
  string distro_series = 402;
  string hwe_kernel = 403;
  string architecture = 404;
  int64 cpu_speed = 405;
  int64 cpu_count = 406;
  int64 memory_mb = 407;
  double storage_mb = 408;
  repeated string ip_addresses = 409;
  map<string, string> workload_annotations = 501;
  map<string, string> hardware_information = 601;
  string bios_boot_method = 602;
  repeated NUMANode numa_nodes = 701;
  repeated BlockDevice block_devices = 801;
  repeated NetworkInterface network_interfaces = 802;
}

message Scope {
  string uuid = 1;
  string name = 2;
  string type = 3;
  string provider_type = 4;
  string life = 5;
  string status = 6;
  string agent_version = 7;
  bool is_controller = 8;
  int64 machine_count = 21;
  int64 core_count = 22;
  int64 unit_count = 23;
}

message Facility {
  message Action {}
}

message Application {  // + CREATE TIME
  message Release {
    message Chart {
      message Metadata {}
    }
  }
}

message GetConfigurationRequest {}

message UpdateNTPServerRequest {
  repeated string addresses = 1;
}

message UpdatePackageRepositoryRequest {
  int64 id = 1;
  string url = 2;
  bool skip_juju = 3;
}

message UpdateDefaultBootResourceRequest {
  string distro_series = 1;
}

message SyncBootResourcesRequest {}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message CreateNetworkRequest {
  string cidr = 1;
  string gateway_ip = 2;
  repeated string dns_servers = 3;
  bool dhcp_on = 11;
}

message CreateIPRangeRequest {
  int64 subnet_id = 1;
  string start_ip = 11;
  string end_ip = 12;
  string comment = 13;
}

message DeleteNetworkRequest {
  int64 id = 1;
}

message DeleteIPRangeRequest {
  int64 id = 1;
}

message UpdateFabricRequest {
  int64 id = 1;
  string name = 11;
}

message UpdateVLANRequest {
  int64 fabric_id = 1;
  int64 vid = 2;
  string name = 11;
  int64 mtu = 12;
  string description = 13;
  bool dhcp_on = 14;
}

message UpdateSubnetRequest {
  int64 id = 1;
  string name = 11;
  string cidr = 12;
  string gateway_ip = 13;
  repeated string dns_servers = 14;
  string description = 15;
  bool allow_dns_resolution = 16;
}

message UpdateIPRangeRequest {
  int64 id = 1;
  string start_ip = 11;
  string end_ip = 12;
  string comment = 13;
}

message ListMachinesRequest {}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message GetMachineRequest {
  string id = 1;
}

message CommissionMachineRequest {
  string id = 1;
  bool enable_ssh = 2;
  bool skip_bmc_config = 3;
  bool skip_networking = 4;
  bool skip_storage = 5;
}

message PowerOnMachineRequest {
  string id = 1;
  string comment = 2;
}

message PowerOffMachineRequest {
  string id = 1;
  string comment = 2;
}

message AddMachinesRequest {
  string scope_uuid = 1;
  repeated Machine.Factor factors = 2;
}

message AddMachinesResponse {
  repeated string machines = 1;
}

message ListScopesRequest {}

message ListScopesResponse {
  repeated Scope scopes = 1;
}

message CreateScopeRequest {
  string name = 1;
}

message ListFacilitiesRequest {}

message ListFacilitiesResponse {
  repeated Facility facilities = 1;
}

message GetFacilityRequest {}

message CreateFacilityRequest {}

message UpdateFacilityRequest {}

message DeleteFacilityRequest {}

message ExposeFacilityRequest {}

message AddFacilityUnitsRequest {}

message ListActionsRequest {}

message ListActionsResponse {
  repeated Facility.Action actions = 1;
}

message RunActionRequest {}

message ListApplicationsRequest {}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message GetApplicationRequest {}

message ListReleasesRequest {}

message ListReleasesResponse {
  repeated Application.Release releases = 1;
}

message CreateReleaseRequest {}

message UpdateReleaseRequest {}

message DeleteReleaseRequest {}

message RollbackReleaseRequest {}

message ListChartsRequest {}

message ListChartsResponse {
  repeated Application.Release.Chart charts = 1;
}

message GetChartRequest {}

message GetChartMetadataRequest {}
