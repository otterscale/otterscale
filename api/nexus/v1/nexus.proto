edition = "2023";

package openhdc.nexus.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/openhdc/openhdc/api/nexus/v1;pb";

service Nexus {
  // General
  rpc VerifyEnvironment(VerifyEnvironmentRequest) returns (VerifyEnvironmentResponse);
  rpc ListCephes(ListCephesRequest) returns (ListCephesResponse);
  rpc CreateCeph(CreateCephRequest) returns (Facility.Info);
  rpc AddCephUnits(AddCephUnitsRequest) returns (google.protobuf.Empty);
  rpc ListKuberneteses(ListKubernetesesRequest) returns (ListKubernetesesResponse);
  rpc CreateKubernetes(CreateKubernetesRequest) returns (Facility.Info);
  rpc AddKubernetesUnits(AddKubernetesUnitsRequest) returns (google.protobuf.Empty);

  // Configuration
  rpc GetConfiguration(GetConfigurationRequest) returns (Configuration);
  rpc UpdateNTPServer(UpdateNTPServerRequest) returns (Configuration.NTPServer);
  rpc UpdatePackageRepository(UpdatePackageRepositoryRequest) returns (Configuration.PackageRepository);
  rpc CreateBootImage(CreateBootImageRequest) returns (Configuration.BootImage);
  rpc SetDefaultBootImage(SetDefaultBootImageRequest) returns (google.protobuf.Empty);
  rpc ImportBootImages(ImportBootImagesRequest) returns (google.protobuf.Empty);
  rpc IsImportingBootImages(IsImportingBootImagesRequest) returns (IsImportingBootImagesResponse);
  rpc ListBootImageSelections(ListBootImageSelectionsRequest) returns (ListBootImageSelectionsResponse);

  // Network
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (Network);
  rpc CreateIPRange(CreateIPRangeRequest) returns (Network.IPRange);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc DeleteIPRange(DeleteIPRangeRequest) returns (google.protobuf.Empty);
  rpc UpdateFabric(UpdateFabricRequest) returns (Network.Fabric);
  rpc UpdateVLAN(UpdateVLANRequest) returns (Network.VLAN);
  rpc UpdateSubnet(UpdateSubnetRequest) returns (Network.Subnet);
  rpc UpdateIPRange(UpdateIPRangeRequest) returns (Network.IPRange);

  // Machine
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);
  rpc GetMachine(GetMachineRequest) returns (Machine);
  rpc CreateMachine(CreateMachineRequest) returns (Machine);
  rpc DeleteMachine(DeleteMachineRequest) returns (google.protobuf.Empty);
  rpc PowerOnMachine(PowerOnMachineRequest) returns (Machine);
  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine);
  rpc AddMachineTags(AddMachineTagsRequest) returns (google.protobuf.Empty);
  rpc RemoveMachineTags(RemoveMachineTagsRequest) returns (google.protobuf.Empty);

  // Scope
  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse);
  rpc CreateScope(CreateScopeRequest) returns (Scope);

  // Facility
  rpc ListFacilities(ListFacilitiesRequest) returns (ListFacilitiesResponse);
  rpc GetFacility(GetFacilityRequest) returns (Facility);
  rpc CreateFacility(CreateFacilityRequest) returns (Facility);
  rpc UpdateFacility(UpdateFacilityRequest) returns (Facility);
  rpc DeleteFacility(DeleteFacilityRequest) returns (google.protobuf.Empty);
  rpc ExposeFacility(ExposeFacilityRequest) returns (google.protobuf.Empty);
  rpc AddFacilityUnits(AddFacilityUnitsRequest) returns (AddFacilityUnitsResponse);
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse);
  rpc DoAction(DoActionRequest) returns (google.protobuf.Empty);
  rpc ListCharms(ListCharmsRequest) returns (ListCharmsResponse);
  rpc GetCharm(GetCharmRequest) returns (Facility.Charm);
  rpc GetCharmMetadata(GetCharmMetadataRequest) returns (Facility.Charm.Metadata);
  rpc ListCharmArtifacts(ListCharmArtifactsRequest) returns (ListCharmArtifactsResponse);

  // Application
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);
  rpc GetApplication(GetApplicationRequest) returns (Application);
  rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse);
  rpc CreateRelease(CreateReleaseRequest) returns (Application.Release);
  rpc UpdateRelease(UpdateReleaseRequest) returns (Application.Release);
  rpc DeleteRelease(DeleteReleaseRequest) returns (google.protobuf.Empty);
  rpc RollbackRelease(RollbackReleaseRequest) returns (google.protobuf.Empty);
  rpc ListCharts(ListChartsRequest) returns (ListChartsResponse);
  rpc GetChart(GetChartRequest) returns (Application.Chart);
  rpc GetChartMetadata(GetChartMetadataRequest) returns (Application.Chart.Metadata);

  // Tag
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse);
  rpc GetTag(GetTagRequest) returns (Tag);
  rpc CreateTag(CreateTagRequest) returns (Tag);
  rpc DeleteTag(DeleteTagRequest) returns (google.protobuf.Empty);

  // StorageClass
  rpc ListStorageClasses(ListStorageClassesRequest) returns (ListStorageClassesResponse);
  rpc CreateStorageClass(CreateStorageClassRequest) returns (StorageClass);
}

message Configuration {
  message NTPServer {
    repeated string addresses = 1;
  }
  message PackageRepository {
    int64 id = 1;
    string name = 2;
    string url = 3;
    bool enabled = 4;
  }
  message BootImageSelection {
    string distro_series = 1;
    string name = 2;
    repeated string architectures = 3;
  }
  message BootImage {
    string source = 1;
    string distro_series = 2;
    string name = 3;
    map<string, string> architecture_status_map = 5;
    bool default = 11;
  }
  NTPServer ntp_server = 1;
  repeated PackageRepository package_repositories = 2;
  repeated BootImage boot_images = 3;
}

message Network {
  message IPAddress {
    string type = 1;
    string ip = 2;
    string user = 3;
    string machine_id = 11;
    string node_type = 12;
    string hostname = 13;
  }
  message IPRange {
    int64 id = 1;
    string type = 2;
    string start_ip = 3;
    string end_ip = 4;
    string comment = 5;
  }
  message Statistics {
    int64 available = 1;
    int64 total = 2;
    string usage_percent = 3;
    string available_percent = 4;
  }
  message Fabric {
    int64 id = 1;
    string name = 2;
  }
  message VLAN {
    int64 id = 1;
    int64 vid = 2;
    string name = 3;
    int64 mtu = 4;
    string description = 5;
    bool dhcp_on = 6;
  }
  message Subnet {
    int64 id = 1;
    string name = 2;
    string cidr = 3;
    string gateway_ip = 4;
    repeated string dns_servers = 5;
    string description = 6;
    bool managed_allocation = 7;
    bool active_discovery = 8;
    bool allow_proxy_access = 9;
    bool allow_dns_resolution = 10;
    repeated IPAddress ip_addresses = 11;
    repeated IPRange ip_ranges = 12;
    Statistics statistics = 13;
  }
  Fabric fabric = 1;
  VLAN vlan = 2;
  Subnet subnet = 3;
}

message Machine {
  message Placement {
    oneof type {
      bool lxd = 1;
      bool kvm = 2;
      bool machine = 3;
    }
    string machine_id = 11;
  }
  message Constraint {
    string architecture = 1;
    uint64 cpu_cores = 2;
    uint64 memory_mb = 3;
    repeated string tags = 11;
  }
  message Factor {
    Placement placement = 1;
    Constraint constraint = 2;
  }
  message NUMANode {
    int64 index = 1;
    int64 cpu_cores = 2;
    int64 memory_mb = 3;
  }
  message BlockDevice {
    bool boot_disk = 1;
    string name = 11;
    string serial = 12;
    string model = 21;
    string firmware_version = 22;
    double storage_mb = 31;
    string type = 41;
    repeated string tags = 51;
    string used_for = 61;
  }
  message NetworkInterface {
    bool boot_interface = 1;
    string name = 11;
    string mac_address = 12;
    bool link_connected = 21;
    int64 link_speed = 22;
    int64 interface_speed = 23;
    string type = 31;
    string fabric_name = 41;
    int64 fabric_id = 42;
    string vlan_name = 43;
    int64 vlan_id = 44;
    string subnet_name = 51;
    int64 subnet_id = 52;
    string ip_address = 61;
    bool dhcp_on = 71;
  }
  string id = 1;
  string hardware_uuid = 101;
  string hostname = 102;
  string fqdn = 103;
  repeated string tags = 104;
  string description = 105;
  string status = 201;
  string status_message = 202;
  string power_state = 301;
  string power_type = 302;
  string osystem = 401;
  string distro_series = 402;
  string hwe_kernel = 403;
  string architecture = 404;
  int64 cpu_speed = 405;
  int64 cpu_count = 406;
  int64 memory_mb = 407;
  double storage_mb = 408;
  repeated string ip_addresses = 409;
  map<string, string> workload_annotations = 501;
  map<string, string> hardware_information = 601;
  string bios_boot_method = 602;
  repeated NUMANode numa_nodes = 701;
  repeated BlockDevice block_devices = 801;
  repeated NetworkInterface network_interfaces = 802;
}

message Scope {
  string uuid = 1;
  string name = 2;
  string type = 3;
  string provider_type = 4;
  string life = 5;
  string status = 6;
  string agent_version = 7;
  bool controller = 8;
  int64 machine_count = 21;
  int64 core_count = 22;
  int64 unit_count = 23;
}

message Facility {
  message Info {
    string scope_uuid = 1;
    string scope_name = 2;
    string facility_name = 3;
  }
  message Charm {
    message Metadata {
      string config_yaml = 1;
      Customization customization = 11;  // create only
    }
    message Base {
      string name = 1;
      string channel = 2;
      string architecture = 3;
    }
    message Artifact {
      string channel = 1;
      int64 revision = 2;
      string version = 11;
      repeated Base bases = 12;
      google.protobuf.Timestamp created_at = 21;
    }
    string id = 1;
    string type = 2;
    string name = 3;
    bool verified = 4;
    string title = 11;
    string summary = 12;
    string icon = 13;
    string description = 14;
    repeated string categories = 15;
    repeated string deployable_on = 16;
    string publisher = 17;
    string license = 18;
    string store_url = 21;
    string website = 22;
    Artifact default_artifact = 31;
  }
  message Action {
    string name = 1;
    string description = 2;
  }
  message Status {
    string state = 1;
    string details = 2;
    google.protobuf.Timestamp created_at = 3;
  }
  message Unit {
    string name = 1;
    Status agent_status = 2;
    Status workload_status = 3;
    bool leader = 4;
    string machine_id = 11;
    string ip_address = 12;
    repeated string ports = 13;
    string charm_name = 21;
    string version = 22;
    repeated Unit subordinates = 31;
  }
  string name = 1;
  Status status = 2;
  string charm_name = 11;
  string version = 12;
  int64 revision = 13;
  Charm.Metadata metadata = 21;
  repeated Unit units = 31;
}

message Application {
  message Chart {
    message Metadata {
      string values_yaml = 1;
      string readme_md = 2;
      Customization customization = 11;  // create only
    }
    message Maintainer {
      string name = 1;
      string email = 2;
      string url = 3;
    }
    message Dependency {
      string name = 1;
      string version = 2;
      string condition = 3;
    }
    message Version {
      string chart_version = 1;
      string chart_ref = 2;
      string application_version = 3;
    }
    string name = 1;
    string icon = 2;
    string description = 3;
    bool deprecated = 4;
    string tags = 5;
    repeated string keywords = 6;
    string license = 7;
    bool verified = 8;
    string home = 11;
    repeated string sources = 12;
    repeated Maintainer maintainers = 21;
    repeated Dependency dependencies = 31;
    repeated Version versions = 41;
  }
  message Release {
    string scope_name = 1;
    string scope_uuid = 2;
    string facility_name = 3;
    string namespace = 4;
    string name = 5;
    int32 revision = 6;
    string chart_name = 11;
    Chart.Version version = 12;
  }
  message Condition {
    string type = 1;
    string status = 2;
    string reason = 3;
    string message = 4;
    google.protobuf.Timestamp probed_at = 201;
    google.protobuf.Timestamp transitioned_at = 202;
  }
  message Container {
    string image_name = 1;
    string image_pull_policy = 2;
  }
  message Service {
    message Port {
      int32 port = 1;
      int32 node_port = 2;
      string protocol = 3;
      string target_port = 11;
    }
    string name = 1;
    string type = 2;
    string cluster_ip = 3;
    repeated Port ports = 11;
    google.protobuf.Timestamp created_at = 201;
  }
  message Pod {
    string name = 1;
    string phase = 2;
    string ready = 3;
    string restarts = 4;
    Condition last_condition = 11;
    google.protobuf.Timestamp created_at = 201;
  }
  message PersistentVolumeClaim {
    string name = 1;
    string status = 2;
    repeated string access_modes = 3;
    string capacity = 4;
    StorageClass storage_class = 11;
    google.protobuf.Timestamp created_at = 201;
  }
  string type = 1;
  string name = 2;
  string namespace = 3;
  map<string, string> labels = 4;
  int32 replicas = 5;
  int32 healthies = 11;
  Chart.Metadata metadata = 21;
  repeated Container containers = 31;
  repeated Service services = 101;
  repeated Pod pods = 102;
  repeated PersistentVolumeClaim persistent_volume_claims = 103;
  google.protobuf.Timestamp created_at = 201;
}

message Customization {
  string type = 1;
  string name = 2;
  string verison = 3;
  google.protobuf.Struct values = 11;
}

message Tag {
  string name = 1;
  string comment = 2;
}

message StorageClass {
  string name = 1;
  string provisioner = 2;
  string reclaim_policy = 3;
  string volume_binding_mode = 4;
  map<string, string> parameters = 5;
  google.protobuf.Timestamp created_at = 201;
}

enum ErrorLevel {
  ERRORLEVEL_INFO = 0;
  ERRORLEVEL_LOW = 1;
  ERRORLEVEL_MEDIUM = 2;
  ERRORLEVEL_HIGH = 3;
  ERRORLEVEL_CRITICAL = 4;
}

message Error {
  string code = 1;
  ErrorLevel level = 11;
  string message = 12;
  string details = 13;
  string url = 21;
}

message VerifyEnvironmentRequest {}

message VerifyEnvironmentResponse {
  repeated Error errors = 1;
}

message ListCephesRequest {
  string scope_uuid = 1;
}

message ListCephesResponse {
  repeated Facility.Info cephes = 1;
}

message CreateCephRequest {
  string scope_uuid = 1;
  string machine_id = 2;
  string prefix_name = 3;
}

message AddCephUnitsRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  int32 number = 3;
  repeated string machine_ids = 4;
}

message ListKubernetesesRequest {
  string scope_uuid = 1;
}

message ListKubernetesesResponse {
  repeated Facility.Info kuberneteses = 1;
}

message CreateKubernetesRequest {
  string scope_uuid = 1;
  string machine_id = 2;
  string prefix_name = 3;
}

message AddKubernetesUnitsRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  int32 number = 3;
  repeated string machine_ids = 4;
  bool force = 11;
}

message GetConfigurationRequest {}

message UpdateNTPServerRequest {
  repeated string addresses = 1;
}

message UpdatePackageRepositoryRequest {
  int64 id = 1;
  string url = 2;
  bool skip_juju = 3;
}

message CreateBootImageRequest {
  string distro_series = 1;
  repeated string architectures = 2;
}

message SetDefaultBootImageRequest {
  string distro_series = 1;
}

message ImportBootImagesRequest {}

message IsImportingBootImagesRequest {}

message IsImportingBootImagesResponse {
  bool importing = 1;
}

message ListBootImageSelectionsRequest {}

message ListBootImageSelectionsResponse {
  repeated Configuration.BootImageSelection boot_image_selections = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message CreateNetworkRequest {
  string cidr = 1;
  string gateway_ip = 2;
  repeated string dns_servers = 3;
  bool dhcp_on = 11;
}

message CreateIPRangeRequest {
  int64 subnet_id = 1;
  string start_ip = 11;
  string end_ip = 12;
  string comment = 13;
}

message DeleteNetworkRequest {
  int64 id = 1;
}

message DeleteIPRangeRequest {
  int64 id = 1;
}

message UpdateFabricRequest {
  int64 id = 1;
  string name = 11;
}

message UpdateVLANRequest {
  int64 fabric_id = 1;
  int64 vid = 2;
  string name = 11;
  int64 mtu = 12;
  string description = 13;
  bool dhcp_on = 14;
}

message UpdateSubnetRequest {
  int64 id = 1;
  string name = 11;
  string cidr = 12;
  string gateway_ip = 13;
  repeated string dns_servers = 14;
  string description = 15;
  bool allow_dns_resolution = 16;
}

message UpdateIPRangeRequest {
  int64 id = 1;
  string start_ip = 11;
  string end_ip = 12;
  string comment = 13;
}

message ListMachinesRequest {}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message GetMachineRequest {
  string id = 1;
}

message CreateMachineRequest {
  string id = 1;
  bool enable_ssh = 2;
  bool skip_bmc_config = 3;
  bool skip_networking = 4;
  bool skip_storage = 5;
  string scope_uuid = 11;
  repeated string tags = 21;
}

message DeleteMachineRequest {
  string id = 1;
  bool force = 2;
}

message PowerOnMachineRequest {
  string id = 1;
  string comment = 2;
}

message PowerOffMachineRequest {
  string id = 1;
  string comment = 2;
}

message AddMachineTagsRequest {
  string id = 1;
  repeated string tags = 2;
}

message RemoveMachineTagsRequest {
  string id = 1;
  repeated string tags = 2;
}

message ListScopesRequest {}

message ListScopesResponse {
  repeated Scope scopes = 1;
}

message CreateScopeRequest {
  string name = 1;
}

message ListFacilitiesRequest {
  string scope_uuid = 1;
}

message ListFacilitiesResponse {
  repeated Facility facilities = 1;
}

message GetFacilityRequest {
  string scope_uuid = 1;
  string name = 2;
}

message CreateFacilityRequest {
  string scope_uuid = 1;
  string name = 2;
  string config_yaml = 11;
  string charm_name = 21;
  string channel = 22;
  int64 revision = 23;
  int64 number = 24;
  repeated Machine.Placement placements = 31;
  Machine.Constraint constraint = 32;
  bool trust = 41;
}

message UpdateFacilityRequest {
  string scope_uuid = 1;
  string name = 2;
  string config_yaml = 11;
}

message DeleteFacilityRequest {
  string scope_uuid = 1;
  string name = 2;
  bool destroy_storage = 11;
  bool force = 12;
}

message ExposeFacilityRequest {
  string scope_uuid = 1;
  string name = 2;
}

message AddFacilityUnitsRequest {
  string scope_uuid = 1;
  string name = 2;
  int64 number = 11;
  repeated Machine.Placement placements = 21;
}

message AddFacilityUnitsResponse {
  repeated string units = 1;
}

message ListActionsRequest {
  string scope_uuid = 1;
  string facility_name = 2;
}

message ListActionsResponse {
  repeated Facility.Action actions = 1;
}

message DoActionRequest {}

message ListCharmsRequest {}

message ListCharmsResponse {
  repeated Facility.Charm charms = 1;
}

message GetCharmRequest {
  string name = 1;
}

message GetCharmMetadataRequest {
  string name = 1;
}

message ListCharmArtifactsRequest {
  string name = 1;
}

message ListCharmArtifactsResponse {
  repeated Facility.Charm.Artifact artifacts = 1;
}

message ListApplicationsRequest {
  string scope_uuid = 1;
  string facility_name = 2;
}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message GetApplicationRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string name = 4;
}

message ListReleasesRequest {}

message ListReleasesResponse {
  repeated Application.Release releases = 1;
}

message CreateReleaseRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string name = 4;
  bool dry_run = 5;
  string chart_ref = 11;
  string values_yaml = 12;
}

message UpdateReleaseRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string name = 4;
  bool dry_run = 5;
  string chart_ref = 11;
  string values_yaml = 12;
}

message DeleteReleaseRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string name = 4;
  bool dry_run = 5;
}

message RollbackReleaseRequest {
  string scope_uuid = 1;
  string facility_name = 2;
  string namespace = 3;
  string name = 4;
  bool dry_run = 5;
}

message ListChartsRequest {}

message ListChartsResponse {
  repeated Application.Chart charts = 1;
}

message GetChartRequest {
  string name = 1;
}

message GetChartMetadataRequest {
  string chart_ref = 1;
}

message ListTagsRequest {}

message ListTagsResponse {
  repeated Tag tags = 1;
}

message GetTagRequest {
  string name = 1;
}

message CreateTagRequest {
  string name = 1;
  string comment = 2;
}

message DeleteTagRequest {
  string name = 1;
}

message ListStorageClassesRequest {
  string scope_uuid = 1;
  string facility_name = 2;
}

message ListStorageClassesResponse {
  repeated StorageClass storage_classes = 1;
}

message CreateStorageClassRequest {
  Facility.Info kubernetes = 1;
  Facility.Info ceph = 2;
}
