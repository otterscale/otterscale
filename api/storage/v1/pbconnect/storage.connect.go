// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/storage/v1/storage.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/storage/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "otterscale.storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceListPoolsProcedure is the fully-qualified name of the StorageService's ListPools
	// RPC.
	StorageServiceListPoolsProcedure = "/otterscale.storage.v1.StorageService/ListPools"
	// StorageServiceCreatePoolProcedure is the fully-qualified name of the StorageService's CreatePool
	// RPC.
	StorageServiceCreatePoolProcedure = "/otterscale.storage.v1.StorageService/CreatePool"
	// StorageServiceDeletePoolProcedure is the fully-qualified name of the StorageService's DeletePool
	// RPC.
	StorageServiceDeletePoolProcedure = "/otterscale.storage.v1.StorageService/DeletePool"
)

// StorageServiceClient is a client for the otterscale.storage.v1.StorageService service.
type StorageServiceClient interface {
	ListPools(context.Context, *connect.Request[v1.ListPoolsRequest]) (*connect.Response[v1.ListPoolsResponse], error)
	CreatePool(context.Context, *connect.Request[v1.CreatePoolRequest]) (*connect.Response[v1.Pool], error)
	DeletePool(context.Context, *connect.Request[v1.DeletePoolRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewStorageServiceClient constructs a client for the otterscale.storage.v1.StorageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_api_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		listPools: connect.NewClient[v1.ListPoolsRequest, v1.ListPoolsResponse](
			httpClient,
			baseURL+StorageServiceListPoolsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListPools")),
			connect.WithClientOptions(opts...),
		),
		createPool: connect.NewClient[v1.CreatePoolRequest, v1.Pool](
			httpClient,
			baseURL+StorageServiceCreatePoolProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreatePool")),
			connect.WithClientOptions(opts...),
		),
		deletePool: connect.NewClient[v1.DeletePoolRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeletePoolProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeletePool")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	listPools  *connect.Client[v1.ListPoolsRequest, v1.ListPoolsResponse]
	createPool *connect.Client[v1.CreatePoolRequest, v1.Pool]
	deletePool *connect.Client[v1.DeletePoolRequest, emptypb.Empty]
}

// ListPools calls otterscale.storage.v1.StorageService.ListPools.
func (c *storageServiceClient) ListPools(ctx context.Context, req *connect.Request[v1.ListPoolsRequest]) (*connect.Response[v1.ListPoolsResponse], error) {
	return c.listPools.CallUnary(ctx, req)
}

// CreatePool calls otterscale.storage.v1.StorageService.CreatePool.
func (c *storageServiceClient) CreatePool(ctx context.Context, req *connect.Request[v1.CreatePoolRequest]) (*connect.Response[v1.Pool], error) {
	return c.createPool.CallUnary(ctx, req)
}

// DeletePool calls otterscale.storage.v1.StorageService.DeletePool.
func (c *storageServiceClient) DeletePool(ctx context.Context, req *connect.Request[v1.DeletePoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePool.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the otterscale.storage.v1.StorageService service.
type StorageServiceHandler interface {
	ListPools(context.Context, *connect.Request[v1.ListPoolsRequest]) (*connect.Response[v1.ListPoolsResponse], error)
	CreatePool(context.Context, *connect.Request[v1.CreatePoolRequest]) (*connect.Response[v1.Pool], error)
	DeletePool(context.Context, *connect.Request[v1.DeletePoolRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_api_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	storageServiceListPoolsHandler := connect.NewUnaryHandler(
		StorageServiceListPoolsProcedure,
		svc.ListPools,
		connect.WithSchema(storageServiceMethods.ByName("ListPools")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreatePoolHandler := connect.NewUnaryHandler(
		StorageServiceCreatePoolProcedure,
		svc.CreatePool,
		connect.WithSchema(storageServiceMethods.ByName("CreatePool")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeletePoolHandler := connect.NewUnaryHandler(
		StorageServiceDeletePoolProcedure,
		svc.DeletePool,
		connect.WithSchema(storageServiceMethods.ByName("DeletePool")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceListPoolsProcedure:
			storageServiceListPoolsHandler.ServeHTTP(w, r)
		case StorageServiceCreatePoolProcedure:
			storageServiceCreatePoolHandler.ServeHTTP(w, r)
		case StorageServiceDeletePoolProcedure:
			storageServiceDeletePoolHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) ListPools(context.Context, *connect.Request[v1.ListPoolsRequest]) (*connect.Response[v1.ListPoolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListPools is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreatePool(context.Context, *connect.Request[v1.CreatePoolRequest]) (*connect.Response[v1.Pool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreatePool is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeletePool(context.Context, *connect.Request[v1.DeletePoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeletePool is not implemented"))
}
