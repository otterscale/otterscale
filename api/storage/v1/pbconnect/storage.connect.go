// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/storage/v1/storage.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/storage/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "otterscale.storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceListMONsProcedure is the fully-qualified name of the StorageService's ListMONs RPC.
	StorageServiceListMONsProcedure = "/otterscale.storage.v1.StorageService/ListMONs"
	// StorageServiceListOSDsProcedure is the fully-qualified name of the StorageService's ListOSDs RPC.
	StorageServiceListOSDsProcedure = "/otterscale.storage.v1.StorageService/ListOSDs"
	// StorageServiceDoSMARTProcedure is the fully-qualified name of the StorageService's DoSMART RPC.
	StorageServiceDoSMARTProcedure = "/otterscale.storage.v1.StorageService/DoSMART"
	// StorageServiceListPoolsProcedure is the fully-qualified name of the StorageService's ListPools
	// RPC.
	StorageServiceListPoolsProcedure = "/otterscale.storage.v1.StorageService/ListPools"
	// StorageServiceCreatePoolProcedure is the fully-qualified name of the StorageService's CreatePool
	// RPC.
	StorageServiceCreatePoolProcedure = "/otterscale.storage.v1.StorageService/CreatePool"
	// StorageServiceUpdatePoolProcedure is the fully-qualified name of the StorageService's UpdatePool
	// RPC.
	StorageServiceUpdatePoolProcedure = "/otterscale.storage.v1.StorageService/UpdatePool"
	// StorageServiceDeletePoolProcedure is the fully-qualified name of the StorageService's DeletePool
	// RPC.
	StorageServiceDeletePoolProcedure = "/otterscale.storage.v1.StorageService/DeletePool"
	// StorageServiceListImagesProcedure is the fully-qualified name of the StorageService's ListImages
	// RPC.
	StorageServiceListImagesProcedure = "/otterscale.storage.v1.StorageService/ListImages"
	// StorageServiceCreateImageProcedure is the fully-qualified name of the StorageService's
	// CreateImage RPC.
	StorageServiceCreateImageProcedure = "/otterscale.storage.v1.StorageService/CreateImage"
	// StorageServiceUpdateImageProcedure is the fully-qualified name of the StorageService's
	// UpdateImage RPC.
	StorageServiceUpdateImageProcedure = "/otterscale.storage.v1.StorageService/UpdateImage"
	// StorageServiceDeleteImageProcedure is the fully-qualified name of the StorageService's
	// DeleteImage RPC.
	StorageServiceDeleteImageProcedure = "/otterscale.storage.v1.StorageService/DeleteImage"
	// StorageServiceCreateImageSnapshotProcedure is the fully-qualified name of the StorageService's
	// CreateImageSnapshot RPC.
	StorageServiceCreateImageSnapshotProcedure = "/otterscale.storage.v1.StorageService/CreateImageSnapshot"
	// StorageServiceDeleteImageSnapshotProcedure is the fully-qualified name of the StorageService's
	// DeleteImageSnapshot RPC.
	StorageServiceDeleteImageSnapshotProcedure = "/otterscale.storage.v1.StorageService/DeleteImageSnapshot"
	// StorageServiceRollbackImageSnapshotProcedure is the fully-qualified name of the StorageService's
	// RollbackImageSnapshot RPC.
	StorageServiceRollbackImageSnapshotProcedure = "/otterscale.storage.v1.StorageService/RollbackImageSnapshot"
	// StorageServiceProtectImageSnapshotProcedure is the fully-qualified name of the StorageService's
	// ProtectImageSnapshot RPC.
	StorageServiceProtectImageSnapshotProcedure = "/otterscale.storage.v1.StorageService/ProtectImageSnapshot"
	// StorageServiceUnprotectImageSnapshotProcedure is the fully-qualified name of the StorageService's
	// UnprotectImageSnapshot RPC.
	StorageServiceUnprotectImageSnapshotProcedure = "/otterscale.storage.v1.StorageService/UnprotectImageSnapshot"
	// StorageServiceListVolumesProcedure is the fully-qualified name of the StorageService's
	// ListVolumes RPC.
	StorageServiceListVolumesProcedure = "/otterscale.storage.v1.StorageService/ListVolumes"
	// StorageServiceListSubvolumesProcedure is the fully-qualified name of the StorageService's
	// ListSubvolumes RPC.
	StorageServiceListSubvolumesProcedure = "/otterscale.storage.v1.StorageService/ListSubvolumes"
	// StorageServiceCreateSubvolumeProcedure is the fully-qualified name of the StorageService's
	// CreateSubvolume RPC.
	StorageServiceCreateSubvolumeProcedure = "/otterscale.storage.v1.StorageService/CreateSubvolume"
	// StorageServiceUpdateSubvolumeProcedure is the fully-qualified name of the StorageService's
	// UpdateSubvolume RPC.
	StorageServiceUpdateSubvolumeProcedure = "/otterscale.storage.v1.StorageService/UpdateSubvolume"
	// StorageServiceDeleteSubvolumeProcedure is the fully-qualified name of the StorageService's
	// DeleteSubvolume RPC.
	StorageServiceDeleteSubvolumeProcedure = "/otterscale.storage.v1.StorageService/DeleteSubvolume"
	// StorageServiceGrantSubvolumeExportAccessProcedure is the fully-qualified name of the
	// StorageService's GrantSubvolumeExportAccess RPC.
	StorageServiceGrantSubvolumeExportAccessProcedure = "/otterscale.storage.v1.StorageService/GrantSubvolumeExportAccess"
	// StorageServiceRevokeSubvolumeExportAccessProcedure is the fully-qualified name of the
	// StorageService's RevokeSubvolumeExportAccess RPC.
	StorageServiceRevokeSubvolumeExportAccessProcedure = "/otterscale.storage.v1.StorageService/RevokeSubvolumeExportAccess"
	// StorageServiceCreateSubvolumeSnapshotProcedure is the fully-qualified name of the
	// StorageService's CreateSubvolumeSnapshot RPC.
	StorageServiceCreateSubvolumeSnapshotProcedure = "/otterscale.storage.v1.StorageService/CreateSubvolumeSnapshot"
	// StorageServiceDeleteSubvolumeSnapshotProcedure is the fully-qualified name of the
	// StorageService's DeleteSubvolumeSnapshot RPC.
	StorageServiceDeleteSubvolumeSnapshotProcedure = "/otterscale.storage.v1.StorageService/DeleteSubvolumeSnapshot"
	// StorageServiceListSubvolumeGroupsProcedure is the fully-qualified name of the StorageService's
	// ListSubvolumeGroups RPC.
	StorageServiceListSubvolumeGroupsProcedure = "/otterscale.storage.v1.StorageService/ListSubvolumeGroups"
	// StorageServiceCreateSubvolumeGroupProcedure is the fully-qualified name of the StorageService's
	// CreateSubvolumeGroup RPC.
	StorageServiceCreateSubvolumeGroupProcedure = "/otterscale.storage.v1.StorageService/CreateSubvolumeGroup"
	// StorageServiceUpdateSubvolumeGroupProcedure is the fully-qualified name of the StorageService's
	// UpdateSubvolumeGroup RPC.
	StorageServiceUpdateSubvolumeGroupProcedure = "/otterscale.storage.v1.StorageService/UpdateSubvolumeGroup"
	// StorageServiceDeleteSubvolumeGroupProcedure is the fully-qualified name of the StorageService's
	// DeleteSubvolumeGroup RPC.
	StorageServiceDeleteSubvolumeGroupProcedure = "/otterscale.storage.v1.StorageService/DeleteSubvolumeGroup"
	// StorageServiceListBucketsProcedure is the fully-qualified name of the StorageService's
	// ListBuckets RPC.
	StorageServiceListBucketsProcedure = "/otterscale.storage.v1.StorageService/ListBuckets"
	// StorageServiceCreateBucketProcedure is the fully-qualified name of the StorageService's
	// CreateBucket RPC.
	StorageServiceCreateBucketProcedure = "/otterscale.storage.v1.StorageService/CreateBucket"
	// StorageServiceUpdateBucketProcedure is the fully-qualified name of the StorageService's
	// UpdateBucket RPC.
	StorageServiceUpdateBucketProcedure = "/otterscale.storage.v1.StorageService/UpdateBucket"
	// StorageServiceDeleteBucketProcedure is the fully-qualified name of the StorageService's
	// DeleteBucket RPC.
	StorageServiceDeleteBucketProcedure = "/otterscale.storage.v1.StorageService/DeleteBucket"
	// StorageServiceListUsersProcedure is the fully-qualified name of the StorageService's ListUsers
	// RPC.
	StorageServiceListUsersProcedure = "/otterscale.storage.v1.StorageService/ListUsers"
	// StorageServiceCreateUserProcedure is the fully-qualified name of the StorageService's CreateUser
	// RPC.
	StorageServiceCreateUserProcedure = "/otterscale.storage.v1.StorageService/CreateUser"
	// StorageServiceUpdateUserProcedure is the fully-qualified name of the StorageService's UpdateUser
	// RPC.
	StorageServiceUpdateUserProcedure = "/otterscale.storage.v1.StorageService/UpdateUser"
	// StorageServiceDeleteUserProcedure is the fully-qualified name of the StorageService's DeleteUser
	// RPC.
	StorageServiceDeleteUserProcedure = "/otterscale.storage.v1.StorageService/DeleteUser"
	// StorageServiceCreateUserKeyProcedure is the fully-qualified name of the StorageService's
	// CreateUserKey RPC.
	StorageServiceCreateUserKeyProcedure = "/otterscale.storage.v1.StorageService/CreateUserKey"
	// StorageServiceDeleteUserKeyProcedure is the fully-qualified name of the StorageService's
	// DeleteUserKey RPC.
	StorageServiceDeleteUserKeyProcedure = "/otterscale.storage.v1.StorageService/DeleteUserKey"
)

// StorageServiceClient is a client for the otterscale.storage.v1.StorageService service.
type StorageServiceClient interface {
	ListMONs(context.Context, *v1.ListMONsRequest) (*v1.ListMONsResponse, error)
	ListOSDs(context.Context, *v1.ListOSDsRequest) (*v1.ListOSDsResponse, error)
	DoSMART(context.Context, *v1.DoSMARTRequest) (*v1.DoSMARTResponse, error)
	ListPools(context.Context, *v1.ListPoolsRequest) (*v1.ListPoolsResponse, error)
	CreatePool(context.Context, *v1.CreatePoolRequest) (*v1.Pool, error)
	UpdatePool(context.Context, *v1.UpdatePoolRequest) (*v1.Pool, error)
	DeletePool(context.Context, *v1.DeletePoolRequest) (*emptypb.Empty, error)
	ListImages(context.Context, *v1.ListImagesRequest) (*v1.ListImagesResponse, error)
	CreateImage(context.Context, *v1.CreateImageRequest) (*v1.Image, error)
	UpdateImage(context.Context, *v1.UpdateImageRequest) (*v1.Image, error)
	DeleteImage(context.Context, *v1.DeleteImageRequest) (*emptypb.Empty, error)
	CreateImageSnapshot(context.Context, *v1.CreateImageSnapshotRequest) (*v1.Image_Snapshot, error)
	DeleteImageSnapshot(context.Context, *v1.DeleteImageSnapshotRequest) (*emptypb.Empty, error)
	RollbackImageSnapshot(context.Context, *v1.RollbackImageSnapshotRequest) (*emptypb.Empty, error)
	ProtectImageSnapshot(context.Context, *v1.ProtectImageSnapshotRequest) (*emptypb.Empty, error)
	UnprotectImageSnapshot(context.Context, *v1.UnprotectImageSnapshotRequest) (*emptypb.Empty, error)
	ListVolumes(context.Context, *v1.ListVolumesRequest) (*v1.ListVolumesResponse, error)
	ListSubvolumes(context.Context, *v1.ListSubvolumesRequest) (*v1.ListSubvolumesResponse, error)
	CreateSubvolume(context.Context, *v1.CreateSubvolumeRequest) (*v1.Subvolume, error)
	UpdateSubvolume(context.Context, *v1.UpdateSubvolumeRequest) (*v1.Subvolume, error)
	DeleteSubvolume(context.Context, *v1.DeleteSubvolumeRequest) (*emptypb.Empty, error)
	GrantSubvolumeExportAccess(context.Context, *v1.GrantSubvolumeExportAccessRequest) (*emptypb.Empty, error)
	RevokeSubvolumeExportAccess(context.Context, *v1.RevokeSubvolumeExportAccessRequest) (*emptypb.Empty, error)
	CreateSubvolumeSnapshot(context.Context, *v1.CreateSubvolumeSnapshotRequest) (*v1.Subvolume_Snapshot, error)
	DeleteSubvolumeSnapshot(context.Context, *v1.DeleteSubvolumeSnapshotRequest) (*emptypb.Empty, error)
	ListSubvolumeGroups(context.Context, *v1.ListSubvolumeGroupsRequest) (*v1.ListSubvolumeGroupsResponse, error)
	CreateSubvolumeGroup(context.Context, *v1.CreateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error)
	UpdateSubvolumeGroup(context.Context, *v1.UpdateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error)
	DeleteSubvolumeGroup(context.Context, *v1.DeleteSubvolumeGroupRequest) (*emptypb.Empty, error)
	ListBuckets(context.Context, *v1.ListBucketsRequest) (*v1.ListBucketsResponse, error)
	CreateBucket(context.Context, *v1.CreateBucketRequest) (*v1.Bucket, error)
	UpdateBucket(context.Context, *v1.UpdateBucketRequest) (*v1.Bucket, error)
	DeleteBucket(context.Context, *v1.DeleteBucketRequest) (*emptypb.Empty, error)
	ListUsers(context.Context, *v1.ListUsersRequest) (*v1.ListUsersResponse, error)
	CreateUser(context.Context, *v1.CreateUserRequest) (*v1.User, error)
	UpdateUser(context.Context, *v1.UpdateUserRequest) (*v1.User, error)
	DeleteUser(context.Context, *v1.DeleteUserRequest) (*emptypb.Empty, error)
	CreateUserKey(context.Context, *v1.CreateUserKeyRequest) (*v1.User_Key, error)
	DeleteUserKey(context.Context, *v1.DeleteUserKeyRequest) (*emptypb.Empty, error)
}

// NewStorageServiceClient constructs a client for the otterscale.storage.v1.StorageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storageServiceMethods := v1.File_api_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	return &storageServiceClient{
		listMONs: connect.NewClient[v1.ListMONsRequest, v1.ListMONsResponse](
			httpClient,
			baseURL+StorageServiceListMONsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListMONs")),
			connect.WithClientOptions(opts...),
		),
		listOSDs: connect.NewClient[v1.ListOSDsRequest, v1.ListOSDsResponse](
			httpClient,
			baseURL+StorageServiceListOSDsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListOSDs")),
			connect.WithClientOptions(opts...),
		),
		doSMART: connect.NewClient[v1.DoSMARTRequest, v1.DoSMARTResponse](
			httpClient,
			baseURL+StorageServiceDoSMARTProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DoSMART")),
			connect.WithClientOptions(opts...),
		),
		listPools: connect.NewClient[v1.ListPoolsRequest, v1.ListPoolsResponse](
			httpClient,
			baseURL+StorageServiceListPoolsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListPools")),
			connect.WithClientOptions(opts...),
		),
		createPool: connect.NewClient[v1.CreatePoolRequest, v1.Pool](
			httpClient,
			baseURL+StorageServiceCreatePoolProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreatePool")),
			connect.WithClientOptions(opts...),
		),
		updatePool: connect.NewClient[v1.UpdatePoolRequest, v1.Pool](
			httpClient,
			baseURL+StorageServiceUpdatePoolProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdatePool")),
			connect.WithClientOptions(opts...),
		),
		deletePool: connect.NewClient[v1.DeletePoolRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeletePoolProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeletePool")),
			connect.WithClientOptions(opts...),
		),
		listImages: connect.NewClient[v1.ListImagesRequest, v1.ListImagesResponse](
			httpClient,
			baseURL+StorageServiceListImagesProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListImages")),
			connect.WithClientOptions(opts...),
		),
		createImage: connect.NewClient[v1.CreateImageRequest, v1.Image](
			httpClient,
			baseURL+StorageServiceCreateImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateImage")),
			connect.WithClientOptions(opts...),
		),
		updateImage: connect.NewClient[v1.UpdateImageRequest, v1.Image](
			httpClient,
			baseURL+StorageServiceUpdateImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateImage")),
			connect.WithClientOptions(opts...),
		),
		deleteImage: connect.NewClient[v1.DeleteImageRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteImageProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteImage")),
			connect.WithClientOptions(opts...),
		),
		createImageSnapshot: connect.NewClient[v1.CreateImageSnapshotRequest, v1.Image_Snapshot](
			httpClient,
			baseURL+StorageServiceCreateImageSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateImageSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteImageSnapshot: connect.NewClient[v1.DeleteImageSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteImageSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteImageSnapshot")),
			connect.WithClientOptions(opts...),
		),
		rollbackImageSnapshot: connect.NewClient[v1.RollbackImageSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceRollbackImageSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("RollbackImageSnapshot")),
			connect.WithClientOptions(opts...),
		),
		protectImageSnapshot: connect.NewClient[v1.ProtectImageSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceProtectImageSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ProtectImageSnapshot")),
			connect.WithClientOptions(opts...),
		),
		unprotectImageSnapshot: connect.NewClient[v1.UnprotectImageSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceUnprotectImageSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UnprotectImageSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listVolumes: connect.NewClient[v1.ListVolumesRequest, v1.ListVolumesResponse](
			httpClient,
			baseURL+StorageServiceListVolumesProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListVolumes")),
			connect.WithClientOptions(opts...),
		),
		listSubvolumes: connect.NewClient[v1.ListSubvolumesRequest, v1.ListSubvolumesResponse](
			httpClient,
			baseURL+StorageServiceListSubvolumesProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListSubvolumes")),
			connect.WithClientOptions(opts...),
		),
		createSubvolume: connect.NewClient[v1.CreateSubvolumeRequest, v1.Subvolume](
			httpClient,
			baseURL+StorageServiceCreateSubvolumeProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateSubvolume")),
			connect.WithClientOptions(opts...),
		),
		updateSubvolume: connect.NewClient[v1.UpdateSubvolumeRequest, v1.Subvolume](
			httpClient,
			baseURL+StorageServiceUpdateSubvolumeProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateSubvolume")),
			connect.WithClientOptions(opts...),
		),
		deleteSubvolume: connect.NewClient[v1.DeleteSubvolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteSubvolumeProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolume")),
			connect.WithClientOptions(opts...),
		),
		grantSubvolumeExportAccess: connect.NewClient[v1.GrantSubvolumeExportAccessRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceGrantSubvolumeExportAccessProcedure,
			connect.WithSchema(storageServiceMethods.ByName("GrantSubvolumeExportAccess")),
			connect.WithClientOptions(opts...),
		),
		revokeSubvolumeExportAccess: connect.NewClient[v1.RevokeSubvolumeExportAccessRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceRevokeSubvolumeExportAccessProcedure,
			connect.WithSchema(storageServiceMethods.ByName("RevokeSubvolumeExportAccess")),
			connect.WithClientOptions(opts...),
		),
		createSubvolumeSnapshot: connect.NewClient[v1.CreateSubvolumeSnapshotRequest, v1.Subvolume_Snapshot](
			httpClient,
			baseURL+StorageServiceCreateSubvolumeSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateSubvolumeSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteSubvolumeSnapshot: connect.NewClient[v1.DeleteSubvolumeSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteSubvolumeSnapshotProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolumeSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listSubvolumeGroups: connect.NewClient[v1.ListSubvolumeGroupsRequest, v1.ListSubvolumeGroupsResponse](
			httpClient,
			baseURL+StorageServiceListSubvolumeGroupsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListSubvolumeGroups")),
			connect.WithClientOptions(opts...),
		),
		createSubvolumeGroup: connect.NewClient[v1.CreateSubvolumeGroupRequest, v1.SubvolumeGroup](
			httpClient,
			baseURL+StorageServiceCreateSubvolumeGroupProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateSubvolumeGroup")),
			connect.WithClientOptions(opts...),
		),
		updateSubvolumeGroup: connect.NewClient[v1.UpdateSubvolumeGroupRequest, v1.SubvolumeGroup](
			httpClient,
			baseURL+StorageServiceUpdateSubvolumeGroupProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateSubvolumeGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteSubvolumeGroup: connect.NewClient[v1.DeleteSubvolumeGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteSubvolumeGroupProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolumeGroup")),
			connect.WithClientOptions(opts...),
		),
		listBuckets: connect.NewClient[v1.ListBucketsRequest, v1.ListBucketsResponse](
			httpClient,
			baseURL+StorageServiceListBucketsProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListBuckets")),
			connect.WithClientOptions(opts...),
		),
		createBucket: connect.NewClient[v1.CreateBucketRequest, v1.Bucket](
			httpClient,
			baseURL+StorageServiceCreateBucketProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateBucket")),
			connect.WithClientOptions(opts...),
		),
		updateBucket: connect.NewClient[v1.UpdateBucketRequest, v1.Bucket](
			httpClient,
			baseURL+StorageServiceUpdateBucketProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateBucket")),
			connect.WithClientOptions(opts...),
		),
		deleteBucket: connect.NewClient[v1.DeleteBucketRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteBucketProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteBucket")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+StorageServiceListUsersProcedure,
			connect.WithSchema(storageServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.User](
			httpClient,
			baseURL+StorageServiceCreateUserProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.User](
			httpClient,
			baseURL+StorageServiceUpdateUserProcedure,
			connect.WithSchema(storageServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteUserProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		createUserKey: connect.NewClient[v1.CreateUserKeyRequest, v1.User_Key](
			httpClient,
			baseURL+StorageServiceCreateUserKeyProcedure,
			connect.WithSchema(storageServiceMethods.ByName("CreateUserKey")),
			connect.WithClientOptions(opts...),
		),
		deleteUserKey: connect.NewClient[v1.DeleteUserKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+StorageServiceDeleteUserKeyProcedure,
			connect.WithSchema(storageServiceMethods.ByName("DeleteUserKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	listMONs                    *connect.Client[v1.ListMONsRequest, v1.ListMONsResponse]
	listOSDs                    *connect.Client[v1.ListOSDsRequest, v1.ListOSDsResponse]
	doSMART                     *connect.Client[v1.DoSMARTRequest, v1.DoSMARTResponse]
	listPools                   *connect.Client[v1.ListPoolsRequest, v1.ListPoolsResponse]
	createPool                  *connect.Client[v1.CreatePoolRequest, v1.Pool]
	updatePool                  *connect.Client[v1.UpdatePoolRequest, v1.Pool]
	deletePool                  *connect.Client[v1.DeletePoolRequest, emptypb.Empty]
	listImages                  *connect.Client[v1.ListImagesRequest, v1.ListImagesResponse]
	createImage                 *connect.Client[v1.CreateImageRequest, v1.Image]
	updateImage                 *connect.Client[v1.UpdateImageRequest, v1.Image]
	deleteImage                 *connect.Client[v1.DeleteImageRequest, emptypb.Empty]
	createImageSnapshot         *connect.Client[v1.CreateImageSnapshotRequest, v1.Image_Snapshot]
	deleteImageSnapshot         *connect.Client[v1.DeleteImageSnapshotRequest, emptypb.Empty]
	rollbackImageSnapshot       *connect.Client[v1.RollbackImageSnapshotRequest, emptypb.Empty]
	protectImageSnapshot        *connect.Client[v1.ProtectImageSnapshotRequest, emptypb.Empty]
	unprotectImageSnapshot      *connect.Client[v1.UnprotectImageSnapshotRequest, emptypb.Empty]
	listVolumes                 *connect.Client[v1.ListVolumesRequest, v1.ListVolumesResponse]
	listSubvolumes              *connect.Client[v1.ListSubvolumesRequest, v1.ListSubvolumesResponse]
	createSubvolume             *connect.Client[v1.CreateSubvolumeRequest, v1.Subvolume]
	updateSubvolume             *connect.Client[v1.UpdateSubvolumeRequest, v1.Subvolume]
	deleteSubvolume             *connect.Client[v1.DeleteSubvolumeRequest, emptypb.Empty]
	grantSubvolumeExportAccess  *connect.Client[v1.GrantSubvolumeExportAccessRequest, emptypb.Empty]
	revokeSubvolumeExportAccess *connect.Client[v1.RevokeSubvolumeExportAccessRequest, emptypb.Empty]
	createSubvolumeSnapshot     *connect.Client[v1.CreateSubvolumeSnapshotRequest, v1.Subvolume_Snapshot]
	deleteSubvolumeSnapshot     *connect.Client[v1.DeleteSubvolumeSnapshotRequest, emptypb.Empty]
	listSubvolumeGroups         *connect.Client[v1.ListSubvolumeGroupsRequest, v1.ListSubvolumeGroupsResponse]
	createSubvolumeGroup        *connect.Client[v1.CreateSubvolumeGroupRequest, v1.SubvolumeGroup]
	updateSubvolumeGroup        *connect.Client[v1.UpdateSubvolumeGroupRequest, v1.SubvolumeGroup]
	deleteSubvolumeGroup        *connect.Client[v1.DeleteSubvolumeGroupRequest, emptypb.Empty]
	listBuckets                 *connect.Client[v1.ListBucketsRequest, v1.ListBucketsResponse]
	createBucket                *connect.Client[v1.CreateBucketRequest, v1.Bucket]
	updateBucket                *connect.Client[v1.UpdateBucketRequest, v1.Bucket]
	deleteBucket                *connect.Client[v1.DeleteBucketRequest, emptypb.Empty]
	listUsers                   *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	createUser                  *connect.Client[v1.CreateUserRequest, v1.User]
	updateUser                  *connect.Client[v1.UpdateUserRequest, v1.User]
	deleteUser                  *connect.Client[v1.DeleteUserRequest, emptypb.Empty]
	createUserKey               *connect.Client[v1.CreateUserKeyRequest, v1.User_Key]
	deleteUserKey               *connect.Client[v1.DeleteUserKeyRequest, emptypb.Empty]
}

// ListMONs calls otterscale.storage.v1.StorageService.ListMONs.
func (c *storageServiceClient) ListMONs(ctx context.Context, req *v1.ListMONsRequest) (*v1.ListMONsResponse, error) {
	response, err := c.listMONs.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListOSDs calls otterscale.storage.v1.StorageService.ListOSDs.
func (c *storageServiceClient) ListOSDs(ctx context.Context, req *v1.ListOSDsRequest) (*v1.ListOSDsResponse, error) {
	response, err := c.listOSDs.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DoSMART calls otterscale.storage.v1.StorageService.DoSMART.
func (c *storageServiceClient) DoSMART(ctx context.Context, req *v1.DoSMARTRequest) (*v1.DoSMARTResponse, error) {
	response, err := c.doSMART.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListPools calls otterscale.storage.v1.StorageService.ListPools.
func (c *storageServiceClient) ListPools(ctx context.Context, req *v1.ListPoolsRequest) (*v1.ListPoolsResponse, error) {
	response, err := c.listPools.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreatePool calls otterscale.storage.v1.StorageService.CreatePool.
func (c *storageServiceClient) CreatePool(ctx context.Context, req *v1.CreatePoolRequest) (*v1.Pool, error) {
	response, err := c.createPool.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdatePool calls otterscale.storage.v1.StorageService.UpdatePool.
func (c *storageServiceClient) UpdatePool(ctx context.Context, req *v1.UpdatePoolRequest) (*v1.Pool, error) {
	response, err := c.updatePool.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeletePool calls otterscale.storage.v1.StorageService.DeletePool.
func (c *storageServiceClient) DeletePool(ctx context.Context, req *v1.DeletePoolRequest) (*emptypb.Empty, error) {
	response, err := c.deletePool.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListImages calls otterscale.storage.v1.StorageService.ListImages.
func (c *storageServiceClient) ListImages(ctx context.Context, req *v1.ListImagesRequest) (*v1.ListImagesResponse, error) {
	response, err := c.listImages.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateImage calls otterscale.storage.v1.StorageService.CreateImage.
func (c *storageServiceClient) CreateImage(ctx context.Context, req *v1.CreateImageRequest) (*v1.Image, error) {
	response, err := c.createImage.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateImage calls otterscale.storage.v1.StorageService.UpdateImage.
func (c *storageServiceClient) UpdateImage(ctx context.Context, req *v1.UpdateImageRequest) (*v1.Image, error) {
	response, err := c.updateImage.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteImage calls otterscale.storage.v1.StorageService.DeleteImage.
func (c *storageServiceClient) DeleteImage(ctx context.Context, req *v1.DeleteImageRequest) (*emptypb.Empty, error) {
	response, err := c.deleteImage.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateImageSnapshot calls otterscale.storage.v1.StorageService.CreateImageSnapshot.
func (c *storageServiceClient) CreateImageSnapshot(ctx context.Context, req *v1.CreateImageSnapshotRequest) (*v1.Image_Snapshot, error) {
	response, err := c.createImageSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteImageSnapshot calls otterscale.storage.v1.StorageService.DeleteImageSnapshot.
func (c *storageServiceClient) DeleteImageSnapshot(ctx context.Context, req *v1.DeleteImageSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.deleteImageSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RollbackImageSnapshot calls otterscale.storage.v1.StorageService.RollbackImageSnapshot.
func (c *storageServiceClient) RollbackImageSnapshot(ctx context.Context, req *v1.RollbackImageSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.rollbackImageSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ProtectImageSnapshot calls otterscale.storage.v1.StorageService.ProtectImageSnapshot.
func (c *storageServiceClient) ProtectImageSnapshot(ctx context.Context, req *v1.ProtectImageSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.protectImageSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UnprotectImageSnapshot calls otterscale.storage.v1.StorageService.UnprotectImageSnapshot.
func (c *storageServiceClient) UnprotectImageSnapshot(ctx context.Context, req *v1.UnprotectImageSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.unprotectImageSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListVolumes calls otterscale.storage.v1.StorageService.ListVolumes.
func (c *storageServiceClient) ListVolumes(ctx context.Context, req *v1.ListVolumesRequest) (*v1.ListVolumesResponse, error) {
	response, err := c.listVolumes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListSubvolumes calls otterscale.storage.v1.StorageService.ListSubvolumes.
func (c *storageServiceClient) ListSubvolumes(ctx context.Context, req *v1.ListSubvolumesRequest) (*v1.ListSubvolumesResponse, error) {
	response, err := c.listSubvolumes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateSubvolume calls otterscale.storage.v1.StorageService.CreateSubvolume.
func (c *storageServiceClient) CreateSubvolume(ctx context.Context, req *v1.CreateSubvolumeRequest) (*v1.Subvolume, error) {
	response, err := c.createSubvolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateSubvolume calls otterscale.storage.v1.StorageService.UpdateSubvolume.
func (c *storageServiceClient) UpdateSubvolume(ctx context.Context, req *v1.UpdateSubvolumeRequest) (*v1.Subvolume, error) {
	response, err := c.updateSubvolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteSubvolume calls otterscale.storage.v1.StorageService.DeleteSubvolume.
func (c *storageServiceClient) DeleteSubvolume(ctx context.Context, req *v1.DeleteSubvolumeRequest) (*emptypb.Empty, error) {
	response, err := c.deleteSubvolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GrantSubvolumeExportAccess calls otterscale.storage.v1.StorageService.GrantSubvolumeExportAccess.
func (c *storageServiceClient) GrantSubvolumeExportAccess(ctx context.Context, req *v1.GrantSubvolumeExportAccessRequest) (*emptypb.Empty, error) {
	response, err := c.grantSubvolumeExportAccess.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RevokeSubvolumeExportAccess calls
// otterscale.storage.v1.StorageService.RevokeSubvolumeExportAccess.
func (c *storageServiceClient) RevokeSubvolumeExportAccess(ctx context.Context, req *v1.RevokeSubvolumeExportAccessRequest) (*emptypb.Empty, error) {
	response, err := c.revokeSubvolumeExportAccess.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateSubvolumeSnapshot calls otterscale.storage.v1.StorageService.CreateSubvolumeSnapshot.
func (c *storageServiceClient) CreateSubvolumeSnapshot(ctx context.Context, req *v1.CreateSubvolumeSnapshotRequest) (*v1.Subvolume_Snapshot, error) {
	response, err := c.createSubvolumeSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteSubvolumeSnapshot calls otterscale.storage.v1.StorageService.DeleteSubvolumeSnapshot.
func (c *storageServiceClient) DeleteSubvolumeSnapshot(ctx context.Context, req *v1.DeleteSubvolumeSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.deleteSubvolumeSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListSubvolumeGroups calls otterscale.storage.v1.StorageService.ListSubvolumeGroups.
func (c *storageServiceClient) ListSubvolumeGroups(ctx context.Context, req *v1.ListSubvolumeGroupsRequest) (*v1.ListSubvolumeGroupsResponse, error) {
	response, err := c.listSubvolumeGroups.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateSubvolumeGroup calls otterscale.storage.v1.StorageService.CreateSubvolumeGroup.
func (c *storageServiceClient) CreateSubvolumeGroup(ctx context.Context, req *v1.CreateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error) {
	response, err := c.createSubvolumeGroup.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateSubvolumeGroup calls otterscale.storage.v1.StorageService.UpdateSubvolumeGroup.
func (c *storageServiceClient) UpdateSubvolumeGroup(ctx context.Context, req *v1.UpdateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error) {
	response, err := c.updateSubvolumeGroup.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteSubvolumeGroup calls otterscale.storage.v1.StorageService.DeleteSubvolumeGroup.
func (c *storageServiceClient) DeleteSubvolumeGroup(ctx context.Context, req *v1.DeleteSubvolumeGroupRequest) (*emptypb.Empty, error) {
	response, err := c.deleteSubvolumeGroup.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListBuckets calls otterscale.storage.v1.StorageService.ListBuckets.
func (c *storageServiceClient) ListBuckets(ctx context.Context, req *v1.ListBucketsRequest) (*v1.ListBucketsResponse, error) {
	response, err := c.listBuckets.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateBucket calls otterscale.storage.v1.StorageService.CreateBucket.
func (c *storageServiceClient) CreateBucket(ctx context.Context, req *v1.CreateBucketRequest) (*v1.Bucket, error) {
	response, err := c.createBucket.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateBucket calls otterscale.storage.v1.StorageService.UpdateBucket.
func (c *storageServiceClient) UpdateBucket(ctx context.Context, req *v1.UpdateBucketRequest) (*v1.Bucket, error) {
	response, err := c.updateBucket.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteBucket calls otterscale.storage.v1.StorageService.DeleteBucket.
func (c *storageServiceClient) DeleteBucket(ctx context.Context, req *v1.DeleteBucketRequest) (*emptypb.Empty, error) {
	response, err := c.deleteBucket.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListUsers calls otterscale.storage.v1.StorageService.ListUsers.
func (c *storageServiceClient) ListUsers(ctx context.Context, req *v1.ListUsersRequest) (*v1.ListUsersResponse, error) {
	response, err := c.listUsers.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateUser calls otterscale.storage.v1.StorageService.CreateUser.
func (c *storageServiceClient) CreateUser(ctx context.Context, req *v1.CreateUserRequest) (*v1.User, error) {
	response, err := c.createUser.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateUser calls otterscale.storage.v1.StorageService.UpdateUser.
func (c *storageServiceClient) UpdateUser(ctx context.Context, req *v1.UpdateUserRequest) (*v1.User, error) {
	response, err := c.updateUser.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteUser calls otterscale.storage.v1.StorageService.DeleteUser.
func (c *storageServiceClient) DeleteUser(ctx context.Context, req *v1.DeleteUserRequest) (*emptypb.Empty, error) {
	response, err := c.deleteUser.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateUserKey calls otterscale.storage.v1.StorageService.CreateUserKey.
func (c *storageServiceClient) CreateUserKey(ctx context.Context, req *v1.CreateUserKeyRequest) (*v1.User_Key, error) {
	response, err := c.createUserKey.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteUserKey calls otterscale.storage.v1.StorageService.DeleteUserKey.
func (c *storageServiceClient) DeleteUserKey(ctx context.Context, req *v1.DeleteUserKeyRequest) (*emptypb.Empty, error) {
	response, err := c.deleteUserKey.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// StorageServiceHandler is an implementation of the otterscale.storage.v1.StorageService service.
type StorageServiceHandler interface {
	ListMONs(context.Context, *v1.ListMONsRequest) (*v1.ListMONsResponse, error)
	ListOSDs(context.Context, *v1.ListOSDsRequest) (*v1.ListOSDsResponse, error)
	DoSMART(context.Context, *v1.DoSMARTRequest) (*v1.DoSMARTResponse, error)
	ListPools(context.Context, *v1.ListPoolsRequest) (*v1.ListPoolsResponse, error)
	CreatePool(context.Context, *v1.CreatePoolRequest) (*v1.Pool, error)
	UpdatePool(context.Context, *v1.UpdatePoolRequest) (*v1.Pool, error)
	DeletePool(context.Context, *v1.DeletePoolRequest) (*emptypb.Empty, error)
	ListImages(context.Context, *v1.ListImagesRequest) (*v1.ListImagesResponse, error)
	CreateImage(context.Context, *v1.CreateImageRequest) (*v1.Image, error)
	UpdateImage(context.Context, *v1.UpdateImageRequest) (*v1.Image, error)
	DeleteImage(context.Context, *v1.DeleteImageRequest) (*emptypb.Empty, error)
	CreateImageSnapshot(context.Context, *v1.CreateImageSnapshotRequest) (*v1.Image_Snapshot, error)
	DeleteImageSnapshot(context.Context, *v1.DeleteImageSnapshotRequest) (*emptypb.Empty, error)
	RollbackImageSnapshot(context.Context, *v1.RollbackImageSnapshotRequest) (*emptypb.Empty, error)
	ProtectImageSnapshot(context.Context, *v1.ProtectImageSnapshotRequest) (*emptypb.Empty, error)
	UnprotectImageSnapshot(context.Context, *v1.UnprotectImageSnapshotRequest) (*emptypb.Empty, error)
	ListVolumes(context.Context, *v1.ListVolumesRequest) (*v1.ListVolumesResponse, error)
	ListSubvolumes(context.Context, *v1.ListSubvolumesRequest) (*v1.ListSubvolumesResponse, error)
	CreateSubvolume(context.Context, *v1.CreateSubvolumeRequest) (*v1.Subvolume, error)
	UpdateSubvolume(context.Context, *v1.UpdateSubvolumeRequest) (*v1.Subvolume, error)
	DeleteSubvolume(context.Context, *v1.DeleteSubvolumeRequest) (*emptypb.Empty, error)
	GrantSubvolumeExportAccess(context.Context, *v1.GrantSubvolumeExportAccessRequest) (*emptypb.Empty, error)
	RevokeSubvolumeExportAccess(context.Context, *v1.RevokeSubvolumeExportAccessRequest) (*emptypb.Empty, error)
	CreateSubvolumeSnapshot(context.Context, *v1.CreateSubvolumeSnapshotRequest) (*v1.Subvolume_Snapshot, error)
	DeleteSubvolumeSnapshot(context.Context, *v1.DeleteSubvolumeSnapshotRequest) (*emptypb.Empty, error)
	ListSubvolumeGroups(context.Context, *v1.ListSubvolumeGroupsRequest) (*v1.ListSubvolumeGroupsResponse, error)
	CreateSubvolumeGroup(context.Context, *v1.CreateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error)
	UpdateSubvolumeGroup(context.Context, *v1.UpdateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error)
	DeleteSubvolumeGroup(context.Context, *v1.DeleteSubvolumeGroupRequest) (*emptypb.Empty, error)
	ListBuckets(context.Context, *v1.ListBucketsRequest) (*v1.ListBucketsResponse, error)
	CreateBucket(context.Context, *v1.CreateBucketRequest) (*v1.Bucket, error)
	UpdateBucket(context.Context, *v1.UpdateBucketRequest) (*v1.Bucket, error)
	DeleteBucket(context.Context, *v1.DeleteBucketRequest) (*emptypb.Empty, error)
	ListUsers(context.Context, *v1.ListUsersRequest) (*v1.ListUsersResponse, error)
	CreateUser(context.Context, *v1.CreateUserRequest) (*v1.User, error)
	UpdateUser(context.Context, *v1.UpdateUserRequest) (*v1.User, error)
	DeleteUser(context.Context, *v1.DeleteUserRequest) (*emptypb.Empty, error)
	CreateUserKey(context.Context, *v1.CreateUserKeyRequest) (*v1.User_Key, error)
	DeleteUserKey(context.Context, *v1.DeleteUserKeyRequest) (*emptypb.Empty, error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceMethods := v1.File_api_storage_v1_storage_proto.Services().ByName("StorageService").Methods()
	storageServiceListMONsHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListMONsProcedure,
		svc.ListMONs,
		connect.WithSchema(storageServiceMethods.ByName("ListMONs")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListOSDsHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListOSDsProcedure,
		svc.ListOSDs,
		connect.WithSchema(storageServiceMethods.ByName("ListOSDs")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDoSMARTHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDoSMARTProcedure,
		svc.DoSMART,
		connect.WithSchema(storageServiceMethods.ByName("DoSMART")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListPoolsHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListPoolsProcedure,
		svc.ListPools,
		connect.WithSchema(storageServiceMethods.ByName("ListPools")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreatePoolHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreatePoolProcedure,
		svc.CreatePool,
		connect.WithSchema(storageServiceMethods.ByName("CreatePool")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdatePoolHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdatePoolProcedure,
		svc.UpdatePool,
		connect.WithSchema(storageServiceMethods.ByName("UpdatePool")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeletePoolHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeletePoolProcedure,
		svc.DeletePool,
		connect.WithSchema(storageServiceMethods.ByName("DeletePool")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListImagesHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListImagesProcedure,
		svc.ListImages,
		connect.WithSchema(storageServiceMethods.ByName("ListImages")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateImageHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateImageProcedure,
		svc.CreateImage,
		connect.WithSchema(storageServiceMethods.ByName("CreateImage")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateImageHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdateImageProcedure,
		svc.UpdateImage,
		connect.WithSchema(storageServiceMethods.ByName("UpdateImage")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteImageHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteImageProcedure,
		svc.DeleteImage,
		connect.WithSchema(storageServiceMethods.ByName("DeleteImage")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateImageSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateImageSnapshotProcedure,
		svc.CreateImageSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("CreateImageSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteImageSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteImageSnapshotProcedure,
		svc.DeleteImageSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("DeleteImageSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceRollbackImageSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceRollbackImageSnapshotProcedure,
		svc.RollbackImageSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("RollbackImageSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceProtectImageSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceProtectImageSnapshotProcedure,
		svc.ProtectImageSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("ProtectImageSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUnprotectImageSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUnprotectImageSnapshotProcedure,
		svc.UnprotectImageSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("UnprotectImageSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListVolumesHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListVolumesProcedure,
		svc.ListVolumes,
		connect.WithSchema(storageServiceMethods.ByName("ListVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListSubvolumesHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListSubvolumesProcedure,
		svc.ListSubvolumes,
		connect.WithSchema(storageServiceMethods.ByName("ListSubvolumes")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateSubvolumeHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateSubvolumeProcedure,
		svc.CreateSubvolume,
		connect.WithSchema(storageServiceMethods.ByName("CreateSubvolume")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateSubvolumeHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdateSubvolumeProcedure,
		svc.UpdateSubvolume,
		connect.WithSchema(storageServiceMethods.ByName("UpdateSubvolume")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteSubvolumeHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteSubvolumeProcedure,
		svc.DeleteSubvolume,
		connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolume")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGrantSubvolumeExportAccessHandler := connect.NewUnaryHandlerSimple(
		StorageServiceGrantSubvolumeExportAccessProcedure,
		svc.GrantSubvolumeExportAccess,
		connect.WithSchema(storageServiceMethods.ByName("GrantSubvolumeExportAccess")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceRevokeSubvolumeExportAccessHandler := connect.NewUnaryHandlerSimple(
		StorageServiceRevokeSubvolumeExportAccessProcedure,
		svc.RevokeSubvolumeExportAccess,
		connect.WithSchema(storageServiceMethods.ByName("RevokeSubvolumeExportAccess")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateSubvolumeSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateSubvolumeSnapshotProcedure,
		svc.CreateSubvolumeSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("CreateSubvolumeSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteSubvolumeSnapshotHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteSubvolumeSnapshotProcedure,
		svc.DeleteSubvolumeSnapshot,
		connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolumeSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListSubvolumeGroupsHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListSubvolumeGroupsProcedure,
		svc.ListSubvolumeGroups,
		connect.WithSchema(storageServiceMethods.ByName("ListSubvolumeGroups")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateSubvolumeGroupHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateSubvolumeGroupProcedure,
		svc.CreateSubvolumeGroup,
		connect.WithSchema(storageServiceMethods.ByName("CreateSubvolumeGroup")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateSubvolumeGroupHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdateSubvolumeGroupProcedure,
		svc.UpdateSubvolumeGroup,
		connect.WithSchema(storageServiceMethods.ByName("UpdateSubvolumeGroup")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteSubvolumeGroupHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteSubvolumeGroupProcedure,
		svc.DeleteSubvolumeGroup,
		connect.WithSchema(storageServiceMethods.ByName("DeleteSubvolumeGroup")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListBucketsHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListBucketsProcedure,
		svc.ListBuckets,
		connect.WithSchema(storageServiceMethods.ByName("ListBuckets")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateBucketHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateBucketProcedure,
		svc.CreateBucket,
		connect.WithSchema(storageServiceMethods.ByName("CreateBucket")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateBucketHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdateBucketProcedure,
		svc.UpdateBucket,
		connect.WithSchema(storageServiceMethods.ByName("UpdateBucket")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteBucketHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteBucketProcedure,
		svc.DeleteBucket,
		connect.WithSchema(storageServiceMethods.ByName("DeleteBucket")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListUsersHandler := connect.NewUnaryHandlerSimple(
		StorageServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(storageServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateUserHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(storageServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUpdateUserHandler := connect.NewUnaryHandlerSimple(
		StorageServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(storageServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteUserHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(storageServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCreateUserKeyHandler := connect.NewUnaryHandlerSimple(
		StorageServiceCreateUserKeyProcedure,
		svc.CreateUserKey,
		connect.WithSchema(storageServiceMethods.ByName("CreateUserKey")),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteUserKeyHandler := connect.NewUnaryHandlerSimple(
		StorageServiceDeleteUserKeyProcedure,
		svc.DeleteUserKey,
		connect.WithSchema(storageServiceMethods.ByName("DeleteUserKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceListMONsProcedure:
			storageServiceListMONsHandler.ServeHTTP(w, r)
		case StorageServiceListOSDsProcedure:
			storageServiceListOSDsHandler.ServeHTTP(w, r)
		case StorageServiceDoSMARTProcedure:
			storageServiceDoSMARTHandler.ServeHTTP(w, r)
		case StorageServiceListPoolsProcedure:
			storageServiceListPoolsHandler.ServeHTTP(w, r)
		case StorageServiceCreatePoolProcedure:
			storageServiceCreatePoolHandler.ServeHTTP(w, r)
		case StorageServiceUpdatePoolProcedure:
			storageServiceUpdatePoolHandler.ServeHTTP(w, r)
		case StorageServiceDeletePoolProcedure:
			storageServiceDeletePoolHandler.ServeHTTP(w, r)
		case StorageServiceListImagesProcedure:
			storageServiceListImagesHandler.ServeHTTP(w, r)
		case StorageServiceCreateImageProcedure:
			storageServiceCreateImageHandler.ServeHTTP(w, r)
		case StorageServiceUpdateImageProcedure:
			storageServiceUpdateImageHandler.ServeHTTP(w, r)
		case StorageServiceDeleteImageProcedure:
			storageServiceDeleteImageHandler.ServeHTTP(w, r)
		case StorageServiceCreateImageSnapshotProcedure:
			storageServiceCreateImageSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceDeleteImageSnapshotProcedure:
			storageServiceDeleteImageSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceRollbackImageSnapshotProcedure:
			storageServiceRollbackImageSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceProtectImageSnapshotProcedure:
			storageServiceProtectImageSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceUnprotectImageSnapshotProcedure:
			storageServiceUnprotectImageSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceListVolumesProcedure:
			storageServiceListVolumesHandler.ServeHTTP(w, r)
		case StorageServiceListSubvolumesProcedure:
			storageServiceListSubvolumesHandler.ServeHTTP(w, r)
		case StorageServiceCreateSubvolumeProcedure:
			storageServiceCreateSubvolumeHandler.ServeHTTP(w, r)
		case StorageServiceUpdateSubvolumeProcedure:
			storageServiceUpdateSubvolumeHandler.ServeHTTP(w, r)
		case StorageServiceDeleteSubvolumeProcedure:
			storageServiceDeleteSubvolumeHandler.ServeHTTP(w, r)
		case StorageServiceGrantSubvolumeExportAccessProcedure:
			storageServiceGrantSubvolumeExportAccessHandler.ServeHTTP(w, r)
		case StorageServiceRevokeSubvolumeExportAccessProcedure:
			storageServiceRevokeSubvolumeExportAccessHandler.ServeHTTP(w, r)
		case StorageServiceCreateSubvolumeSnapshotProcedure:
			storageServiceCreateSubvolumeSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceDeleteSubvolumeSnapshotProcedure:
			storageServiceDeleteSubvolumeSnapshotHandler.ServeHTTP(w, r)
		case StorageServiceListSubvolumeGroupsProcedure:
			storageServiceListSubvolumeGroupsHandler.ServeHTTP(w, r)
		case StorageServiceCreateSubvolumeGroupProcedure:
			storageServiceCreateSubvolumeGroupHandler.ServeHTTP(w, r)
		case StorageServiceUpdateSubvolumeGroupProcedure:
			storageServiceUpdateSubvolumeGroupHandler.ServeHTTP(w, r)
		case StorageServiceDeleteSubvolumeGroupProcedure:
			storageServiceDeleteSubvolumeGroupHandler.ServeHTTP(w, r)
		case StorageServiceListBucketsProcedure:
			storageServiceListBucketsHandler.ServeHTTP(w, r)
		case StorageServiceCreateBucketProcedure:
			storageServiceCreateBucketHandler.ServeHTTP(w, r)
		case StorageServiceUpdateBucketProcedure:
			storageServiceUpdateBucketHandler.ServeHTTP(w, r)
		case StorageServiceDeleteBucketProcedure:
			storageServiceDeleteBucketHandler.ServeHTTP(w, r)
		case StorageServiceListUsersProcedure:
			storageServiceListUsersHandler.ServeHTTP(w, r)
		case StorageServiceCreateUserProcedure:
			storageServiceCreateUserHandler.ServeHTTP(w, r)
		case StorageServiceUpdateUserProcedure:
			storageServiceUpdateUserHandler.ServeHTTP(w, r)
		case StorageServiceDeleteUserProcedure:
			storageServiceDeleteUserHandler.ServeHTTP(w, r)
		case StorageServiceCreateUserKeyProcedure:
			storageServiceCreateUserKeyHandler.ServeHTTP(w, r)
		case StorageServiceDeleteUserKeyProcedure:
			storageServiceDeleteUserKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) ListMONs(context.Context, *v1.ListMONsRequest) (*v1.ListMONsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListMONs is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListOSDs(context.Context, *v1.ListOSDsRequest) (*v1.ListOSDsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListOSDs is not implemented"))
}

func (UnimplementedStorageServiceHandler) DoSMART(context.Context, *v1.DoSMARTRequest) (*v1.DoSMARTResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DoSMART is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListPools(context.Context, *v1.ListPoolsRequest) (*v1.ListPoolsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListPools is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreatePool(context.Context, *v1.CreatePoolRequest) (*v1.Pool, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreatePool is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdatePool(context.Context, *v1.UpdatePoolRequest) (*v1.Pool, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdatePool is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeletePool(context.Context, *v1.DeletePoolRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeletePool is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListImages(context.Context, *v1.ListImagesRequest) (*v1.ListImagesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListImages is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateImage(context.Context, *v1.CreateImageRequest) (*v1.Image, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateImage is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateImage(context.Context, *v1.UpdateImageRequest) (*v1.Image, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdateImage is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteImage(context.Context, *v1.DeleteImageRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteImage is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateImageSnapshot(context.Context, *v1.CreateImageSnapshotRequest) (*v1.Image_Snapshot, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateImageSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteImageSnapshot(context.Context, *v1.DeleteImageSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteImageSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) RollbackImageSnapshot(context.Context, *v1.RollbackImageSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.RollbackImageSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) ProtectImageSnapshot(context.Context, *v1.ProtectImageSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ProtectImageSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) UnprotectImageSnapshot(context.Context, *v1.UnprotectImageSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UnprotectImageSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListVolumes(context.Context, *v1.ListVolumesRequest) (*v1.ListVolumesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListVolumes is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListSubvolumes(context.Context, *v1.ListSubvolumesRequest) (*v1.ListSubvolumesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListSubvolumes is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateSubvolume(context.Context, *v1.CreateSubvolumeRequest) (*v1.Subvolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateSubvolume is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateSubvolume(context.Context, *v1.UpdateSubvolumeRequest) (*v1.Subvolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdateSubvolume is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteSubvolume(context.Context, *v1.DeleteSubvolumeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteSubvolume is not implemented"))
}

func (UnimplementedStorageServiceHandler) GrantSubvolumeExportAccess(context.Context, *v1.GrantSubvolumeExportAccessRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.GrantSubvolumeExportAccess is not implemented"))
}

func (UnimplementedStorageServiceHandler) RevokeSubvolumeExportAccess(context.Context, *v1.RevokeSubvolumeExportAccessRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.RevokeSubvolumeExportAccess is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateSubvolumeSnapshot(context.Context, *v1.CreateSubvolumeSnapshotRequest) (*v1.Subvolume_Snapshot, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateSubvolumeSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteSubvolumeSnapshot(context.Context, *v1.DeleteSubvolumeSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteSubvolumeSnapshot is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListSubvolumeGroups(context.Context, *v1.ListSubvolumeGroupsRequest) (*v1.ListSubvolumeGroupsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListSubvolumeGroups is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateSubvolumeGroup(context.Context, *v1.CreateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateSubvolumeGroup is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateSubvolumeGroup(context.Context, *v1.UpdateSubvolumeGroupRequest) (*v1.SubvolumeGroup, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdateSubvolumeGroup is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteSubvolumeGroup(context.Context, *v1.DeleteSubvolumeGroupRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteSubvolumeGroup is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListBuckets(context.Context, *v1.ListBucketsRequest) (*v1.ListBucketsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListBuckets is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateBucket(context.Context, *v1.CreateBucketRequest) (*v1.Bucket, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateBucket is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateBucket(context.Context, *v1.UpdateBucketRequest) (*v1.Bucket, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdateBucket is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteBucket(context.Context, *v1.DeleteBucketRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteBucket is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListUsers(context.Context, *v1.ListUsersRequest) (*v1.ListUsersResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.ListUsers is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateUser(context.Context, *v1.CreateUserRequest) (*v1.User, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateUser is not implemented"))
}

func (UnimplementedStorageServiceHandler) UpdateUser(context.Context, *v1.UpdateUserRequest) (*v1.User, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.UpdateUser is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteUser(context.Context, *v1.DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteUser is not implemented"))
}

func (UnimplementedStorageServiceHandler) CreateUserKey(context.Context, *v1.CreateUserKeyRequest) (*v1.User_Key, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.CreateUserKey is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteUserKey(context.Context, *v1.DeleteUserKeyRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.storage.v1.StorageService.DeleteUserKey is not implemented"))
}
