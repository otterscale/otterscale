// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/scope/v1/scope.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/scope/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScopeServiceName is the fully-qualified name of the ScopeService service.
	ScopeServiceName = "otterscale.scope.v1.ScopeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScopeServiceListScopesProcedure is the fully-qualified name of the ScopeService's ListScopes RPC.
	ScopeServiceListScopesProcedure = "/otterscale.scope.v1.ScopeService/ListScopes"
	// ScopeServiceCreateScopeProcedure is the fully-qualified name of the ScopeService's CreateScope
	// RPC.
	ScopeServiceCreateScopeProcedure = "/otterscale.scope.v1.ScopeService/CreateScope"
)

// ScopeServiceClient is a client for the otterscale.scope.v1.ScopeService service.
type ScopeServiceClient interface {
	ListScopes(context.Context, *v1.ListScopesRequest) (*v1.ListScopesResponse, error)
	CreateScope(context.Context, *v1.CreateScopeRequest) (*v1.Scope, error)
}

// NewScopeServiceClient constructs a client for the otterscale.scope.v1.ScopeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScopeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScopeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scopeServiceMethods := v1.File_api_scope_v1_scope_proto.Services().ByName("ScopeService").Methods()
	return &scopeServiceClient{
		listScopes: connect.NewClient[v1.ListScopesRequest, v1.ListScopesResponse](
			httpClient,
			baseURL+ScopeServiceListScopesProcedure,
			connect.WithSchema(scopeServiceMethods.ByName("ListScopes")),
			connect.WithClientOptions(opts...),
		),
		createScope: connect.NewClient[v1.CreateScopeRequest, v1.Scope](
			httpClient,
			baseURL+ScopeServiceCreateScopeProcedure,
			connect.WithSchema(scopeServiceMethods.ByName("CreateScope")),
			connect.WithClientOptions(opts...),
		),
	}
}

// scopeServiceClient implements ScopeServiceClient.
type scopeServiceClient struct {
	listScopes  *connect.Client[v1.ListScopesRequest, v1.ListScopesResponse]
	createScope *connect.Client[v1.CreateScopeRequest, v1.Scope]
}

// ListScopes calls otterscale.scope.v1.ScopeService.ListScopes.
func (c *scopeServiceClient) ListScopes(ctx context.Context, req *v1.ListScopesRequest) (*v1.ListScopesResponse, error) {
	response, err := c.listScopes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateScope calls otterscale.scope.v1.ScopeService.CreateScope.
func (c *scopeServiceClient) CreateScope(ctx context.Context, req *v1.CreateScopeRequest) (*v1.Scope, error) {
	response, err := c.createScope.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ScopeServiceHandler is an implementation of the otterscale.scope.v1.ScopeService service.
type ScopeServiceHandler interface {
	ListScopes(context.Context, *v1.ListScopesRequest) (*v1.ListScopesResponse, error)
	CreateScope(context.Context, *v1.CreateScopeRequest) (*v1.Scope, error)
}

// NewScopeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScopeServiceHandler(svc ScopeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scopeServiceMethods := v1.File_api_scope_v1_scope_proto.Services().ByName("ScopeService").Methods()
	scopeServiceListScopesHandler := connect.NewUnaryHandlerSimple(
		ScopeServiceListScopesProcedure,
		svc.ListScopes,
		connect.WithSchema(scopeServiceMethods.ByName("ListScopes")),
		connect.WithHandlerOptions(opts...),
	)
	scopeServiceCreateScopeHandler := connect.NewUnaryHandlerSimple(
		ScopeServiceCreateScopeProcedure,
		svc.CreateScope,
		connect.WithSchema(scopeServiceMethods.ByName("CreateScope")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.scope.v1.ScopeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScopeServiceListScopesProcedure:
			scopeServiceListScopesHandler.ServeHTTP(w, r)
		case ScopeServiceCreateScopeProcedure:
			scopeServiceCreateScopeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScopeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScopeServiceHandler struct{}

func (UnimplementedScopeServiceHandler) ListScopes(context.Context, *v1.ListScopesRequest) (*v1.ListScopesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.scope.v1.ScopeService.ListScopes is not implemented"))
}

func (UnimplementedScopeServiceHandler) CreateScope(context.Context, *v1.CreateScopeRequest) (*v1.Scope, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.scope.v1.ScopeService.CreateScope is not implemented"))
}
