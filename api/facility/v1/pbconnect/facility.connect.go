// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/facility/v1/facility.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/facility/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FacilityServiceName is the fully-qualified name of the FacilityService service.
	FacilityServiceName = "otterscale.facility.v1.FacilityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FacilityServiceListFacilitiesProcedure is the fully-qualified name of the FacilityService's
	// ListFacilities RPC.
	FacilityServiceListFacilitiesProcedure = "/otterscale.facility.v1.FacilityService/ListFacilities"
	// FacilityServiceGetFacilityProcedure is the fully-qualified name of the FacilityService's
	// GetFacility RPC.
	FacilityServiceGetFacilityProcedure = "/otterscale.facility.v1.FacilityService/GetFacility"
	// FacilityServiceCreateFacilityProcedure is the fully-qualified name of the FacilityService's
	// CreateFacility RPC.
	FacilityServiceCreateFacilityProcedure = "/otterscale.facility.v1.FacilityService/CreateFacility"
	// FacilityServiceUpdateFacilityProcedure is the fully-qualified name of the FacilityService's
	// UpdateFacility RPC.
	FacilityServiceUpdateFacilityProcedure = "/otterscale.facility.v1.FacilityService/UpdateFacility"
	// FacilityServiceDeleteFacilityProcedure is the fully-qualified name of the FacilityService's
	// DeleteFacility RPC.
	FacilityServiceDeleteFacilityProcedure = "/otterscale.facility.v1.FacilityService/DeleteFacility"
	// FacilityServiceExposeFacilityProcedure is the fully-qualified name of the FacilityService's
	// ExposeFacility RPC.
	FacilityServiceExposeFacilityProcedure = "/otterscale.facility.v1.FacilityService/ExposeFacility"
	// FacilityServiceAddFacilityUnitsProcedure is the fully-qualified name of the FacilityService's
	// AddFacilityUnits RPC.
	FacilityServiceAddFacilityUnitsProcedure = "/otterscale.facility.v1.FacilityService/AddFacilityUnits"
	// FacilityServiceListActionsProcedure is the fully-qualified name of the FacilityService's
	// ListActions RPC.
	FacilityServiceListActionsProcedure = "/otterscale.facility.v1.FacilityService/ListActions"
	// FacilityServiceDoActionProcedure is the fully-qualified name of the FacilityService's DoAction
	// RPC.
	FacilityServiceDoActionProcedure = "/otterscale.facility.v1.FacilityService/DoAction"
	// FacilityServiceListCharmsProcedure is the fully-qualified name of the FacilityService's
	// ListCharms RPC.
	FacilityServiceListCharmsProcedure = "/otterscale.facility.v1.FacilityService/ListCharms"
	// FacilityServiceGetCharmProcedure is the fully-qualified name of the FacilityService's GetCharm
	// RPC.
	FacilityServiceGetCharmProcedure = "/otterscale.facility.v1.FacilityService/GetCharm"
	// FacilityServiceGetCharmMetadataProcedure is the fully-qualified name of the FacilityService's
	// GetCharmMetadata RPC.
	FacilityServiceGetCharmMetadataProcedure = "/otterscale.facility.v1.FacilityService/GetCharmMetadata"
	// FacilityServiceListCharmArtifactsProcedure is the fully-qualified name of the FacilityService's
	// ListCharmArtifacts RPC.
	FacilityServiceListCharmArtifactsProcedure = "/otterscale.facility.v1.FacilityService/ListCharmArtifacts"
)

// FacilityServiceClient is a client for the otterscale.facility.v1.FacilityService service.
type FacilityServiceClient interface {
	ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error)
	CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error)
	UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error)
	DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error)
	ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error)
	DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error)
	GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error)
	GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error)
	ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error)
}

// NewFacilityServiceClient constructs a client for the otterscale.facility.v1.FacilityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFacilityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FacilityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	facilityServiceMethods := v1.File_api_facility_v1_facility_proto.Services().ByName("FacilityService").Methods()
	return &facilityServiceClient{
		listFacilities: connect.NewClient[v1.ListFacilitiesRequest, v1.ListFacilitiesResponse](
			httpClient,
			baseURL+FacilityServiceListFacilitiesProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("ListFacilities")),
			connect.WithClientOptions(opts...),
		),
		getFacility: connect.NewClient[v1.GetFacilityRequest, v1.Facility](
			httpClient,
			baseURL+FacilityServiceGetFacilityProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("GetFacility")),
			connect.WithClientOptions(opts...),
		),
		createFacility: connect.NewClient[v1.CreateFacilityRequest, v1.Facility](
			httpClient,
			baseURL+FacilityServiceCreateFacilityProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("CreateFacility")),
			connect.WithClientOptions(opts...),
		),
		updateFacility: connect.NewClient[v1.UpdateFacilityRequest, v1.Facility](
			httpClient,
			baseURL+FacilityServiceUpdateFacilityProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("UpdateFacility")),
			connect.WithClientOptions(opts...),
		),
		deleteFacility: connect.NewClient[v1.DeleteFacilityRequest, emptypb.Empty](
			httpClient,
			baseURL+FacilityServiceDeleteFacilityProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("DeleteFacility")),
			connect.WithClientOptions(opts...),
		),
		exposeFacility: connect.NewClient[v1.ExposeFacilityRequest, emptypb.Empty](
			httpClient,
			baseURL+FacilityServiceExposeFacilityProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("ExposeFacility")),
			connect.WithClientOptions(opts...),
		),
		addFacilityUnits: connect.NewClient[v1.AddFacilityUnitsRequest, v1.AddFacilityUnitsResponse](
			httpClient,
			baseURL+FacilityServiceAddFacilityUnitsProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("AddFacilityUnits")),
			connect.WithClientOptions(opts...),
		),
		listActions: connect.NewClient[v1.ListActionsRequest, v1.ListActionsResponse](
			httpClient,
			baseURL+FacilityServiceListActionsProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("ListActions")),
			connect.WithClientOptions(opts...),
		),
		doAction: connect.NewClient[v1.DoActionRequest, emptypb.Empty](
			httpClient,
			baseURL+FacilityServiceDoActionProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("DoAction")),
			connect.WithClientOptions(opts...),
		),
		listCharms: connect.NewClient[v1.ListCharmsRequest, v1.ListCharmsResponse](
			httpClient,
			baseURL+FacilityServiceListCharmsProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("ListCharms")),
			connect.WithClientOptions(opts...),
		),
		getCharm: connect.NewClient[v1.GetCharmRequest, v1.Facility_Charm](
			httpClient,
			baseURL+FacilityServiceGetCharmProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("GetCharm")),
			connect.WithClientOptions(opts...),
		),
		getCharmMetadata: connect.NewClient[v1.GetCharmMetadataRequest, v1.Facility_Charm_Metadata](
			httpClient,
			baseURL+FacilityServiceGetCharmMetadataProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("GetCharmMetadata")),
			connect.WithClientOptions(opts...),
		),
		listCharmArtifacts: connect.NewClient[v1.ListCharmArtifactsRequest, v1.ListCharmArtifactsResponse](
			httpClient,
			baseURL+FacilityServiceListCharmArtifactsProcedure,
			connect.WithSchema(facilityServiceMethods.ByName("ListCharmArtifacts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// facilityServiceClient implements FacilityServiceClient.
type facilityServiceClient struct {
	listFacilities     *connect.Client[v1.ListFacilitiesRequest, v1.ListFacilitiesResponse]
	getFacility        *connect.Client[v1.GetFacilityRequest, v1.Facility]
	createFacility     *connect.Client[v1.CreateFacilityRequest, v1.Facility]
	updateFacility     *connect.Client[v1.UpdateFacilityRequest, v1.Facility]
	deleteFacility     *connect.Client[v1.DeleteFacilityRequest, emptypb.Empty]
	exposeFacility     *connect.Client[v1.ExposeFacilityRequest, emptypb.Empty]
	addFacilityUnits   *connect.Client[v1.AddFacilityUnitsRequest, v1.AddFacilityUnitsResponse]
	listActions        *connect.Client[v1.ListActionsRequest, v1.ListActionsResponse]
	doAction           *connect.Client[v1.DoActionRequest, emptypb.Empty]
	listCharms         *connect.Client[v1.ListCharmsRequest, v1.ListCharmsResponse]
	getCharm           *connect.Client[v1.GetCharmRequest, v1.Facility_Charm]
	getCharmMetadata   *connect.Client[v1.GetCharmMetadataRequest, v1.Facility_Charm_Metadata]
	listCharmArtifacts *connect.Client[v1.ListCharmArtifactsRequest, v1.ListCharmArtifactsResponse]
}

// ListFacilities calls otterscale.facility.v1.FacilityService.ListFacilities.
func (c *facilityServiceClient) ListFacilities(ctx context.Context, req *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error) {
	return c.listFacilities.CallUnary(ctx, req)
}

// GetFacility calls otterscale.facility.v1.FacilityService.GetFacility.
func (c *facilityServiceClient) GetFacility(ctx context.Context, req *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.getFacility.CallUnary(ctx, req)
}

// CreateFacility calls otterscale.facility.v1.FacilityService.CreateFacility.
func (c *facilityServiceClient) CreateFacility(ctx context.Context, req *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.createFacility.CallUnary(ctx, req)
}

// UpdateFacility calls otterscale.facility.v1.FacilityService.UpdateFacility.
func (c *facilityServiceClient) UpdateFacility(ctx context.Context, req *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return c.updateFacility.CallUnary(ctx, req)
}

// DeleteFacility calls otterscale.facility.v1.FacilityService.DeleteFacility.
func (c *facilityServiceClient) DeleteFacility(ctx context.Context, req *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFacility.CallUnary(ctx, req)
}

// ExposeFacility calls otterscale.facility.v1.FacilityService.ExposeFacility.
func (c *facilityServiceClient) ExposeFacility(ctx context.Context, req *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.exposeFacility.CallUnary(ctx, req)
}

// AddFacilityUnits calls otterscale.facility.v1.FacilityService.AddFacilityUnits.
func (c *facilityServiceClient) AddFacilityUnits(ctx context.Context, req *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error) {
	return c.addFacilityUnits.CallUnary(ctx, req)
}

// ListActions calls otterscale.facility.v1.FacilityService.ListActions.
func (c *facilityServiceClient) ListActions(ctx context.Context, req *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// DoAction calls otterscale.facility.v1.FacilityService.DoAction.
func (c *facilityServiceClient) DoAction(ctx context.Context, req *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.doAction.CallUnary(ctx, req)
}

// ListCharms calls otterscale.facility.v1.FacilityService.ListCharms.
func (c *facilityServiceClient) ListCharms(ctx context.Context, req *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error) {
	return c.listCharms.CallUnary(ctx, req)
}

// GetCharm calls otterscale.facility.v1.FacilityService.GetCharm.
func (c *facilityServiceClient) GetCharm(ctx context.Context, req *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error) {
	return c.getCharm.CallUnary(ctx, req)
}

// GetCharmMetadata calls otterscale.facility.v1.FacilityService.GetCharmMetadata.
func (c *facilityServiceClient) GetCharmMetadata(ctx context.Context, req *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error) {
	return c.getCharmMetadata.CallUnary(ctx, req)
}

// ListCharmArtifacts calls otterscale.facility.v1.FacilityService.ListCharmArtifacts.
func (c *facilityServiceClient) ListCharmArtifacts(ctx context.Context, req *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error) {
	return c.listCharmArtifacts.CallUnary(ctx, req)
}

// FacilityServiceHandler is an implementation of the otterscale.facility.v1.FacilityService
// service.
type FacilityServiceHandler interface {
	ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error)
	GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error)
	CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error)
	UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error)
	DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error)
	AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error)
	ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error)
	DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error)
	ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error)
	GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error)
	GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error)
	ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error)
}

// NewFacilityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFacilityServiceHandler(svc FacilityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	facilityServiceMethods := v1.File_api_facility_v1_facility_proto.Services().ByName("FacilityService").Methods()
	facilityServiceListFacilitiesHandler := connect.NewUnaryHandler(
		FacilityServiceListFacilitiesProcedure,
		svc.ListFacilities,
		connect.WithSchema(facilityServiceMethods.ByName("ListFacilities")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceGetFacilityHandler := connect.NewUnaryHandler(
		FacilityServiceGetFacilityProcedure,
		svc.GetFacility,
		connect.WithSchema(facilityServiceMethods.ByName("GetFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceCreateFacilityHandler := connect.NewUnaryHandler(
		FacilityServiceCreateFacilityProcedure,
		svc.CreateFacility,
		connect.WithSchema(facilityServiceMethods.ByName("CreateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceUpdateFacilityHandler := connect.NewUnaryHandler(
		FacilityServiceUpdateFacilityProcedure,
		svc.UpdateFacility,
		connect.WithSchema(facilityServiceMethods.ByName("UpdateFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceDeleteFacilityHandler := connect.NewUnaryHandler(
		FacilityServiceDeleteFacilityProcedure,
		svc.DeleteFacility,
		connect.WithSchema(facilityServiceMethods.ByName("DeleteFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceExposeFacilityHandler := connect.NewUnaryHandler(
		FacilityServiceExposeFacilityProcedure,
		svc.ExposeFacility,
		connect.WithSchema(facilityServiceMethods.ByName("ExposeFacility")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceAddFacilityUnitsHandler := connect.NewUnaryHandler(
		FacilityServiceAddFacilityUnitsProcedure,
		svc.AddFacilityUnits,
		connect.WithSchema(facilityServiceMethods.ByName("AddFacilityUnits")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceListActionsHandler := connect.NewUnaryHandler(
		FacilityServiceListActionsProcedure,
		svc.ListActions,
		connect.WithSchema(facilityServiceMethods.ByName("ListActions")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceDoActionHandler := connect.NewUnaryHandler(
		FacilityServiceDoActionProcedure,
		svc.DoAction,
		connect.WithSchema(facilityServiceMethods.ByName("DoAction")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceListCharmsHandler := connect.NewUnaryHandler(
		FacilityServiceListCharmsProcedure,
		svc.ListCharms,
		connect.WithSchema(facilityServiceMethods.ByName("ListCharms")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceGetCharmHandler := connect.NewUnaryHandler(
		FacilityServiceGetCharmProcedure,
		svc.GetCharm,
		connect.WithSchema(facilityServiceMethods.ByName("GetCharm")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceGetCharmMetadataHandler := connect.NewUnaryHandler(
		FacilityServiceGetCharmMetadataProcedure,
		svc.GetCharmMetadata,
		connect.WithSchema(facilityServiceMethods.ByName("GetCharmMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	facilityServiceListCharmArtifactsHandler := connect.NewUnaryHandler(
		FacilityServiceListCharmArtifactsProcedure,
		svc.ListCharmArtifacts,
		connect.WithSchema(facilityServiceMethods.ByName("ListCharmArtifacts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.facility.v1.FacilityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FacilityServiceListFacilitiesProcedure:
			facilityServiceListFacilitiesHandler.ServeHTTP(w, r)
		case FacilityServiceGetFacilityProcedure:
			facilityServiceGetFacilityHandler.ServeHTTP(w, r)
		case FacilityServiceCreateFacilityProcedure:
			facilityServiceCreateFacilityHandler.ServeHTTP(w, r)
		case FacilityServiceUpdateFacilityProcedure:
			facilityServiceUpdateFacilityHandler.ServeHTTP(w, r)
		case FacilityServiceDeleteFacilityProcedure:
			facilityServiceDeleteFacilityHandler.ServeHTTP(w, r)
		case FacilityServiceExposeFacilityProcedure:
			facilityServiceExposeFacilityHandler.ServeHTTP(w, r)
		case FacilityServiceAddFacilityUnitsProcedure:
			facilityServiceAddFacilityUnitsHandler.ServeHTTP(w, r)
		case FacilityServiceListActionsProcedure:
			facilityServiceListActionsHandler.ServeHTTP(w, r)
		case FacilityServiceDoActionProcedure:
			facilityServiceDoActionHandler.ServeHTTP(w, r)
		case FacilityServiceListCharmsProcedure:
			facilityServiceListCharmsHandler.ServeHTTP(w, r)
		case FacilityServiceGetCharmProcedure:
			facilityServiceGetCharmHandler.ServeHTTP(w, r)
		case FacilityServiceGetCharmMetadataProcedure:
			facilityServiceGetCharmMetadataHandler.ServeHTTP(w, r)
		case FacilityServiceListCharmArtifactsProcedure:
			facilityServiceListCharmArtifactsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFacilityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFacilityServiceHandler struct{}

func (UnimplementedFacilityServiceHandler) ListFacilities(context.Context, *connect.Request[v1.ListFacilitiesRequest]) (*connect.Response[v1.ListFacilitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.ListFacilities is not implemented"))
}

func (UnimplementedFacilityServiceHandler) GetFacility(context.Context, *connect.Request[v1.GetFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.GetFacility is not implemented"))
}

func (UnimplementedFacilityServiceHandler) CreateFacility(context.Context, *connect.Request[v1.CreateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.CreateFacility is not implemented"))
}

func (UnimplementedFacilityServiceHandler) UpdateFacility(context.Context, *connect.Request[v1.UpdateFacilityRequest]) (*connect.Response[v1.Facility], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.UpdateFacility is not implemented"))
}

func (UnimplementedFacilityServiceHandler) DeleteFacility(context.Context, *connect.Request[v1.DeleteFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.DeleteFacility is not implemented"))
}

func (UnimplementedFacilityServiceHandler) ExposeFacility(context.Context, *connect.Request[v1.ExposeFacilityRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.ExposeFacility is not implemented"))
}

func (UnimplementedFacilityServiceHandler) AddFacilityUnits(context.Context, *connect.Request[v1.AddFacilityUnitsRequest]) (*connect.Response[v1.AddFacilityUnitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.AddFacilityUnits is not implemented"))
}

func (UnimplementedFacilityServiceHandler) ListActions(context.Context, *connect.Request[v1.ListActionsRequest]) (*connect.Response[v1.ListActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.ListActions is not implemented"))
}

func (UnimplementedFacilityServiceHandler) DoAction(context.Context, *connect.Request[v1.DoActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.DoAction is not implemented"))
}

func (UnimplementedFacilityServiceHandler) ListCharms(context.Context, *connect.Request[v1.ListCharmsRequest]) (*connect.Response[v1.ListCharmsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.ListCharms is not implemented"))
}

func (UnimplementedFacilityServiceHandler) GetCharm(context.Context, *connect.Request[v1.GetCharmRequest]) (*connect.Response[v1.Facility_Charm], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.GetCharm is not implemented"))
}

func (UnimplementedFacilityServiceHandler) GetCharmMetadata(context.Context, *connect.Request[v1.GetCharmMetadataRequest]) (*connect.Response[v1.Facility_Charm_Metadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.GetCharmMetadata is not implemented"))
}

func (UnimplementedFacilityServiceHandler) ListCharmArtifacts(context.Context, *connect.Request[v1.ListCharmArtifactsRequest]) (*connect.Response[v1.ListCharmArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.facility.v1.FacilityService.ListCharmArtifacts is not implemented"))
}
