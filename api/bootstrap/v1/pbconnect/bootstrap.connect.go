// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/bootstrap/v1/bootstrap.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/bootstrap/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BootstrapServiceName is the fully-qualified name of the BootstrapService service.
	BootstrapServiceName = "otterscale.bootstrap.v1.BootstrapService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BootstrapServiceWatchStatusProcedure is the fully-qualified name of the BootstrapService's
	// WatchStatus RPC.
	BootstrapServiceWatchStatusProcedure = "/otterscale.bootstrap.v1.BootstrapService/WatchStatus"
	// BootstrapServiceUpdateStatusProcedure is the fully-qualified name of the BootstrapService's
	// UpdateStatus RPC.
	BootstrapServiceUpdateStatusProcedure = "/otterscale.bootstrap.v1.BootstrapService/UpdateStatus"
)

// BootstrapServiceClient is a client for the otterscale.bootstrap.v1.BootstrapService service.
type BootstrapServiceClient interface {
	WatchStatus(context.Context, *v1.WatchStatusRequest) (*connect.ServerStreamForClient[v1.WatchStatusResponse], error)
	UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error)
}

// NewBootstrapServiceClient constructs a client for the otterscale.bootstrap.v1.BootstrapService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBootstrapServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BootstrapServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bootstrapServiceMethods := v1.File_api_bootstrap_v1_bootstrap_proto.Services().ByName("BootstrapService").Methods()
	return &bootstrapServiceClient{
		watchStatus: connect.NewClient[v1.WatchStatusRequest, v1.WatchStatusResponse](
			httpClient,
			baseURL+BootstrapServiceWatchStatusProcedure,
			connect.WithSchema(bootstrapServiceMethods.ByName("WatchStatus")),
			connect.WithClientOptions(opts...),
		),
		updateStatus: connect.NewClient[v1.UpdateStatusRequest, emptypb.Empty](
			httpClient,
			baseURL+BootstrapServiceUpdateStatusProcedure,
			connect.WithSchema(bootstrapServiceMethods.ByName("UpdateStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bootstrapServiceClient implements BootstrapServiceClient.
type bootstrapServiceClient struct {
	watchStatus  *connect.Client[v1.WatchStatusRequest, v1.WatchStatusResponse]
	updateStatus *connect.Client[v1.UpdateStatusRequest, emptypb.Empty]
}

// WatchStatus calls otterscale.bootstrap.v1.BootstrapService.WatchStatus.
func (c *bootstrapServiceClient) WatchStatus(ctx context.Context, req *v1.WatchStatusRequest) (*connect.ServerStreamForClient[v1.WatchStatusResponse], error) {
	return c.watchStatus.CallServerStream(ctx, connect.NewRequest(req))
}

// UpdateStatus calls otterscale.bootstrap.v1.BootstrapService.UpdateStatus.
func (c *bootstrapServiceClient) UpdateStatus(ctx context.Context, req *v1.UpdateStatusRequest) (*emptypb.Empty, error) {
	response, err := c.updateStatus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// BootstrapServiceHandler is an implementation of the otterscale.bootstrap.v1.BootstrapService
// service.
type BootstrapServiceHandler interface {
	WatchStatus(context.Context, *v1.WatchStatusRequest, *connect.ServerStream[v1.WatchStatusResponse]) error
	UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error)
}

// NewBootstrapServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBootstrapServiceHandler(svc BootstrapServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bootstrapServiceMethods := v1.File_api_bootstrap_v1_bootstrap_proto.Services().ByName("BootstrapService").Methods()
	bootstrapServiceWatchStatusHandler := connect.NewServerStreamHandlerSimple(
		BootstrapServiceWatchStatusProcedure,
		svc.WatchStatus,
		connect.WithSchema(bootstrapServiceMethods.ByName("WatchStatus")),
		connect.WithHandlerOptions(opts...),
	)
	bootstrapServiceUpdateStatusHandler := connect.NewUnaryHandlerSimple(
		BootstrapServiceUpdateStatusProcedure,
		svc.UpdateStatus,
		connect.WithSchema(bootstrapServiceMethods.ByName("UpdateStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.bootstrap.v1.BootstrapService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BootstrapServiceWatchStatusProcedure:
			bootstrapServiceWatchStatusHandler.ServeHTTP(w, r)
		case BootstrapServiceUpdateStatusProcedure:
			bootstrapServiceUpdateStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBootstrapServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBootstrapServiceHandler struct{}

func (UnimplementedBootstrapServiceHandler) WatchStatus(context.Context, *v1.WatchStatusRequest, *connect.ServerStream[v1.WatchStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bootstrap.v1.BootstrapService.WatchStatus is not implemented"))
}

func (UnimplementedBootstrapServiceHandler) UpdateStatus(context.Context, *v1.UpdateStatusRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.bootstrap.v1.BootstrapService.UpdateStatus is not implemented"))
}
