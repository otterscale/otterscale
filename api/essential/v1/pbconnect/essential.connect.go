// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/essential/v1/essential.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/essential/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EssentialServiceName is the fully-qualified name of the EssentialService service.
	EssentialServiceName = "otterscale.essential.v1.EssentialService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EssentialServiceIsMachineDeployedProcedure is the fully-qualified name of the EssentialService's
	// IsMachineDeployed RPC.
	EssentialServiceIsMachineDeployedProcedure = "/otterscale.essential.v1.EssentialService/IsMachineDeployed"
	// EssentialServiceListStatusesProcedure is the fully-qualified name of the EssentialService's
	// ListStatuses RPC.
	EssentialServiceListStatusesProcedure = "/otterscale.essential.v1.EssentialService/ListStatuses"
	// EssentialServiceListEssentialsProcedure is the fully-qualified name of the EssentialService's
	// ListEssentials RPC.
	EssentialServiceListEssentialsProcedure = "/otterscale.essential.v1.EssentialService/ListEssentials"
	// EssentialServiceCreateSingleNodeProcedure is the fully-qualified name of the EssentialService's
	// CreateSingleNode RPC.
	EssentialServiceCreateSingleNodeProcedure = "/otterscale.essential.v1.EssentialService/CreateSingleNode"
	// EssentialServiceCreateHighAvailabilityClusterProcedure is the fully-qualified name of the
	// EssentialService's CreateHighAvailabilityCluster RPC.
	EssentialServiceCreateHighAvailabilityClusterProcedure = "/otterscale.essential.v1.EssentialService/CreateHighAvailabilityCluster"
	// EssentialServiceAddUnitsProcedure is the fully-qualified name of the EssentialService's AddUnits
	// RPC.
	EssentialServiceAddUnitsProcedure = "/otterscale.essential.v1.EssentialService/AddUnits"
	// EssentialServiceListKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// EssentialService's ListKubernetesNodeLabels RPC.
	EssentialServiceListKubernetesNodeLabelsProcedure = "/otterscale.essential.v1.EssentialService/ListKubernetesNodeLabels"
	// EssentialServiceUpdateKubernetesNodeLabelsProcedure is the fully-qualified name of the
	// EssentialService's UpdateKubernetesNodeLabels RPC.
	EssentialServiceUpdateKubernetesNodeLabelsProcedure = "/otterscale.essential.v1.EssentialService/UpdateKubernetesNodeLabels"
)

// EssentialServiceClient is a client for the otterscale.essential.v1.EssentialService service.
type EssentialServiceClient interface {
	IsMachineDeployed(context.Context, *connect.Request[v1.IsMachineDeployedRequest]) (*connect.Response[v1.IsMachineDeployedResponse], error)
	ListStatuses(context.Context, *connect.Request[v1.ListStatusesRequest]) (*connect.Response[v1.ListStatusesResponse], error)
	ListEssentials(context.Context, *connect.Request[v1.ListEssentialsRequest]) (*connect.Response[v1.ListEssentialsResponse], error)
	CreateSingleNode(context.Context, *connect.Request[v1.CreateSingleNodeRequest]) (*connect.Response[emptypb.Empty], error)
	CreateHighAvailabilityCluster(context.Context, *connect.Request[v1.CreateHighAvailabilityClusterRequest]) (*connect.Response[emptypb.Empty], error)
	AddUnits(context.Context, *connect.Request[v1.AddUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	ListKubernetesNodeLabels(context.Context, *connect.Request[v1.ListKubernetesNodeLabelsRequest]) (*connect.Response[v1.ListKubernetesNodeLabelsResponse], error)
	UpdateKubernetesNodeLabels(context.Context, *connect.Request[v1.UpdateKubernetesNodeLabelsRequest]) (*connect.Response[v1.UpdateKubernetesNodeLabelsResponse], error)
}

// NewEssentialServiceClient constructs a client for the otterscale.essential.v1.EssentialService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEssentialServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EssentialServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	essentialServiceMethods := v1.File_api_essential_v1_essential_proto.Services().ByName("EssentialService").Methods()
	return &essentialServiceClient{
		isMachineDeployed: connect.NewClient[v1.IsMachineDeployedRequest, v1.IsMachineDeployedResponse](
			httpClient,
			baseURL+EssentialServiceIsMachineDeployedProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("IsMachineDeployed")),
			connect.WithClientOptions(opts...),
		),
		listStatuses: connect.NewClient[v1.ListStatusesRequest, v1.ListStatusesResponse](
			httpClient,
			baseURL+EssentialServiceListStatusesProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("ListStatuses")),
			connect.WithClientOptions(opts...),
		),
		listEssentials: connect.NewClient[v1.ListEssentialsRequest, v1.ListEssentialsResponse](
			httpClient,
			baseURL+EssentialServiceListEssentialsProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("ListEssentials")),
			connect.WithClientOptions(opts...),
		),
		createSingleNode: connect.NewClient[v1.CreateSingleNodeRequest, emptypb.Empty](
			httpClient,
			baseURL+EssentialServiceCreateSingleNodeProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("CreateSingleNode")),
			connect.WithClientOptions(opts...),
		),
		createHighAvailabilityCluster: connect.NewClient[v1.CreateHighAvailabilityClusterRequest, emptypb.Empty](
			httpClient,
			baseURL+EssentialServiceCreateHighAvailabilityClusterProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("CreateHighAvailabilityCluster")),
			connect.WithClientOptions(opts...),
		),
		addUnits: connect.NewClient[v1.AddUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+EssentialServiceAddUnitsProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("AddUnits")),
			connect.WithClientOptions(opts...),
		),
		listKubernetesNodeLabels: connect.NewClient[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+EssentialServiceListKubernetesNodeLabelsProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("ListKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
		updateKubernetesNodeLabels: connect.NewClient[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse](
			httpClient,
			baseURL+EssentialServiceUpdateKubernetesNodeLabelsProcedure,
			connect.WithSchema(essentialServiceMethods.ByName("UpdateKubernetesNodeLabels")),
			connect.WithClientOptions(opts...),
		),
	}
}

// essentialServiceClient implements EssentialServiceClient.
type essentialServiceClient struct {
	isMachineDeployed             *connect.Client[v1.IsMachineDeployedRequest, v1.IsMachineDeployedResponse]
	listStatuses                  *connect.Client[v1.ListStatusesRequest, v1.ListStatusesResponse]
	listEssentials                *connect.Client[v1.ListEssentialsRequest, v1.ListEssentialsResponse]
	createSingleNode              *connect.Client[v1.CreateSingleNodeRequest, emptypb.Empty]
	createHighAvailabilityCluster *connect.Client[v1.CreateHighAvailabilityClusterRequest, emptypb.Empty]
	addUnits                      *connect.Client[v1.AddUnitsRequest, emptypb.Empty]
	listKubernetesNodeLabels      *connect.Client[v1.ListKubernetesNodeLabelsRequest, v1.ListKubernetesNodeLabelsResponse]
	updateKubernetesNodeLabels    *connect.Client[v1.UpdateKubernetesNodeLabelsRequest, v1.UpdateKubernetesNodeLabelsResponse]
}

// IsMachineDeployed calls otterscale.essential.v1.EssentialService.IsMachineDeployed.
func (c *essentialServiceClient) IsMachineDeployed(ctx context.Context, req *connect.Request[v1.IsMachineDeployedRequest]) (*connect.Response[v1.IsMachineDeployedResponse], error) {
	return c.isMachineDeployed.CallUnary(ctx, req)
}

// ListStatuses calls otterscale.essential.v1.EssentialService.ListStatuses.
func (c *essentialServiceClient) ListStatuses(ctx context.Context, req *connect.Request[v1.ListStatusesRequest]) (*connect.Response[v1.ListStatusesResponse], error) {
	return c.listStatuses.CallUnary(ctx, req)
}

// ListEssentials calls otterscale.essential.v1.EssentialService.ListEssentials.
func (c *essentialServiceClient) ListEssentials(ctx context.Context, req *connect.Request[v1.ListEssentialsRequest]) (*connect.Response[v1.ListEssentialsResponse], error) {
	return c.listEssentials.CallUnary(ctx, req)
}

// CreateSingleNode calls otterscale.essential.v1.EssentialService.CreateSingleNode.
func (c *essentialServiceClient) CreateSingleNode(ctx context.Context, req *connect.Request[v1.CreateSingleNodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createSingleNode.CallUnary(ctx, req)
}

// CreateHighAvailabilityCluster calls
// otterscale.essential.v1.EssentialService.CreateHighAvailabilityCluster.
func (c *essentialServiceClient) CreateHighAvailabilityCluster(ctx context.Context, req *connect.Request[v1.CreateHighAvailabilityClusterRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createHighAvailabilityCluster.CallUnary(ctx, req)
}

// AddUnits calls otterscale.essential.v1.EssentialService.AddUnits.
func (c *essentialServiceClient) AddUnits(ctx context.Context, req *connect.Request[v1.AddUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addUnits.CallUnary(ctx, req)
}

// ListKubernetesNodeLabels calls otterscale.essential.v1.EssentialService.ListKubernetesNodeLabels.
func (c *essentialServiceClient) ListKubernetesNodeLabels(ctx context.Context, req *connect.Request[v1.ListKubernetesNodeLabelsRequest]) (*connect.Response[v1.ListKubernetesNodeLabelsResponse], error) {
	return c.listKubernetesNodeLabels.CallUnary(ctx, req)
}

// UpdateKubernetesNodeLabels calls
// otterscale.essential.v1.EssentialService.UpdateKubernetesNodeLabels.
func (c *essentialServiceClient) UpdateKubernetesNodeLabels(ctx context.Context, req *connect.Request[v1.UpdateKubernetesNodeLabelsRequest]) (*connect.Response[v1.UpdateKubernetesNodeLabelsResponse], error) {
	return c.updateKubernetesNodeLabels.CallUnary(ctx, req)
}

// EssentialServiceHandler is an implementation of the otterscale.essential.v1.EssentialService
// service.
type EssentialServiceHandler interface {
	IsMachineDeployed(context.Context, *connect.Request[v1.IsMachineDeployedRequest]) (*connect.Response[v1.IsMachineDeployedResponse], error)
	ListStatuses(context.Context, *connect.Request[v1.ListStatusesRequest]) (*connect.Response[v1.ListStatusesResponse], error)
	ListEssentials(context.Context, *connect.Request[v1.ListEssentialsRequest]) (*connect.Response[v1.ListEssentialsResponse], error)
	CreateSingleNode(context.Context, *connect.Request[v1.CreateSingleNodeRequest]) (*connect.Response[emptypb.Empty], error)
	CreateHighAvailabilityCluster(context.Context, *connect.Request[v1.CreateHighAvailabilityClusterRequest]) (*connect.Response[emptypb.Empty], error)
	AddUnits(context.Context, *connect.Request[v1.AddUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	ListKubernetesNodeLabels(context.Context, *connect.Request[v1.ListKubernetesNodeLabelsRequest]) (*connect.Response[v1.ListKubernetesNodeLabelsResponse], error)
	UpdateKubernetesNodeLabels(context.Context, *connect.Request[v1.UpdateKubernetesNodeLabelsRequest]) (*connect.Response[v1.UpdateKubernetesNodeLabelsResponse], error)
}

// NewEssentialServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEssentialServiceHandler(svc EssentialServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	essentialServiceMethods := v1.File_api_essential_v1_essential_proto.Services().ByName("EssentialService").Methods()
	essentialServiceIsMachineDeployedHandler := connect.NewUnaryHandler(
		EssentialServiceIsMachineDeployedProcedure,
		svc.IsMachineDeployed,
		connect.WithSchema(essentialServiceMethods.ByName("IsMachineDeployed")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceListStatusesHandler := connect.NewUnaryHandler(
		EssentialServiceListStatusesProcedure,
		svc.ListStatuses,
		connect.WithSchema(essentialServiceMethods.ByName("ListStatuses")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceListEssentialsHandler := connect.NewUnaryHandler(
		EssentialServiceListEssentialsProcedure,
		svc.ListEssentials,
		connect.WithSchema(essentialServiceMethods.ByName("ListEssentials")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceCreateSingleNodeHandler := connect.NewUnaryHandler(
		EssentialServiceCreateSingleNodeProcedure,
		svc.CreateSingleNode,
		connect.WithSchema(essentialServiceMethods.ByName("CreateSingleNode")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceCreateHighAvailabilityClusterHandler := connect.NewUnaryHandler(
		EssentialServiceCreateHighAvailabilityClusterProcedure,
		svc.CreateHighAvailabilityCluster,
		connect.WithSchema(essentialServiceMethods.ByName("CreateHighAvailabilityCluster")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceAddUnitsHandler := connect.NewUnaryHandler(
		EssentialServiceAddUnitsProcedure,
		svc.AddUnits,
		connect.WithSchema(essentialServiceMethods.ByName("AddUnits")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceListKubernetesNodeLabelsHandler := connect.NewUnaryHandler(
		EssentialServiceListKubernetesNodeLabelsProcedure,
		svc.ListKubernetesNodeLabels,
		connect.WithSchema(essentialServiceMethods.ByName("ListKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	essentialServiceUpdateKubernetesNodeLabelsHandler := connect.NewUnaryHandler(
		EssentialServiceUpdateKubernetesNodeLabelsProcedure,
		svc.UpdateKubernetesNodeLabels,
		connect.WithSchema(essentialServiceMethods.ByName("UpdateKubernetesNodeLabels")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.essential.v1.EssentialService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EssentialServiceIsMachineDeployedProcedure:
			essentialServiceIsMachineDeployedHandler.ServeHTTP(w, r)
		case EssentialServiceListStatusesProcedure:
			essentialServiceListStatusesHandler.ServeHTTP(w, r)
		case EssentialServiceListEssentialsProcedure:
			essentialServiceListEssentialsHandler.ServeHTTP(w, r)
		case EssentialServiceCreateSingleNodeProcedure:
			essentialServiceCreateSingleNodeHandler.ServeHTTP(w, r)
		case EssentialServiceCreateHighAvailabilityClusterProcedure:
			essentialServiceCreateHighAvailabilityClusterHandler.ServeHTTP(w, r)
		case EssentialServiceAddUnitsProcedure:
			essentialServiceAddUnitsHandler.ServeHTTP(w, r)
		case EssentialServiceListKubernetesNodeLabelsProcedure:
			essentialServiceListKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		case EssentialServiceUpdateKubernetesNodeLabelsProcedure:
			essentialServiceUpdateKubernetesNodeLabelsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEssentialServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEssentialServiceHandler struct{}

func (UnimplementedEssentialServiceHandler) IsMachineDeployed(context.Context, *connect.Request[v1.IsMachineDeployedRequest]) (*connect.Response[v1.IsMachineDeployedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.IsMachineDeployed is not implemented"))
}

func (UnimplementedEssentialServiceHandler) ListStatuses(context.Context, *connect.Request[v1.ListStatusesRequest]) (*connect.Response[v1.ListStatusesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.ListStatuses is not implemented"))
}

func (UnimplementedEssentialServiceHandler) ListEssentials(context.Context, *connect.Request[v1.ListEssentialsRequest]) (*connect.Response[v1.ListEssentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.ListEssentials is not implemented"))
}

func (UnimplementedEssentialServiceHandler) CreateSingleNode(context.Context, *connect.Request[v1.CreateSingleNodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.CreateSingleNode is not implemented"))
}

func (UnimplementedEssentialServiceHandler) CreateHighAvailabilityCluster(context.Context, *connect.Request[v1.CreateHighAvailabilityClusterRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.CreateHighAvailabilityCluster is not implemented"))
}

func (UnimplementedEssentialServiceHandler) AddUnits(context.Context, *connect.Request[v1.AddUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.AddUnits is not implemented"))
}

func (UnimplementedEssentialServiceHandler) ListKubernetesNodeLabels(context.Context, *connect.Request[v1.ListKubernetesNodeLabelsRequest]) (*connect.Response[v1.ListKubernetesNodeLabelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.ListKubernetesNodeLabels is not implemented"))
}

func (UnimplementedEssentialServiceHandler) UpdateKubernetesNodeLabels(context.Context, *connect.Request[v1.UpdateKubernetesNodeLabelsRequest]) (*connect.Response[v1.UpdateKubernetesNodeLabelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.essential.v1.EssentialService.UpdateKubernetesNodeLabels is not implemented"))
}
