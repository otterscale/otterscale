// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/general/v1/general.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/general/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GeneralServiceName is the fully-qualified name of the GeneralService service.
	GeneralServiceName = "otterscale.general.v1.GeneralService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GeneralServiceVerifyEnvironmentProcedure is the fully-qualified name of the GeneralService's
	// VerifyEnvironment RPC.
	GeneralServiceVerifyEnvironmentProcedure = "/otterscale.general.v1.GeneralService/VerifyEnvironment"
	// GeneralServiceListCephesProcedure is the fully-qualified name of the GeneralService's ListCephes
	// RPC.
	GeneralServiceListCephesProcedure = "/otterscale.general.v1.GeneralService/ListCephes"
	// GeneralServiceCreateCephProcedure is the fully-qualified name of the GeneralService's CreateCeph
	// RPC.
	GeneralServiceCreateCephProcedure = "/otterscale.general.v1.GeneralService/CreateCeph"
	// GeneralServiceAddCephUnitsProcedure is the fully-qualified name of the GeneralService's
	// AddCephUnits RPC.
	GeneralServiceAddCephUnitsProcedure = "/otterscale.general.v1.GeneralService/AddCephUnits"
	// GeneralServiceListKubernetesesProcedure is the fully-qualified name of the GeneralService's
	// ListKuberneteses RPC.
	GeneralServiceListKubernetesesProcedure = "/otterscale.general.v1.GeneralService/ListKuberneteses"
	// GeneralServiceCreateKubernetesProcedure is the fully-qualified name of the GeneralService's
	// CreateKubernetes RPC.
	GeneralServiceCreateKubernetesProcedure = "/otterscale.general.v1.GeneralService/CreateKubernetes"
	// GeneralServiceAddKubernetesUnitsProcedure is the fully-qualified name of the GeneralService's
	// AddKubernetesUnits RPC.
	GeneralServiceAddKubernetesUnitsProcedure = "/otterscale.general.v1.GeneralService/AddKubernetesUnits"
	// GeneralServiceSetCephCSIProcedure is the fully-qualified name of the GeneralService's SetCephCSI
	// RPC.
	GeneralServiceSetCephCSIProcedure = "/otterscale.general.v1.GeneralService/SetCephCSI"
)

// GeneralServiceClient is a client for the otterscale.general.v1.GeneralService service.
type GeneralServiceClient interface {
	VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error)
	ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error)
	CreateCeph(context.Context, *connect.Request[v1.CreateCephRequest]) (*connect.Response[v1.General], error)
	AddCephUnits(context.Context, *connect.Request[v1.AddCephUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	ListKuberneteses(context.Context, *connect.Request[v1.ListKubernetesesRequest]) (*connect.Response[v1.ListKubernetesesResponse], error)
	CreateKubernetes(context.Context, *connect.Request[v1.CreateKubernetesRequest]) (*connect.Response[v1.General], error)
	AddKubernetesUnits(context.Context, *connect.Request[v1.AddKubernetesUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	SetCephCSI(context.Context, *connect.Request[v1.SetCephCSIRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGeneralServiceClient constructs a client for the otterscale.general.v1.GeneralService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGeneralServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GeneralServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	generalServiceMethods := v1.File_api_general_v1_general_proto.Services().ByName("GeneralService").Methods()
	return &generalServiceClient{
		verifyEnvironment: connect.NewClient[v1.VerifyEnvironmentRequest, v1.VerifyEnvironmentResponse](
			httpClient,
			baseURL+GeneralServiceVerifyEnvironmentProcedure,
			connect.WithSchema(generalServiceMethods.ByName("VerifyEnvironment")),
			connect.WithClientOptions(opts...),
		),
		listCephes: connect.NewClient[v1.ListCephesRequest, v1.ListCephesResponse](
			httpClient,
			baseURL+GeneralServiceListCephesProcedure,
			connect.WithSchema(generalServiceMethods.ByName("ListCephes")),
			connect.WithClientOptions(opts...),
		),
		createCeph: connect.NewClient[v1.CreateCephRequest, v1.General](
			httpClient,
			baseURL+GeneralServiceCreateCephProcedure,
			connect.WithSchema(generalServiceMethods.ByName("CreateCeph")),
			connect.WithClientOptions(opts...),
		),
		addCephUnits: connect.NewClient[v1.AddCephUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+GeneralServiceAddCephUnitsProcedure,
			connect.WithSchema(generalServiceMethods.ByName("AddCephUnits")),
			connect.WithClientOptions(opts...),
		),
		listKuberneteses: connect.NewClient[v1.ListKubernetesesRequest, v1.ListKubernetesesResponse](
			httpClient,
			baseURL+GeneralServiceListKubernetesesProcedure,
			connect.WithSchema(generalServiceMethods.ByName("ListKuberneteses")),
			connect.WithClientOptions(opts...),
		),
		createKubernetes: connect.NewClient[v1.CreateKubernetesRequest, v1.General](
			httpClient,
			baseURL+GeneralServiceCreateKubernetesProcedure,
			connect.WithSchema(generalServiceMethods.ByName("CreateKubernetes")),
			connect.WithClientOptions(opts...),
		),
		addKubernetesUnits: connect.NewClient[v1.AddKubernetesUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+GeneralServiceAddKubernetesUnitsProcedure,
			connect.WithSchema(generalServiceMethods.ByName("AddKubernetesUnits")),
			connect.WithClientOptions(opts...),
		),
		setCephCSI: connect.NewClient[v1.SetCephCSIRequest, emptypb.Empty](
			httpClient,
			baseURL+GeneralServiceSetCephCSIProcedure,
			connect.WithSchema(generalServiceMethods.ByName("SetCephCSI")),
			connect.WithClientOptions(opts...),
		),
	}
}

// generalServiceClient implements GeneralServiceClient.
type generalServiceClient struct {
	verifyEnvironment  *connect.Client[v1.VerifyEnvironmentRequest, v1.VerifyEnvironmentResponse]
	listCephes         *connect.Client[v1.ListCephesRequest, v1.ListCephesResponse]
	createCeph         *connect.Client[v1.CreateCephRequest, v1.General]
	addCephUnits       *connect.Client[v1.AddCephUnitsRequest, emptypb.Empty]
	listKuberneteses   *connect.Client[v1.ListKubernetesesRequest, v1.ListKubernetesesResponse]
	createKubernetes   *connect.Client[v1.CreateKubernetesRequest, v1.General]
	addKubernetesUnits *connect.Client[v1.AddKubernetesUnitsRequest, emptypb.Empty]
	setCephCSI         *connect.Client[v1.SetCephCSIRequest, emptypb.Empty]
}

// VerifyEnvironment calls otterscale.general.v1.GeneralService.VerifyEnvironment.
func (c *generalServiceClient) VerifyEnvironment(ctx context.Context, req *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error) {
	return c.verifyEnvironment.CallUnary(ctx, req)
}

// ListCephes calls otterscale.general.v1.GeneralService.ListCephes.
func (c *generalServiceClient) ListCephes(ctx context.Context, req *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error) {
	return c.listCephes.CallUnary(ctx, req)
}

// CreateCeph calls otterscale.general.v1.GeneralService.CreateCeph.
func (c *generalServiceClient) CreateCeph(ctx context.Context, req *connect.Request[v1.CreateCephRequest]) (*connect.Response[v1.General], error) {
	return c.createCeph.CallUnary(ctx, req)
}

// AddCephUnits calls otterscale.general.v1.GeneralService.AddCephUnits.
func (c *generalServiceClient) AddCephUnits(ctx context.Context, req *connect.Request[v1.AddCephUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addCephUnits.CallUnary(ctx, req)
}

// ListKuberneteses calls otterscale.general.v1.GeneralService.ListKuberneteses.
func (c *generalServiceClient) ListKuberneteses(ctx context.Context, req *connect.Request[v1.ListKubernetesesRequest]) (*connect.Response[v1.ListKubernetesesResponse], error) {
	return c.listKuberneteses.CallUnary(ctx, req)
}

// CreateKubernetes calls otterscale.general.v1.GeneralService.CreateKubernetes.
func (c *generalServiceClient) CreateKubernetes(ctx context.Context, req *connect.Request[v1.CreateKubernetesRequest]) (*connect.Response[v1.General], error) {
	return c.createKubernetes.CallUnary(ctx, req)
}

// AddKubernetesUnits calls otterscale.general.v1.GeneralService.AddKubernetesUnits.
func (c *generalServiceClient) AddKubernetesUnits(ctx context.Context, req *connect.Request[v1.AddKubernetesUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addKubernetesUnits.CallUnary(ctx, req)
}

// SetCephCSI calls otterscale.general.v1.GeneralService.SetCephCSI.
func (c *generalServiceClient) SetCephCSI(ctx context.Context, req *connect.Request[v1.SetCephCSIRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setCephCSI.CallUnary(ctx, req)
}

// GeneralServiceHandler is an implementation of the otterscale.general.v1.GeneralService service.
type GeneralServiceHandler interface {
	VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error)
	ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error)
	CreateCeph(context.Context, *connect.Request[v1.CreateCephRequest]) (*connect.Response[v1.General], error)
	AddCephUnits(context.Context, *connect.Request[v1.AddCephUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	ListKuberneteses(context.Context, *connect.Request[v1.ListKubernetesesRequest]) (*connect.Response[v1.ListKubernetesesResponse], error)
	CreateKubernetes(context.Context, *connect.Request[v1.CreateKubernetesRequest]) (*connect.Response[v1.General], error)
	AddKubernetesUnits(context.Context, *connect.Request[v1.AddKubernetesUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	SetCephCSI(context.Context, *connect.Request[v1.SetCephCSIRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGeneralServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGeneralServiceHandler(svc GeneralServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	generalServiceMethods := v1.File_api_general_v1_general_proto.Services().ByName("GeneralService").Methods()
	generalServiceVerifyEnvironmentHandler := connect.NewUnaryHandler(
		GeneralServiceVerifyEnvironmentProcedure,
		svc.VerifyEnvironment,
		connect.WithSchema(generalServiceMethods.ByName("VerifyEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceListCephesHandler := connect.NewUnaryHandler(
		GeneralServiceListCephesProcedure,
		svc.ListCephes,
		connect.WithSchema(generalServiceMethods.ByName("ListCephes")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceCreateCephHandler := connect.NewUnaryHandler(
		GeneralServiceCreateCephProcedure,
		svc.CreateCeph,
		connect.WithSchema(generalServiceMethods.ByName("CreateCeph")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceAddCephUnitsHandler := connect.NewUnaryHandler(
		GeneralServiceAddCephUnitsProcedure,
		svc.AddCephUnits,
		connect.WithSchema(generalServiceMethods.ByName("AddCephUnits")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceListKubernetesesHandler := connect.NewUnaryHandler(
		GeneralServiceListKubernetesesProcedure,
		svc.ListKuberneteses,
		connect.WithSchema(generalServiceMethods.ByName("ListKuberneteses")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceCreateKubernetesHandler := connect.NewUnaryHandler(
		GeneralServiceCreateKubernetesProcedure,
		svc.CreateKubernetes,
		connect.WithSchema(generalServiceMethods.ByName("CreateKubernetes")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceAddKubernetesUnitsHandler := connect.NewUnaryHandler(
		GeneralServiceAddKubernetesUnitsProcedure,
		svc.AddKubernetesUnits,
		connect.WithSchema(generalServiceMethods.ByName("AddKubernetesUnits")),
		connect.WithHandlerOptions(opts...),
	)
	generalServiceSetCephCSIHandler := connect.NewUnaryHandler(
		GeneralServiceSetCephCSIProcedure,
		svc.SetCephCSI,
		connect.WithSchema(generalServiceMethods.ByName("SetCephCSI")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.general.v1.GeneralService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GeneralServiceVerifyEnvironmentProcedure:
			generalServiceVerifyEnvironmentHandler.ServeHTTP(w, r)
		case GeneralServiceListCephesProcedure:
			generalServiceListCephesHandler.ServeHTTP(w, r)
		case GeneralServiceCreateCephProcedure:
			generalServiceCreateCephHandler.ServeHTTP(w, r)
		case GeneralServiceAddCephUnitsProcedure:
			generalServiceAddCephUnitsHandler.ServeHTTP(w, r)
		case GeneralServiceListKubernetesesProcedure:
			generalServiceListKubernetesesHandler.ServeHTTP(w, r)
		case GeneralServiceCreateKubernetesProcedure:
			generalServiceCreateKubernetesHandler.ServeHTTP(w, r)
		case GeneralServiceAddKubernetesUnitsProcedure:
			generalServiceAddKubernetesUnitsHandler.ServeHTTP(w, r)
		case GeneralServiceSetCephCSIProcedure:
			generalServiceSetCephCSIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGeneralServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGeneralServiceHandler struct{}

func (UnimplementedGeneralServiceHandler) VerifyEnvironment(context.Context, *connect.Request[v1.VerifyEnvironmentRequest]) (*connect.Response[v1.VerifyEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.VerifyEnvironment is not implemented"))
}

func (UnimplementedGeneralServiceHandler) ListCephes(context.Context, *connect.Request[v1.ListCephesRequest]) (*connect.Response[v1.ListCephesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.ListCephes is not implemented"))
}

func (UnimplementedGeneralServiceHandler) CreateCeph(context.Context, *connect.Request[v1.CreateCephRequest]) (*connect.Response[v1.General], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.CreateCeph is not implemented"))
}

func (UnimplementedGeneralServiceHandler) AddCephUnits(context.Context, *connect.Request[v1.AddCephUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.AddCephUnits is not implemented"))
}

func (UnimplementedGeneralServiceHandler) ListKuberneteses(context.Context, *connect.Request[v1.ListKubernetesesRequest]) (*connect.Response[v1.ListKubernetesesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.ListKuberneteses is not implemented"))
}

func (UnimplementedGeneralServiceHandler) CreateKubernetes(context.Context, *connect.Request[v1.CreateKubernetesRequest]) (*connect.Response[v1.General], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.CreateKubernetes is not implemented"))
}

func (UnimplementedGeneralServiceHandler) AddKubernetesUnits(context.Context, *connect.Request[v1.AddKubernetesUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.AddKubernetesUnits is not implemented"))
}

func (UnimplementedGeneralServiceHandler) SetCephCSI(context.Context, *connect.Request[v1.SetCephCSIRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.general.v1.GeneralService.SetCephCSI is not implemented"))
}
