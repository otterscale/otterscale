// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/instance/v1/instance.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/otterscale/otterscale/api/application/v1"
	v1 "github.com/otterscale/otterscale/api/instance/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InstanceServiceName is the fully-qualified name of the InstanceService service.
	InstanceServiceName = "otterscale.instance.v1.InstanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstanceServiceCheckInfrastructureStatusProcedure is the fully-qualified name of the
	// InstanceService's CheckInfrastructureStatus RPC.
	InstanceServiceCheckInfrastructureStatusProcedure = "/otterscale.instance.v1.InstanceService/CheckInfrastructureStatus"
	// InstanceServiceListVirtualMachinesProcedure is the fully-qualified name of the InstanceService's
	// ListVirtualMachines RPC.
	InstanceServiceListVirtualMachinesProcedure = "/otterscale.instance.v1.InstanceService/ListVirtualMachines"
	// InstanceServiceGetVirtualMachineProcedure is the fully-qualified name of the InstanceService's
	// GetVirtualMachine RPC.
	InstanceServiceGetVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/GetVirtualMachine"
	// InstanceServiceCreateVirtualMachineProcedure is the fully-qualified name of the InstanceService's
	// CreateVirtualMachine RPC.
	InstanceServiceCreateVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/CreateVirtualMachine"
	// InstanceServiceDeleteVirtualMachineProcedure is the fully-qualified name of the InstanceService's
	// DeleteVirtualMachine RPC.
	InstanceServiceDeleteVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/DeleteVirtualMachine"
	// InstanceServiceAttachVirtualMachineDiskProcedure is the fully-qualified name of the
	// InstanceService's AttachVirtualMachineDisk RPC.
	InstanceServiceAttachVirtualMachineDiskProcedure = "/otterscale.instance.v1.InstanceService/AttachVirtualMachineDisk"
	// InstanceServiceDetachVirtualMachineDiskProcedure is the fully-qualified name of the
	// InstanceService's DetachVirtualMachineDisk RPC.
	InstanceServiceDetachVirtualMachineDiskProcedure = "/otterscale.instance.v1.InstanceService/DetachVirtualMachineDisk"
	// InstanceServiceCreateVirtualMachineCloneProcedure is the fully-qualified name of the
	// InstanceService's CreateVirtualMachineClone RPC.
	InstanceServiceCreateVirtualMachineCloneProcedure = "/otterscale.instance.v1.InstanceService/CreateVirtualMachineClone"
	// InstanceServiceDeleteVirtualMachineCloneProcedure is the fully-qualified name of the
	// InstanceService's DeleteVirtualMachineClone RPC.
	InstanceServiceDeleteVirtualMachineCloneProcedure = "/otterscale.instance.v1.InstanceService/DeleteVirtualMachineClone"
	// InstanceServiceCreateVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// InstanceService's CreateVirtualMachineSnapshot RPC.
	InstanceServiceCreateVirtualMachineSnapshotProcedure = "/otterscale.instance.v1.InstanceService/CreateVirtualMachineSnapshot"
	// InstanceServiceDeleteVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// InstanceService's DeleteVirtualMachineSnapshot RPC.
	InstanceServiceDeleteVirtualMachineSnapshotProcedure = "/otterscale.instance.v1.InstanceService/DeleteVirtualMachineSnapshot"
	// InstanceServiceCreateVirtualMachineRestoreProcedure is the fully-qualified name of the
	// InstanceService's CreateVirtualMachineRestore RPC.
	InstanceServiceCreateVirtualMachineRestoreProcedure = "/otterscale.instance.v1.InstanceService/CreateVirtualMachineRestore"
	// InstanceServiceDeleteVirtualMachineRestoreProcedure is the fully-qualified name of the
	// InstanceService's DeleteVirtualMachineRestore RPC.
	InstanceServiceDeleteVirtualMachineRestoreProcedure = "/otterscale.instance.v1.InstanceService/DeleteVirtualMachineRestore"
	// InstanceServiceStartVirtualMachineProcedure is the fully-qualified name of the InstanceService's
	// StartVirtualMachine RPC.
	InstanceServiceStartVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/StartVirtualMachine"
	// InstanceServiceStopVirtualMachineProcedure is the fully-qualified name of the InstanceService's
	// StopVirtualMachine RPC.
	InstanceServiceStopVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/StopVirtualMachine"
	// InstanceServiceRestartVirtualMachineProcedure is the fully-qualified name of the
	// InstanceService's RestartVirtualMachine RPC.
	InstanceServiceRestartVirtualMachineProcedure = "/otterscale.instance.v1.InstanceService/RestartVirtualMachine"
	// InstanceServicePauseInstanceProcedure is the fully-qualified name of the InstanceService's
	// PauseInstance RPC.
	InstanceServicePauseInstanceProcedure = "/otterscale.instance.v1.InstanceService/PauseInstance"
	// InstanceServiceResumeInstanceProcedure is the fully-qualified name of the InstanceService's
	// ResumeInstance RPC.
	InstanceServiceResumeInstanceProcedure = "/otterscale.instance.v1.InstanceService/ResumeInstance"
	// InstanceServiceMigrateInstanceProcedure is the fully-qualified name of the InstanceService's
	// MigrateInstance RPC.
	InstanceServiceMigrateInstanceProcedure = "/otterscale.instance.v1.InstanceService/MigrateInstance"
	// InstanceServiceVNCInstanceProcedure is the fully-qualified name of the InstanceService's
	// VNCInstance RPC.
	InstanceServiceVNCInstanceProcedure = "/otterscale.instance.v1.InstanceService/VNCInstance"
	// InstanceServiceListDataVolumesProcedure is the fully-qualified name of the InstanceService's
	// ListDataVolumes RPC.
	InstanceServiceListDataVolumesProcedure = "/otterscale.instance.v1.InstanceService/ListDataVolumes"
	// InstanceServiceGetDataVolumeProcedure is the fully-qualified name of the InstanceService's
	// GetDataVolume RPC.
	InstanceServiceGetDataVolumeProcedure = "/otterscale.instance.v1.InstanceService/GetDataVolume"
	// InstanceServiceCreateDataVolumeProcedure is the fully-qualified name of the InstanceService's
	// CreateDataVolume RPC.
	InstanceServiceCreateDataVolumeProcedure = "/otterscale.instance.v1.InstanceService/CreateDataVolume"
	// InstanceServiceDeleteDataVolumeProcedure is the fully-qualified name of the InstanceService's
	// DeleteDataVolume RPC.
	InstanceServiceDeleteDataVolumeProcedure = "/otterscale.instance.v1.InstanceService/DeleteDataVolume"
	// InstanceServiceExtendDataVolumeProcedure is the fully-qualified name of the InstanceService's
	// ExtendDataVolume RPC.
	InstanceServiceExtendDataVolumeProcedure = "/otterscale.instance.v1.InstanceService/ExtendDataVolume"
	// InstanceServiceListInstanceTypesProcedure is the fully-qualified name of the InstanceService's
	// ListInstanceTypes RPC.
	InstanceServiceListInstanceTypesProcedure = "/otterscale.instance.v1.InstanceService/ListInstanceTypes"
	// InstanceServiceGetInstanceTypeProcedure is the fully-qualified name of the InstanceService's
	// GetInstanceType RPC.
	InstanceServiceGetInstanceTypeProcedure = "/otterscale.instance.v1.InstanceService/GetInstanceType"
	// InstanceServiceCreateInstanceTypeProcedure is the fully-qualified name of the InstanceService's
	// CreateInstanceType RPC.
	InstanceServiceCreateInstanceTypeProcedure = "/otterscale.instance.v1.InstanceService/CreateInstanceType"
	// InstanceServiceDeleteInstanceTypeProcedure is the fully-qualified name of the InstanceService's
	// DeleteInstanceType RPC.
	InstanceServiceDeleteInstanceTypeProcedure = "/otterscale.instance.v1.InstanceService/DeleteInstanceType"
	// InstanceServiceCreateVirtualMachineServiceProcedure is the fully-qualified name of the
	// InstanceService's CreateVirtualMachineService RPC.
	InstanceServiceCreateVirtualMachineServiceProcedure = "/otterscale.instance.v1.InstanceService/CreateVirtualMachineService"
	// InstanceServiceUpdateVirtualMachineServiceProcedure is the fully-qualified name of the
	// InstanceService's UpdateVirtualMachineService RPC.
	InstanceServiceUpdateVirtualMachineServiceProcedure = "/otterscale.instance.v1.InstanceService/UpdateVirtualMachineService"
	// InstanceServiceDeleteVirtualMachineServiceProcedure is the fully-qualified name of the
	// InstanceService's DeleteVirtualMachineService RPC.
	InstanceServiceDeleteVirtualMachineServiceProcedure = "/otterscale.instance.v1.InstanceService/DeleteVirtualMachineService"
)

// InstanceServiceClient is a client for the otterscale.instance.v1.InstanceService service.
type InstanceServiceClient interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error)
	GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error)
	CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error)
	DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error)
	AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error)
	DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error)
	CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error)
	DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error)
	CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error)
	DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error)
	CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error)
	DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error)
	StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error)
	StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error)
	RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error)
	PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error)
	ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error)
	MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error)
	VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error)
	ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error)
	GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error)
	CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error)
	DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error)
	ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error)
	ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error)
	GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error)
	CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error)
	DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error)
	CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error)
}

// NewInstanceServiceClient constructs a client for the otterscale.instance.v1.InstanceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InstanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	instanceServiceMethods := v1.File_api_instance_v1_instance_proto.Services().ByName("InstanceService").Methods()
	return &instanceServiceClient{
		checkInfrastructureStatus: connect.NewClient[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse](
			httpClient,
			baseURL+InstanceServiceCheckInfrastructureStatusProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CheckInfrastructureStatus")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+InstanceServiceListVirtualMachinesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+InstanceServiceGetVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+InstanceServiceCreateVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		attachVirtualMachineDisk: connect.NewClient[v1.AttachVirtualMachineDiskRequest, v1.VirtualMachine_Disk](
			httpClient,
			baseURL+InstanceServiceAttachVirtualMachineDiskProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("AttachVirtualMachineDisk")),
			connect.WithClientOptions(opts...),
		),
		detachVirtualMachineDisk: connect.NewClient[v1.DetachVirtualMachineDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDetachVirtualMachineDiskProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DetachVirtualMachineDisk")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineClone: connect.NewClient[v1.CreateVirtualMachineCloneRequest, v1.VirtualMachine_Clone](
			httpClient,
			baseURL+InstanceServiceCreateVirtualMachineCloneProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineClone")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineClone: connect.NewClient[v1.DeleteVirtualMachineCloneRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteVirtualMachineCloneProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineClone")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineSnapshot: connect.NewClient[v1.CreateVirtualMachineSnapshotRequest, v1.VirtualMachine_Snapshot](
			httpClient,
			baseURL+InstanceServiceCreateVirtualMachineSnapshotProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineSnapshot: connect.NewClient[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteVirtualMachineSnapshotProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineRestore: connect.NewClient[v1.CreateVirtualMachineRestoreRequest, v1.VirtualMachine_Restore](
			httpClient,
			baseURL+InstanceServiceCreateVirtualMachineRestoreProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineRestore")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineRestore: connect.NewClient[v1.DeleteVirtualMachineRestoreRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteVirtualMachineRestoreProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineRestore")),
			connect.WithClientOptions(opts...),
		),
		startVirtualMachine: connect.NewClient[v1.StartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceStartVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("StartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		stopVirtualMachine: connect.NewClient[v1.StopVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceStopVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("StopVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		restartVirtualMachine: connect.NewClient[v1.RestartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceRestartVirtualMachineProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("RestartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		pauseInstance: connect.NewClient[v1.PauseInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServicePauseInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("PauseInstance")),
			connect.WithClientOptions(opts...),
		),
		resumeInstance: connect.NewClient[v1.ResumeInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceResumeInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ResumeInstance")),
			connect.WithClientOptions(opts...),
		),
		migrateInstance: connect.NewClient[v1.MigrateInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceMigrateInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("MigrateInstance")),
			connect.WithClientOptions(opts...),
		),
		vNCInstance: connect.NewClient[v1.VNCInstanceRequest, v1.VNCInstanceResponse](
			httpClient,
			baseURL+InstanceServiceVNCInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("VNCInstance")),
			connect.WithClientOptions(opts...),
		),
		listDataVolumes: connect.NewClient[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse](
			httpClient,
			baseURL+InstanceServiceListDataVolumesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListDataVolumes")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+InstanceServiceGetDataVolumeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+InstanceServiceCreateDataVolumeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteDataVolumeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceExtendDataVolumeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listInstanceTypes: connect.NewClient[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse](
			httpClient,
			baseURL+InstanceServiceListInstanceTypesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListInstanceTypes")),
			connect.WithClientOptions(opts...),
		),
		getInstanceType: connect.NewClient[v1.GetInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+InstanceServiceGetInstanceTypeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetInstanceType")),
			connect.WithClientOptions(opts...),
		),
		createInstanceType: connect.NewClient[v1.CreateInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+InstanceServiceCreateInstanceTypeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateInstanceType")),
			connect.WithClientOptions(opts...),
		),
		deleteInstanceType: connect.NewClient[v1.DeleteInstanceTypeRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteInstanceTypeProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteInstanceType")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineService: connect.NewClient[v1.CreateVirtualMachineServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+InstanceServiceCreateVirtualMachineServiceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachineService: connect.NewClient[v1.UpdateVirtualMachineServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+InstanceServiceUpdateVirtualMachineServiceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UpdateVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineService: connect.NewClient[v1.DeleteVirtualMachineServiceRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteVirtualMachineServiceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
	}
}

// instanceServiceClient implements InstanceServiceClient.
type instanceServiceClient struct {
	checkInfrastructureStatus    *connect.Client[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse]
	listVirtualMachines          *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	getVirtualMachine            *connect.Client[v1.GetVirtualMachineRequest, v1.VirtualMachine]
	createVirtualMachine         *connect.Client[v1.CreateVirtualMachineRequest, v1.VirtualMachine]
	deleteVirtualMachine         *connect.Client[v1.DeleteVirtualMachineRequest, emptypb.Empty]
	attachVirtualMachineDisk     *connect.Client[v1.AttachVirtualMachineDiskRequest, v1.VirtualMachine_Disk]
	detachVirtualMachineDisk     *connect.Client[v1.DetachVirtualMachineDiskRequest, emptypb.Empty]
	createVirtualMachineClone    *connect.Client[v1.CreateVirtualMachineCloneRequest, v1.VirtualMachine_Clone]
	deleteVirtualMachineClone    *connect.Client[v1.DeleteVirtualMachineCloneRequest, emptypb.Empty]
	createVirtualMachineSnapshot *connect.Client[v1.CreateVirtualMachineSnapshotRequest, v1.VirtualMachine_Snapshot]
	deleteVirtualMachineSnapshot *connect.Client[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty]
	createVirtualMachineRestore  *connect.Client[v1.CreateVirtualMachineRestoreRequest, v1.VirtualMachine_Restore]
	deleteVirtualMachineRestore  *connect.Client[v1.DeleteVirtualMachineRestoreRequest, emptypb.Empty]
	startVirtualMachine          *connect.Client[v1.StartVirtualMachineRequest, emptypb.Empty]
	stopVirtualMachine           *connect.Client[v1.StopVirtualMachineRequest, emptypb.Empty]
	restartVirtualMachine        *connect.Client[v1.RestartVirtualMachineRequest, emptypb.Empty]
	pauseInstance                *connect.Client[v1.PauseInstanceRequest, emptypb.Empty]
	resumeInstance               *connect.Client[v1.ResumeInstanceRequest, emptypb.Empty]
	migrateInstance              *connect.Client[v1.MigrateInstanceRequest, emptypb.Empty]
	vNCInstance                  *connect.Client[v1.VNCInstanceRequest, v1.VNCInstanceResponse]
	listDataVolumes              *connect.Client[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse]
	getDataVolume                *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	createDataVolume             *connect.Client[v1.CreateDataVolumeRequest, v1.DataVolume]
	deleteDataVolume             *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume             *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	listInstanceTypes            *connect.Client[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse]
	getInstanceType              *connect.Client[v1.GetInstanceTypeRequest, v1.InstanceType]
	createInstanceType           *connect.Client[v1.CreateInstanceTypeRequest, v1.InstanceType]
	deleteInstanceType           *connect.Client[v1.DeleteInstanceTypeRequest, emptypb.Empty]
	createVirtualMachineService  *connect.Client[v1.CreateVirtualMachineServiceRequest, v11.Application_Service]
	updateVirtualMachineService  *connect.Client[v1.UpdateVirtualMachineServiceRequest, v11.Application_Service]
	deleteVirtualMachineService  *connect.Client[v1.DeleteVirtualMachineServiceRequest, emptypb.Empty]
}

// CheckInfrastructureStatus calls otterscale.instance.v1.InstanceService.CheckInfrastructureStatus.
func (c *instanceServiceClient) CheckInfrastructureStatus(ctx context.Context, req *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	response, err := c.checkInfrastructureStatus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListVirtualMachines calls otterscale.instance.v1.InstanceService.ListVirtualMachines.
func (c *instanceServiceClient) ListVirtualMachines(ctx context.Context, req *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error) {
	response, err := c.listVirtualMachines.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetVirtualMachine calls otterscale.instance.v1.InstanceService.GetVirtualMachine.
func (c *instanceServiceClient) GetVirtualMachine(ctx context.Context, req *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error) {
	response, err := c.getVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachine calls otterscale.instance.v1.InstanceService.CreateVirtualMachine.
func (c *instanceServiceClient) CreateVirtualMachine(ctx context.Context, req *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error) {
	response, err := c.createVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachine calls otterscale.instance.v1.InstanceService.DeleteVirtualMachine.
func (c *instanceServiceClient) DeleteVirtualMachine(ctx context.Context, req *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AttachVirtualMachineDisk calls otterscale.instance.v1.InstanceService.AttachVirtualMachineDisk.
func (c *instanceServiceClient) AttachVirtualMachineDisk(ctx context.Context, req *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error) {
	response, err := c.attachVirtualMachineDisk.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DetachVirtualMachineDisk calls otterscale.instance.v1.InstanceService.DetachVirtualMachineDisk.
func (c *instanceServiceClient) DetachVirtualMachineDisk(ctx context.Context, req *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error) {
	response, err := c.detachVirtualMachineDisk.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineClone calls otterscale.instance.v1.InstanceService.CreateVirtualMachineClone.
func (c *instanceServiceClient) CreateVirtualMachineClone(ctx context.Context, req *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error) {
	response, err := c.createVirtualMachineClone.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineClone calls otterscale.instance.v1.InstanceService.DeleteVirtualMachineClone.
func (c *instanceServiceClient) DeleteVirtualMachineClone(ctx context.Context, req *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineClone.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineSnapshot calls
// otterscale.instance.v1.InstanceService.CreateVirtualMachineSnapshot.
func (c *instanceServiceClient) CreateVirtualMachineSnapshot(ctx context.Context, req *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error) {
	response, err := c.createVirtualMachineSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineSnapshot calls
// otterscale.instance.v1.InstanceService.DeleteVirtualMachineSnapshot.
func (c *instanceServiceClient) DeleteVirtualMachineSnapshot(ctx context.Context, req *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineRestore calls
// otterscale.instance.v1.InstanceService.CreateVirtualMachineRestore.
func (c *instanceServiceClient) CreateVirtualMachineRestore(ctx context.Context, req *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error) {
	response, err := c.createVirtualMachineRestore.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineRestore calls
// otterscale.instance.v1.InstanceService.DeleteVirtualMachineRestore.
func (c *instanceServiceClient) DeleteVirtualMachineRestore(ctx context.Context, req *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineRestore.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// StartVirtualMachine calls otterscale.instance.v1.InstanceService.StartVirtualMachine.
func (c *instanceServiceClient) StartVirtualMachine(ctx context.Context, req *v1.StartVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.startVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// StopVirtualMachine calls otterscale.instance.v1.InstanceService.StopVirtualMachine.
func (c *instanceServiceClient) StopVirtualMachine(ctx context.Context, req *v1.StopVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.stopVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RestartVirtualMachine calls otterscale.instance.v1.InstanceService.RestartVirtualMachine.
func (c *instanceServiceClient) RestartVirtualMachine(ctx context.Context, req *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.restartVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// PauseInstance calls otterscale.instance.v1.InstanceService.PauseInstance.
func (c *instanceServiceClient) PauseInstance(ctx context.Context, req *v1.PauseInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.pauseInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ResumeInstance calls otterscale.instance.v1.InstanceService.ResumeInstance.
func (c *instanceServiceClient) ResumeInstance(ctx context.Context, req *v1.ResumeInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.resumeInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// MigrateInstance calls otterscale.instance.v1.InstanceService.MigrateInstance.
func (c *instanceServiceClient) MigrateInstance(ctx context.Context, req *v1.MigrateInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.migrateInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// VNCInstance calls otterscale.instance.v1.InstanceService.VNCInstance.
func (c *instanceServiceClient) VNCInstance(ctx context.Context, req *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error) {
	response, err := c.vNCInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListDataVolumes calls otterscale.instance.v1.InstanceService.ListDataVolumes.
func (c *instanceServiceClient) ListDataVolumes(ctx context.Context, req *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error) {
	response, err := c.listDataVolumes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetDataVolume calls otterscale.instance.v1.InstanceService.GetDataVolume.
func (c *instanceServiceClient) GetDataVolume(ctx context.Context, req *v1.GetDataVolumeRequest) (*v1.DataVolume, error) {
	response, err := c.getDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateDataVolume calls otterscale.instance.v1.InstanceService.CreateDataVolume.
func (c *instanceServiceClient) CreateDataVolume(ctx context.Context, req *v1.CreateDataVolumeRequest) (*v1.DataVolume, error) {
	response, err := c.createDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteDataVolume calls otterscale.instance.v1.InstanceService.DeleteDataVolume.
func (c *instanceServiceClient) DeleteDataVolume(ctx context.Context, req *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error) {
	response, err := c.deleteDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ExtendDataVolume calls otterscale.instance.v1.InstanceService.ExtendDataVolume.
func (c *instanceServiceClient) ExtendDataVolume(ctx context.Context, req *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error) {
	response, err := c.extendDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListInstanceTypes calls otterscale.instance.v1.InstanceService.ListInstanceTypes.
func (c *instanceServiceClient) ListInstanceTypes(ctx context.Context, req *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error) {
	response, err := c.listInstanceTypes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetInstanceType calls otterscale.instance.v1.InstanceService.GetInstanceType.
func (c *instanceServiceClient) GetInstanceType(ctx context.Context, req *v1.GetInstanceTypeRequest) (*v1.InstanceType, error) {
	response, err := c.getInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateInstanceType calls otterscale.instance.v1.InstanceService.CreateInstanceType.
func (c *instanceServiceClient) CreateInstanceType(ctx context.Context, req *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error) {
	response, err := c.createInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteInstanceType calls otterscale.instance.v1.InstanceService.DeleteInstanceType.
func (c *instanceServiceClient) DeleteInstanceType(ctx context.Context, req *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error) {
	response, err := c.deleteInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineService calls
// otterscale.instance.v1.InstanceService.CreateVirtualMachineService.
func (c *instanceServiceClient) CreateVirtualMachineService(ctx context.Context, req *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	response, err := c.createVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateVirtualMachineService calls
// otterscale.instance.v1.InstanceService.UpdateVirtualMachineService.
func (c *instanceServiceClient) UpdateVirtualMachineService(ctx context.Context, req *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	response, err := c.updateVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineService calls
// otterscale.instance.v1.InstanceService.DeleteVirtualMachineService.
func (c *instanceServiceClient) DeleteVirtualMachineService(ctx context.Context, req *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// InstanceServiceHandler is an implementation of the otterscale.instance.v1.InstanceService
// service.
type InstanceServiceHandler interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error)
	GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error)
	CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error)
	DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error)
	AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error)
	DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error)
	CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error)
	DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error)
	CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error)
	DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error)
	CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error)
	DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error)
	StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error)
	StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error)
	RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error)
	PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error)
	ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error)
	MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error)
	VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error)
	ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error)
	GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error)
	CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error)
	DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error)
	ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error)
	ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error)
	GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error)
	CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error)
	DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error)
	CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error)
}

// NewInstanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstanceServiceHandler(svc InstanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	instanceServiceMethods := v1.File_api_instance_v1_instance_proto.Services().ByName("InstanceService").Methods()
	instanceServiceCheckInfrastructureStatusHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCheckInfrastructureStatusProcedure,
		svc.CheckInfrastructureStatus,
		connect.WithSchema(instanceServiceMethods.ByName("CheckInfrastructureStatus")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListVirtualMachinesHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(instanceServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceGetVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceAttachVirtualMachineDiskHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceAttachVirtualMachineDiskProcedure,
		svc.AttachVirtualMachineDisk,
		connect.WithSchema(instanceServiceMethods.ByName("AttachVirtualMachineDisk")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDetachVirtualMachineDiskHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDetachVirtualMachineDiskProcedure,
		svc.DetachVirtualMachineDisk,
		connect.WithSchema(instanceServiceMethods.ByName("DetachVirtualMachineDisk")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateVirtualMachineCloneHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateVirtualMachineCloneProcedure,
		svc.CreateVirtualMachineClone,
		connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineClone")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteVirtualMachineCloneHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteVirtualMachineCloneProcedure,
		svc.DeleteVirtualMachineClone,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineClone")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateVirtualMachineSnapshotHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateVirtualMachineSnapshotProcedure,
		svc.CreateVirtualMachineSnapshot,
		connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteVirtualMachineSnapshotHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteVirtualMachineSnapshotProcedure,
		svc.DeleteVirtualMachineSnapshot,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateVirtualMachineRestoreHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateVirtualMachineRestoreProcedure,
		svc.CreateVirtualMachineRestore,
		connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineRestore")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteVirtualMachineRestoreHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteVirtualMachineRestoreProcedure,
		svc.DeleteVirtualMachineRestore,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineRestore")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceStartVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceStartVirtualMachineProcedure,
		svc.StartVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("StartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceStopVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceStopVirtualMachineProcedure,
		svc.StopVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("StopVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceRestartVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceRestartVirtualMachineProcedure,
		svc.RestartVirtualMachine,
		connect.WithSchema(instanceServiceMethods.ByName("RestartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServicePauseInstanceHandler := connect.NewUnaryHandlerSimple(
		InstanceServicePauseInstanceProcedure,
		svc.PauseInstance,
		connect.WithSchema(instanceServiceMethods.ByName("PauseInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceResumeInstanceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceResumeInstanceProcedure,
		svc.ResumeInstance,
		connect.WithSchema(instanceServiceMethods.ByName("ResumeInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceMigrateInstanceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceMigrateInstanceProcedure,
		svc.MigrateInstance,
		connect.WithSchema(instanceServiceMethods.ByName("MigrateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceVNCInstanceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceVNCInstanceProcedure,
		svc.VNCInstance,
		connect.WithSchema(instanceServiceMethods.ByName("VNCInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListDataVolumesHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceListDataVolumesProcedure,
		svc.ListDataVolumes,
		connect.WithSchema(instanceServiceMethods.ByName("ListDataVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceGetDataVolumeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(instanceServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateDataVolumeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(instanceServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteDataVolumeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceExtendDataVolumeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(instanceServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListInstanceTypesHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceListInstanceTypesProcedure,
		svc.ListInstanceTypes,
		connect.WithSchema(instanceServiceMethods.ByName("ListInstanceTypes")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceGetInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceGetInstanceTypeProcedure,
		svc.GetInstanceType,
		connect.WithSchema(instanceServiceMethods.ByName("GetInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateInstanceTypeProcedure,
		svc.CreateInstanceType,
		connect.WithSchema(instanceServiceMethods.ByName("CreateInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteInstanceTypeProcedure,
		svc.DeleteInstanceType,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceCreateVirtualMachineServiceProcedure,
		svc.CreateVirtualMachineService,
		connect.WithSchema(instanceServiceMethods.ByName("CreateVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUpdateVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceUpdateVirtualMachineServiceProcedure,
		svc.UpdateVirtualMachineService,
		connect.WithSchema(instanceServiceMethods.ByName("UpdateVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		InstanceServiceDeleteVirtualMachineServiceProcedure,
		svc.DeleteVirtualMachineService,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.instance.v1.InstanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstanceServiceCheckInfrastructureStatusProcedure:
			instanceServiceCheckInfrastructureStatusHandler.ServeHTTP(w, r)
		case InstanceServiceListVirtualMachinesProcedure:
			instanceServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case InstanceServiceGetVirtualMachineProcedure:
			instanceServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServiceCreateVirtualMachineProcedure:
			instanceServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteVirtualMachineProcedure:
			instanceServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServiceAttachVirtualMachineDiskProcedure:
			instanceServiceAttachVirtualMachineDiskHandler.ServeHTTP(w, r)
		case InstanceServiceDetachVirtualMachineDiskProcedure:
			instanceServiceDetachVirtualMachineDiskHandler.ServeHTTP(w, r)
		case InstanceServiceCreateVirtualMachineCloneProcedure:
			instanceServiceCreateVirtualMachineCloneHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteVirtualMachineCloneProcedure:
			instanceServiceDeleteVirtualMachineCloneHandler.ServeHTTP(w, r)
		case InstanceServiceCreateVirtualMachineSnapshotProcedure:
			instanceServiceCreateVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteVirtualMachineSnapshotProcedure:
			instanceServiceDeleteVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case InstanceServiceCreateVirtualMachineRestoreProcedure:
			instanceServiceCreateVirtualMachineRestoreHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteVirtualMachineRestoreProcedure:
			instanceServiceDeleteVirtualMachineRestoreHandler.ServeHTTP(w, r)
		case InstanceServiceStartVirtualMachineProcedure:
			instanceServiceStartVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServiceStopVirtualMachineProcedure:
			instanceServiceStopVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServiceRestartVirtualMachineProcedure:
			instanceServiceRestartVirtualMachineHandler.ServeHTTP(w, r)
		case InstanceServicePauseInstanceProcedure:
			instanceServicePauseInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceResumeInstanceProcedure:
			instanceServiceResumeInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceMigrateInstanceProcedure:
			instanceServiceMigrateInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceVNCInstanceProcedure:
			instanceServiceVNCInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceListDataVolumesProcedure:
			instanceServiceListDataVolumesHandler.ServeHTTP(w, r)
		case InstanceServiceGetDataVolumeProcedure:
			instanceServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case InstanceServiceCreateDataVolumeProcedure:
			instanceServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteDataVolumeProcedure:
			instanceServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case InstanceServiceExtendDataVolumeProcedure:
			instanceServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case InstanceServiceListInstanceTypesProcedure:
			instanceServiceListInstanceTypesHandler.ServeHTTP(w, r)
		case InstanceServiceGetInstanceTypeProcedure:
			instanceServiceGetInstanceTypeHandler.ServeHTTP(w, r)
		case InstanceServiceCreateInstanceTypeProcedure:
			instanceServiceCreateInstanceTypeHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteInstanceTypeProcedure:
			instanceServiceDeleteInstanceTypeHandler.ServeHTTP(w, r)
		case InstanceServiceCreateVirtualMachineServiceProcedure:
			instanceServiceCreateVirtualMachineServiceHandler.ServeHTTP(w, r)
		case InstanceServiceUpdateVirtualMachineServiceProcedure:
			instanceServiceUpdateVirtualMachineServiceHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteVirtualMachineServiceProcedure:
			instanceServiceDeleteVirtualMachineServiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstanceServiceHandler struct{}

func (UnimplementedInstanceServiceHandler) CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CheckInfrastructureStatus is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.ListVirtualMachines is not implemented"))
}

func (UnimplementedInstanceServiceHandler) GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.GetVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.AttachVirtualMachineDisk is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DetachVirtualMachineDisk is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateVirtualMachineClone is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteVirtualMachineClone is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateVirtualMachineRestore is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteVirtualMachineRestore is not implemented"))
}

func (UnimplementedInstanceServiceHandler) StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.StartVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.StopVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.RestartVirtualMachine is not implemented"))
}

func (UnimplementedInstanceServiceHandler) PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.PauseInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.ResumeInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.MigrateInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.VNCInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.ListDataVolumes is not implemented"))
}

func (UnimplementedInstanceServiceHandler) GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.GetDataVolume is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateDataVolume is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteDataVolume is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.ExtendDataVolume is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.ListInstanceTypes is not implemented"))
}

func (UnimplementedInstanceServiceHandler) GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.GetInstanceType is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateInstanceType is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteInstanceType is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.CreateVirtualMachineService is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.UpdateVirtualMachineService is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.instance.v1.InstanceService.DeleteVirtualMachineService is not implemented"))
}
