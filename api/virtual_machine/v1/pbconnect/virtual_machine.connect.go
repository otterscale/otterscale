// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/virtual_machine/v1/virtual_machine.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/otterscale/otterscale/api/application/v1"
	v1 "github.com/otterscale/otterscale/api/virtual_machine/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VirtualMachineServiceName is the fully-qualified name of the VirtualMachineService service.
	VirtualMachineServiceName = "otterscale.virtual_machine.v1.VirtualMachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualMachineServiceListVirtualMachinesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListVirtualMachines RPC.
	VirtualMachineServiceListVirtualMachinesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListVirtualMachines"
	// VirtualMachineServiceGetVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's GetVirtualMachine RPC.
	VirtualMachineServiceGetVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetVirtualMachine"
	// VirtualMachineServiceCreateVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachine RPC.
	VirtualMachineServiceCreateVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachine"
	// VirtualMachineServiceDeleteVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachine RPC.
	VirtualMachineServiceDeleteVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachine"
	// VirtualMachineServiceCloneVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's CloneVirtualMachine RPC.
	VirtualMachineServiceCloneVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CloneVirtualMachine"
	// VirtualMachineServiceStartInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's StartInstance RPC.
	VirtualMachineServiceStartInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/StartInstance"
	// VirtualMachineServiceStopInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's StopInstance RPC.
	VirtualMachineServiceStopInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/StopInstance"
	// VirtualMachineServiceRestartInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's RestartInstance RPC.
	VirtualMachineServiceRestartInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/RestartInstance"
	// VirtualMachineServicePauseInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's PauseInstance RPC.
	VirtualMachineServicePauseInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/PauseInstance"
	// VirtualMachineServiceResumeInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's ResumeInstance RPC.
	VirtualMachineServiceResumeInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ResumeInstance"
	// VirtualMachineServiceMigrateInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's MigrateInstance RPC.
	VirtualMachineServiceMigrateInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/MigrateInstance"
	// VirtualMachineServiceCreateServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateService RPC.
	VirtualMachineServiceCreateServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateService"
	// VirtualMachineServiceUpdateServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's UpdateService RPC.
	VirtualMachineServiceUpdateServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/UpdateService"
	// VirtualMachineServiceDeleteServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteService RPC.
	VirtualMachineServiceDeleteServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteService"
	// VirtualMachineServiceCreateSnapshotProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateSnapshot RPC.
	VirtualMachineServiceCreateSnapshotProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateSnapshot"
	// VirtualMachineServiceDeleteSnapshotProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteSnapshot RPC.
	VirtualMachineServiceDeleteSnapshotProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteSnapshot"
	// VirtualMachineServiceCreateRestoreProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateRestore RPC.
	VirtualMachineServiceCreateRestoreProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateRestore"
	// VirtualMachineServiceDeleteRestoreProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteRestore RPC.
	VirtualMachineServiceDeleteRestoreProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteRestore"
	// VirtualMachineServiceCreateDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateDisk RPC.
	VirtualMachineServiceCreateDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateDisk"
	// VirtualMachineServiceDeleteDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteDisk RPC.
	VirtualMachineServiceDeleteDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteDisk"
	// VirtualMachineServiceAttachDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's AttachDisk RPC.
	VirtualMachineServiceAttachDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/AttachDisk"
	// VirtualMachineServiceDetachDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's DetachDisk RPC.
	VirtualMachineServiceDetachDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DetachDisk"
	// VirtualMachineServiceListDataVolumesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListDataVolumes RPC.
	VirtualMachineServiceListDataVolumesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListDataVolumes"
	// VirtualMachineServiceGetDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's GetDataVolume RPC.
	VirtualMachineServiceGetDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetDataVolume"
	// VirtualMachineServiceCreateDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateDataVolume RPC.
	VirtualMachineServiceCreateDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateDataVolume"
	// VirtualMachineServiceDeleteDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteDataVolume RPC.
	VirtualMachineServiceDeleteDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteDataVolume"
	// VirtualMachineServiceExtendDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's ExtendDataVolume RPC.
	VirtualMachineServiceExtendDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ExtendDataVolume"
	// VirtualMachineServiceListClusterWideInstanceTypesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListClusterWideInstanceTypes RPC.
	VirtualMachineServiceListClusterWideInstanceTypesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListClusterWideInstanceTypes"
	// VirtualMachineServiceListInstanceTypesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListInstanceTypes RPC.
	VirtualMachineServiceListInstanceTypesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListInstanceTypes"
	// VirtualMachineServiceGetInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's GetInstanceType RPC.
	VirtualMachineServiceGetInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetInstanceType"
	// VirtualMachineServiceCreateInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateInstanceType RPC.
	VirtualMachineServiceCreateInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateInstanceType"
	// VirtualMachineServiceDeleteInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteInstanceType RPC.
	VirtualMachineServiceDeleteInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteInstanceType"
)

// VirtualMachineServiceClient is a client for the
// otterscale.virtual_machine.v1.VirtualMachineService service.
type VirtualMachineServiceClient interface {
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	RestartInstance(context.Context, *connect.Request[v1.RestartInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	PauseInstance(context.Context, *connect.Request[v1.PauseInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeInstance(context.Context, *connect.Request[v1.ResumeInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateInstance(context.Context, *connect.Request[v1.MigrateInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v11.Application_Service], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v11.Application_Service], error)
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[emptypb.Empty], error)
	CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.VirtualMachine_Snapshot], error)
	DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[emptypb.Empty], error)
	CreateRestore(context.Context, *connect.Request[v1.CreateRestoreRequest]) (*connect.Response[v1.VirtualMachine_Restore], error)
	DeleteRestore(context.Context, *connect.Request[v1.DeleteRestoreRequest]) (*connect.Response[emptypb.Empty], error)
	CreateDisk(context.Context, *connect.Request[v1.CreateDiskRequest]) (*connect.Response[v1.VirtualMachine_Disk], error)
	DeleteDisk(context.Context, *connect.Request[v1.DeleteDiskRequest]) (*connect.Response[emptypb.Empty], error)
	AttachDisk(context.Context, *connect.Request[v1.AttachDiskRequest]) (*connect.Response[emptypb.Empty], error)
	DetachDisk(context.Context, *connect.Request[v1.DetachDiskRequest]) (*connect.Response[emptypb.Empty], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ListClusterWideInstanceTypes(context.Context, *connect.Request[v1.ListClusterWideInstanceTypesRequest]) (*connect.Response[v1.ListClusterWideInstanceTypesResponse], error)
	ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error)
	GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewVirtualMachineServiceClient constructs a client for the
// otterscale.virtual_machine.v1.VirtualMachineService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualMachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	virtualMachineServiceMethods := v1.File_api_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	return &virtualMachineServiceClient{
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListVirtualMachinesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+VirtualMachineServiceGetVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		cloneVirtualMachine: connect.NewClient[v1.CloneVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceCloneVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CloneVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		startInstance: connect.NewClient[v1.StartInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceStartInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("StartInstance")),
			connect.WithClientOptions(opts...),
		),
		stopInstance: connect.NewClient[v1.StopInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceStopInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("StopInstance")),
			connect.WithClientOptions(opts...),
		),
		restartInstance: connect.NewClient[v1.RestartInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceRestartInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("RestartInstance")),
			connect.WithClientOptions(opts...),
		),
		pauseInstance: connect.NewClient[v1.PauseInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServicePauseInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("PauseInstance")),
			connect.WithClientOptions(opts...),
		),
		resumeInstance: connect.NewClient[v1.ResumeInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceResumeInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ResumeInstance")),
			connect.WithClientOptions(opts...),
		),
		migrateInstance: connect.NewClient[v1.MigrateInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceMigrateInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("MigrateInstance")),
			connect.WithClientOptions(opts...),
		),
		createService: connect.NewClient[v1.CreateServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+VirtualMachineServiceCreateServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateService")),
			connect.WithClientOptions(opts...),
		),
		updateService: connect.NewClient[v1.UpdateServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+VirtualMachineServiceUpdateServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateService")),
			connect.WithClientOptions(opts...),
		),
		deleteService: connect.NewClient[v1.DeleteServiceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteService")),
			connect.WithClientOptions(opts...),
		),
		createSnapshot: connect.NewClient[v1.CreateSnapshotRequest, v1.VirtualMachine_Snapshot](
			httpClient,
			baseURL+VirtualMachineServiceCreateSnapshotProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteSnapshot: connect.NewClient[v1.DeleteSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteSnapshotProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createRestore: connect.NewClient[v1.CreateRestoreRequest, v1.VirtualMachine_Restore](
			httpClient,
			baseURL+VirtualMachineServiceCreateRestoreProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateRestore")),
			connect.WithClientOptions(opts...),
		),
		deleteRestore: connect.NewClient[v1.DeleteRestoreRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteRestoreProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteRestore")),
			connect.WithClientOptions(opts...),
		),
		createDisk: connect.NewClient[v1.CreateDiskRequest, v1.VirtualMachine_Disk](
			httpClient,
			baseURL+VirtualMachineServiceCreateDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDisk")),
			connect.WithClientOptions(opts...),
		),
		deleteDisk: connect.NewClient[v1.DeleteDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDisk")),
			connect.WithClientOptions(opts...),
		),
		attachDisk: connect.NewClient[v1.AttachDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceAttachDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("AttachDisk")),
			connect.WithClientOptions(opts...),
		),
		detachDisk: connect.NewClient[v1.DetachDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDetachDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DetachDisk")),
			connect.WithClientOptions(opts...),
		),
		listDataVolumes: connect.NewClient[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListDataVolumesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListDataVolumes")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+VirtualMachineServiceGetDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+VirtualMachineServiceCreateDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceExtendDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listClusterWideInstanceTypes: connect.NewClient[v1.ListClusterWideInstanceTypesRequest, v1.ListClusterWideInstanceTypesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListClusterWideInstanceTypesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListClusterWideInstanceTypes")),
			connect.WithClientOptions(opts...),
		),
		listInstanceTypes: connect.NewClient[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListInstanceTypesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListInstanceTypes")),
			connect.WithClientOptions(opts...),
		),
		getInstanceType: connect.NewClient[v1.GetInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+VirtualMachineServiceGetInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetInstanceType")),
			connect.WithClientOptions(opts...),
		),
		createInstanceType: connect.NewClient[v1.CreateInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+VirtualMachineServiceCreateInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateInstanceType")),
			connect.WithClientOptions(opts...),
		),
		deleteInstanceType: connect.NewClient[v1.DeleteInstanceTypeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteInstanceType")),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualMachineServiceClient implements VirtualMachineServiceClient.
type virtualMachineServiceClient struct {
	listVirtualMachines          *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	getVirtualMachine            *connect.Client[v1.GetVirtualMachineRequest, v1.VirtualMachine]
	createVirtualMachine         *connect.Client[v1.CreateVirtualMachineRequest, v1.VirtualMachine]
	deleteVirtualMachine         *connect.Client[v1.DeleteVirtualMachineRequest, emptypb.Empty]
	cloneVirtualMachine          *connect.Client[v1.CloneVirtualMachineRequest, emptypb.Empty]
	startInstance                *connect.Client[v1.StartInstanceRequest, emptypb.Empty]
	stopInstance                 *connect.Client[v1.StopInstanceRequest, emptypb.Empty]
	restartInstance              *connect.Client[v1.RestartInstanceRequest, emptypb.Empty]
	pauseInstance                *connect.Client[v1.PauseInstanceRequest, emptypb.Empty]
	resumeInstance               *connect.Client[v1.ResumeInstanceRequest, emptypb.Empty]
	migrateInstance              *connect.Client[v1.MigrateInstanceRequest, emptypb.Empty]
	createService                *connect.Client[v1.CreateServiceRequest, v11.Application_Service]
	updateService                *connect.Client[v1.UpdateServiceRequest, v11.Application_Service]
	deleteService                *connect.Client[v1.DeleteServiceRequest, emptypb.Empty]
	createSnapshot               *connect.Client[v1.CreateSnapshotRequest, v1.VirtualMachine_Snapshot]
	deleteSnapshot               *connect.Client[v1.DeleteSnapshotRequest, emptypb.Empty]
	createRestore                *connect.Client[v1.CreateRestoreRequest, v1.VirtualMachine_Restore]
	deleteRestore                *connect.Client[v1.DeleteRestoreRequest, emptypb.Empty]
	createDisk                   *connect.Client[v1.CreateDiskRequest, v1.VirtualMachine_Disk]
	deleteDisk                   *connect.Client[v1.DeleteDiskRequest, emptypb.Empty]
	attachDisk                   *connect.Client[v1.AttachDiskRequest, emptypb.Empty]
	detachDisk                   *connect.Client[v1.DetachDiskRequest, emptypb.Empty]
	listDataVolumes              *connect.Client[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse]
	getDataVolume                *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	createDataVolume             *connect.Client[v1.CreateDataVolumeRequest, v1.DataVolume]
	deleteDataVolume             *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume             *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	listClusterWideInstanceTypes *connect.Client[v1.ListClusterWideInstanceTypesRequest, v1.ListClusterWideInstanceTypesResponse]
	listInstanceTypes            *connect.Client[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse]
	getInstanceType              *connect.Client[v1.GetInstanceTypeRequest, v1.InstanceType]
	createInstanceType           *connect.Client[v1.CreateInstanceTypeRequest, v1.InstanceType]
	deleteInstanceType           *connect.Client[v1.DeleteInstanceTypeRequest, emptypb.Empty]
}

// ListVirtualMachines calls
// otterscale.virtual_machine.v1.VirtualMachineService.ListVirtualMachines.
func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, req *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return c.listVirtualMachines.CallUnary(ctx, req)
}

// GetVirtualMachine calls otterscale.virtual_machine.v1.VirtualMachineService.GetVirtualMachine.
func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, req *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.getVirtualMachine.CallUnary(ctx, req)
}

// CreateVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachine.
func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, req *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return c.createVirtualMachine.CallUnary(ctx, req)
}

// DeleteVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine.
func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVirtualMachine.CallUnary(ctx, req)
}

// CloneVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.CloneVirtualMachine.
func (c *virtualMachineServiceClient) CloneVirtualMachine(ctx context.Context, req *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cloneVirtualMachine.CallUnary(ctx, req)
}

// StartInstance calls otterscale.virtual_machine.v1.VirtualMachineService.StartInstance.
func (c *virtualMachineServiceClient) StartInstance(ctx context.Context, req *connect.Request[v1.StartInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startInstance.CallUnary(ctx, req)
}

// StopInstance calls otterscale.virtual_machine.v1.VirtualMachineService.StopInstance.
func (c *virtualMachineServiceClient) StopInstance(ctx context.Context, req *connect.Request[v1.StopInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopInstance.CallUnary(ctx, req)
}

// RestartInstance calls otterscale.virtual_machine.v1.VirtualMachineService.RestartInstance.
func (c *virtualMachineServiceClient) RestartInstance(ctx context.Context, req *connect.Request[v1.RestartInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.restartInstance.CallUnary(ctx, req)
}

// PauseInstance calls otterscale.virtual_machine.v1.VirtualMachineService.PauseInstance.
func (c *virtualMachineServiceClient) PauseInstance(ctx context.Context, req *connect.Request[v1.PauseInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseInstance.CallUnary(ctx, req)
}

// ResumeInstance calls otterscale.virtual_machine.v1.VirtualMachineService.ResumeInstance.
func (c *virtualMachineServiceClient) ResumeInstance(ctx context.Context, req *connect.Request[v1.ResumeInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeInstance.CallUnary(ctx, req)
}

// MigrateInstance calls otterscale.virtual_machine.v1.VirtualMachineService.MigrateInstance.
func (c *virtualMachineServiceClient) MigrateInstance(ctx context.Context, req *connect.Request[v1.MigrateInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.migrateInstance.CallUnary(ctx, req)
}

// CreateService calls otterscale.virtual_machine.v1.VirtualMachineService.CreateService.
func (c *virtualMachineServiceClient) CreateService(ctx context.Context, req *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v11.Application_Service], error) {
	return c.createService.CallUnary(ctx, req)
}

// UpdateService calls otterscale.virtual_machine.v1.VirtualMachineService.UpdateService.
func (c *virtualMachineServiceClient) UpdateService(ctx context.Context, req *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v11.Application_Service], error) {
	return c.updateService.CallUnary(ctx, req)
}

// DeleteService calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteService.
func (c *virtualMachineServiceClient) DeleteService(ctx context.Context, req *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteService.CallUnary(ctx, req)
}

// CreateSnapshot calls otterscale.virtual_machine.v1.VirtualMachineService.CreateSnapshot.
func (c *virtualMachineServiceClient) CreateSnapshot(ctx context.Context, req *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.VirtualMachine_Snapshot], error) {
	return c.createSnapshot.CallUnary(ctx, req)
}

// DeleteSnapshot calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteSnapshot.
func (c *virtualMachineServiceClient) DeleteSnapshot(ctx context.Context, req *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteSnapshot.CallUnary(ctx, req)
}

// CreateRestore calls otterscale.virtual_machine.v1.VirtualMachineService.CreateRestore.
func (c *virtualMachineServiceClient) CreateRestore(ctx context.Context, req *connect.Request[v1.CreateRestoreRequest]) (*connect.Response[v1.VirtualMachine_Restore], error) {
	return c.createRestore.CallUnary(ctx, req)
}

// DeleteRestore calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteRestore.
func (c *virtualMachineServiceClient) DeleteRestore(ctx context.Context, req *connect.Request[v1.DeleteRestoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRestore.CallUnary(ctx, req)
}

// CreateDisk calls otterscale.virtual_machine.v1.VirtualMachineService.CreateDisk.
func (c *virtualMachineServiceClient) CreateDisk(ctx context.Context, req *connect.Request[v1.CreateDiskRequest]) (*connect.Response[v1.VirtualMachine_Disk], error) {
	return c.createDisk.CallUnary(ctx, req)
}

// DeleteDisk calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteDisk.
func (c *virtualMachineServiceClient) DeleteDisk(ctx context.Context, req *connect.Request[v1.DeleteDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDisk.CallUnary(ctx, req)
}

// AttachDisk calls otterscale.virtual_machine.v1.VirtualMachineService.AttachDisk.
func (c *virtualMachineServiceClient) AttachDisk(ctx context.Context, req *connect.Request[v1.AttachDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.attachDisk.CallUnary(ctx, req)
}

// DetachDisk calls otterscale.virtual_machine.v1.VirtualMachineService.DetachDisk.
func (c *virtualMachineServiceClient) DetachDisk(ctx context.Context, req *connect.Request[v1.DetachDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.detachDisk.CallUnary(ctx, req)
}

// ListDataVolumes calls otterscale.virtual_machine.v1.VirtualMachineService.ListDataVolumes.
func (c *virtualMachineServiceClient) ListDataVolumes(ctx context.Context, req *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return c.listDataVolumes.CallUnary(ctx, req)
}

// GetDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.GetDataVolume.
func (c *virtualMachineServiceClient) GetDataVolume(ctx context.Context, req *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.getDataVolume.CallUnary(ctx, req)
}

// CreateDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.CreateDataVolume.
func (c *virtualMachineServiceClient) CreateDataVolume(ctx context.Context, req *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return c.createDataVolume.CallUnary(ctx, req)
}

// DeleteDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteDataVolume.
func (c *virtualMachineServiceClient) DeleteDataVolume(ctx context.Context, req *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDataVolume.CallUnary(ctx, req)
}

// ExtendDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.ExtendDataVolume.
func (c *virtualMachineServiceClient) ExtendDataVolume(ctx context.Context, req *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.extendDataVolume.CallUnary(ctx, req)
}

// ListClusterWideInstanceTypes calls
// otterscale.virtual_machine.v1.VirtualMachineService.ListClusterWideInstanceTypes.
func (c *virtualMachineServiceClient) ListClusterWideInstanceTypes(ctx context.Context, req *connect.Request[v1.ListClusterWideInstanceTypesRequest]) (*connect.Response[v1.ListClusterWideInstanceTypesResponse], error) {
	return c.listClusterWideInstanceTypes.CallUnary(ctx, req)
}

// ListInstanceTypes calls otterscale.virtual_machine.v1.VirtualMachineService.ListInstanceTypes.
func (c *virtualMachineServiceClient) ListInstanceTypes(ctx context.Context, req *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error) {
	return c.listInstanceTypes.CallUnary(ctx, req)
}

// GetInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.GetInstanceType.
func (c *virtualMachineServiceClient) GetInstanceType(ctx context.Context, req *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return c.getInstanceType.CallUnary(ctx, req)
}

// CreateInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.CreateInstanceType.
func (c *virtualMachineServiceClient) CreateInstanceType(ctx context.Context, req *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return c.createInstanceType.CallUnary(ctx, req)
}

// DeleteInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteInstanceType.
func (c *virtualMachineServiceClient) DeleteInstanceType(ctx context.Context, req *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteInstanceType.CallUnary(ctx, req)
}

// VirtualMachineServiceHandler is an implementation of the
// otterscale.virtual_machine.v1.VirtualMachineService service.
type VirtualMachineServiceHandler interface {
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error)
	StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	RestartInstance(context.Context, *connect.Request[v1.RestartInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	PauseInstance(context.Context, *connect.Request[v1.PauseInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	ResumeInstance(context.Context, *connect.Request[v1.ResumeInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	MigrateInstance(context.Context, *connect.Request[v1.MigrateInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v11.Application_Service], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v11.Application_Service], error)
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[emptypb.Empty], error)
	CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.VirtualMachine_Snapshot], error)
	DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[emptypb.Empty], error)
	CreateRestore(context.Context, *connect.Request[v1.CreateRestoreRequest]) (*connect.Response[v1.VirtualMachine_Restore], error)
	DeleteRestore(context.Context, *connect.Request[v1.DeleteRestoreRequest]) (*connect.Response[emptypb.Empty], error)
	CreateDisk(context.Context, *connect.Request[v1.CreateDiskRequest]) (*connect.Response[v1.VirtualMachine_Disk], error)
	DeleteDisk(context.Context, *connect.Request[v1.DeleteDiskRequest]) (*connect.Response[emptypb.Empty], error)
	AttachDisk(context.Context, *connect.Request[v1.AttachDiskRequest]) (*connect.Response[emptypb.Empty], error)
	DetachDisk(context.Context, *connect.Request[v1.DetachDiskRequest]) (*connect.Response[emptypb.Empty], error)
	ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error)
	GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error)
	DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error)
	ListClusterWideInstanceTypes(context.Context, *connect.Request[v1.ListClusterWideInstanceTypesRequest]) (*connect.Response[v1.ListClusterWideInstanceTypesResponse], error)
	ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error)
	GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error)
	DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewVirtualMachineServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualMachineServiceHandler(svc VirtualMachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualMachineServiceMethods := v1.File_api_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	virtualMachineServiceListVirtualMachinesHandler := connect.NewUnaryHandler(
		VirtualMachineServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCloneVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCloneVirtualMachineProcedure,
		svc.CloneVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CloneVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceStartInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceStartInstanceProcedure,
		svc.StartInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("StartInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceStopInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceStopInstanceProcedure,
		svc.StopInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("StopInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceRestartInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceRestartInstanceProcedure,
		svc.RestartInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("RestartInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServicePauseInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServicePauseInstanceProcedure,
		svc.PauseInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("PauseInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceResumeInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceResumeInstanceProcedure,
		svc.ResumeInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ResumeInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceMigrateInstanceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceMigrateInstanceProcedure,
		svc.MigrateInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("MigrateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateServiceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateServiceProcedure,
		svc.CreateService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateService")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceUpdateServiceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceUpdateServiceProcedure,
		svc.UpdateService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateService")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteServiceHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteServiceProcedure,
		svc.DeleteService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteService")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateSnapshotHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateSnapshotProcedure,
		svc.CreateSnapshot,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteSnapshotHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteSnapshotProcedure,
		svc.DeleteSnapshot,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateRestoreHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateRestoreProcedure,
		svc.CreateRestore,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateRestore")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteRestoreHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteRestoreProcedure,
		svc.DeleteRestore,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteRestore")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateDiskHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateDiskProcedure,
		svc.CreateDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteDiskHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteDiskProcedure,
		svc.DeleteDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceAttachDiskHandler := connect.NewUnaryHandler(
		VirtualMachineServiceAttachDiskProcedure,
		svc.AttachDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("AttachDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDetachDiskHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDetachDiskProcedure,
		svc.DetachDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DetachDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListDataVolumesHandler := connect.NewUnaryHandler(
		VirtualMachineServiceListDataVolumesProcedure,
		svc.ListDataVolumes,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListDataVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetDataVolumeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateDataVolumeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteDataVolumeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceExtendDataVolumeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListClusterWideInstanceTypesHandler := connect.NewUnaryHandler(
		VirtualMachineServiceListClusterWideInstanceTypesProcedure,
		svc.ListClusterWideInstanceTypes,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListClusterWideInstanceTypes")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListInstanceTypesHandler := connect.NewUnaryHandler(
		VirtualMachineServiceListInstanceTypesProcedure,
		svc.ListInstanceTypes,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListInstanceTypes")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetInstanceTypeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceGetInstanceTypeProcedure,
		svc.GetInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateInstanceTypeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateInstanceTypeProcedure,
		svc.CreateInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteInstanceTypeHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteInstanceTypeProcedure,
		svc.DeleteInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.virtual_machine.v1.VirtualMachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualMachineServiceListVirtualMachinesProcedure:
			virtualMachineServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetVirtualMachineProcedure:
			virtualMachineServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineProcedure:
			virtualMachineServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineProcedure:
			virtualMachineServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCloneVirtualMachineProcedure:
			virtualMachineServiceCloneVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceStartInstanceProcedure:
			virtualMachineServiceStartInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceStopInstanceProcedure:
			virtualMachineServiceStopInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceRestartInstanceProcedure:
			virtualMachineServiceRestartInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServicePauseInstanceProcedure:
			virtualMachineServicePauseInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceResumeInstanceProcedure:
			virtualMachineServiceResumeInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceMigrateInstanceProcedure:
			virtualMachineServiceMigrateInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateServiceProcedure:
			virtualMachineServiceCreateServiceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceUpdateServiceProcedure:
			virtualMachineServiceUpdateServiceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteServiceProcedure:
			virtualMachineServiceDeleteServiceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateSnapshotProcedure:
			virtualMachineServiceCreateSnapshotHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteSnapshotProcedure:
			virtualMachineServiceDeleteSnapshotHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateRestoreProcedure:
			virtualMachineServiceCreateRestoreHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteRestoreProcedure:
			virtualMachineServiceDeleteRestoreHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateDiskProcedure:
			virtualMachineServiceCreateDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteDiskProcedure:
			virtualMachineServiceDeleteDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceAttachDiskProcedure:
			virtualMachineServiceAttachDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDetachDiskProcedure:
			virtualMachineServiceDetachDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListDataVolumesProcedure:
			virtualMachineServiceListDataVolumesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetDataVolumeProcedure:
			virtualMachineServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateDataVolumeProcedure:
			virtualMachineServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteDataVolumeProcedure:
			virtualMachineServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceExtendDataVolumeProcedure:
			virtualMachineServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListClusterWideInstanceTypesProcedure:
			virtualMachineServiceListClusterWideInstanceTypesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListInstanceTypesProcedure:
			virtualMachineServiceListInstanceTypesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetInstanceTypeProcedure:
			virtualMachineServiceGetInstanceTypeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateInstanceTypeProcedure:
			virtualMachineServiceCreateInstanceTypeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteInstanceTypeProcedure:
			virtualMachineServiceDeleteInstanceTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualMachineServiceHandler struct{}

func (UnimplementedVirtualMachineServiceHandler) ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListVirtualMachines is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.VirtualMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CloneVirtualMachine(context.Context, *connect.Request[v1.CloneVirtualMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CloneVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) StartInstance(context.Context, *connect.Request[v1.StartInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.StartInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) StopInstance(context.Context, *connect.Request[v1.StopInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.StopInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) RestartInstance(context.Context, *connect.Request[v1.RestartInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.RestartInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) PauseInstance(context.Context, *connect.Request[v1.PauseInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.PauseInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ResumeInstance(context.Context, *connect.Request[v1.ResumeInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ResumeInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) MigrateInstance(context.Context, *connect.Request[v1.MigrateInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.MigrateInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v11.Application_Service], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateService is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v11.Application_Service], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.UpdateService is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteService is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.VirtualMachine_Snapshot], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateSnapshot is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteSnapshot is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateRestore(context.Context, *connect.Request[v1.CreateRestoreRequest]) (*connect.Response[v1.VirtualMachine_Restore], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateRestore is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteRestore(context.Context, *connect.Request[v1.DeleteRestoreRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteRestore is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateDisk(context.Context, *connect.Request[v1.CreateDiskRequest]) (*connect.Response[v1.VirtualMachine_Disk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteDisk(context.Context, *connect.Request[v1.DeleteDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) AttachDisk(context.Context, *connect.Request[v1.AttachDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.AttachDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DetachDisk(context.Context, *connect.Request[v1.DetachDiskRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DetachDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListDataVolumes(context.Context, *connect.Request[v1.ListDataVolumesRequest]) (*connect.Response[v1.ListDataVolumesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListDataVolumes is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetDataVolume(context.Context, *connect.Request[v1.GetDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateDataVolume(context.Context, *connect.Request[v1.CreateDataVolumeRequest]) (*connect.Response[v1.DataVolume], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteDataVolume(context.Context, *connect.Request[v1.DeleteDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ExtendDataVolume(context.Context, *connect.Request[v1.ExtendDataVolumeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ExtendDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListClusterWideInstanceTypes(context.Context, *connect.Request[v1.ListClusterWideInstanceTypesRequest]) (*connect.Response[v1.ListClusterWideInstanceTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListClusterWideInstanceTypes is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListInstanceTypes(context.Context, *connect.Request[v1.ListInstanceTypesRequest]) (*connect.Response[v1.ListInstanceTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListInstanceTypes is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetInstanceType(context.Context, *connect.Request[v1.GetInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetInstanceType is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateInstanceType(context.Context, *connect.Request[v1.CreateInstanceTypeRequest]) (*connect.Response[v1.InstanceType], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateInstanceType is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteInstanceType(context.Context, *connect.Request[v1.DeleteInstanceTypeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteInstanceType is not implemented"))
}
