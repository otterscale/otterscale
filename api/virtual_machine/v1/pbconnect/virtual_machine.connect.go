// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/virtual_machine/v1/virtual_machine.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/otterscale/otterscale/api/application/v1"
	v1 "github.com/otterscale/otterscale/api/virtual_machine/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VirtualMachineServiceName is the fully-qualified name of the VirtualMachineService service.
	VirtualMachineServiceName = "otterscale.virtual_machine.v1.VirtualMachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualMachineServiceCheckInfrastructureStatusProcedure is the fully-qualified name of the
	// VirtualMachineService's CheckInfrastructureStatus RPC.
	VirtualMachineServiceCheckInfrastructureStatusProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CheckInfrastructureStatus"
	// VirtualMachineServiceListVirtualMachinesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListVirtualMachines RPC.
	VirtualMachineServiceListVirtualMachinesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListVirtualMachines"
	// VirtualMachineServiceGetVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's GetVirtualMachine RPC.
	VirtualMachineServiceGetVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetVirtualMachine"
	// VirtualMachineServiceCreateVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachine RPC.
	VirtualMachineServiceCreateVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachine"
	// VirtualMachineServiceDeleteVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachine RPC.
	VirtualMachineServiceDeleteVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachine"
	// VirtualMachineServiceAttachVirtualMachineDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's AttachVirtualMachineDisk RPC.
	VirtualMachineServiceAttachVirtualMachineDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/AttachVirtualMachineDisk"
	// VirtualMachineServiceDetachVirtualMachineDiskProcedure is the fully-qualified name of the
	// VirtualMachineService's DetachVirtualMachineDisk RPC.
	VirtualMachineServiceDetachVirtualMachineDiskProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DetachVirtualMachineDisk"
	// VirtualMachineServiceCreateVirtualMachineCloneProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachineClone RPC.
	VirtualMachineServiceCreateVirtualMachineCloneProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachineClone"
	// VirtualMachineServiceDeleteVirtualMachineCloneProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachineClone RPC.
	VirtualMachineServiceDeleteVirtualMachineCloneProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachineClone"
	// VirtualMachineServiceCreateVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachineSnapshot RPC.
	VirtualMachineServiceCreateVirtualMachineSnapshotProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachineSnapshot"
	// VirtualMachineServiceDeleteVirtualMachineSnapshotProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachineSnapshot RPC.
	VirtualMachineServiceDeleteVirtualMachineSnapshotProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachineSnapshot"
	// VirtualMachineServiceCreateVirtualMachineRestoreProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachineRestore RPC.
	VirtualMachineServiceCreateVirtualMachineRestoreProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachineRestore"
	// VirtualMachineServiceDeleteVirtualMachineRestoreProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachineRestore RPC.
	VirtualMachineServiceDeleteVirtualMachineRestoreProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachineRestore"
	// VirtualMachineServiceStartVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's StartVirtualMachine RPC.
	VirtualMachineServiceStartVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/StartVirtualMachine"
	// VirtualMachineServiceStopVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's StopVirtualMachine RPC.
	VirtualMachineServiceStopVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/StopVirtualMachine"
	// VirtualMachineServiceRestartVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's RestartVirtualMachine RPC.
	VirtualMachineServiceRestartVirtualMachineProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/RestartVirtualMachine"
	// VirtualMachineServicePauseInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's PauseInstance RPC.
	VirtualMachineServicePauseInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/PauseInstance"
	// VirtualMachineServiceResumeInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's ResumeInstance RPC.
	VirtualMachineServiceResumeInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ResumeInstance"
	// VirtualMachineServiceMigrateInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's MigrateInstance RPC.
	VirtualMachineServiceMigrateInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/MigrateInstance"
	// VirtualMachineServiceVNCInstanceProcedure is the fully-qualified name of the
	// VirtualMachineService's VNCInstance RPC.
	VirtualMachineServiceVNCInstanceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/VNCInstance"
	// VirtualMachineServiceListDataVolumesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListDataVolumes RPC.
	VirtualMachineServiceListDataVolumesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListDataVolumes"
	// VirtualMachineServiceGetDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's GetDataVolume RPC.
	VirtualMachineServiceGetDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetDataVolume"
	// VirtualMachineServiceCreateDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateDataVolume RPC.
	VirtualMachineServiceCreateDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateDataVolume"
	// VirtualMachineServiceDeleteDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteDataVolume RPC.
	VirtualMachineServiceDeleteDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteDataVolume"
	// VirtualMachineServiceExtendDataVolumeProcedure is the fully-qualified name of the
	// VirtualMachineService's ExtendDataVolume RPC.
	VirtualMachineServiceExtendDataVolumeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ExtendDataVolume"
	// VirtualMachineServiceListInstanceTypesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListInstanceTypes RPC.
	VirtualMachineServiceListInstanceTypesProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/ListInstanceTypes"
	// VirtualMachineServiceGetInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's GetInstanceType RPC.
	VirtualMachineServiceGetInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/GetInstanceType"
	// VirtualMachineServiceCreateInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateInstanceType RPC.
	VirtualMachineServiceCreateInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateInstanceType"
	// VirtualMachineServiceDeleteInstanceTypeProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteInstanceType RPC.
	VirtualMachineServiceDeleteInstanceTypeProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteInstanceType"
	// VirtualMachineServiceCreateVirtualMachineServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachineService RPC.
	VirtualMachineServiceCreateVirtualMachineServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/CreateVirtualMachineService"
	// VirtualMachineServiceUpdateVirtualMachineServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's UpdateVirtualMachineService RPC.
	VirtualMachineServiceUpdateVirtualMachineServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/UpdateVirtualMachineService"
	// VirtualMachineServiceDeleteVirtualMachineServiceProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachineService RPC.
	VirtualMachineServiceDeleteVirtualMachineServiceProcedure = "/otterscale.virtual_machine.v1.VirtualMachineService/DeleteVirtualMachineService"
)

// VirtualMachineServiceClient is a client for the
// otterscale.virtual_machine.v1.VirtualMachineService service.
type VirtualMachineServiceClient interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error)
	GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error)
	CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error)
	DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error)
	AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error)
	DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error)
	CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error)
	DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error)
	CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error)
	DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error)
	CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error)
	DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error)
	StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error)
	StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error)
	RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error)
	PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error)
	ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error)
	MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error)
	VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error)
	ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error)
	GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error)
	CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error)
	DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error)
	ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error)
	ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error)
	GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error)
	CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error)
	DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error)
	CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error)
}

// NewVirtualMachineServiceClient constructs a client for the
// otterscale.virtual_machine.v1.VirtualMachineService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualMachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	virtualMachineServiceMethods := v1.File_api_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	return &virtualMachineServiceClient{
		checkInfrastructureStatus: connect.NewClient[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse](
			httpClient,
			baseURL+VirtualMachineServiceCheckInfrastructureStatusProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CheckInfrastructureStatus")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListVirtualMachinesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+VirtualMachineServiceGetVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.VirtualMachine](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		attachVirtualMachineDisk: connect.NewClient[v1.AttachVirtualMachineDiskRequest, v1.VirtualMachine_Disk](
			httpClient,
			baseURL+VirtualMachineServiceAttachVirtualMachineDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("AttachVirtualMachineDisk")),
			connect.WithClientOptions(opts...),
		),
		detachVirtualMachineDisk: connect.NewClient[v1.DetachVirtualMachineDiskRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDetachVirtualMachineDiskProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DetachVirtualMachineDisk")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineClone: connect.NewClient[v1.CreateVirtualMachineCloneRequest, v1.VirtualMachine_Clone](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineCloneProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineClone")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineClone: connect.NewClient[v1.DeleteVirtualMachineCloneRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineCloneProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineClone")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineSnapshot: connect.NewClient[v1.CreateVirtualMachineSnapshotRequest, v1.VirtualMachine_Snapshot](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineSnapshotProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineSnapshot: connect.NewClient[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineSnapshotProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineRestore: connect.NewClient[v1.CreateVirtualMachineRestoreRequest, v1.VirtualMachine_Restore](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineRestoreProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineRestore")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineRestore: connect.NewClient[v1.DeleteVirtualMachineRestoreRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineRestoreProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineRestore")),
			connect.WithClientOptions(opts...),
		),
		startVirtualMachine: connect.NewClient[v1.StartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceStartVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("StartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		stopVirtualMachine: connect.NewClient[v1.StopVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceStopVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("StopVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		restartVirtualMachine: connect.NewClient[v1.RestartVirtualMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceRestartVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("RestartVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		pauseInstance: connect.NewClient[v1.PauseInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServicePauseInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("PauseInstance")),
			connect.WithClientOptions(opts...),
		),
		resumeInstance: connect.NewClient[v1.ResumeInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceResumeInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ResumeInstance")),
			connect.WithClientOptions(opts...),
		),
		migrateInstance: connect.NewClient[v1.MigrateInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceMigrateInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("MigrateInstance")),
			connect.WithClientOptions(opts...),
		),
		vNCInstance: connect.NewClient[v1.VNCInstanceRequest, v1.VNCInstanceResponse](
			httpClient,
			baseURL+VirtualMachineServiceVNCInstanceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("VNCInstance")),
			connect.WithClientOptions(opts...),
		),
		listDataVolumes: connect.NewClient[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListDataVolumesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListDataVolumes")),
			connect.WithClientOptions(opts...),
		),
		getDataVolume: connect.NewClient[v1.GetDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+VirtualMachineServiceGetDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetDataVolume")),
			connect.WithClientOptions(opts...),
		),
		createDataVolume: connect.NewClient[v1.CreateDataVolumeRequest, v1.DataVolume](
			httpClient,
			baseURL+VirtualMachineServiceCreateDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDataVolume")),
			connect.WithClientOptions(opts...),
		),
		deleteDataVolume: connect.NewClient[v1.DeleteDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDataVolume")),
			connect.WithClientOptions(opts...),
		),
		extendDataVolume: connect.NewClient[v1.ExtendDataVolumeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceExtendDataVolumeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ExtendDataVolume")),
			connect.WithClientOptions(opts...),
		),
		listInstanceTypes: connect.NewClient[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListInstanceTypesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListInstanceTypes")),
			connect.WithClientOptions(opts...),
		),
		getInstanceType: connect.NewClient[v1.GetInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+VirtualMachineServiceGetInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetInstanceType")),
			connect.WithClientOptions(opts...),
		),
		createInstanceType: connect.NewClient[v1.CreateInstanceTypeRequest, v1.InstanceType](
			httpClient,
			baseURL+VirtualMachineServiceCreateInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateInstanceType")),
			connect.WithClientOptions(opts...),
		),
		deleteInstanceType: connect.NewClient[v1.DeleteInstanceTypeRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteInstanceTypeProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteInstanceType")),
			connect.WithClientOptions(opts...),
		),
		createVirtualMachineService: connect.NewClient[v1.CreateVirtualMachineServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachineService: connect.NewClient[v1.UpdateVirtualMachineServiceRequest, v11.Application_Service](
			httpClient,
			baseURL+VirtualMachineServiceUpdateVirtualMachineServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachineService: connect.NewClient[v1.DeleteVirtualMachineServiceRequest, emptypb.Empty](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineServiceProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineService")),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualMachineServiceClient implements VirtualMachineServiceClient.
type virtualMachineServiceClient struct {
	checkInfrastructureStatus    *connect.Client[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse]
	listVirtualMachines          *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	getVirtualMachine            *connect.Client[v1.GetVirtualMachineRequest, v1.VirtualMachine]
	createVirtualMachine         *connect.Client[v1.CreateVirtualMachineRequest, v1.VirtualMachine]
	deleteVirtualMachine         *connect.Client[v1.DeleteVirtualMachineRequest, emptypb.Empty]
	attachVirtualMachineDisk     *connect.Client[v1.AttachVirtualMachineDiskRequest, v1.VirtualMachine_Disk]
	detachVirtualMachineDisk     *connect.Client[v1.DetachVirtualMachineDiskRequest, emptypb.Empty]
	createVirtualMachineClone    *connect.Client[v1.CreateVirtualMachineCloneRequest, v1.VirtualMachine_Clone]
	deleteVirtualMachineClone    *connect.Client[v1.DeleteVirtualMachineCloneRequest, emptypb.Empty]
	createVirtualMachineSnapshot *connect.Client[v1.CreateVirtualMachineSnapshotRequest, v1.VirtualMachine_Snapshot]
	deleteVirtualMachineSnapshot *connect.Client[v1.DeleteVirtualMachineSnapshotRequest, emptypb.Empty]
	createVirtualMachineRestore  *connect.Client[v1.CreateVirtualMachineRestoreRequest, v1.VirtualMachine_Restore]
	deleteVirtualMachineRestore  *connect.Client[v1.DeleteVirtualMachineRestoreRequest, emptypb.Empty]
	startVirtualMachine          *connect.Client[v1.StartVirtualMachineRequest, emptypb.Empty]
	stopVirtualMachine           *connect.Client[v1.StopVirtualMachineRequest, emptypb.Empty]
	restartVirtualMachine        *connect.Client[v1.RestartVirtualMachineRequest, emptypb.Empty]
	pauseInstance                *connect.Client[v1.PauseInstanceRequest, emptypb.Empty]
	resumeInstance               *connect.Client[v1.ResumeInstanceRequest, emptypb.Empty]
	migrateInstance              *connect.Client[v1.MigrateInstanceRequest, emptypb.Empty]
	vNCInstance                  *connect.Client[v1.VNCInstanceRequest, v1.VNCInstanceResponse]
	listDataVolumes              *connect.Client[v1.ListDataVolumesRequest, v1.ListDataVolumesResponse]
	getDataVolume                *connect.Client[v1.GetDataVolumeRequest, v1.DataVolume]
	createDataVolume             *connect.Client[v1.CreateDataVolumeRequest, v1.DataVolume]
	deleteDataVolume             *connect.Client[v1.DeleteDataVolumeRequest, emptypb.Empty]
	extendDataVolume             *connect.Client[v1.ExtendDataVolumeRequest, emptypb.Empty]
	listInstanceTypes            *connect.Client[v1.ListInstanceTypesRequest, v1.ListInstanceTypesResponse]
	getInstanceType              *connect.Client[v1.GetInstanceTypeRequest, v1.InstanceType]
	createInstanceType           *connect.Client[v1.CreateInstanceTypeRequest, v1.InstanceType]
	deleteInstanceType           *connect.Client[v1.DeleteInstanceTypeRequest, emptypb.Empty]
	createVirtualMachineService  *connect.Client[v1.CreateVirtualMachineServiceRequest, v11.Application_Service]
	updateVirtualMachineService  *connect.Client[v1.UpdateVirtualMachineServiceRequest, v11.Application_Service]
	deleteVirtualMachineService  *connect.Client[v1.DeleteVirtualMachineServiceRequest, emptypb.Empty]
}

// CheckInfrastructureStatus calls
// otterscale.virtual_machine.v1.VirtualMachineService.CheckInfrastructureStatus.
func (c *virtualMachineServiceClient) CheckInfrastructureStatus(ctx context.Context, req *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	response, err := c.checkInfrastructureStatus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListVirtualMachines calls
// otterscale.virtual_machine.v1.VirtualMachineService.ListVirtualMachines.
func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, req *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error) {
	response, err := c.listVirtualMachines.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetVirtualMachine calls otterscale.virtual_machine.v1.VirtualMachineService.GetVirtualMachine.
func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, req *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error) {
	response, err := c.getVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachine.
func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, req *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error) {
	response, err := c.createVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine.
func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, req *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AttachVirtualMachineDisk calls
// otterscale.virtual_machine.v1.VirtualMachineService.AttachVirtualMachineDisk.
func (c *virtualMachineServiceClient) AttachVirtualMachineDisk(ctx context.Context, req *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error) {
	response, err := c.attachVirtualMachineDisk.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DetachVirtualMachineDisk calls
// otterscale.virtual_machine.v1.VirtualMachineService.DetachVirtualMachineDisk.
func (c *virtualMachineServiceClient) DetachVirtualMachineDisk(ctx context.Context, req *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error) {
	response, err := c.detachVirtualMachineDisk.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineClone calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineClone.
func (c *virtualMachineServiceClient) CreateVirtualMachineClone(ctx context.Context, req *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error) {
	response, err := c.createVirtualMachineClone.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineClone calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineClone.
func (c *virtualMachineServiceClient) DeleteVirtualMachineClone(ctx context.Context, req *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineClone.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineSnapshot calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineSnapshot.
func (c *virtualMachineServiceClient) CreateVirtualMachineSnapshot(ctx context.Context, req *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error) {
	response, err := c.createVirtualMachineSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineSnapshot calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineSnapshot.
func (c *virtualMachineServiceClient) DeleteVirtualMachineSnapshot(ctx context.Context, req *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineSnapshot.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineRestore calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineRestore.
func (c *virtualMachineServiceClient) CreateVirtualMachineRestore(ctx context.Context, req *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error) {
	response, err := c.createVirtualMachineRestore.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineRestore calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineRestore.
func (c *virtualMachineServiceClient) DeleteVirtualMachineRestore(ctx context.Context, req *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineRestore.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// StartVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.StartVirtualMachine.
func (c *virtualMachineServiceClient) StartVirtualMachine(ctx context.Context, req *v1.StartVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.startVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// StopVirtualMachine calls otterscale.virtual_machine.v1.VirtualMachineService.StopVirtualMachine.
func (c *virtualMachineServiceClient) StopVirtualMachine(ctx context.Context, req *v1.StopVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.stopVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RestartVirtualMachine calls
// otterscale.virtual_machine.v1.VirtualMachineService.RestartVirtualMachine.
func (c *virtualMachineServiceClient) RestartVirtualMachine(ctx context.Context, req *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error) {
	response, err := c.restartVirtualMachine.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// PauseInstance calls otterscale.virtual_machine.v1.VirtualMachineService.PauseInstance.
func (c *virtualMachineServiceClient) PauseInstance(ctx context.Context, req *v1.PauseInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.pauseInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ResumeInstance calls otterscale.virtual_machine.v1.VirtualMachineService.ResumeInstance.
func (c *virtualMachineServiceClient) ResumeInstance(ctx context.Context, req *v1.ResumeInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.resumeInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// MigrateInstance calls otterscale.virtual_machine.v1.VirtualMachineService.MigrateInstance.
func (c *virtualMachineServiceClient) MigrateInstance(ctx context.Context, req *v1.MigrateInstanceRequest) (*emptypb.Empty, error) {
	response, err := c.migrateInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// VNCInstance calls otterscale.virtual_machine.v1.VirtualMachineService.VNCInstance.
func (c *virtualMachineServiceClient) VNCInstance(ctx context.Context, req *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error) {
	response, err := c.vNCInstance.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListDataVolumes calls otterscale.virtual_machine.v1.VirtualMachineService.ListDataVolumes.
func (c *virtualMachineServiceClient) ListDataVolumes(ctx context.Context, req *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error) {
	response, err := c.listDataVolumes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.GetDataVolume.
func (c *virtualMachineServiceClient) GetDataVolume(ctx context.Context, req *v1.GetDataVolumeRequest) (*v1.DataVolume, error) {
	response, err := c.getDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.CreateDataVolume.
func (c *virtualMachineServiceClient) CreateDataVolume(ctx context.Context, req *v1.CreateDataVolumeRequest) (*v1.DataVolume, error) {
	response, err := c.createDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteDataVolume.
func (c *virtualMachineServiceClient) DeleteDataVolume(ctx context.Context, req *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error) {
	response, err := c.deleteDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ExtendDataVolume calls otterscale.virtual_machine.v1.VirtualMachineService.ExtendDataVolume.
func (c *virtualMachineServiceClient) ExtendDataVolume(ctx context.Context, req *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error) {
	response, err := c.extendDataVolume.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListInstanceTypes calls otterscale.virtual_machine.v1.VirtualMachineService.ListInstanceTypes.
func (c *virtualMachineServiceClient) ListInstanceTypes(ctx context.Context, req *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error) {
	response, err := c.listInstanceTypes.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.GetInstanceType.
func (c *virtualMachineServiceClient) GetInstanceType(ctx context.Context, req *v1.GetInstanceTypeRequest) (*v1.InstanceType, error) {
	response, err := c.getInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.CreateInstanceType.
func (c *virtualMachineServiceClient) CreateInstanceType(ctx context.Context, req *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error) {
	response, err := c.createInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteInstanceType calls otterscale.virtual_machine.v1.VirtualMachineService.DeleteInstanceType.
func (c *virtualMachineServiceClient) DeleteInstanceType(ctx context.Context, req *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error) {
	response, err := c.deleteInstanceType.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateVirtualMachineService calls
// otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineService.
func (c *virtualMachineServiceClient) CreateVirtualMachineService(ctx context.Context, req *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	response, err := c.createVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateVirtualMachineService calls
// otterscale.virtual_machine.v1.VirtualMachineService.UpdateVirtualMachineService.
func (c *virtualMachineServiceClient) UpdateVirtualMachineService(ctx context.Context, req *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	response, err := c.updateVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteVirtualMachineService calls
// otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineService.
func (c *virtualMachineServiceClient) DeleteVirtualMachineService(ctx context.Context, req *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error) {
	response, err := c.deleteVirtualMachineService.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// VirtualMachineServiceHandler is an implementation of the
// otterscale.virtual_machine.v1.VirtualMachineService service.
type VirtualMachineServiceHandler interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error)
	GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error)
	CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error)
	DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error)
	AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error)
	DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error)
	CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error)
	DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error)
	CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error)
	DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error)
	CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error)
	DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error)
	StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error)
	StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error)
	RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error)
	PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error)
	ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error)
	MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error)
	VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error)
	ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error)
	GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error)
	CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error)
	DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error)
	ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error)
	ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error)
	GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error)
	CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error)
	DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error)
	CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error)
	DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error)
}

// NewVirtualMachineServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualMachineServiceHandler(svc VirtualMachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualMachineServiceMethods := v1.File_api_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	virtualMachineServiceCheckInfrastructureStatusHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCheckInfrastructureStatusProcedure,
		svc.CheckInfrastructureStatus,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CheckInfrastructureStatus")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListVirtualMachinesHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceAttachVirtualMachineDiskHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceAttachVirtualMachineDiskProcedure,
		svc.AttachVirtualMachineDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("AttachVirtualMachineDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDetachVirtualMachineDiskHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDetachVirtualMachineDiskProcedure,
		svc.DetachVirtualMachineDisk,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DetachVirtualMachineDisk")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineCloneHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateVirtualMachineCloneProcedure,
		svc.CreateVirtualMachineClone,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineClone")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineCloneHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteVirtualMachineCloneProcedure,
		svc.DeleteVirtualMachineClone,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineClone")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineSnapshotHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateVirtualMachineSnapshotProcedure,
		svc.CreateVirtualMachineSnapshot,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineSnapshotHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteVirtualMachineSnapshotProcedure,
		svc.DeleteVirtualMachineSnapshot,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineRestoreHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateVirtualMachineRestoreProcedure,
		svc.CreateVirtualMachineRestore,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineRestore")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineRestoreHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteVirtualMachineRestoreProcedure,
		svc.DeleteVirtualMachineRestore,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineRestore")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceStartVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceStartVirtualMachineProcedure,
		svc.StartVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("StartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceStopVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceStopVirtualMachineProcedure,
		svc.StopVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("StopVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceRestartVirtualMachineHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceRestartVirtualMachineProcedure,
		svc.RestartVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("RestartVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServicePauseInstanceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServicePauseInstanceProcedure,
		svc.PauseInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("PauseInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceResumeInstanceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceResumeInstanceProcedure,
		svc.ResumeInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ResumeInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceMigrateInstanceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceMigrateInstanceProcedure,
		svc.MigrateInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("MigrateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceVNCInstanceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceVNCInstanceProcedure,
		svc.VNCInstance,
		connect.WithSchema(virtualMachineServiceMethods.ByName("VNCInstance")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListDataVolumesHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceListDataVolumesProcedure,
		svc.ListDataVolumes,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListDataVolumes")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetDataVolumeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceGetDataVolumeProcedure,
		svc.GetDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateDataVolumeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateDataVolumeProcedure,
		svc.CreateDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteDataVolumeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteDataVolumeProcedure,
		svc.DeleteDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceExtendDataVolumeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceExtendDataVolumeProcedure,
		svc.ExtendDataVolume,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ExtendDataVolume")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListInstanceTypesHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceListInstanceTypesProcedure,
		svc.ListInstanceTypes,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListInstanceTypes")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceGetInstanceTypeProcedure,
		svc.GetInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateInstanceTypeProcedure,
		svc.CreateInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteInstanceTypeHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteInstanceTypeProcedure,
		svc.DeleteInstanceType,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteInstanceType")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceCreateVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceCreateVirtualMachineServiceProcedure,
		svc.CreateVirtualMachineService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceUpdateVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceUpdateVirtualMachineServiceProcedure,
		svc.UpdateVirtualMachineService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineServiceHandler := connect.NewUnaryHandlerSimple(
		VirtualMachineServiceDeleteVirtualMachineServiceProcedure,
		svc.DeleteVirtualMachineService,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachineService")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.virtual_machine.v1.VirtualMachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualMachineServiceCheckInfrastructureStatusProcedure:
			virtualMachineServiceCheckInfrastructureStatusHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListVirtualMachinesProcedure:
			virtualMachineServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetVirtualMachineProcedure:
			virtualMachineServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineProcedure:
			virtualMachineServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineProcedure:
			virtualMachineServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceAttachVirtualMachineDiskProcedure:
			virtualMachineServiceAttachVirtualMachineDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDetachVirtualMachineDiskProcedure:
			virtualMachineServiceDetachVirtualMachineDiskHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineCloneProcedure:
			virtualMachineServiceCreateVirtualMachineCloneHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineCloneProcedure:
			virtualMachineServiceDeleteVirtualMachineCloneHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineSnapshotProcedure:
			virtualMachineServiceCreateVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineSnapshotProcedure:
			virtualMachineServiceDeleteVirtualMachineSnapshotHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineRestoreProcedure:
			virtualMachineServiceCreateVirtualMachineRestoreHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineRestoreProcedure:
			virtualMachineServiceDeleteVirtualMachineRestoreHandler.ServeHTTP(w, r)
		case VirtualMachineServiceStartVirtualMachineProcedure:
			virtualMachineServiceStartVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceStopVirtualMachineProcedure:
			virtualMachineServiceStopVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceRestartVirtualMachineProcedure:
			virtualMachineServiceRestartVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServicePauseInstanceProcedure:
			virtualMachineServicePauseInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceResumeInstanceProcedure:
			virtualMachineServiceResumeInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceMigrateInstanceProcedure:
			virtualMachineServiceMigrateInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceVNCInstanceProcedure:
			virtualMachineServiceVNCInstanceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListDataVolumesProcedure:
			virtualMachineServiceListDataVolumesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetDataVolumeProcedure:
			virtualMachineServiceGetDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateDataVolumeProcedure:
			virtualMachineServiceCreateDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteDataVolumeProcedure:
			virtualMachineServiceDeleteDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceExtendDataVolumeProcedure:
			virtualMachineServiceExtendDataVolumeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListInstanceTypesProcedure:
			virtualMachineServiceListInstanceTypesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetInstanceTypeProcedure:
			virtualMachineServiceGetInstanceTypeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateInstanceTypeProcedure:
			virtualMachineServiceCreateInstanceTypeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteInstanceTypeProcedure:
			virtualMachineServiceDeleteInstanceTypeHandler.ServeHTTP(w, r)
		case VirtualMachineServiceCreateVirtualMachineServiceProcedure:
			virtualMachineServiceCreateVirtualMachineServiceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceUpdateVirtualMachineServiceProcedure:
			virtualMachineServiceUpdateVirtualMachineServiceHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineServiceProcedure:
			virtualMachineServiceDeleteVirtualMachineServiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualMachineServiceHandler struct{}

func (UnimplementedVirtualMachineServiceHandler) CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CheckInfrastructureStatus is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListVirtualMachines(context.Context, *v1.ListVirtualMachinesRequest) (*v1.ListVirtualMachinesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListVirtualMachines is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetVirtualMachine(context.Context, *v1.GetVirtualMachineRequest) (*v1.VirtualMachine, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachine(context.Context, *v1.CreateVirtualMachineRequest) (*v1.VirtualMachine, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachine(context.Context, *v1.DeleteVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) AttachVirtualMachineDisk(context.Context, *v1.AttachVirtualMachineDiskRequest) (*v1.VirtualMachine_Disk, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.AttachVirtualMachineDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DetachVirtualMachineDisk(context.Context, *v1.DetachVirtualMachineDiskRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DetachVirtualMachineDisk is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachineClone(context.Context, *v1.CreateVirtualMachineCloneRequest) (*v1.VirtualMachine_Clone, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineClone is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachineClone(context.Context, *v1.DeleteVirtualMachineCloneRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineClone is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachineSnapshot(context.Context, *v1.CreateVirtualMachineSnapshotRequest) (*v1.VirtualMachine_Snapshot, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachineSnapshot(context.Context, *v1.DeleteVirtualMachineSnapshotRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineSnapshot is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachineRestore(context.Context, *v1.CreateVirtualMachineRestoreRequest) (*v1.VirtualMachine_Restore, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineRestore is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachineRestore(context.Context, *v1.DeleteVirtualMachineRestoreRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineRestore is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) StartVirtualMachine(context.Context, *v1.StartVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.StartVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) StopVirtualMachine(context.Context, *v1.StopVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.StopVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) RestartVirtualMachine(context.Context, *v1.RestartVirtualMachineRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.RestartVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) PauseInstance(context.Context, *v1.PauseInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.PauseInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ResumeInstance(context.Context, *v1.ResumeInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ResumeInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) MigrateInstance(context.Context, *v1.MigrateInstanceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.MigrateInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) VNCInstance(context.Context, *v1.VNCInstanceRequest) (*v1.VNCInstanceResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.VNCInstance is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListDataVolumes(context.Context, *v1.ListDataVolumesRequest) (*v1.ListDataVolumesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListDataVolumes is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetDataVolume(context.Context, *v1.GetDataVolumeRequest) (*v1.DataVolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateDataVolume(context.Context, *v1.CreateDataVolumeRequest) (*v1.DataVolume, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteDataVolume(context.Context, *v1.DeleteDataVolumeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ExtendDataVolume(context.Context, *v1.ExtendDataVolumeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ExtendDataVolume is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListInstanceTypes(context.Context, *v1.ListInstanceTypesRequest) (*v1.ListInstanceTypesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.ListInstanceTypes is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetInstanceType(context.Context, *v1.GetInstanceTypeRequest) (*v1.InstanceType, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.GetInstanceType is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateInstanceType(context.Context, *v1.CreateInstanceTypeRequest) (*v1.InstanceType, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateInstanceType is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteInstanceType(context.Context, *v1.DeleteInstanceTypeRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteInstanceType is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachineService(context.Context, *v1.CreateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.CreateVirtualMachineService is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) UpdateVirtualMachineService(context.Context, *v1.UpdateVirtualMachineServiceRequest) (*v11.Application_Service, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.UpdateVirtualMachineService is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachineService(context.Context, *v1.DeleteVirtualMachineServiceRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.virtual_machine.v1.VirtualMachineService.DeleteVirtualMachineService is not implemented"))
}
