// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/application/v1/application.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/application/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "otterscale.application.v1.ApplicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationServiceListNamespacesProcedure is the fully-qualified name of the ApplicationService's
	// ListNamespaces RPC.
	ApplicationServiceListNamespacesProcedure = "/otterscale.application.v1.ApplicationService/ListNamespaces"
	// ApplicationServiceListApplicationsProcedure is the fully-qualified name of the
	// ApplicationService's ListApplications RPC.
	ApplicationServiceListApplicationsProcedure = "/otterscale.application.v1.ApplicationService/ListApplications"
	// ApplicationServiceGetApplicationProcedure is the fully-qualified name of the ApplicationService's
	// GetApplication RPC.
	ApplicationServiceGetApplicationProcedure = "/otterscale.application.v1.ApplicationService/GetApplication"
	// ApplicationServiceRestartApplicationProcedure is the fully-qualified name of the
	// ApplicationService's RestartApplication RPC.
	ApplicationServiceRestartApplicationProcedure = "/otterscale.application.v1.ApplicationService/RestartApplication"
	// ApplicationServiceScaleApplicationProcedure is the fully-qualified name of the
	// ApplicationService's ScaleApplication RPC.
	ApplicationServiceScaleApplicationProcedure = "/otterscale.application.v1.ApplicationService/ScaleApplication"
	// ApplicationServiceDeleteApplicationPodProcedure is the fully-qualified name of the
	// ApplicationService's DeleteApplicationPod RPC.
	ApplicationServiceDeleteApplicationPodProcedure = "/otterscale.application.v1.ApplicationService/DeleteApplicationPod"
	// ApplicationServiceWatchLogsProcedure is the fully-qualified name of the ApplicationService's
	// WatchLogs RPC.
	ApplicationServiceWatchLogsProcedure = "/otterscale.application.v1.ApplicationService/WatchLogs"
	// ApplicationServiceExecuteTTYProcedure is the fully-qualified name of the ApplicationService's
	// ExecuteTTY RPC.
	ApplicationServiceExecuteTTYProcedure = "/otterscale.application.v1.ApplicationService/ExecuteTTY"
	// ApplicationServiceWriteTTYProcedure is the fully-qualified name of the ApplicationService's
	// WriteTTY RPC.
	ApplicationServiceWriteTTYProcedure = "/otterscale.application.v1.ApplicationService/WriteTTY"
	// ApplicationServiceListReleasesProcedure is the fully-qualified name of the ApplicationService's
	// ListReleases RPC.
	ApplicationServiceListReleasesProcedure = "/otterscale.application.v1.ApplicationService/ListReleases"
	// ApplicationServiceCreateReleaseProcedure is the fully-qualified name of the ApplicationService's
	// CreateRelease RPC.
	ApplicationServiceCreateReleaseProcedure = "/otterscale.application.v1.ApplicationService/CreateRelease"
	// ApplicationServiceUpdateReleaseProcedure is the fully-qualified name of the ApplicationService's
	// UpdateRelease RPC.
	ApplicationServiceUpdateReleaseProcedure = "/otterscale.application.v1.ApplicationService/UpdateRelease"
	// ApplicationServiceDeleteReleaseProcedure is the fully-qualified name of the ApplicationService's
	// DeleteRelease RPC.
	ApplicationServiceDeleteReleaseProcedure = "/otterscale.application.v1.ApplicationService/DeleteRelease"
	// ApplicationServiceRollbackReleaseProcedure is the fully-qualified name of the
	// ApplicationService's RollbackRelease RPC.
	ApplicationServiceRollbackReleaseProcedure = "/otterscale.application.v1.ApplicationService/RollbackRelease"
	// ApplicationServiceListChartsProcedure is the fully-qualified name of the ApplicationService's
	// ListCharts RPC.
	ApplicationServiceListChartsProcedure = "/otterscale.application.v1.ApplicationService/ListCharts"
	// ApplicationServiceGetChartProcedure is the fully-qualified name of the ApplicationService's
	// GetChart RPC.
	ApplicationServiceGetChartProcedure = "/otterscale.application.v1.ApplicationService/GetChart"
	// ApplicationServiceGetChartMetadataProcedure is the fully-qualified name of the
	// ApplicationService's GetChartMetadata RPC.
	ApplicationServiceGetChartMetadataProcedure = "/otterscale.application.v1.ApplicationService/GetChartMetadata"
	// ApplicationServiceListStorageClassesProcedure is the fully-qualified name of the
	// ApplicationService's ListStorageClasses RPC.
	ApplicationServiceListStorageClassesProcedure = "/otterscale.application.v1.ApplicationService/ListStorageClasses"
)

// ApplicationServiceClient is a client for the otterscale.application.v1.ApplicationService
// service.
type ApplicationServiceClient interface {
	ListNamespaces(context.Context, *v1.ListNamespacesRequest) (*v1.ListNamespacesResponse, error)
	ListApplications(context.Context, *v1.ListApplicationsRequest) (*v1.ListApplicationsResponse, error)
	GetApplication(context.Context, *v1.GetApplicationRequest) (*v1.Application, error)
	RestartApplication(context.Context, *v1.RestartApplicationRequest) (*emptypb.Empty, error)
	ScaleApplication(context.Context, *v1.ScaleApplicationRequest) (*emptypb.Empty, error)
	DeleteApplicationPod(context.Context, *v1.DeleteApplicationPodRequest) (*emptypb.Empty, error)
	WatchLogs(context.Context, *v1.WatchLogsRequest) (*connect.ServerStreamForClient[v1.WatchLogsResponse], error)
	ExecuteTTY(context.Context, *v1.ExecuteTTYRequest) (*connect.ServerStreamForClient[v1.ExecuteTTYResponse], error)
	WriteTTY(context.Context, *v1.WriteTTYRequest) (*emptypb.Empty, error)
	ListReleases(context.Context, *v1.ListReleasesRequest) (*v1.ListReleasesResponse, error)
	CreateRelease(context.Context, *v1.CreateReleaseRequest) (*v1.Application_Release, error)
	UpdateRelease(context.Context, *v1.UpdateReleaseRequest) (*v1.Application_Release, error)
	DeleteRelease(context.Context, *v1.DeleteReleaseRequest) (*emptypb.Empty, error)
	RollbackRelease(context.Context, *v1.RollbackReleaseRequest) (*emptypb.Empty, error)
	ListCharts(context.Context, *v1.ListChartsRequest) (*v1.ListChartsResponse, error)
	GetChart(context.Context, *v1.GetChartRequest) (*v1.Application_Chart, error)
	GetChartMetadata(context.Context, *v1.GetChartMetadataRequest) (*v1.Application_Chart_Metadata, error)
	ListStorageClasses(context.Context, *v1.ListStorageClassesRequest) (*v1.ListStorageClassesResponse, error)
}

// NewApplicationServiceClient constructs a client for the
// otterscale.application.v1.ApplicationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	applicationServiceMethods := v1.File_api_application_v1_application_proto.Services().ByName("ApplicationService").Methods()
	return &applicationServiceClient{
		listNamespaces: connect.NewClient[v1.ListNamespacesRequest, v1.ListNamespacesResponse](
			httpClient,
			baseURL+ApplicationServiceListNamespacesProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListNamespaces")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+ApplicationServiceListApplicationsProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.Application](
			httpClient,
			baseURL+ApplicationServiceGetApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
		restartApplication: connect.NewClient[v1.RestartApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceRestartApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("RestartApplication")),
			connect.WithClientOptions(opts...),
		),
		scaleApplication: connect.NewClient[v1.ScaleApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceScaleApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ScaleApplication")),
			connect.WithClientOptions(opts...),
		),
		deleteApplicationPod: connect.NewClient[v1.DeleteApplicationPodRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceDeleteApplicationPodProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("DeleteApplicationPod")),
			connect.WithClientOptions(opts...),
		),
		watchLogs: connect.NewClient[v1.WatchLogsRequest, v1.WatchLogsResponse](
			httpClient,
			baseURL+ApplicationServiceWatchLogsProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("WatchLogs")),
			connect.WithClientOptions(opts...),
		),
		executeTTY: connect.NewClient[v1.ExecuteTTYRequest, v1.ExecuteTTYResponse](
			httpClient,
			baseURL+ApplicationServiceExecuteTTYProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ExecuteTTY")),
			connect.WithClientOptions(opts...),
		),
		writeTTY: connect.NewClient[v1.WriteTTYRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceWriteTTYProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("WriteTTY")),
			connect.WithClientOptions(opts...),
		),
		listReleases: connect.NewClient[v1.ListReleasesRequest, v1.ListReleasesResponse](
			httpClient,
			baseURL+ApplicationServiceListReleasesProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListReleases")),
			connect.WithClientOptions(opts...),
		),
		createRelease: connect.NewClient[v1.CreateReleaseRequest, v1.Application_Release](
			httpClient,
			baseURL+ApplicationServiceCreateReleaseProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("CreateRelease")),
			connect.WithClientOptions(opts...),
		),
		updateRelease: connect.NewClient[v1.UpdateReleaseRequest, v1.Application_Release](
			httpClient,
			baseURL+ApplicationServiceUpdateReleaseProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("UpdateRelease")),
			connect.WithClientOptions(opts...),
		),
		deleteRelease: connect.NewClient[v1.DeleteReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceDeleteReleaseProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("DeleteRelease")),
			connect.WithClientOptions(opts...),
		),
		rollbackRelease: connect.NewClient[v1.RollbackReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceRollbackReleaseProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("RollbackRelease")),
			connect.WithClientOptions(opts...),
		),
		listCharts: connect.NewClient[v1.ListChartsRequest, v1.ListChartsResponse](
			httpClient,
			baseURL+ApplicationServiceListChartsProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListCharts")),
			connect.WithClientOptions(opts...),
		),
		getChart: connect.NewClient[v1.GetChartRequest, v1.Application_Chart](
			httpClient,
			baseURL+ApplicationServiceGetChartProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetChart")),
			connect.WithClientOptions(opts...),
		),
		getChartMetadata: connect.NewClient[v1.GetChartMetadataRequest, v1.Application_Chart_Metadata](
			httpClient,
			baseURL+ApplicationServiceGetChartMetadataProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetChartMetadata")),
			connect.WithClientOptions(opts...),
		),
		listStorageClasses: connect.NewClient[v1.ListStorageClassesRequest, v1.ListStorageClassesResponse](
			httpClient,
			baseURL+ApplicationServiceListStorageClassesProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListStorageClasses")),
			connect.WithClientOptions(opts...),
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	listNamespaces       *connect.Client[v1.ListNamespacesRequest, v1.ListNamespacesResponse]
	listApplications     *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	getApplication       *connect.Client[v1.GetApplicationRequest, v1.Application]
	restartApplication   *connect.Client[v1.RestartApplicationRequest, emptypb.Empty]
	scaleApplication     *connect.Client[v1.ScaleApplicationRequest, emptypb.Empty]
	deleteApplicationPod *connect.Client[v1.DeleteApplicationPodRequest, emptypb.Empty]
	watchLogs            *connect.Client[v1.WatchLogsRequest, v1.WatchLogsResponse]
	executeTTY           *connect.Client[v1.ExecuteTTYRequest, v1.ExecuteTTYResponse]
	writeTTY             *connect.Client[v1.WriteTTYRequest, emptypb.Empty]
	listReleases         *connect.Client[v1.ListReleasesRequest, v1.ListReleasesResponse]
	createRelease        *connect.Client[v1.CreateReleaseRequest, v1.Application_Release]
	updateRelease        *connect.Client[v1.UpdateReleaseRequest, v1.Application_Release]
	deleteRelease        *connect.Client[v1.DeleteReleaseRequest, emptypb.Empty]
	rollbackRelease      *connect.Client[v1.RollbackReleaseRequest, emptypb.Empty]
	listCharts           *connect.Client[v1.ListChartsRequest, v1.ListChartsResponse]
	getChart             *connect.Client[v1.GetChartRequest, v1.Application_Chart]
	getChartMetadata     *connect.Client[v1.GetChartMetadataRequest, v1.Application_Chart_Metadata]
	listStorageClasses   *connect.Client[v1.ListStorageClassesRequest, v1.ListStorageClassesResponse]
}

// ListNamespaces calls otterscale.application.v1.ApplicationService.ListNamespaces.
func (c *applicationServiceClient) ListNamespaces(ctx context.Context, req *v1.ListNamespacesRequest) (*v1.ListNamespacesResponse, error) {
	response, err := c.listNamespaces.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListApplications calls otterscale.application.v1.ApplicationService.ListApplications.
func (c *applicationServiceClient) ListApplications(ctx context.Context, req *v1.ListApplicationsRequest) (*v1.ListApplicationsResponse, error) {
	response, err := c.listApplications.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetApplication calls otterscale.application.v1.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *v1.GetApplicationRequest) (*v1.Application, error) {
	response, err := c.getApplication.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RestartApplication calls otterscale.application.v1.ApplicationService.RestartApplication.
func (c *applicationServiceClient) RestartApplication(ctx context.Context, req *v1.RestartApplicationRequest) (*emptypb.Empty, error) {
	response, err := c.restartApplication.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ScaleApplication calls otterscale.application.v1.ApplicationService.ScaleApplication.
func (c *applicationServiceClient) ScaleApplication(ctx context.Context, req *v1.ScaleApplicationRequest) (*emptypb.Empty, error) {
	response, err := c.scaleApplication.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteApplicationPod calls otterscale.application.v1.ApplicationService.DeleteApplicationPod.
func (c *applicationServiceClient) DeleteApplicationPod(ctx context.Context, req *v1.DeleteApplicationPodRequest) (*emptypb.Empty, error) {
	response, err := c.deleteApplicationPod.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// WatchLogs calls otterscale.application.v1.ApplicationService.WatchLogs.
func (c *applicationServiceClient) WatchLogs(ctx context.Context, req *v1.WatchLogsRequest) (*connect.ServerStreamForClient[v1.WatchLogsResponse], error) {
	return c.watchLogs.CallServerStream(ctx, connect.NewRequest(req))
}

// ExecuteTTY calls otterscale.application.v1.ApplicationService.ExecuteTTY.
func (c *applicationServiceClient) ExecuteTTY(ctx context.Context, req *v1.ExecuteTTYRequest) (*connect.ServerStreamForClient[v1.ExecuteTTYResponse], error) {
	return c.executeTTY.CallServerStream(ctx, connect.NewRequest(req))
}

// WriteTTY calls otterscale.application.v1.ApplicationService.WriteTTY.
func (c *applicationServiceClient) WriteTTY(ctx context.Context, req *v1.WriteTTYRequest) (*emptypb.Empty, error) {
	response, err := c.writeTTY.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListReleases calls otterscale.application.v1.ApplicationService.ListReleases.
func (c *applicationServiceClient) ListReleases(ctx context.Context, req *v1.ListReleasesRequest) (*v1.ListReleasesResponse, error) {
	response, err := c.listReleases.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateRelease calls otterscale.application.v1.ApplicationService.CreateRelease.
func (c *applicationServiceClient) CreateRelease(ctx context.Context, req *v1.CreateReleaseRequest) (*v1.Application_Release, error) {
	response, err := c.createRelease.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateRelease calls otterscale.application.v1.ApplicationService.UpdateRelease.
func (c *applicationServiceClient) UpdateRelease(ctx context.Context, req *v1.UpdateReleaseRequest) (*v1.Application_Release, error) {
	response, err := c.updateRelease.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteRelease calls otterscale.application.v1.ApplicationService.DeleteRelease.
func (c *applicationServiceClient) DeleteRelease(ctx context.Context, req *v1.DeleteReleaseRequest) (*emptypb.Empty, error) {
	response, err := c.deleteRelease.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RollbackRelease calls otterscale.application.v1.ApplicationService.RollbackRelease.
func (c *applicationServiceClient) RollbackRelease(ctx context.Context, req *v1.RollbackReleaseRequest) (*emptypb.Empty, error) {
	response, err := c.rollbackRelease.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListCharts calls otterscale.application.v1.ApplicationService.ListCharts.
func (c *applicationServiceClient) ListCharts(ctx context.Context, req *v1.ListChartsRequest) (*v1.ListChartsResponse, error) {
	response, err := c.listCharts.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetChart calls otterscale.application.v1.ApplicationService.GetChart.
func (c *applicationServiceClient) GetChart(ctx context.Context, req *v1.GetChartRequest) (*v1.Application_Chart, error) {
	response, err := c.getChart.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetChartMetadata calls otterscale.application.v1.ApplicationService.GetChartMetadata.
func (c *applicationServiceClient) GetChartMetadata(ctx context.Context, req *v1.GetChartMetadataRequest) (*v1.Application_Chart_Metadata, error) {
	response, err := c.getChartMetadata.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListStorageClasses calls otterscale.application.v1.ApplicationService.ListStorageClasses.
func (c *applicationServiceClient) ListStorageClasses(ctx context.Context, req *v1.ListStorageClassesRequest) (*v1.ListStorageClassesResponse, error) {
	response, err := c.listStorageClasses.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ApplicationServiceHandler is an implementation of the
// otterscale.application.v1.ApplicationService service.
type ApplicationServiceHandler interface {
	ListNamespaces(context.Context, *v1.ListNamespacesRequest) (*v1.ListNamespacesResponse, error)
	ListApplications(context.Context, *v1.ListApplicationsRequest) (*v1.ListApplicationsResponse, error)
	GetApplication(context.Context, *v1.GetApplicationRequest) (*v1.Application, error)
	RestartApplication(context.Context, *v1.RestartApplicationRequest) (*emptypb.Empty, error)
	ScaleApplication(context.Context, *v1.ScaleApplicationRequest) (*emptypb.Empty, error)
	DeleteApplicationPod(context.Context, *v1.DeleteApplicationPodRequest) (*emptypb.Empty, error)
	WatchLogs(context.Context, *v1.WatchLogsRequest, *connect.ServerStream[v1.WatchLogsResponse]) error
	ExecuteTTY(context.Context, *v1.ExecuteTTYRequest, *connect.ServerStream[v1.ExecuteTTYResponse]) error
	WriteTTY(context.Context, *v1.WriteTTYRequest) (*emptypb.Empty, error)
	ListReleases(context.Context, *v1.ListReleasesRequest) (*v1.ListReleasesResponse, error)
	CreateRelease(context.Context, *v1.CreateReleaseRequest) (*v1.Application_Release, error)
	UpdateRelease(context.Context, *v1.UpdateReleaseRequest) (*v1.Application_Release, error)
	DeleteRelease(context.Context, *v1.DeleteReleaseRequest) (*emptypb.Empty, error)
	RollbackRelease(context.Context, *v1.RollbackReleaseRequest) (*emptypb.Empty, error)
	ListCharts(context.Context, *v1.ListChartsRequest) (*v1.ListChartsResponse, error)
	GetChart(context.Context, *v1.GetChartRequest) (*v1.Application_Chart, error)
	GetChartMetadata(context.Context, *v1.GetChartMetadataRequest) (*v1.Application_Chart_Metadata, error)
	ListStorageClasses(context.Context, *v1.ListStorageClassesRequest) (*v1.ListStorageClassesResponse, error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	applicationServiceMethods := v1.File_api_application_v1_application_proto.Services().ByName("ApplicationService").Methods()
	applicationServiceListNamespacesHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceListNamespacesProcedure,
		svc.ListNamespaces,
		connect.WithSchema(applicationServiceMethods.ByName("ListNamespaces")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListApplicationsHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(applicationServiceMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetApplicationHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(applicationServiceMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceRestartApplicationHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceRestartApplicationProcedure,
		svc.RestartApplication,
		connect.WithSchema(applicationServiceMethods.ByName("RestartApplication")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceScaleApplicationHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceScaleApplicationProcedure,
		svc.ScaleApplication,
		connect.WithSchema(applicationServiceMethods.ByName("ScaleApplication")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDeleteApplicationPodHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceDeleteApplicationPodProcedure,
		svc.DeleteApplicationPod,
		connect.WithSchema(applicationServiceMethods.ByName("DeleteApplicationPod")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceWatchLogsHandler := connect.NewServerStreamHandlerSimple(
		ApplicationServiceWatchLogsProcedure,
		svc.WatchLogs,
		connect.WithSchema(applicationServiceMethods.ByName("WatchLogs")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceExecuteTTYHandler := connect.NewServerStreamHandlerSimple(
		ApplicationServiceExecuteTTYProcedure,
		svc.ExecuteTTY,
		connect.WithSchema(applicationServiceMethods.ByName("ExecuteTTY")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceWriteTTYHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceWriteTTYProcedure,
		svc.WriteTTY,
		connect.WithSchema(applicationServiceMethods.ByName("WriteTTY")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListReleasesHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceListReleasesProcedure,
		svc.ListReleases,
		connect.WithSchema(applicationServiceMethods.ByName("ListReleases")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceCreateReleaseHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceCreateReleaseProcedure,
		svc.CreateRelease,
		connect.WithSchema(applicationServiceMethods.ByName("CreateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceUpdateReleaseHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceUpdateReleaseProcedure,
		svc.UpdateRelease,
		connect.WithSchema(applicationServiceMethods.ByName("UpdateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDeleteReleaseHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceDeleteReleaseProcedure,
		svc.DeleteRelease,
		connect.WithSchema(applicationServiceMethods.ByName("DeleteRelease")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceRollbackReleaseHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceRollbackReleaseProcedure,
		svc.RollbackRelease,
		connect.WithSchema(applicationServiceMethods.ByName("RollbackRelease")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListChartsHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceListChartsProcedure,
		svc.ListCharts,
		connect.WithSchema(applicationServiceMethods.ByName("ListCharts")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetChartHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceGetChartProcedure,
		svc.GetChart,
		connect.WithSchema(applicationServiceMethods.ByName("GetChart")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetChartMetadataHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceGetChartMetadataProcedure,
		svc.GetChartMetadata,
		connect.WithSchema(applicationServiceMethods.ByName("GetChartMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListStorageClassesHandler := connect.NewUnaryHandlerSimple(
		ApplicationServiceListStorageClassesProcedure,
		svc.ListStorageClasses,
		connect.WithSchema(applicationServiceMethods.ByName("ListStorageClasses")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.application.v1.ApplicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationServiceListNamespacesProcedure:
			applicationServiceListNamespacesHandler.ServeHTTP(w, r)
		case ApplicationServiceListApplicationsProcedure:
			applicationServiceListApplicationsHandler.ServeHTTP(w, r)
		case ApplicationServiceGetApplicationProcedure:
			applicationServiceGetApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceRestartApplicationProcedure:
			applicationServiceRestartApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceScaleApplicationProcedure:
			applicationServiceScaleApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceDeleteApplicationPodProcedure:
			applicationServiceDeleteApplicationPodHandler.ServeHTTP(w, r)
		case ApplicationServiceWatchLogsProcedure:
			applicationServiceWatchLogsHandler.ServeHTTP(w, r)
		case ApplicationServiceExecuteTTYProcedure:
			applicationServiceExecuteTTYHandler.ServeHTTP(w, r)
		case ApplicationServiceWriteTTYProcedure:
			applicationServiceWriteTTYHandler.ServeHTTP(w, r)
		case ApplicationServiceListReleasesProcedure:
			applicationServiceListReleasesHandler.ServeHTTP(w, r)
		case ApplicationServiceCreateReleaseProcedure:
			applicationServiceCreateReleaseHandler.ServeHTTP(w, r)
		case ApplicationServiceUpdateReleaseProcedure:
			applicationServiceUpdateReleaseHandler.ServeHTTP(w, r)
		case ApplicationServiceDeleteReleaseProcedure:
			applicationServiceDeleteReleaseHandler.ServeHTTP(w, r)
		case ApplicationServiceRollbackReleaseProcedure:
			applicationServiceRollbackReleaseHandler.ServeHTTP(w, r)
		case ApplicationServiceListChartsProcedure:
			applicationServiceListChartsHandler.ServeHTTP(w, r)
		case ApplicationServiceGetChartProcedure:
			applicationServiceGetChartHandler.ServeHTTP(w, r)
		case ApplicationServiceGetChartMetadataProcedure:
			applicationServiceGetChartMetadataHandler.ServeHTTP(w, r)
		case ApplicationServiceListStorageClassesProcedure:
			applicationServiceListStorageClassesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) ListNamespaces(context.Context, *v1.ListNamespacesRequest) (*v1.ListNamespacesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ListNamespaces is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListApplications(context.Context, *v1.ListApplicationsRequest) (*v1.ListApplicationsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ListApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *v1.GetApplicationRequest) (*v1.Application, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) RestartApplication(context.Context, *v1.RestartApplicationRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.RestartApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ScaleApplication(context.Context, *v1.ScaleApplicationRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ScaleApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplicationPod(context.Context, *v1.DeleteApplicationPodRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.DeleteApplicationPod is not implemented"))
}

func (UnimplementedApplicationServiceHandler) WatchLogs(context.Context, *v1.WatchLogsRequest, *connect.ServerStream[v1.WatchLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.WatchLogs is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ExecuteTTY(context.Context, *v1.ExecuteTTYRequest, *connect.ServerStream[v1.ExecuteTTYResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ExecuteTTY is not implemented"))
}

func (UnimplementedApplicationServiceHandler) WriteTTY(context.Context, *v1.WriteTTYRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.WriteTTY is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListReleases(context.Context, *v1.ListReleasesRequest) (*v1.ListReleasesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ListReleases is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateRelease(context.Context, *v1.CreateReleaseRequest) (*v1.Application_Release, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.CreateRelease is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateRelease(context.Context, *v1.UpdateReleaseRequest) (*v1.Application_Release, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.UpdateRelease is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteRelease(context.Context, *v1.DeleteReleaseRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.DeleteRelease is not implemented"))
}

func (UnimplementedApplicationServiceHandler) RollbackRelease(context.Context, *v1.RollbackReleaseRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.RollbackRelease is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListCharts(context.Context, *v1.ListChartsRequest) (*v1.ListChartsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ListCharts is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetChart(context.Context, *v1.GetChartRequest) (*v1.Application_Chart, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.GetChart is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetChartMetadata(context.Context, *v1.GetChartMetadataRequest) (*v1.Application_Chart_Metadata, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.GetChartMetadata is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListStorageClasses(context.Context, *v1.ListStorageClassesRequest) (*v1.ListStorageClassesResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.application.v1.ApplicationService.ListStorageClasses is not implemented"))
}
