// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/model/v1/model.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/model/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModelServiceName is the fully-qualified name of the ModelService service.
	ModelServiceName = "otterscale.model.v1.ModelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModelServiceListModelsProcedure is the fully-qualified name of the ModelService's ListModels RPC.
	ModelServiceListModelsProcedure = "/otterscale.model.v1.ModelService/ListModels"
	// ModelServiceGetModelProcedure is the fully-qualified name of the ModelService's GetModel RPC.
	ModelServiceGetModelProcedure = "/otterscale.model.v1.ModelService/GetModel"
	// ModelServiceCreateModelProcedure is the fully-qualified name of the ModelService's CreateModel
	// RPC.
	ModelServiceCreateModelProcedure = "/otterscale.model.v1.ModelService/CreateModel"
	// ModelServiceDeleteModelProcedure is the fully-qualified name of the ModelService's DeleteModel
	// RPC.
	ModelServiceDeleteModelProcedure = "/otterscale.model.v1.ModelService/DeleteModel"
)

// ModelServiceClient is a client for the otterscale.model.v1.ModelService service.
type ModelServiceClient interface {
	ListModels(context.Context, *v1.ListModelsRequest) (*v1.ListModelsResponse, error)
	GetModel(context.Context, *v1.GetModelRequest) (*v1.Model, error)
	CreateModel(context.Context, *v1.CreateModelRequest) (*v1.Model, error)
	DeleteModel(context.Context, *v1.DeleteModelRequest) (*emptypb.Empty, error)
}

// NewModelServiceClient constructs a client for the otterscale.model.v1.ModelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	modelServiceMethods := v1.File_api_model_v1_model_proto.Services().ByName("ModelService").Methods()
	return &modelServiceClient{
		listModels: connect.NewClient[v1.ListModelsRequest, v1.ListModelsResponse](
			httpClient,
			baseURL+ModelServiceListModelsProcedure,
			connect.WithSchema(modelServiceMethods.ByName("ListModels")),
			connect.WithClientOptions(opts...),
		),
		getModel: connect.NewClient[v1.GetModelRequest, v1.Model](
			httpClient,
			baseURL+ModelServiceGetModelProcedure,
			connect.WithSchema(modelServiceMethods.ByName("GetModel")),
			connect.WithClientOptions(opts...),
		),
		createModel: connect.NewClient[v1.CreateModelRequest, v1.Model](
			httpClient,
			baseURL+ModelServiceCreateModelProcedure,
			connect.WithSchema(modelServiceMethods.ByName("CreateModel")),
			connect.WithClientOptions(opts...),
		),
		deleteModel: connect.NewClient[v1.DeleteModelRequest, emptypb.Empty](
			httpClient,
			baseURL+ModelServiceDeleteModelProcedure,
			connect.WithSchema(modelServiceMethods.ByName("DeleteModel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// modelServiceClient implements ModelServiceClient.
type modelServiceClient struct {
	listModels  *connect.Client[v1.ListModelsRequest, v1.ListModelsResponse]
	getModel    *connect.Client[v1.GetModelRequest, v1.Model]
	createModel *connect.Client[v1.CreateModelRequest, v1.Model]
	deleteModel *connect.Client[v1.DeleteModelRequest, emptypb.Empty]
}

// ListModels calls otterscale.model.v1.ModelService.ListModels.
func (c *modelServiceClient) ListModels(ctx context.Context, req *v1.ListModelsRequest) (*v1.ListModelsResponse, error) {
	response, err := c.listModels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetModel calls otterscale.model.v1.ModelService.GetModel.
func (c *modelServiceClient) GetModel(ctx context.Context, req *v1.GetModelRequest) (*v1.Model, error) {
	response, err := c.getModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateModel calls otterscale.model.v1.ModelService.CreateModel.
func (c *modelServiceClient) CreateModel(ctx context.Context, req *v1.CreateModelRequest) (*v1.Model, error) {
	response, err := c.createModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteModel calls otterscale.model.v1.ModelService.DeleteModel.
func (c *modelServiceClient) DeleteModel(ctx context.Context, req *v1.DeleteModelRequest) (*emptypb.Empty, error) {
	response, err := c.deleteModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ModelServiceHandler is an implementation of the otterscale.model.v1.ModelService service.
type ModelServiceHandler interface {
	ListModels(context.Context, *v1.ListModelsRequest) (*v1.ListModelsResponse, error)
	GetModel(context.Context, *v1.GetModelRequest) (*v1.Model, error)
	CreateModel(context.Context, *v1.CreateModelRequest) (*v1.Model, error)
	DeleteModel(context.Context, *v1.DeleteModelRequest) (*emptypb.Empty, error)
}

// NewModelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModelServiceHandler(svc ModelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modelServiceMethods := v1.File_api_model_v1_model_proto.Services().ByName("ModelService").Methods()
	modelServiceListModelsHandler := connect.NewUnaryHandlerSimple(
		ModelServiceListModelsProcedure,
		svc.ListModels,
		connect.WithSchema(modelServiceMethods.ByName("ListModels")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceGetModelHandler := connect.NewUnaryHandlerSimple(
		ModelServiceGetModelProcedure,
		svc.GetModel,
		connect.WithSchema(modelServiceMethods.ByName("GetModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceCreateModelHandler := connect.NewUnaryHandlerSimple(
		ModelServiceCreateModelProcedure,
		svc.CreateModel,
		connect.WithSchema(modelServiceMethods.ByName("CreateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelServiceDeleteModelHandler := connect.NewUnaryHandlerSimple(
		ModelServiceDeleteModelProcedure,
		svc.DeleteModel,
		connect.WithSchema(modelServiceMethods.ByName("DeleteModel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.model.v1.ModelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModelServiceListModelsProcedure:
			modelServiceListModelsHandler.ServeHTTP(w, r)
		case ModelServiceGetModelProcedure:
			modelServiceGetModelHandler.ServeHTTP(w, r)
		case ModelServiceCreateModelProcedure:
			modelServiceCreateModelHandler.ServeHTTP(w, r)
		case ModelServiceDeleteModelProcedure:
			modelServiceDeleteModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModelServiceHandler struct{}

func (UnimplementedModelServiceHandler) ListModels(context.Context, *v1.ListModelsRequest) (*v1.ListModelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.model.v1.ModelService.ListModels is not implemented"))
}

func (UnimplementedModelServiceHandler) GetModel(context.Context, *v1.GetModelRequest) (*v1.Model, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.model.v1.ModelService.GetModel is not implemented"))
}

func (UnimplementedModelServiceHandler) CreateModel(context.Context, *v1.CreateModelRequest) (*v1.Model, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.model.v1.ModelService.CreateModel is not implemented"))
}

func (UnimplementedModelServiceHandler) DeleteModel(context.Context, *v1.DeleteModelRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.model.v1.ModelService.DeleteModel is not implemented"))
}
