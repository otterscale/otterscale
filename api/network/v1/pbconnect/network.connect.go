// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/network/v1/network.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/network/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "otterscale.network.v1.NetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceListNetworksProcedure is the fully-qualified name of the NetworkService's
	// ListNetworks RPC.
	NetworkServiceListNetworksProcedure = "/otterscale.network.v1.NetworkService/ListNetworks"
	// NetworkServiceCreateNetworkProcedure is the fully-qualified name of the NetworkService's
	// CreateNetwork RPC.
	NetworkServiceCreateNetworkProcedure = "/otterscale.network.v1.NetworkService/CreateNetwork"
	// NetworkServiceCreateIPRangeProcedure is the fully-qualified name of the NetworkService's
	// CreateIPRange RPC.
	NetworkServiceCreateIPRangeProcedure = "/otterscale.network.v1.NetworkService/CreateIPRange"
	// NetworkServiceDeleteNetworkProcedure is the fully-qualified name of the NetworkService's
	// DeleteNetwork RPC.
	NetworkServiceDeleteNetworkProcedure = "/otterscale.network.v1.NetworkService/DeleteNetwork"
	// NetworkServiceDeleteIPRangeProcedure is the fully-qualified name of the NetworkService's
	// DeleteIPRange RPC.
	NetworkServiceDeleteIPRangeProcedure = "/otterscale.network.v1.NetworkService/DeleteIPRange"
	// NetworkServiceUpdateFabricProcedure is the fully-qualified name of the NetworkService's
	// UpdateFabric RPC.
	NetworkServiceUpdateFabricProcedure = "/otterscale.network.v1.NetworkService/UpdateFabric"
	// NetworkServiceUpdateVLANProcedure is the fully-qualified name of the NetworkService's UpdateVLAN
	// RPC.
	NetworkServiceUpdateVLANProcedure = "/otterscale.network.v1.NetworkService/UpdateVLAN"
	// NetworkServiceUpdateSubnetProcedure is the fully-qualified name of the NetworkService's
	// UpdateSubnet RPC.
	NetworkServiceUpdateSubnetProcedure = "/otterscale.network.v1.NetworkService/UpdateSubnet"
	// NetworkServiceUpdateIPRangeProcedure is the fully-qualified name of the NetworkService's
	// UpdateIPRange RPC.
	NetworkServiceUpdateIPRangeProcedure = "/otterscale.network.v1.NetworkService/UpdateIPRange"
)

// NetworkServiceClient is a client for the otterscale.network.v1.NetworkService service.
type NetworkServiceClient interface {
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
}

// NewNetworkServiceClient constructs a client for the otterscale.network.v1.NetworkService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	networkServiceMethods := v1.File_api_network_v1_network_proto.Services().ByName("NetworkService").Methods()
	return &networkServiceClient{
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+NetworkServiceListNetworksProcedure,
			connect.WithSchema(networkServiceMethods.ByName("ListNetworks")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.Network](
			httpClient,
			baseURL+NetworkServiceCreateNetworkProcedure,
			connect.WithSchema(networkServiceMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		createIPRange: connect.NewClient[v1.CreateIPRangeRequest, v1.Network_IPRange](
			httpClient,
			baseURL+NetworkServiceCreateIPRangeProcedure,
			connect.WithSchema(networkServiceMethods.ByName("CreateIPRange")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+NetworkServiceDeleteNetworkProcedure,
			connect.WithSchema(networkServiceMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteIPRange: connect.NewClient[v1.DeleteIPRangeRequest, emptypb.Empty](
			httpClient,
			baseURL+NetworkServiceDeleteIPRangeProcedure,
			connect.WithSchema(networkServiceMethods.ByName("DeleteIPRange")),
			connect.WithClientOptions(opts...),
		),
		updateFabric: connect.NewClient[v1.UpdateFabricRequest, v1.Network_Fabric](
			httpClient,
			baseURL+NetworkServiceUpdateFabricProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdateFabric")),
			connect.WithClientOptions(opts...),
		),
		updateVLAN: connect.NewClient[v1.UpdateVLANRequest, v1.Network_VLAN](
			httpClient,
			baseURL+NetworkServiceUpdateVLANProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdateVLAN")),
			connect.WithClientOptions(opts...),
		),
		updateSubnet: connect.NewClient[v1.UpdateSubnetRequest, v1.Network_Subnet](
			httpClient,
			baseURL+NetworkServiceUpdateSubnetProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdateSubnet")),
			connect.WithClientOptions(opts...),
		),
		updateIPRange: connect.NewClient[v1.UpdateIPRangeRequest, v1.Network_IPRange](
			httpClient,
			baseURL+NetworkServiceUpdateIPRangeProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdateIPRange")),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	listNetworks  *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	createNetwork *connect.Client[v1.CreateNetworkRequest, v1.Network]
	createIPRange *connect.Client[v1.CreateIPRangeRequest, v1.Network_IPRange]
	deleteNetwork *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	deleteIPRange *connect.Client[v1.DeleteIPRangeRequest, emptypb.Empty]
	updateFabric  *connect.Client[v1.UpdateFabricRequest, v1.Network_Fabric]
	updateVLAN    *connect.Client[v1.UpdateVLANRequest, v1.Network_VLAN]
	updateSubnet  *connect.Client[v1.UpdateSubnetRequest, v1.Network_Subnet]
	updateIPRange *connect.Client[v1.UpdateIPRangeRequest, v1.Network_IPRange]
}

// ListNetworks calls otterscale.network.v1.NetworkService.ListNetworks.
func (c *networkServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// CreateNetwork calls otterscale.network.v1.NetworkService.CreateNetwork.
func (c *networkServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// CreateIPRange calls otterscale.network.v1.NetworkService.CreateIPRange.
func (c *networkServiceClient) CreateIPRange(ctx context.Context, req *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return c.createIPRange.CallUnary(ctx, req)
}

// DeleteNetwork calls otterscale.network.v1.NetworkService.DeleteNetwork.
func (c *networkServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// DeleteIPRange calls otterscale.network.v1.NetworkService.DeleteIPRange.
func (c *networkServiceClient) DeleteIPRange(ctx context.Context, req *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteIPRange.CallUnary(ctx, req)
}

// UpdateFabric calls otterscale.network.v1.NetworkService.UpdateFabric.
func (c *networkServiceClient) UpdateFabric(ctx context.Context, req *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error) {
	return c.updateFabric.CallUnary(ctx, req)
}

// UpdateVLAN calls otterscale.network.v1.NetworkService.UpdateVLAN.
func (c *networkServiceClient) UpdateVLAN(ctx context.Context, req *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error) {
	return c.updateVLAN.CallUnary(ctx, req)
}

// UpdateSubnet calls otterscale.network.v1.NetworkService.UpdateSubnet.
func (c *networkServiceClient) UpdateSubnet(ctx context.Context, req *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error) {
	return c.updateSubnet.CallUnary(ctx, req)
}

// UpdateIPRange calls otterscale.network.v1.NetworkService.UpdateIPRange.
func (c *networkServiceClient) UpdateIPRange(ctx context.Context, req *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return c.updateIPRange.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the otterscale.network.v1.NetworkService service.
type NetworkServiceHandler interface {
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceMethods := v1.File_api_network_v1_network_proto.Services().ByName("NetworkService").Methods()
	networkServiceListNetworksHandler := connect.NewUnaryHandler(
		NetworkServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(networkServiceMethods.ByName("ListNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceCreateNetworkHandler := connect.NewUnaryHandler(
		NetworkServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(networkServiceMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceCreateIPRangeHandler := connect.NewUnaryHandler(
		NetworkServiceCreateIPRangeProcedure,
		svc.CreateIPRange,
		connect.WithSchema(networkServiceMethods.ByName("CreateIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		NetworkServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(networkServiceMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceDeleteIPRangeHandler := connect.NewUnaryHandler(
		NetworkServiceDeleteIPRangeProcedure,
		svc.DeleteIPRange,
		connect.WithSchema(networkServiceMethods.ByName("DeleteIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdateFabricHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateFabricProcedure,
		svc.UpdateFabric,
		connect.WithSchema(networkServiceMethods.ByName("UpdateFabric")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdateVLANHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateVLANProcedure,
		svc.UpdateVLAN,
		connect.WithSchema(networkServiceMethods.ByName("UpdateVLAN")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdateSubnetHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateSubnetProcedure,
		svc.UpdateSubnet,
		connect.WithSchema(networkServiceMethods.ByName("UpdateSubnet")),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdateIPRangeHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateIPRangeProcedure,
		svc.UpdateIPRange,
		connect.WithSchema(networkServiceMethods.ByName("UpdateIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.network.v1.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceListNetworksProcedure:
			networkServiceListNetworksHandler.ServeHTTP(w, r)
		case NetworkServiceCreateNetworkProcedure:
			networkServiceCreateNetworkHandler.ServeHTTP(w, r)
		case NetworkServiceCreateIPRangeProcedure:
			networkServiceCreateIPRangeHandler.ServeHTTP(w, r)
		case NetworkServiceDeleteNetworkProcedure:
			networkServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case NetworkServiceDeleteIPRangeProcedure:
			networkServiceDeleteIPRangeHandler.ServeHTTP(w, r)
		case NetworkServiceUpdateFabricProcedure:
			networkServiceUpdateFabricHandler.ServeHTTP(w, r)
		case NetworkServiceUpdateVLANProcedure:
			networkServiceUpdateVLANHandler.ServeHTTP(w, r)
		case NetworkServiceUpdateSubnetProcedure:
			networkServiceUpdateSubnetHandler.ServeHTTP(w, r)
		case NetworkServiceUpdateIPRangeProcedure:
			networkServiceUpdateIPRangeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.ListNetworks is not implemented"))
}

func (UnimplementedNetworkServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.CreateNetwork is not implemented"))
}

func (UnimplementedNetworkServiceHandler) CreateIPRange(context.Context, *connect.Request[v1.CreateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.CreateIPRange is not implemented"))
}

func (UnimplementedNetworkServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.DeleteNetwork is not implemented"))
}

func (UnimplementedNetworkServiceHandler) DeleteIPRange(context.Context, *connect.Request[v1.DeleteIPRangeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.DeleteIPRange is not implemented"))
}

func (UnimplementedNetworkServiceHandler) UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Network_Fabric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.UpdateFabric is not implemented"))
}

func (UnimplementedNetworkServiceHandler) UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.Network_VLAN], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.UpdateVLAN is not implemented"))
}

func (UnimplementedNetworkServiceHandler) UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Network_Subnet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.UpdateSubnet is not implemented"))
}

func (UnimplementedNetworkServiceHandler) UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.Network_IPRange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.network.v1.NetworkService.UpdateIPRange is not implemented"))
}
