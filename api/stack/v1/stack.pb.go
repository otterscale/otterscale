// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: api/stack/v1/stack.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageRepository struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Url         *string                `protobuf:"bytes,3,opt,name=url"`
	xxx_hidden_Enabled     bool                   `protobuf:"varint,4,opt,name=enabled"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PackageRepository) Reset() {
	*x = PackageRepository{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepository) ProtoMessage() {}

func (x *PackageRepository) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PackageRepository) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *PackageRepository) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *PackageRepository) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *PackageRepository) GetEnabled() bool {
	if x != nil {
		return x.xxx_hidden_Enabled
	}
	return false
}

func (x *PackageRepository) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *PackageRepository) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *PackageRepository) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *PackageRepository) SetEnabled(v bool) {
	x.xxx_hidden_Enabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *PackageRepository) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PackageRepository) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *PackageRepository) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PackageRepository) HasEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *PackageRepository) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *PackageRepository) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *PackageRepository) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Url = nil
}

func (x *PackageRepository) ClearEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Enabled = false
}

type PackageRepository_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      *int32
	Name    *string
	Url     *string
	Enabled *bool
}

func (b0 PackageRepository_builder) Build() *PackageRepository {
	m0 := &PackageRepository{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Name = b.Name
	}
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Url = b.Url
	}
	if b.Enabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Enabled = *b.Enabled
	}
	return m0
}

type Network struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Fabric   *Fabric                `protobuf:"bytes,1,opt,name=fabric"`
	xxx_hidden_Settings *[]*Network_Setting    `protobuf:"bytes,2,rep,name=settings"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Network) GetFabric() *Fabric {
	if x != nil {
		return x.xxx_hidden_Fabric
	}
	return nil
}

func (x *Network) GetSettings() []*Network_Setting {
	if x != nil {
		if x.xxx_hidden_Settings != nil {
			return *x.xxx_hidden_Settings
		}
	}
	return nil
}

func (x *Network) SetFabric(v *Fabric) {
	x.xxx_hidden_Fabric = v
}

func (x *Network) SetSettings(v []*Network_Setting) {
	x.xxx_hidden_Settings = &v
}

func (x *Network) HasFabric() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Fabric != nil
}

func (x *Network) ClearFabric() {
	x.xxx_hidden_Fabric = nil
}

type Network_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Fabric   *Fabric
	Settings []*Network_Setting
}

func (b0 Network_builder) Build() *Network {
	m0 := &Network{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Fabric = b.Fabric
	x.xxx_hidden_Settings = &b.Settings
	return m0
}

type VLAN struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Vid         int32                  `protobuf:"varint,2,opt,name=vid"`
	xxx_hidden_Name        *string                `protobuf:"bytes,3,opt,name=name"`
	xxx_hidden_Mtu         int32                  `protobuf:"varint,4,opt,name=mtu"`
	xxx_hidden_Description *string                `protobuf:"bytes,5,opt,name=description"`
	xxx_hidden_DhcpOn      bool                   `protobuf:"varint,6,opt,name=dhcp_on,json=dhcpOn"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VLAN) Reset() {
	*x = VLAN{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VLAN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VLAN) ProtoMessage() {}

func (x *VLAN) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VLAN) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *VLAN) GetVid() int32 {
	if x != nil {
		return x.xxx_hidden_Vid
	}
	return 0
}

func (x *VLAN) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *VLAN) GetMtu() int32 {
	if x != nil {
		return x.xxx_hidden_Mtu
	}
	return 0
}

func (x *VLAN) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *VLAN) GetDhcpOn() bool {
	if x != nil {
		return x.xxx_hidden_DhcpOn
	}
	return false
}

func (x *VLAN) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *VLAN) SetVid(v int32) {
	x.xxx_hidden_Vid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *VLAN) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *VLAN) SetMtu(v int32) {
	x.xxx_hidden_Mtu = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *VLAN) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *VLAN) SetDhcpOn(v bool) {
	x.xxx_hidden_DhcpOn = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *VLAN) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *VLAN) HasVid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *VLAN) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *VLAN) HasMtu() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *VLAN) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *VLAN) HasDhcpOn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *VLAN) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *VLAN) ClearVid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Vid = 0
}

func (x *VLAN) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Name = nil
}

func (x *VLAN) ClearMtu() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Mtu = 0
}

func (x *VLAN) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Description = nil
}

func (x *VLAN) ClearDhcpOn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_DhcpOn = false
}

type VLAN_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id          *int32
	Vid         *int32
	Name        *string
	Mtu         *int32
	Description *string
	DhcpOn      *bool
}

func (b0 VLAN_builder) Build() *VLAN {
	m0 := &VLAN{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Vid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Vid = *b.Vid
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Name = b.Name
	}
	if b.Mtu != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Mtu = *b.Mtu
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_Description = b.Description
	}
	if b.DhcpOn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_DhcpOn = *b.DhcpOn
	}
	return m0
}

type Fabric struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Fabric) Reset() {
	*x = Fabric{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fabric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fabric) ProtoMessage() {}

func (x *Fabric) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Fabric) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Fabric) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Fabric) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *Fabric) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *Fabric) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Fabric) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Fabric) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *Fabric) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

type Fabric_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   *int32
	Name *string
}

func (b0 Fabric_builder) Build() *Fabric {
	m0 := &Fabric{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

type Subnet struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                 int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name               *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Cidr               *string                `protobuf:"bytes,3,opt,name=cidr"`
	xxx_hidden_GatewayIp          *string                `protobuf:"bytes,4,opt,name=gateway_ip,json=gatewayIp"`
	xxx_hidden_DnsServers         []string               `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers"`
	xxx_hidden_Description        *string                `protobuf:"bytes,6,opt,name=description"`
	xxx_hidden_ManagedAllocation  bool                   `protobuf:"varint,7,opt,name=managed_allocation,json=managedAllocation"`
	xxx_hidden_ActiveDiscovery    bool                   `protobuf:"varint,8,opt,name=active_discovery,json=activeDiscovery"`
	xxx_hidden_AllowProxyAccess   bool                   `protobuf:"varint,9,opt,name=allow_proxy_access,json=allowProxyAccess"`
	xxx_hidden_AllowDnsResolution bool                   `protobuf:"varint,10,opt,name=allow_dns_resolution,json=allowDnsResolution"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Subnet) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Subnet) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Subnet) GetCidr() string {
	if x != nil {
		if x.xxx_hidden_Cidr != nil {
			return *x.xxx_hidden_Cidr
		}
		return ""
	}
	return ""
}

func (x *Subnet) GetGatewayIp() string {
	if x != nil {
		if x.xxx_hidden_GatewayIp != nil {
			return *x.xxx_hidden_GatewayIp
		}
		return ""
	}
	return ""
}

func (x *Subnet) GetDnsServers() []string {
	if x != nil {
		return x.xxx_hidden_DnsServers
	}
	return nil
}

func (x *Subnet) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *Subnet) GetManagedAllocation() bool {
	if x != nil {
		return x.xxx_hidden_ManagedAllocation
	}
	return false
}

func (x *Subnet) GetActiveDiscovery() bool {
	if x != nil {
		return x.xxx_hidden_ActiveDiscovery
	}
	return false
}

func (x *Subnet) GetAllowProxyAccess() bool {
	if x != nil {
		return x.xxx_hidden_AllowProxyAccess
	}
	return false
}

func (x *Subnet) GetAllowDnsResolution() bool {
	if x != nil {
		return x.xxx_hidden_AllowDnsResolution
	}
	return false
}

func (x *Subnet) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 10)
}

func (x *Subnet) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 10)
}

func (x *Subnet) SetCidr(v string) {
	x.xxx_hidden_Cidr = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 10)
}

func (x *Subnet) SetGatewayIp(v string) {
	x.xxx_hidden_GatewayIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *Subnet) SetDnsServers(v []string) {
	x.xxx_hidden_DnsServers = v
}

func (x *Subnet) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 10)
}

func (x *Subnet) SetManagedAllocation(v bool) {
	x.xxx_hidden_ManagedAllocation = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 10)
}

func (x *Subnet) SetActiveDiscovery(v bool) {
	x.xxx_hidden_ActiveDiscovery = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 10)
}

func (x *Subnet) SetAllowProxyAccess(v bool) {
	x.xxx_hidden_AllowProxyAccess = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 10)
}

func (x *Subnet) SetAllowDnsResolution(v bool) {
	x.xxx_hidden_AllowDnsResolution = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 10)
}

func (x *Subnet) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Subnet) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Subnet) HasCidr() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Subnet) HasGatewayIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Subnet) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Subnet) HasManagedAllocation() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Subnet) HasActiveDiscovery() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Subnet) HasAllowProxyAccess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Subnet) HasAllowDnsResolution() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Subnet) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *Subnet) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Subnet) ClearCidr() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Cidr = nil
}

func (x *Subnet) ClearGatewayIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_GatewayIp = nil
}

func (x *Subnet) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Description = nil
}

func (x *Subnet) ClearManagedAllocation() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_ManagedAllocation = false
}

func (x *Subnet) ClearActiveDiscovery() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_ActiveDiscovery = false
}

func (x *Subnet) ClearAllowProxyAccess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_AllowProxyAccess = false
}

func (x *Subnet) ClearAllowDnsResolution() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_AllowDnsResolution = false
}

type Subnet_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                 *int32
	Name               *string
	Cidr               *string
	GatewayIp          *string
	DnsServers         []string
	Description        *string
	ManagedAllocation  *bool
	ActiveDiscovery    *bool
	AllowProxyAccess   *bool
	AllowDnsResolution *bool
}

func (b0 Subnet_builder) Build() *Subnet {
	m0 := &Subnet{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 10)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 10)
		x.xxx_hidden_Name = b.Name
	}
	if b.Cidr != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 10)
		x.xxx_hidden_Cidr = b.Cidr
	}
	if b.GatewayIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_GatewayIp = b.GatewayIp
	}
	x.xxx_hidden_DnsServers = b.DnsServers
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 10)
		x.xxx_hidden_Description = b.Description
	}
	if b.ManagedAllocation != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 10)
		x.xxx_hidden_ManagedAllocation = *b.ManagedAllocation
	}
	if b.ActiveDiscovery != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 10)
		x.xxx_hidden_ActiveDiscovery = *b.ActiveDiscovery
	}
	if b.AllowProxyAccess != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 10)
		x.xxx_hidden_AllowProxyAccess = *b.AllowProxyAccess
	}
	if b.AllowDnsResolution != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 10)
		x.xxx_hidden_AllowDnsResolution = *b.AllowDnsResolution
	}
	return m0
}

type Machine struct {
	state                          protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_SystemId            *string                      `protobuf:"bytes,1,opt,name=system_id,json=systemId"`
	xxx_hidden_HardwareUuid        *string                      `protobuf:"bytes,101,opt,name=hardware_uuid,json=hardwareUuid"`
	xxx_hidden_Hostname            *string                      `protobuf:"bytes,102,opt,name=hostname"`
	xxx_hidden_Fqdn                *string                      `protobuf:"bytes,103,opt,name=fqdn"`
	xxx_hidden_Tags                []string                     `protobuf:"bytes,104,rep,name=tags"`
	xxx_hidden_Description         *string                      `protobuf:"bytes,105,opt,name=description"`
	xxx_hidden_Status              *string                      `protobuf:"bytes,201,opt,name=status"`
	xxx_hidden_PowerState          *string                      `protobuf:"bytes,301,opt,name=power_state,json=powerState"`
	xxx_hidden_PowerType           *string                      `protobuf:"bytes,302,opt,name=power_type,json=powerType"`
	xxx_hidden_Osystem             *string                      `protobuf:"bytes,401,opt,name=osystem"`
	xxx_hidden_DistroSeries        *string                      `protobuf:"bytes,402,opt,name=distro_series,json=distroSeries"`
	xxx_hidden_HweKernel           *string                      `protobuf:"bytes,403,opt,name=hwe_kernel,json=hweKernel"`
	xxx_hidden_Architecture        *string                      `protobuf:"bytes,404,opt,name=architecture"`
	xxx_hidden_CpuSpeed            int32                        `protobuf:"varint,405,opt,name=cpu_speed,json=cpuSpeed"`
	xxx_hidden_CpuCount            int32                        `protobuf:"varint,406,opt,name=cpu_count,json=cpuCount"`
	xxx_hidden_Memory              int64                        `protobuf:"varint,407,opt,name=memory"`
	xxx_hidden_Storage             float64                      `protobuf:"fixed64,408,opt,name=storage"`
	xxx_hidden_IpAddresses         []string                     `protobuf:"bytes,409,rep,name=ip_addresses,json=ipAddresses"`
	xxx_hidden_WorkloadAnnotations map[string]string            `protobuf:"bytes,501,rep,name=workload_annotations,json=workloadAnnotations" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_HardwareInformation map[string]string            `protobuf:"bytes,601,rep,name=hardware_information,json=hardwareInformation" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_BiosBootMethod      *string                      `protobuf:"bytes,602,opt,name=bios_boot_method,json=biosBootMethod"`
	xxx_hidden_NumaNodes           *[]*Machine_NUMANode         `protobuf:"bytes,701,rep,name=numa_nodes,json=numaNodes"`
	xxx_hidden_BlockDevices        *[]*Machine_BlockDevice      `protobuf:"bytes,801,rep,name=block_devices,json=blockDevices"`
	xxx_hidden_NetworkInterfaces   *[]*Machine_NetworkInterface `protobuf:"bytes,802,rep,name=network_interfaces,json=networkInterfaces"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Machine) Reset() {
	*x = Machine{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Machine) GetSystemId() string {
	if x != nil {
		if x.xxx_hidden_SystemId != nil {
			return *x.xxx_hidden_SystemId
		}
		return ""
	}
	return ""
}

func (x *Machine) GetHardwareUuid() string {
	if x != nil {
		if x.xxx_hidden_HardwareUuid != nil {
			return *x.xxx_hidden_HardwareUuid
		}
		return ""
	}
	return ""
}

func (x *Machine) GetHostname() string {
	if x != nil {
		if x.xxx_hidden_Hostname != nil {
			return *x.xxx_hidden_Hostname
		}
		return ""
	}
	return ""
}

func (x *Machine) GetFqdn() string {
	if x != nil {
		if x.xxx_hidden_Fqdn != nil {
			return *x.xxx_hidden_Fqdn
		}
		return ""
	}
	return ""
}

func (x *Machine) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *Machine) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *Machine) GetStatus() string {
	if x != nil {
		if x.xxx_hidden_Status != nil {
			return *x.xxx_hidden_Status
		}
		return ""
	}
	return ""
}

func (x *Machine) GetPowerState() string {
	if x != nil {
		if x.xxx_hidden_PowerState != nil {
			return *x.xxx_hidden_PowerState
		}
		return ""
	}
	return ""
}

func (x *Machine) GetPowerType() string {
	if x != nil {
		if x.xxx_hidden_PowerType != nil {
			return *x.xxx_hidden_PowerType
		}
		return ""
	}
	return ""
}

func (x *Machine) GetOsystem() string {
	if x != nil {
		if x.xxx_hidden_Osystem != nil {
			return *x.xxx_hidden_Osystem
		}
		return ""
	}
	return ""
}

func (x *Machine) GetDistroSeries() string {
	if x != nil {
		if x.xxx_hidden_DistroSeries != nil {
			return *x.xxx_hidden_DistroSeries
		}
		return ""
	}
	return ""
}

func (x *Machine) GetHweKernel() string {
	if x != nil {
		if x.xxx_hidden_HweKernel != nil {
			return *x.xxx_hidden_HweKernel
		}
		return ""
	}
	return ""
}

func (x *Machine) GetArchitecture() string {
	if x != nil {
		if x.xxx_hidden_Architecture != nil {
			return *x.xxx_hidden_Architecture
		}
		return ""
	}
	return ""
}

func (x *Machine) GetCpuSpeed() int32 {
	if x != nil {
		return x.xxx_hidden_CpuSpeed
	}
	return 0
}

func (x *Machine) GetCpuCount() int32 {
	if x != nil {
		return x.xxx_hidden_CpuCount
	}
	return 0
}

func (x *Machine) GetMemory() int64 {
	if x != nil {
		return x.xxx_hidden_Memory
	}
	return 0
}

func (x *Machine) GetStorage() float64 {
	if x != nil {
		return x.xxx_hidden_Storage
	}
	return 0
}

func (x *Machine) GetIpAddresses() []string {
	if x != nil {
		return x.xxx_hidden_IpAddresses
	}
	return nil
}

func (x *Machine) GetWorkloadAnnotations() map[string]string {
	if x != nil {
		return x.xxx_hidden_WorkloadAnnotations
	}
	return nil
}

func (x *Machine) GetHardwareInformation() map[string]string {
	if x != nil {
		return x.xxx_hidden_HardwareInformation
	}
	return nil
}

func (x *Machine) GetBiosBootMethod() string {
	if x != nil {
		if x.xxx_hidden_BiosBootMethod != nil {
			return *x.xxx_hidden_BiosBootMethod
		}
		return ""
	}
	return ""
}

func (x *Machine) GetNumaNodes() []*Machine_NUMANode {
	if x != nil {
		if x.xxx_hidden_NumaNodes != nil {
			return *x.xxx_hidden_NumaNodes
		}
	}
	return nil
}

func (x *Machine) GetBlockDevices() []*Machine_BlockDevice {
	if x != nil {
		if x.xxx_hidden_BlockDevices != nil {
			return *x.xxx_hidden_BlockDevices
		}
	}
	return nil
}

func (x *Machine) GetNetworkInterfaces() []*Machine_NetworkInterface {
	if x != nil {
		if x.xxx_hidden_NetworkInterfaces != nil {
			return *x.xxx_hidden_NetworkInterfaces
		}
	}
	return nil
}

func (x *Machine) SetSystemId(v string) {
	x.xxx_hidden_SystemId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 24)
}

func (x *Machine) SetHardwareUuid(v string) {
	x.xxx_hidden_HardwareUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 24)
}

func (x *Machine) SetHostname(v string) {
	x.xxx_hidden_Hostname = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 24)
}

func (x *Machine) SetFqdn(v string) {
	x.xxx_hidden_Fqdn = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 24)
}

func (x *Machine) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *Machine) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 24)
}

func (x *Machine) SetStatus(v string) {
	x.xxx_hidden_Status = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 24)
}

func (x *Machine) SetPowerState(v string) {
	x.xxx_hidden_PowerState = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 24)
}

func (x *Machine) SetPowerType(v string) {
	x.xxx_hidden_PowerType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 24)
}

func (x *Machine) SetOsystem(v string) {
	x.xxx_hidden_Osystem = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 24)
}

func (x *Machine) SetDistroSeries(v string) {
	x.xxx_hidden_DistroSeries = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 24)
}

func (x *Machine) SetHweKernel(v string) {
	x.xxx_hidden_HweKernel = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 24)
}

func (x *Machine) SetArchitecture(v string) {
	x.xxx_hidden_Architecture = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 24)
}

func (x *Machine) SetCpuSpeed(v int32) {
	x.xxx_hidden_CpuSpeed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 24)
}

func (x *Machine) SetCpuCount(v int32) {
	x.xxx_hidden_CpuCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 24)
}

func (x *Machine) SetMemory(v int64) {
	x.xxx_hidden_Memory = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 15, 24)
}

func (x *Machine) SetStorage(v float64) {
	x.xxx_hidden_Storage = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 16, 24)
}

func (x *Machine) SetIpAddresses(v []string) {
	x.xxx_hidden_IpAddresses = v
}

func (x *Machine) SetWorkloadAnnotations(v map[string]string) {
	x.xxx_hidden_WorkloadAnnotations = v
}

func (x *Machine) SetHardwareInformation(v map[string]string) {
	x.xxx_hidden_HardwareInformation = v
}

func (x *Machine) SetBiosBootMethod(v string) {
	x.xxx_hidden_BiosBootMethod = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 20, 24)
}

func (x *Machine) SetNumaNodes(v []*Machine_NUMANode) {
	x.xxx_hidden_NumaNodes = &v
}

func (x *Machine) SetBlockDevices(v []*Machine_BlockDevice) {
	x.xxx_hidden_BlockDevices = &v
}

func (x *Machine) SetNetworkInterfaces(v []*Machine_NetworkInterface) {
	x.xxx_hidden_NetworkInterfaces = &v
}

func (x *Machine) HasSystemId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Machine) HasHardwareUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Machine) HasHostname() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Machine) HasFqdn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Machine) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Machine) HasStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Machine) HasPowerState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Machine) HasPowerType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Machine) HasOsystem() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Machine) HasDistroSeries() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *Machine) HasHweKernel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *Machine) HasArchitecture() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *Machine) HasCpuSpeed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *Machine) HasCpuCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *Machine) HasMemory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 15)
}

func (x *Machine) HasStorage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 16)
}

func (x *Machine) HasBiosBootMethod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 20)
}

func (x *Machine) ClearSystemId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SystemId = nil
}

func (x *Machine) ClearHardwareUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_HardwareUuid = nil
}

func (x *Machine) ClearHostname() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Hostname = nil
}

func (x *Machine) ClearFqdn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Fqdn = nil
}

func (x *Machine) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Description = nil
}

func (x *Machine) ClearStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Status = nil
}

func (x *Machine) ClearPowerState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_PowerState = nil
}

func (x *Machine) ClearPowerType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_PowerType = nil
}

func (x *Machine) ClearOsystem() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Osystem = nil
}

func (x *Machine) ClearDistroSeries() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_DistroSeries = nil
}

func (x *Machine) ClearHweKernel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_HweKernel = nil
}

func (x *Machine) ClearArchitecture() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_Architecture = nil
}

func (x *Machine) ClearCpuSpeed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_CpuSpeed = 0
}

func (x *Machine) ClearCpuCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_CpuCount = 0
}

func (x *Machine) ClearMemory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 15)
	x.xxx_hidden_Memory = 0
}

func (x *Machine) ClearStorage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 16)
	x.xxx_hidden_Storage = 0
}

func (x *Machine) ClearBiosBootMethod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 20)
	x.xxx_hidden_BiosBootMethod = nil
}

type Machine_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SystemId            *string
	HardwareUuid        *string
	Hostname            *string
	Fqdn                *string
	Tags                []string
	Description         *string
	Status              *string
	PowerState          *string
	PowerType           *string
	Osystem             *string
	DistroSeries        *string
	HweKernel           *string
	Architecture        *string
	CpuSpeed            *int32
	CpuCount            *int32
	Memory              *int64
	Storage             *float64
	IpAddresses         []string
	WorkloadAnnotations map[string]string
	HardwareInformation map[string]string
	BiosBootMethod      *string
	NumaNodes           []*Machine_NUMANode
	BlockDevices        []*Machine_BlockDevice
	NetworkInterfaces   []*Machine_NetworkInterface
}

func (b0 Machine_builder) Build() *Machine {
	m0 := &Machine{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SystemId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 24)
		x.xxx_hidden_SystemId = b.SystemId
	}
	if b.HardwareUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 24)
		x.xxx_hidden_HardwareUuid = b.HardwareUuid
	}
	if b.Hostname != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 24)
		x.xxx_hidden_Hostname = b.Hostname
	}
	if b.Fqdn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 24)
		x.xxx_hidden_Fqdn = b.Fqdn
	}
	x.xxx_hidden_Tags = b.Tags
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 24)
		x.xxx_hidden_Description = b.Description
	}
	if b.Status != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 24)
		x.xxx_hidden_Status = b.Status
	}
	if b.PowerState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 24)
		x.xxx_hidden_PowerState = b.PowerState
	}
	if b.PowerType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 24)
		x.xxx_hidden_PowerType = b.PowerType
	}
	if b.Osystem != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 24)
		x.xxx_hidden_Osystem = b.Osystem
	}
	if b.DistroSeries != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 24)
		x.xxx_hidden_DistroSeries = b.DistroSeries
	}
	if b.HweKernel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 24)
		x.xxx_hidden_HweKernel = b.HweKernel
	}
	if b.Architecture != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 24)
		x.xxx_hidden_Architecture = b.Architecture
	}
	if b.CpuSpeed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 24)
		x.xxx_hidden_CpuSpeed = *b.CpuSpeed
	}
	if b.CpuCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 24)
		x.xxx_hidden_CpuCount = *b.CpuCount
	}
	if b.Memory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 15, 24)
		x.xxx_hidden_Memory = *b.Memory
	}
	if b.Storage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 16, 24)
		x.xxx_hidden_Storage = *b.Storage
	}
	x.xxx_hidden_IpAddresses = b.IpAddresses
	x.xxx_hidden_WorkloadAnnotations = b.WorkloadAnnotations
	x.xxx_hidden_HardwareInformation = b.HardwareInformation
	if b.BiosBootMethod != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 20, 24)
		x.xxx_hidden_BiosBootMethod = b.BiosBootMethod
	}
	x.xxx_hidden_NumaNodes = &b.NumaNodes
	x.xxx_hidden_BlockDevices = &b.BlockDevices
	x.xxx_hidden_NetworkInterfaces = &b.NetworkInterfaces
	return m0
}

type IPRange struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_StartIp     *string                `protobuf:"bytes,2,opt,name=start_ip,json=startIp"`
	xxx_hidden_EndIp       *string                `protobuf:"bytes,3,opt,name=end_ip,json=endIp"`
	xxx_hidden_Type        *string                `protobuf:"bytes,4,opt,name=type"`
	xxx_hidden_Comment     *string                `protobuf:"bytes,5,opt,name=comment"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *IPRange) Reset() {
	*x = IPRange{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRange) ProtoMessage() {}

func (x *IPRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IPRange) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *IPRange) GetStartIp() string {
	if x != nil {
		if x.xxx_hidden_StartIp != nil {
			return *x.xxx_hidden_StartIp
		}
		return ""
	}
	return ""
}

func (x *IPRange) GetEndIp() string {
	if x != nil {
		if x.xxx_hidden_EndIp != nil {
			return *x.xxx_hidden_EndIp
		}
		return ""
	}
	return ""
}

func (x *IPRange) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *IPRange) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *IPRange) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *IPRange) SetStartIp(v string) {
	x.xxx_hidden_StartIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *IPRange) SetEndIp(v string) {
	x.xxx_hidden_EndIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *IPRange) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *IPRange) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *IPRange) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *IPRange) HasStartIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *IPRange) HasEndIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *IPRange) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *IPRange) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *IPRange) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *IPRange) ClearStartIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_StartIp = nil
}

func (x *IPRange) ClearEndIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_EndIp = nil
}

func (x *IPRange) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Type = nil
}

func (x *IPRange) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Comment = nil
}

type IPRange_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      *int32
	StartIp *string
	EndIp   *string
	Type    *string
	Comment *string
}

func (b0 IPRange_builder) Build() *IPRange {
	m0 := &IPRange{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Id = *b.Id
	}
	if b.StartIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_StartIp = b.StartIp
	}
	if b.EndIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_EndIp = b.EndIp
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Type = b.Type
	}
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Comment = b.Comment
	}
	return m0
}

type Model struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Model) Reset() {
	*x = Model{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Model_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Model_builder) Build() *Model {
	m0 := &Model{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ModelConfig struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelConfig) Reset() {
	*x = ModelConfig{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelConfig) ProtoMessage() {}

func (x *ModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ModelConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ModelConfig_builder) Build() *ModelConfig {
	m0 := &ModelConfig{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Application struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MachineSystemId *string                `protobuf:"bytes,1,opt,name=machine_system_id,json=machineSystemId"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Application) Reset() {
	*x = Application{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Application) GetMachineSystemId() string {
	if x != nil {
		if x.xxx_hidden_MachineSystemId != nil {
			return *x.xxx_hidden_MachineSystemId
		}
		return ""
	}
	return ""
}

func (x *Application) SetMachineSystemId(v string) {
	x.xxx_hidden_MachineSystemId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *Application) HasMachineSystemId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Application) ClearMachineSystemId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MachineSystemId = nil
}

type Application_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MachineSystemId *string
}

func (b0 Application_builder) Build() *Application {
	m0 := &Application{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MachineSystemId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_MachineSystemId = b.MachineSystemId
	}
	return m0
}

type Integration struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Integration) Reset() {
	*x = Integration{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Integration_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Integration_builder) Build() *Integration {
	m0 := &Integration{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Action struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type Action_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 Action_builder) Build() *Action {
	m0 := &Action{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListNTPServersRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNTPServersRequest) Reset() {
	*x = ListNTPServersRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNTPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNTPServersRequest) ProtoMessage() {}

func (x *ListNTPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListNTPServersRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListNTPServersRequest_builder) Build() *ListNTPServersRequest {
	m0 := &ListNTPServersRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListNTPServersResponse struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NtpServers []string               `protobuf:"bytes,1,rep,name=ntp_servers,json=ntpServers"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ListNTPServersResponse) Reset() {
	*x = ListNTPServersResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNTPServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNTPServersResponse) ProtoMessage() {}

func (x *ListNTPServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListNTPServersResponse) GetNtpServers() []string {
	if x != nil {
		return x.xxx_hidden_NtpServers
	}
	return nil
}

func (x *ListNTPServersResponse) SetNtpServers(v []string) {
	x.xxx_hidden_NtpServers = v
}

type ListNTPServersResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NtpServers []string
}

func (b0 ListNTPServersResponse_builder) Build() *ListNTPServersResponse {
	m0 := &ListNTPServersResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NtpServers = b.NtpServers
	return m0
}

type UpdateNTPServersRequest struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NtpServers []string               `protobuf:"bytes,1,rep,name=ntp_servers,json=ntpServers"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateNTPServersRequest) Reset() {
	*x = UpdateNTPServersRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNTPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNTPServersRequest) ProtoMessage() {}

func (x *UpdateNTPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateNTPServersRequest) GetNtpServers() []string {
	if x != nil {
		return x.xxx_hidden_NtpServers
	}
	return nil
}

func (x *UpdateNTPServersRequest) SetNtpServers(v []string) {
	x.xxx_hidden_NtpServers = v
}

type UpdateNTPServersRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	NtpServers []string
}

func (b0 UpdateNTPServersRequest_builder) Build() *UpdateNTPServersRequest {
	m0 := &UpdateNTPServersRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NtpServers = b.NtpServers
	return m0
}

type UpdatePackageRepositoryURLRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Url         *string                `protobuf:"bytes,2,opt,name=url"`
	xxx_hidden_SkipJuju    bool                   `protobuf:"varint,3,opt,name=skip_juju,json=skipJuju"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdatePackageRepositoryURLRequest) Reset() {
	*x = UpdatePackageRepositoryURLRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePackageRepositoryURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePackageRepositoryURLRequest) ProtoMessage() {}

func (x *UpdatePackageRepositoryURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdatePackageRepositoryURLRequest) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdatePackageRepositoryURLRequest) GetUrl() string {
	if x != nil {
		if x.xxx_hidden_Url != nil {
			return *x.xxx_hidden_Url
		}
		return ""
	}
	return ""
}

func (x *UpdatePackageRepositoryURLRequest) GetSkipJuju() bool {
	if x != nil {
		return x.xxx_hidden_SkipJuju
	}
	return false
}

func (x *UpdatePackageRepositoryURLRequest) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *UpdatePackageRepositoryURLRequest) SetUrl(v string) {
	x.xxx_hidden_Url = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *UpdatePackageRepositoryURLRequest) SetSkipJuju(v bool) {
	x.xxx_hidden_SkipJuju = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *UpdatePackageRepositoryURLRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdatePackageRepositoryURLRequest) HasUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdatePackageRepositoryURLRequest) HasSkipJuju() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdatePackageRepositoryURLRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdatePackageRepositoryURLRequest) ClearUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Url = nil
}

func (x *UpdatePackageRepositoryURLRequest) ClearSkipJuju() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_SkipJuju = false
}

type UpdatePackageRepositoryURLRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *int32
	Url      *string
	SkipJuju *bool
}

func (b0 UpdatePackageRepositoryURLRequest_builder) Build() *UpdatePackageRepositoryURLRequest {
	m0 := &UpdatePackageRepositoryURLRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Url != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Url = b.Url
	}
	if b.SkipJuju != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_SkipJuju = *b.SkipJuju
	}
	return m0
}

type ListPackageRepositoriesRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPackageRepositoriesRequest) Reset() {
	*x = ListPackageRepositoriesRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPackageRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackageRepositoriesRequest) ProtoMessage() {}

func (x *ListPackageRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListPackageRepositoriesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListPackageRepositoriesRequest_builder) Build() *ListPackageRepositoriesRequest {
	m0 := &ListPackageRepositoriesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListPackageRepositoriesResponse struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PackageRepositories *[]*PackageRepository  `protobuf:"bytes,1,rep,name=package_repositories,json=packageRepositories"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ListPackageRepositoriesResponse) Reset() {
	*x = ListPackageRepositoriesResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPackageRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackageRepositoriesResponse) ProtoMessage() {}

func (x *ListPackageRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListPackageRepositoriesResponse) GetPackageRepositories() []*PackageRepository {
	if x != nil {
		if x.xxx_hidden_PackageRepositories != nil {
			return *x.xxx_hidden_PackageRepositories
		}
	}
	return nil
}

func (x *ListPackageRepositoriesResponse) SetPackageRepositories(v []*PackageRepository) {
	x.xxx_hidden_PackageRepositories = &v
}

type ListPackageRepositoriesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PackageRepositories []*PackageRepository
}

func (b0 ListPackageRepositoriesResponse_builder) Build() *ListPackageRepositoriesResponse {
	m0 := &ListPackageRepositoriesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PackageRepositories = &b.PackageRepositories
	return m0
}

type ListNetworksRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNetworksRequest) Reset() {
	*x = ListNetworksRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksRequest) ProtoMessage() {}

func (x *ListNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListNetworksRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListNetworksRequest_builder) Build() *ListNetworksRequest {
	m0 := &ListNetworksRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListNetworksResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Networks *[]*Network            `protobuf:"bytes,1,rep,name=networks"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListNetworksResponse) Reset() {
	*x = ListNetworksResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResponse) ProtoMessage() {}

func (x *ListNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		if x.xxx_hidden_Networks != nil {
			return *x.xxx_hidden_Networks
		}
	}
	return nil
}

func (x *ListNetworksResponse) SetNetworks(v []*Network) {
	x.xxx_hidden_Networks = &v
}

type ListNetworksResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Networks []*Network
}

func (b0 ListNetworksResponse_builder) Build() *ListNetworksResponse {
	m0 := &ListNetworksResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Networks = &b.Networks
	return m0
}

type CreateNetworkRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DhcpOn      bool                   `protobuf:"varint,1,opt,name=dhcp_on,json=dhcpOn"`
	xxx_hidden_Cidr        *string                `protobuf:"bytes,11,opt,name=cidr"`
	xxx_hidden_GatewayIp   *string                `protobuf:"bytes,12,opt,name=gateway_ip,json=gatewayIp"`
	xxx_hidden_DnsServers  []string               `protobuf:"bytes,13,rep,name=dns_servers,json=dnsServers"`
	xxx_hidden_StartIp     *string                `protobuf:"bytes,21,opt,name=start_ip,json=startIp"`
	xxx_hidden_EndIp       *string                `protobuf:"bytes,22,opt,name=end_ip,json=endIp"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateNetworkRequest) GetDhcpOn() bool {
	if x != nil {
		return x.xxx_hidden_DhcpOn
	}
	return false
}

func (x *CreateNetworkRequest) GetCidr() string {
	if x != nil {
		if x.xxx_hidden_Cidr != nil {
			return *x.xxx_hidden_Cidr
		}
		return ""
	}
	return ""
}

func (x *CreateNetworkRequest) GetGatewayIp() string {
	if x != nil {
		if x.xxx_hidden_GatewayIp != nil {
			return *x.xxx_hidden_GatewayIp
		}
		return ""
	}
	return ""
}

func (x *CreateNetworkRequest) GetDnsServers() []string {
	if x != nil {
		return x.xxx_hidden_DnsServers
	}
	return nil
}

func (x *CreateNetworkRequest) GetStartIp() string {
	if x != nil {
		if x.xxx_hidden_StartIp != nil {
			return *x.xxx_hidden_StartIp
		}
		return ""
	}
	return ""
}

func (x *CreateNetworkRequest) GetEndIp() string {
	if x != nil {
		if x.xxx_hidden_EndIp != nil {
			return *x.xxx_hidden_EndIp
		}
		return ""
	}
	return ""
}

func (x *CreateNetworkRequest) SetDhcpOn(v bool) {
	x.xxx_hidden_DhcpOn = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *CreateNetworkRequest) SetCidr(v string) {
	x.xxx_hidden_Cidr = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *CreateNetworkRequest) SetGatewayIp(v string) {
	x.xxx_hidden_GatewayIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *CreateNetworkRequest) SetDnsServers(v []string) {
	x.xxx_hidden_DnsServers = v
}

func (x *CreateNetworkRequest) SetStartIp(v string) {
	x.xxx_hidden_StartIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *CreateNetworkRequest) SetEndIp(v string) {
	x.xxx_hidden_EndIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *CreateNetworkRequest) HasDhcpOn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateNetworkRequest) HasCidr() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateNetworkRequest) HasGatewayIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreateNetworkRequest) HasStartIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CreateNetworkRequest) HasEndIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CreateNetworkRequest) ClearDhcpOn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_DhcpOn = false
}

func (x *CreateNetworkRequest) ClearCidr() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Cidr = nil
}

func (x *CreateNetworkRequest) ClearGatewayIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_GatewayIp = nil
}

func (x *CreateNetworkRequest) ClearStartIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_StartIp = nil
}

func (x *CreateNetworkRequest) ClearEndIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_EndIp = nil
}

type CreateNetworkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	DhcpOn     *bool
	Cidr       *string
	GatewayIp  *string
	DnsServers []string
	StartIp    *string
	EndIp      *string
}

func (b0 CreateNetworkRequest_builder) Build() *CreateNetworkRequest {
	m0 := &CreateNetworkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.DhcpOn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_DhcpOn = *b.DhcpOn
	}
	if b.Cidr != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Cidr = b.Cidr
	}
	if b.GatewayIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_GatewayIp = b.GatewayIp
	}
	x.xxx_hidden_DnsServers = b.DnsServers
	if b.StartIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_StartIp = b.StartIp
	}
	if b.EndIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_EndIp = b.EndIp
	}
	return m0
}

type DeleteNetworkRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FabricId    int32                  `protobuf:"varint,1,opt,name=fabric_id,json=fabricId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteNetworkRequest) Reset() {
	*x = DeleteNetworkRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNetworkRequest) ProtoMessage() {}

func (x *DeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteNetworkRequest) GetFabricId() int32 {
	if x != nil {
		return x.xxx_hidden_FabricId
	}
	return 0
}

func (x *DeleteNetworkRequest) SetFabricId(v int32) {
	x.xxx_hidden_FabricId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *DeleteNetworkRequest) HasFabricId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DeleteNetworkRequest) ClearFabricId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FabricId = 0
}

type DeleteNetworkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FabricId *int32
}

func (b0 DeleteNetworkRequest_builder) Build() *DeleteNetworkRequest {
	m0 := &DeleteNetworkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FabricId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_FabricId = *b.FabricId
	}
	return m0
}

type UpdateFabricRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateFabricRequest) Reset() {
	*x = UpdateFabricRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFabricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFabricRequest) ProtoMessage() {}

func (x *UpdateFabricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateFabricRequest) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdateFabricRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UpdateFabricRequest) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *UpdateFabricRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *UpdateFabricRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateFabricRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateFabricRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdateFabricRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

type UpdateFabricRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   *int32
	Name *string
}

func (b0 UpdateFabricRequest_builder) Build() *UpdateFabricRequest {
	m0 := &UpdateFabricRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

type UpdateVLANRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FabricId    int32                  `protobuf:"varint,1,opt,name=fabric_id,json=fabricId"`
	xxx_hidden_Vid         int32                  `protobuf:"varint,2,opt,name=vid"`
	xxx_hidden_Name        *string                `protobuf:"bytes,3,opt,name=name"`
	xxx_hidden_Mtu         int32                  `protobuf:"varint,4,opt,name=mtu"`
	xxx_hidden_Description *string                `protobuf:"bytes,5,opt,name=description"`
	xxx_hidden_DhcpOn      bool                   `protobuf:"varint,6,opt,name=dhcp_on,json=dhcpOn"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateVLANRequest) Reset() {
	*x = UpdateVLANRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVLANRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVLANRequest) ProtoMessage() {}

func (x *UpdateVLANRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateVLANRequest) GetFabricId() int32 {
	if x != nil {
		return x.xxx_hidden_FabricId
	}
	return 0
}

func (x *UpdateVLANRequest) GetVid() int32 {
	if x != nil {
		return x.xxx_hidden_Vid
	}
	return 0
}

func (x *UpdateVLANRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UpdateVLANRequest) GetMtu() int32 {
	if x != nil {
		return x.xxx_hidden_Mtu
	}
	return 0
}

func (x *UpdateVLANRequest) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *UpdateVLANRequest) GetDhcpOn() bool {
	if x != nil {
		return x.xxx_hidden_DhcpOn
	}
	return false
}

func (x *UpdateVLANRequest) SetFabricId(v int32) {
	x.xxx_hidden_FabricId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *UpdateVLANRequest) SetVid(v int32) {
	x.xxx_hidden_Vid = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *UpdateVLANRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *UpdateVLANRequest) SetMtu(v int32) {
	x.xxx_hidden_Mtu = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *UpdateVLANRequest) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *UpdateVLANRequest) SetDhcpOn(v bool) {
	x.xxx_hidden_DhcpOn = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *UpdateVLANRequest) HasFabricId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateVLANRequest) HasVid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateVLANRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdateVLANRequest) HasMtu() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UpdateVLANRequest) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *UpdateVLANRequest) HasDhcpOn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *UpdateVLANRequest) ClearFabricId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FabricId = 0
}

func (x *UpdateVLANRequest) ClearVid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Vid = 0
}

func (x *UpdateVLANRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Name = nil
}

func (x *UpdateVLANRequest) ClearMtu() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Mtu = 0
}

func (x *UpdateVLANRequest) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Description = nil
}

func (x *UpdateVLANRequest) ClearDhcpOn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_DhcpOn = false
}

type UpdateVLANRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FabricId    *int32
	Vid         *int32
	Name        *string
	Mtu         *int32
	Description *string
	DhcpOn      *bool
}

func (b0 UpdateVLANRequest_builder) Build() *UpdateVLANRequest {
	m0 := &UpdateVLANRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FabricId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_FabricId = *b.FabricId
	}
	if b.Vid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Vid = *b.Vid
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Name = b.Name
	}
	if b.Mtu != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Mtu = *b.Mtu
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_Description = b.Description
	}
	if b.DhcpOn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_DhcpOn = *b.DhcpOn
	}
	return m0
}

type UpdateSubnetRequest struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                 int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name               *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Cidr               *string                `protobuf:"bytes,3,opt,name=cidr"`
	xxx_hidden_GatewayIp          *string                `protobuf:"bytes,4,opt,name=gateway_ip,json=gatewayIp"`
	xxx_hidden_DnsServers         []string               `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers"`
	xxx_hidden_Description        *string                `protobuf:"bytes,6,opt,name=description"`
	xxx_hidden_AllowDnsResolution bool                   `protobuf:"varint,7,opt,name=allow_dns_resolution,json=allowDnsResolution"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateSubnetRequest) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdateSubnetRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UpdateSubnetRequest) GetCidr() string {
	if x != nil {
		if x.xxx_hidden_Cidr != nil {
			return *x.xxx_hidden_Cidr
		}
		return ""
	}
	return ""
}

func (x *UpdateSubnetRequest) GetGatewayIp() string {
	if x != nil {
		if x.xxx_hidden_GatewayIp != nil {
			return *x.xxx_hidden_GatewayIp
		}
		return ""
	}
	return ""
}

func (x *UpdateSubnetRequest) GetDnsServers() []string {
	if x != nil {
		return x.xxx_hidden_DnsServers
	}
	return nil
}

func (x *UpdateSubnetRequest) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *UpdateSubnetRequest) GetAllowDnsResolution() bool {
	if x != nil {
		return x.xxx_hidden_AllowDnsResolution
	}
	return false
}

func (x *UpdateSubnetRequest) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *UpdateSubnetRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *UpdateSubnetRequest) SetCidr(v string) {
	x.xxx_hidden_Cidr = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *UpdateSubnetRequest) SetGatewayIp(v string) {
	x.xxx_hidden_GatewayIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *UpdateSubnetRequest) SetDnsServers(v []string) {
	x.xxx_hidden_DnsServers = v
}

func (x *UpdateSubnetRequest) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *UpdateSubnetRequest) SetAllowDnsResolution(v bool) {
	x.xxx_hidden_AllowDnsResolution = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *UpdateSubnetRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateSubnetRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateSubnetRequest) HasCidr() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdateSubnetRequest) HasGatewayIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UpdateSubnetRequest) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *UpdateSubnetRequest) HasAllowDnsResolution() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *UpdateSubnetRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdateSubnetRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *UpdateSubnetRequest) ClearCidr() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Cidr = nil
}

func (x *UpdateSubnetRequest) ClearGatewayIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_GatewayIp = nil
}

func (x *UpdateSubnetRequest) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Description = nil
}

func (x *UpdateSubnetRequest) ClearAllowDnsResolution() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_AllowDnsResolution = false
}

type UpdateSubnetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                 *int32
	Name               *string
	Cidr               *string
	GatewayIp          *string
	DnsServers         []string
	Description        *string
	AllowDnsResolution *bool
}

func (b0 UpdateSubnetRequest_builder) Build() *UpdateSubnetRequest {
	m0 := &UpdateSubnetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Name = b.Name
	}
	if b.Cidr != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Cidr = b.Cidr
	}
	if b.GatewayIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_GatewayIp = b.GatewayIp
	}
	x.xxx_hidden_DnsServers = b.DnsServers
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Description = b.Description
	}
	if b.AllowDnsResolution != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_AllowDnsResolution = *b.AllowDnsResolution
	}
	return m0
}

type UpdateIPRangeRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_StartIp     *string                `protobuf:"bytes,2,opt,name=start_ip,json=startIp"`
	xxx_hidden_EndIp       *string                `protobuf:"bytes,3,opt,name=end_ip,json=endIp"`
	xxx_hidden_Comment     *string                `protobuf:"bytes,4,opt,name=comment"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateIPRangeRequest) Reset() {
	*x = UpdateIPRangeRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateIPRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIPRangeRequest) ProtoMessage() {}

func (x *UpdateIPRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateIPRangeRequest) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdateIPRangeRequest) GetStartIp() string {
	if x != nil {
		if x.xxx_hidden_StartIp != nil {
			return *x.xxx_hidden_StartIp
		}
		return ""
	}
	return ""
}

func (x *UpdateIPRangeRequest) GetEndIp() string {
	if x != nil {
		if x.xxx_hidden_EndIp != nil {
			return *x.xxx_hidden_EndIp
		}
		return ""
	}
	return ""
}

func (x *UpdateIPRangeRequest) GetComment() string {
	if x != nil {
		if x.xxx_hidden_Comment != nil {
			return *x.xxx_hidden_Comment
		}
		return ""
	}
	return ""
}

func (x *UpdateIPRangeRequest) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *UpdateIPRangeRequest) SetStartIp(v string) {
	x.xxx_hidden_StartIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *UpdateIPRangeRequest) SetEndIp(v string) {
	x.xxx_hidden_EndIp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *UpdateIPRangeRequest) SetComment(v string) {
	x.xxx_hidden_Comment = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *UpdateIPRangeRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateIPRangeRequest) HasStartIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateIPRangeRequest) HasEndIp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdateIPRangeRequest) HasComment() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UpdateIPRangeRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdateIPRangeRequest) ClearStartIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_StartIp = nil
}

func (x *UpdateIPRangeRequest) ClearEndIp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_EndIp = nil
}

func (x *UpdateIPRangeRequest) ClearComment() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Comment = nil
}

type UpdateIPRangeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id      *int32
	StartIp *string
	EndIp   *string
	Comment *string
}

func (b0 UpdateIPRangeRequest_builder) Build() *UpdateIPRangeRequest {
	m0 := &UpdateIPRangeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Id = *b.Id
	}
	if b.StartIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_StartIp = b.StartIp
	}
	if b.EndIp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_EndIp = b.EndIp
	}
	if b.Comment != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Comment = b.Comment
	}
	return m0
}

type ListMachinesRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMachinesRequest) Reset() {
	*x = ListMachinesRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesRequest) ProtoMessage() {}

func (x *ListMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListMachinesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListMachinesRequest_builder) Build() *ListMachinesRequest {
	m0 := &ListMachinesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListMachinesResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Machines *[]*Machine            `protobuf:"bytes,1,rep,name=machines"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListMachinesResponse) Reset() {
	*x = ListMachinesResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesResponse) ProtoMessage() {}

func (x *ListMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListMachinesResponse) GetMachines() []*Machine {
	if x != nil {
		if x.xxx_hidden_Machines != nil {
			return *x.xxx_hidden_Machines
		}
	}
	return nil
}

func (x *ListMachinesResponse) SetMachines(v []*Machine) {
	x.xxx_hidden_Machines = &v
}

type ListMachinesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Machines []*Machine
}

func (b0 ListMachinesResponse_builder) Build() *ListMachinesResponse {
	m0 := &ListMachinesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Machines = &b.Machines
	return m0
}

type AddMachinesRequest struct {
	state                  protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_ModelUuid   *string                          `protobuf:"bytes,1,opt,name=model_uuid,json=modelUuid"`
	xxx_hidden_Parameters  *[]*AddMachinesRequest_Parameter `protobuf:"bytes,2,rep,name=parameters"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AddMachinesRequest) Reset() {
	*x = AddMachinesRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMachinesRequest) ProtoMessage() {}

func (x *AddMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddMachinesRequest) GetModelUuid() string {
	if x != nil {
		if x.xxx_hidden_ModelUuid != nil {
			return *x.xxx_hidden_ModelUuid
		}
		return ""
	}
	return ""
}

func (x *AddMachinesRequest) GetParameters() []*AddMachinesRequest_Parameter {
	if x != nil {
		if x.xxx_hidden_Parameters != nil {
			return *x.xxx_hidden_Parameters
		}
	}
	return nil
}

func (x *AddMachinesRequest) SetModelUuid(v string) {
	x.xxx_hidden_ModelUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *AddMachinesRequest) SetParameters(v []*AddMachinesRequest_Parameter) {
	x.xxx_hidden_Parameters = &v
}

func (x *AddMachinesRequest) HasModelUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AddMachinesRequest) ClearModelUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ModelUuid = nil
}

type AddMachinesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ModelUuid  *string
	Parameters []*AddMachinesRequest_Parameter
}

func (b0 AddMachinesRequest_builder) Build() *AddMachinesRequest {
	m0 := &AddMachinesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ModelUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_ModelUuid = b.ModelUuid
	}
	x.xxx_hidden_Parameters = &b.Parameters
	return m0
}

type AddMachinesResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Machines []string               `protobuf:"bytes,1,rep,name=machines"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AddMachinesResponse) Reset() {
	*x = AddMachinesResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMachinesResponse) ProtoMessage() {}

func (x *AddMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddMachinesResponse) GetMachines() []string {
	if x != nil {
		return x.xxx_hidden_Machines
	}
	return nil
}

func (x *AddMachinesResponse) SetMachines(v []string) {
	x.xxx_hidden_Machines = v
}

type AddMachinesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Machines []string
}

func (b0 AddMachinesResponse_builder) Build() *AddMachinesResponse {
	m0 := &AddMachinesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Machines = b.Machines
	return m0
}

type ImportBootResourcesRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportBootResourcesRequest) Reset() {
	*x = ImportBootResourcesRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportBootResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBootResourcesRequest) ProtoMessage() {}

func (x *ImportBootResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ImportBootResourcesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ImportBootResourcesRequest_builder) Build() *ImportBootResourcesRequest {
	m0 := &ImportBootResourcesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type PowerOnMachineRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SystemId    *string                `protobuf:"bytes,1,opt,name=system_id,json=systemId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PowerOnMachineRequest) Reset() {
	*x = PowerOnMachineRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerOnMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOnMachineRequest) ProtoMessage() {}

func (x *PowerOnMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PowerOnMachineRequest) GetSystemId() string {
	if x != nil {
		if x.xxx_hidden_SystemId != nil {
			return *x.xxx_hidden_SystemId
		}
		return ""
	}
	return ""
}

func (x *PowerOnMachineRequest) SetSystemId(v string) {
	x.xxx_hidden_SystemId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *PowerOnMachineRequest) HasSystemId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PowerOnMachineRequest) ClearSystemId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SystemId = nil
}

type PowerOnMachineRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SystemId *string
}

func (b0 PowerOnMachineRequest_builder) Build() *PowerOnMachineRequest {
	m0 := &PowerOnMachineRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SystemId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_SystemId = b.SystemId
	}
	return m0
}

type PowerOffMachineRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SystemId    *string                `protobuf:"bytes,1,opt,name=system_id,json=systemId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PowerOffMachineRequest) Reset() {
	*x = PowerOffMachineRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerOffMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOffMachineRequest) ProtoMessage() {}

func (x *PowerOffMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PowerOffMachineRequest) GetSystemId() string {
	if x != nil {
		if x.xxx_hidden_SystemId != nil {
			return *x.xxx_hidden_SystemId
		}
		return ""
	}
	return ""
}

func (x *PowerOffMachineRequest) SetSystemId(v string) {
	x.xxx_hidden_SystemId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *PowerOffMachineRequest) HasSystemId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PowerOffMachineRequest) ClearSystemId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SystemId = nil
}

type PowerOffMachineRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SystemId *string
}

func (b0 PowerOffMachineRequest_builder) Build() *PowerOffMachineRequest {
	m0 := &PowerOffMachineRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SystemId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_SystemId = b.SystemId
	}
	return m0
}

type CommissionMachineRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SystemId       *string                `protobuf:"bytes,1,opt,name=system_id,json=systemId"`
	xxx_hidden_EnableSsh      bool                   `protobuf:"varint,2,opt,name=enable_ssh,json=enableSsh"`
	xxx_hidden_SkipBmcConfig  bool                   `protobuf:"varint,3,opt,name=skip_bmc_config,json=skipBmcConfig"`
	xxx_hidden_SkipNetworking bool                   `protobuf:"varint,4,opt,name=skip_networking,json=skipNetworking"`
	xxx_hidden_SkipStorage    bool                   `protobuf:"varint,5,opt,name=skip_storage,json=skipStorage"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CommissionMachineRequest) Reset() {
	*x = CommissionMachineRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommissionMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionMachineRequest) ProtoMessage() {}

func (x *CommissionMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommissionMachineRequest) GetSystemId() string {
	if x != nil {
		if x.xxx_hidden_SystemId != nil {
			return *x.xxx_hidden_SystemId
		}
		return ""
	}
	return ""
}

func (x *CommissionMachineRequest) GetEnableSsh() bool {
	if x != nil {
		return x.xxx_hidden_EnableSsh
	}
	return false
}

func (x *CommissionMachineRequest) GetSkipBmcConfig() bool {
	if x != nil {
		return x.xxx_hidden_SkipBmcConfig
	}
	return false
}

func (x *CommissionMachineRequest) GetSkipNetworking() bool {
	if x != nil {
		return x.xxx_hidden_SkipNetworking
	}
	return false
}

func (x *CommissionMachineRequest) GetSkipStorage() bool {
	if x != nil {
		return x.xxx_hidden_SkipStorage
	}
	return false
}

func (x *CommissionMachineRequest) SetSystemId(v string) {
	x.xxx_hidden_SystemId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CommissionMachineRequest) SetEnableSsh(v bool) {
	x.xxx_hidden_EnableSsh = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CommissionMachineRequest) SetSkipBmcConfig(v bool) {
	x.xxx_hidden_SkipBmcConfig = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CommissionMachineRequest) SetSkipNetworking(v bool) {
	x.xxx_hidden_SkipNetworking = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *CommissionMachineRequest) SetSkipStorage(v bool) {
	x.xxx_hidden_SkipStorage = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *CommissionMachineRequest) HasSystemId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CommissionMachineRequest) HasEnableSsh() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CommissionMachineRequest) HasSkipBmcConfig() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CommissionMachineRequest) HasSkipNetworking() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CommissionMachineRequest) HasSkipStorage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CommissionMachineRequest) ClearSystemId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SystemId = nil
}

func (x *CommissionMachineRequest) ClearEnableSsh() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_EnableSsh = false
}

func (x *CommissionMachineRequest) ClearSkipBmcConfig() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_SkipBmcConfig = false
}

func (x *CommissionMachineRequest) ClearSkipNetworking() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_SkipNetworking = false
}

func (x *CommissionMachineRequest) ClearSkipStorage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_SkipStorage = false
}

type CommissionMachineRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SystemId       *string
	EnableSsh      *bool
	SkipBmcConfig  *bool
	SkipNetworking *bool
	SkipStorage    *bool
}

func (b0 CommissionMachineRequest_builder) Build() *CommissionMachineRequest {
	m0 := &CommissionMachineRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SystemId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_SystemId = b.SystemId
	}
	if b.EnableSsh != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_EnableSsh = *b.EnableSsh
	}
	if b.SkipBmcConfig != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_SkipBmcConfig = *b.SkipBmcConfig
	}
	if b.SkipNetworking != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_SkipNetworking = *b.SkipNetworking
	}
	if b.SkipStorage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_SkipStorage = *b.SkipStorage
	}
	return m0
}

type ListModelsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListModelsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListModelsRequest_builder) Build() *ListModelsRequest {
	m0 := &ListModelsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListModelsResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Models *[]*Model              `protobuf:"bytes,1,rep,name=models"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		if x.xxx_hidden_Models != nil {
			return *x.xxx_hidden_Models
		}
	}
	return nil
}

func (x *ListModelsResponse) SetModels(v []*Model) {
	x.xxx_hidden_Models = &v
}

type ListModelsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Models []*Model
}

func (b0 ListModelsResponse_builder) Build() *ListModelsResponse {
	m0 := &ListModelsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Models = &b.Models
	return m0
}

type CreateModelRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateModelRequest) Reset() {
	*x = CreateModelRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModelRequest) ProtoMessage() {}

func (x *CreateModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateModelRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *CreateModelRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *CreateModelRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateModelRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

type CreateModelRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name *string
}

func (b0 CreateModelRequest_builder) Build() *CreateModelRequest {
	m0 := &CreateModelRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

type GetModelConfigsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Uuid        *string                `protobuf:"bytes,1,opt,name=uuid"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetModelConfigsRequest) Reset() {
	*x = GetModelConfigsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelConfigsRequest) ProtoMessage() {}

func (x *GetModelConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetModelConfigsRequest) GetUuid() string {
	if x != nil {
		if x.xxx_hidden_Uuid != nil {
			return *x.xxx_hidden_Uuid
		}
		return ""
	}
	return ""
}

func (x *GetModelConfigsRequest) SetUuid(v string) {
	x.xxx_hidden_Uuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *GetModelConfigsRequest) HasUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetModelConfigsRequest) ClearUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Uuid = nil
}

type GetModelConfigsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Uuid *string
}

func (b0 GetModelConfigsRequest_builder) Build() *GetModelConfigsRequest {
	m0 := &GetModelConfigsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Uuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Uuid = b.Uuid
	}
	return m0
}

type GetModelConfigsResponse struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ModelConfigs map[string]string      `protobuf:"bytes,1,rep,name=model_configs,json=modelConfigs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetModelConfigsResponse) Reset() {
	*x = GetModelConfigsResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelConfigsResponse) ProtoMessage() {}

func (x *GetModelConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetModelConfigsResponse) GetModelConfigs() map[string]string {
	if x != nil {
		return x.xxx_hidden_ModelConfigs
	}
	return nil
}

func (x *GetModelConfigsResponse) SetModelConfigs(v map[string]string) {
	x.xxx_hidden_ModelConfigs = v
}

type GetModelConfigsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ModelConfigs map[string]string
}

func (b0 GetModelConfigsResponse_builder) Build() *GetModelConfigsResponse {
	m0 := &GetModelConfigsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ModelConfigs = b.ModelConfigs
	return m0
}

type ListApplicationsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApplicationsRequest) Reset() {
	*x = ListApplicationsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsRequest) ProtoMessage() {}

func (x *ListApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListApplicationsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListApplicationsRequest_builder) Build() *ListApplicationsRequest {
	m0 := &ListApplicationsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListApplicationsResponse struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Applications *[]*Application        `protobuf:"bytes,1,rep,name=applications"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ListApplicationsResponse) Reset() {
	*x = ListApplicationsResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsResponse) ProtoMessage() {}

func (x *ListApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListApplicationsResponse) GetApplications() []*Application {
	if x != nil {
		if x.xxx_hidden_Applications != nil {
			return *x.xxx_hidden_Applications
		}
	}
	return nil
}

func (x *ListApplicationsResponse) SetApplications(v []*Application) {
	x.xxx_hidden_Applications = &v
}

type ListApplicationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Applications []*Application
}

func (b0 ListApplicationsResponse_builder) Build() *ListApplicationsResponse {
	m0 := &ListApplicationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Applications = &b.Applications
	return m0
}

type CreateApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type CreateApplicationRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 CreateApplicationRequest_builder) Build() *CreateApplicationRequest {
	m0 := &CreateApplicationRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type DeleteApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationRequest) Reset() {
	*x = DeleteApplicationRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationRequest) ProtoMessage() {}

func (x *DeleteApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type DeleteApplicationRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 DeleteApplicationRequest_builder) Build() *DeleteApplicationRequest {
	m0 := &DeleteApplicationRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type UpdateApplicationUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationUnitsRequest) Reset() {
	*x = UpdateApplicationUnitsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationUnitsRequest) ProtoMessage() {}

func (x *UpdateApplicationUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type UpdateApplicationUnitsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 UpdateApplicationUnitsRequest_builder) Build() *UpdateApplicationUnitsRequest {
	m0 := &UpdateApplicationUnitsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type UpdateApplicationRelationRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationRelationRequest) Reset() {
	*x = UpdateApplicationRelationRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationRelationRequest) ProtoMessage() {}

func (x *UpdateApplicationRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type UpdateApplicationRelationRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 UpdateApplicationRelationRequest_builder) Build() *UpdateApplicationRelationRequest {
	m0 := &UpdateApplicationRelationRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type UpdateApplicationConfigRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationConfigRequest) Reset() {
	*x = UpdateApplicationConfigRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationConfigRequest) ProtoMessage() {}

func (x *UpdateApplicationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type UpdateApplicationConfigRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 UpdateApplicationConfigRequest_builder) Build() *UpdateApplicationConfigRequest {
	m0 := &UpdateApplicationConfigRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ExposeApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExposeApplicationRequest) Reset() {
	*x = ExposeApplicationRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExposeApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposeApplicationRequest) ProtoMessage() {}

func (x *ExposeApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ExposeApplicationRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ExposeApplicationRequest_builder) Build() *ExposeApplicationRequest {
	m0 := &ExposeApplicationRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListIntegrationsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIntegrationsRequest) Reset() {
	*x = ListIntegrationsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIntegrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntegrationsRequest) ProtoMessage() {}

func (x *ListIntegrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListIntegrationsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListIntegrationsRequest_builder) Build() *ListIntegrationsRequest {
	m0 := &ListIntegrationsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListIntegrationsResponse struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Integrations *[]*Integration        `protobuf:"bytes,1,rep,name=integrations"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ListIntegrationsResponse) Reset() {
	*x = ListIntegrationsResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIntegrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntegrationsResponse) ProtoMessage() {}

func (x *ListIntegrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListIntegrationsResponse) GetIntegrations() []*Integration {
	if x != nil {
		if x.xxx_hidden_Integrations != nil {
			return *x.xxx_hidden_Integrations
		}
	}
	return nil
}

func (x *ListIntegrationsResponse) SetIntegrations(v []*Integration) {
	x.xxx_hidden_Integrations = &v
}

type ListIntegrationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Integrations []*Integration
}

func (b0 ListIntegrationsResponse_builder) Build() *ListIntegrationsResponse {
	m0 := &ListIntegrationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Integrations = &b.Integrations
	return m0
}

type ListActionsRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActionsRequest) Reset() {
	*x = ListActionsRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionsRequest) ProtoMessage() {}

func (x *ListActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ListActionsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ListActionsRequest_builder) Build() *ListActionsRequest {
	m0 := &ListActionsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListActionsResponse struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Actions *[]*Action             `protobuf:"bytes,1,rep,name=Actions"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListActionsResponse) Reset() {
	*x = ListActionsResponse{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionsResponse) ProtoMessage() {}

func (x *ListActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListActionsResponse) GetActions() []*Action {
	if x != nil {
		if x.xxx_hidden_Actions != nil {
			return *x.xxx_hidden_Actions
		}
	}
	return nil
}

func (x *ListActionsResponse) SetActions(v []*Action) {
	x.xxx_hidden_Actions = &v
}

type ListActionsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Actions []*Action
}

func (b0 ListActionsResponse_builder) Build() *ListActionsResponse {
	m0 := &ListActionsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Actions = &b.Actions
	return m0
}

type RunActionRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunActionRequest) Reset() {
	*x = RunActionRequest{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunActionRequest) ProtoMessage() {}

func (x *RunActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type RunActionRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 RunActionRequest_builder) Build() *RunActionRequest {
	m0 := &RunActionRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Network_Setting struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Vlan    *VLAN                  `protobuf:"bytes,1,opt,name=vlan"`
	xxx_hidden_Subnet  *Subnet                `protobuf:"bytes,2,opt,name=subnet"`
	xxx_hidden_IpRange *IPRange               `protobuf:"bytes,3,opt,name=ip_range,json=ipRange"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Network_Setting) Reset() {
	*x = Network_Setting{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network_Setting) ProtoMessage() {}

func (x *Network_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Network_Setting) GetVlan() *VLAN {
	if x != nil {
		return x.xxx_hidden_Vlan
	}
	return nil
}

func (x *Network_Setting) GetSubnet() *Subnet {
	if x != nil {
		return x.xxx_hidden_Subnet
	}
	return nil
}

func (x *Network_Setting) GetIpRange() *IPRange {
	if x != nil {
		return x.xxx_hidden_IpRange
	}
	return nil
}

func (x *Network_Setting) SetVlan(v *VLAN) {
	x.xxx_hidden_Vlan = v
}

func (x *Network_Setting) SetSubnet(v *Subnet) {
	x.xxx_hidden_Subnet = v
}

func (x *Network_Setting) SetIpRange(v *IPRange) {
	x.xxx_hidden_IpRange = v
}

func (x *Network_Setting) HasVlan() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Vlan != nil
}

func (x *Network_Setting) HasSubnet() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Subnet != nil
}

func (x *Network_Setting) HasIpRange() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_IpRange != nil
}

func (x *Network_Setting) ClearVlan() {
	x.xxx_hidden_Vlan = nil
}

func (x *Network_Setting) ClearSubnet() {
	x.xxx_hidden_Subnet = nil
}

func (x *Network_Setting) ClearIpRange() {
	x.xxx_hidden_IpRange = nil
}

type Network_Setting_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Vlan    *VLAN
	Subnet  *Subnet
	IpRange *IPRange
}

func (b0 Network_Setting_builder) Build() *Network_Setting {
	m0 := &Network_Setting{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Vlan = b.Vlan
	x.xxx_hidden_Subnet = b.Subnet
	x.xxx_hidden_IpRange = b.IpRange
	return m0
}

type Machine_NUMANode struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Index       int32                  `protobuf:"varint,1,opt,name=index"`
	xxx_hidden_Cores       int32                  `protobuf:"varint,2,opt,name=cores"`
	xxx_hidden_Memory      int64                  `protobuf:"varint,3,opt,name=memory"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Machine_NUMANode) Reset() {
	*x = Machine_NUMANode{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine_NUMANode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_NUMANode) ProtoMessage() {}

func (x *Machine_NUMANode) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Machine_NUMANode) GetIndex() int32 {
	if x != nil {
		return x.xxx_hidden_Index
	}
	return 0
}

func (x *Machine_NUMANode) GetCores() int32 {
	if x != nil {
		return x.xxx_hidden_Cores
	}
	return 0
}

func (x *Machine_NUMANode) GetMemory() int64 {
	if x != nil {
		return x.xxx_hidden_Memory
	}
	return 0
}

func (x *Machine_NUMANode) SetIndex(v int32) {
	x.xxx_hidden_Index = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Machine_NUMANode) SetCores(v int32) {
	x.xxx_hidden_Cores = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Machine_NUMANode) SetMemory(v int64) {
	x.xxx_hidden_Memory = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *Machine_NUMANode) HasIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Machine_NUMANode) HasCores() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Machine_NUMANode) HasMemory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Machine_NUMANode) ClearIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Index = 0
}

func (x *Machine_NUMANode) ClearCores() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Cores = 0
}

func (x *Machine_NUMANode) ClearMemory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Memory = 0
}

type Machine_NUMANode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Index  *int32
	Cores  *int32
	Memory *int64
}

func (b0 Machine_NUMANode_builder) Build() *Machine_NUMANode {
	m0 := &Machine_NUMANode{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Index != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Index = *b.Index
	}
	if b.Cores != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Cores = *b.Cores
	}
	if b.Memory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Memory = *b.Memory
	}
	return m0
}

type Machine_BlockDevice struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BootDisk        bool                   `protobuf:"varint,1,opt,name=boot_disk,json=bootDisk"`
	xxx_hidden_Name            *string                `protobuf:"bytes,11,opt,name=name"`
	xxx_hidden_Serial          *string                `protobuf:"bytes,12,opt,name=serial"`
	xxx_hidden_Model           *string                `protobuf:"bytes,21,opt,name=model"`
	xxx_hidden_FirmwareVersion *string                `protobuf:"bytes,22,opt,name=firmware_version,json=firmwareVersion"`
	xxx_hidden_Size            int64                  `protobuf:"varint,31,opt,name=size"`
	xxx_hidden_Type            *string                `protobuf:"bytes,41,opt,name=type"`
	xxx_hidden_Tags            []string               `protobuf:"bytes,51,rep,name=tags"`
	xxx_hidden_UsedFor         *string                `protobuf:"bytes,61,opt,name=used_for,json=usedFor"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Machine_BlockDevice) Reset() {
	*x = Machine_BlockDevice{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine_BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_BlockDevice) ProtoMessage() {}

func (x *Machine_BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Machine_BlockDevice) GetBootDisk() bool {
	if x != nil {
		return x.xxx_hidden_BootDisk
	}
	return false
}

func (x *Machine_BlockDevice) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) GetSerial() string {
	if x != nil {
		if x.xxx_hidden_Serial != nil {
			return *x.xxx_hidden_Serial
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) GetModel() string {
	if x != nil {
		if x.xxx_hidden_Model != nil {
			return *x.xxx_hidden_Model
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) GetFirmwareVersion() string {
	if x != nil {
		if x.xxx_hidden_FirmwareVersion != nil {
			return *x.xxx_hidden_FirmwareVersion
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) GetSize() int64 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *Machine_BlockDevice) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *Machine_BlockDevice) GetUsedFor() string {
	if x != nil {
		if x.xxx_hidden_UsedFor != nil {
			return *x.xxx_hidden_UsedFor
		}
		return ""
	}
	return ""
}

func (x *Machine_BlockDevice) SetBootDisk(v bool) {
	x.xxx_hidden_BootDisk = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *Machine_BlockDevice) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *Machine_BlockDevice) SetSerial(v string) {
	x.xxx_hidden_Serial = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *Machine_BlockDevice) SetModel(v string) {
	x.xxx_hidden_Model = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *Machine_BlockDevice) SetFirmwareVersion(v string) {
	x.xxx_hidden_FirmwareVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *Machine_BlockDevice) SetSize(v int64) {
	x.xxx_hidden_Size = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *Machine_BlockDevice) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *Machine_BlockDevice) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *Machine_BlockDevice) SetUsedFor(v string) {
	x.xxx_hidden_UsedFor = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *Machine_BlockDevice) HasBootDisk() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Machine_BlockDevice) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Machine_BlockDevice) HasSerial() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Machine_BlockDevice) HasModel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Machine_BlockDevice) HasFirmwareVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Machine_BlockDevice) HasSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Machine_BlockDevice) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Machine_BlockDevice) HasUsedFor() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Machine_BlockDevice) ClearBootDisk() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BootDisk = false
}

func (x *Machine_BlockDevice) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Machine_BlockDevice) ClearSerial() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Serial = nil
}

func (x *Machine_BlockDevice) ClearModel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Model = nil
}

func (x *Machine_BlockDevice) ClearFirmwareVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_FirmwareVersion = nil
}

func (x *Machine_BlockDevice) ClearSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Size = 0
}

func (x *Machine_BlockDevice) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Type = nil
}

func (x *Machine_BlockDevice) ClearUsedFor() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_UsedFor = nil
}

type Machine_BlockDevice_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	BootDisk        *bool
	Name            *string
	Serial          *string
	Model           *string
	FirmwareVersion *string
	Size            *int64
	Type            *string
	Tags            []string
	UsedFor         *string
}

func (b0 Machine_BlockDevice_builder) Build() *Machine_BlockDevice {
	m0 := &Machine_BlockDevice{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BootDisk != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_BootDisk = *b.BootDisk
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_Name = b.Name
	}
	if b.Serial != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_Serial = b.Serial
	}
	if b.Model != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_Model = b.Model
	}
	if b.FirmwareVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_FirmwareVersion = b.FirmwareVersion
	}
	if b.Size != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_Size = *b.Size
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_Type = b.Type
	}
	x.xxx_hidden_Tags = b.Tags
	if b.UsedFor != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_UsedFor = b.UsedFor
	}
	return m0
}

type Machine_NetworkInterface struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BootInterface  bool                   `protobuf:"varint,1,opt,name=boot_interface,json=bootInterface"`
	xxx_hidden_Name           *string                `protobuf:"bytes,11,opt,name=name"`
	xxx_hidden_MacAddress     *string                `protobuf:"bytes,12,opt,name=mac_address,json=macAddress"`
	xxx_hidden_LinkConnected  bool                   `protobuf:"varint,21,opt,name=link_connected,json=linkConnected"`
	xxx_hidden_LinkSpeed      int32                  `protobuf:"varint,22,opt,name=link_speed,json=linkSpeed"`
	xxx_hidden_InterfaceSpeed int32                  `protobuf:"varint,23,opt,name=interface_speed,json=interfaceSpeed"`
	xxx_hidden_Type           *string                `protobuf:"bytes,31,opt,name=type"`
	xxx_hidden_FabricName     *string                `protobuf:"bytes,41,opt,name=fabric_name,json=fabricName"`
	xxx_hidden_FabricId       int32                  `protobuf:"varint,42,opt,name=fabric_id,json=fabricId"`
	xxx_hidden_VlanName       *string                `protobuf:"bytes,43,opt,name=vlan_name,json=vlanName"`
	xxx_hidden_VlanId         int32                  `protobuf:"varint,44,opt,name=vlan_id,json=vlanId"`
	xxx_hidden_SubnetName     *string                `protobuf:"bytes,51,opt,name=subnet_name,json=subnetName"`
	xxx_hidden_SubnetId       int32                  `protobuf:"varint,52,opt,name=subnet_id,json=subnetId"`
	xxx_hidden_IpAddress      *string                `protobuf:"bytes,61,opt,name=ip_address,json=ipAddress"`
	xxx_hidden_DhcpOn         bool                   `protobuf:"varint,71,opt,name=dhcp_on,json=dhcpOn"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Machine_NetworkInterface) Reset() {
	*x = Machine_NetworkInterface{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine_NetworkInterface) ProtoMessage() {}

func (x *Machine_NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Machine_NetworkInterface) GetBootInterface() bool {
	if x != nil {
		return x.xxx_hidden_BootInterface
	}
	return false
}

func (x *Machine_NetworkInterface) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetMacAddress() string {
	if x != nil {
		if x.xxx_hidden_MacAddress != nil {
			return *x.xxx_hidden_MacAddress
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetLinkConnected() bool {
	if x != nil {
		return x.xxx_hidden_LinkConnected
	}
	return false
}

func (x *Machine_NetworkInterface) GetLinkSpeed() int32 {
	if x != nil {
		return x.xxx_hidden_LinkSpeed
	}
	return 0
}

func (x *Machine_NetworkInterface) GetInterfaceSpeed() int32 {
	if x != nil {
		return x.xxx_hidden_InterfaceSpeed
	}
	return 0
}

func (x *Machine_NetworkInterface) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetFabricName() string {
	if x != nil {
		if x.xxx_hidden_FabricName != nil {
			return *x.xxx_hidden_FabricName
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetFabricId() int32 {
	if x != nil {
		return x.xxx_hidden_FabricId
	}
	return 0
}

func (x *Machine_NetworkInterface) GetVlanName() string {
	if x != nil {
		if x.xxx_hidden_VlanName != nil {
			return *x.xxx_hidden_VlanName
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetVlanId() int32 {
	if x != nil {
		return x.xxx_hidden_VlanId
	}
	return 0
}

func (x *Machine_NetworkInterface) GetSubnetName() string {
	if x != nil {
		if x.xxx_hidden_SubnetName != nil {
			return *x.xxx_hidden_SubnetName
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetSubnetId() int32 {
	if x != nil {
		return x.xxx_hidden_SubnetId
	}
	return 0
}

func (x *Machine_NetworkInterface) GetIpAddress() string {
	if x != nil {
		if x.xxx_hidden_IpAddress != nil {
			return *x.xxx_hidden_IpAddress
		}
		return ""
	}
	return ""
}

func (x *Machine_NetworkInterface) GetDhcpOn() bool {
	if x != nil {
		return x.xxx_hidden_DhcpOn
	}
	return false
}

func (x *Machine_NetworkInterface) SetBootInterface(v bool) {
	x.xxx_hidden_BootInterface = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 15)
}

func (x *Machine_NetworkInterface) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 15)
}

func (x *Machine_NetworkInterface) SetMacAddress(v string) {
	x.xxx_hidden_MacAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 15)
}

func (x *Machine_NetworkInterface) SetLinkConnected(v bool) {
	x.xxx_hidden_LinkConnected = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 15)
}

func (x *Machine_NetworkInterface) SetLinkSpeed(v int32) {
	x.xxx_hidden_LinkSpeed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 15)
}

func (x *Machine_NetworkInterface) SetInterfaceSpeed(v int32) {
	x.xxx_hidden_InterfaceSpeed = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 15)
}

func (x *Machine_NetworkInterface) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 15)
}

func (x *Machine_NetworkInterface) SetFabricName(v string) {
	x.xxx_hidden_FabricName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 15)
}

func (x *Machine_NetworkInterface) SetFabricId(v int32) {
	x.xxx_hidden_FabricId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 15)
}

func (x *Machine_NetworkInterface) SetVlanName(v string) {
	x.xxx_hidden_VlanName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 15)
}

func (x *Machine_NetworkInterface) SetVlanId(v int32) {
	x.xxx_hidden_VlanId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 15)
}

func (x *Machine_NetworkInterface) SetSubnetName(v string) {
	x.xxx_hidden_SubnetName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 15)
}

func (x *Machine_NetworkInterface) SetSubnetId(v int32) {
	x.xxx_hidden_SubnetId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 12, 15)
}

func (x *Machine_NetworkInterface) SetIpAddress(v string) {
	x.xxx_hidden_IpAddress = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 13, 15)
}

func (x *Machine_NetworkInterface) SetDhcpOn(v bool) {
	x.xxx_hidden_DhcpOn = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 14, 15)
}

func (x *Machine_NetworkInterface) HasBootInterface() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Machine_NetworkInterface) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Machine_NetworkInterface) HasMacAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Machine_NetworkInterface) HasLinkConnected() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Machine_NetworkInterface) HasLinkSpeed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Machine_NetworkInterface) HasInterfaceSpeed() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Machine_NetworkInterface) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Machine_NetworkInterface) HasFabricName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *Machine_NetworkInterface) HasFabricId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *Machine_NetworkInterface) HasVlanName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *Machine_NetworkInterface) HasVlanId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *Machine_NetworkInterface) HasSubnetName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *Machine_NetworkInterface) HasSubnetId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 12)
}

func (x *Machine_NetworkInterface) HasIpAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 13)
}

func (x *Machine_NetworkInterface) HasDhcpOn() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 14)
}

func (x *Machine_NetworkInterface) ClearBootInterface() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BootInterface = false
}

func (x *Machine_NetworkInterface) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Machine_NetworkInterface) ClearMacAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MacAddress = nil
}

func (x *Machine_NetworkInterface) ClearLinkConnected() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_LinkConnected = false
}

func (x *Machine_NetworkInterface) ClearLinkSpeed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_LinkSpeed = 0
}

func (x *Machine_NetworkInterface) ClearInterfaceSpeed() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_InterfaceSpeed = 0
}

func (x *Machine_NetworkInterface) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Type = nil
}

func (x *Machine_NetworkInterface) ClearFabricName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_FabricName = nil
}

func (x *Machine_NetworkInterface) ClearFabricId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_FabricId = 0
}

func (x *Machine_NetworkInterface) ClearVlanName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_VlanName = nil
}

func (x *Machine_NetworkInterface) ClearVlanId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_VlanId = 0
}

func (x *Machine_NetworkInterface) ClearSubnetName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_SubnetName = nil
}

func (x *Machine_NetworkInterface) ClearSubnetId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 12)
	x.xxx_hidden_SubnetId = 0
}

func (x *Machine_NetworkInterface) ClearIpAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 13)
	x.xxx_hidden_IpAddress = nil
}

func (x *Machine_NetworkInterface) ClearDhcpOn() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 14)
	x.xxx_hidden_DhcpOn = false
}

type Machine_NetworkInterface_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	BootInterface  *bool
	Name           *string
	MacAddress     *string
	LinkConnected  *bool
	LinkSpeed      *int32
	InterfaceSpeed *int32
	Type           *string
	FabricName     *string
	FabricId       *int32
	VlanName       *string
	VlanId         *int32
	SubnetName     *string
	SubnetId       *int32
	IpAddress      *string
	DhcpOn         *bool
}

func (b0 Machine_NetworkInterface_builder) Build() *Machine_NetworkInterface {
	m0 := &Machine_NetworkInterface{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BootInterface != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 15)
		x.xxx_hidden_BootInterface = *b.BootInterface
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 15)
		x.xxx_hidden_Name = b.Name
	}
	if b.MacAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 15)
		x.xxx_hidden_MacAddress = b.MacAddress
	}
	if b.LinkConnected != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 15)
		x.xxx_hidden_LinkConnected = *b.LinkConnected
	}
	if b.LinkSpeed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 15)
		x.xxx_hidden_LinkSpeed = *b.LinkSpeed
	}
	if b.InterfaceSpeed != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 15)
		x.xxx_hidden_InterfaceSpeed = *b.InterfaceSpeed
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 15)
		x.xxx_hidden_Type = b.Type
	}
	if b.FabricName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 15)
		x.xxx_hidden_FabricName = b.FabricName
	}
	if b.FabricId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 15)
		x.xxx_hidden_FabricId = *b.FabricId
	}
	if b.VlanName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 15)
		x.xxx_hidden_VlanName = b.VlanName
	}
	if b.VlanId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 15)
		x.xxx_hidden_VlanId = *b.VlanId
	}
	if b.SubnetName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 15)
		x.xxx_hidden_SubnetName = b.SubnetName
	}
	if b.SubnetId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 12, 15)
		x.xxx_hidden_SubnetId = *b.SubnetId
	}
	if b.IpAddress != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 13, 15)
		x.xxx_hidden_IpAddress = b.IpAddress
	}
	if b.DhcpOn != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 14, 15)
		x.xxx_hidden_DhcpOn = *b.DhcpOn
	}
	return m0
}

type AddMachinesRequest_Constraint struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Architecture *string                `protobuf:"bytes,1,opt,name=architecture"`
	xxx_hidden_CpuCores     uint64                 `protobuf:"varint,2,opt,name=cpu_cores,json=cpuCores"`
	xxx_hidden_MemoryMb     uint64                 `protobuf:"varint,3,opt,name=memory_mb,json=memoryMb"`
	xxx_hidden_Tags         []string               `protobuf:"bytes,11,rep,name=tags"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AddMachinesRequest_Constraint) Reset() {
	*x = AddMachinesRequest_Constraint{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMachinesRequest_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMachinesRequest_Constraint) ProtoMessage() {}

func (x *AddMachinesRequest_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddMachinesRequest_Constraint) GetArchitecture() string {
	if x != nil {
		if x.xxx_hidden_Architecture != nil {
			return *x.xxx_hidden_Architecture
		}
		return ""
	}
	return ""
}

func (x *AddMachinesRequest_Constraint) GetCpuCores() uint64 {
	if x != nil {
		return x.xxx_hidden_CpuCores
	}
	return 0
}

func (x *AddMachinesRequest_Constraint) GetMemoryMb() uint64 {
	if x != nil {
		return x.xxx_hidden_MemoryMb
	}
	return 0
}

func (x *AddMachinesRequest_Constraint) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *AddMachinesRequest_Constraint) SetArchitecture(v string) {
	x.xxx_hidden_Architecture = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *AddMachinesRequest_Constraint) SetCpuCores(v uint64) {
	x.xxx_hidden_CpuCores = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *AddMachinesRequest_Constraint) SetMemoryMb(v uint64) {
	x.xxx_hidden_MemoryMb = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *AddMachinesRequest_Constraint) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *AddMachinesRequest_Constraint) HasArchitecture() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AddMachinesRequest_Constraint) HasCpuCores() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AddMachinesRequest_Constraint) HasMemoryMb() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *AddMachinesRequest_Constraint) ClearArchitecture() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Architecture = nil
}

func (x *AddMachinesRequest_Constraint) ClearCpuCores() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CpuCores = 0
}

func (x *AddMachinesRequest_Constraint) ClearMemoryMb() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MemoryMb = 0
}

type AddMachinesRequest_Constraint_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Architecture *string
	CpuCores     *uint64
	MemoryMb     *uint64
	Tags         []string
}

func (b0 AddMachinesRequest_Constraint_builder) Build() *AddMachinesRequest_Constraint {
	m0 := &AddMachinesRequest_Constraint{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Architecture != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Architecture = b.Architecture
	}
	if b.CpuCores != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_CpuCores = *b.CpuCores
	}
	if b.MemoryMb != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_MemoryMb = *b.MemoryMb
	}
	x.xxx_hidden_Tags = b.Tags
	return m0
}

type AddMachinesRequest_Parameter struct {
	state                  protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Placement   *string                        `protobuf:"bytes,1,opt,name=placement"`
	xxx_hidden_Constraint  *AddMachinesRequest_Constraint `protobuf:"bytes,2,opt,name=constraint"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AddMachinesRequest_Parameter) Reset() {
	*x = AddMachinesRequest_Parameter{}
	mi := &file_api_stack_v1_stack_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMachinesRequest_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMachinesRequest_Parameter) ProtoMessage() {}

func (x *AddMachinesRequest_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_api_stack_v1_stack_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AddMachinesRequest_Parameter) GetPlacement() string {
	if x != nil {
		if x.xxx_hidden_Placement != nil {
			return *x.xxx_hidden_Placement
		}
		return ""
	}
	return ""
}

func (x *AddMachinesRequest_Parameter) GetConstraint() *AddMachinesRequest_Constraint {
	if x != nil {
		return x.xxx_hidden_Constraint
	}
	return nil
}

func (x *AddMachinesRequest_Parameter) SetPlacement(v string) {
	x.xxx_hidden_Placement = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *AddMachinesRequest_Parameter) SetConstraint(v *AddMachinesRequest_Constraint) {
	x.xxx_hidden_Constraint = v
}

func (x *AddMachinesRequest_Parameter) HasPlacement() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AddMachinesRequest_Parameter) HasConstraint() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Constraint != nil
}

func (x *AddMachinesRequest_Parameter) ClearPlacement() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Placement = nil
}

func (x *AddMachinesRequest_Parameter) ClearConstraint() {
	x.xxx_hidden_Constraint = nil
}

type AddMachinesRequest_Parameter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Placement  *string
	Constraint *AddMachinesRequest_Constraint
}

func (b0 AddMachinesRequest_Parameter_builder) Build() *AddMachinesRequest_Parameter {
	m0 := &AddMachinesRequest_Parameter{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Placement != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Placement = b.Placement
	}
	x.xxx_hidden_Constraint = b.Constraint
	return m0
}

var File_api_stack_v1_stack_proto protoreflect.FileDescriptor

var file_api_stack_v1_stack_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x11, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9a,
	0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x52, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x07,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x04,
	0x56, 0x4c, 0x41, 0x4e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x6e, 0x22, 0x2c, 0x0a, 0x06, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x0f, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x91,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x92, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x77, 0x65, 0x5f, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x65, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x97, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x19,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x98, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x99, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf5, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd9, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6f, 0x73, 0x42, 0x6f,
	0x6f, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x61,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0xbd, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x55, 0x4d, 0x41, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0xa1, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0xa2, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x08, 0x4e, 0x55, 0x4d, 0x41, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0xee, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x1a, 0xdb, 0x03, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x6f, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x68,
	0x63, 0x70, 0x4f, 0x6e, 0x1a, 0x46, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x07, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x07, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x0d, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x39, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x08, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x54, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22,
	0x3a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x74,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6a, 0x75, 0x6a, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x4a, 0x75, 0x6a, 0x75, 0x22,
	0x20, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x79, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x68,
	0x63, 0x70, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x22, 0x33, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x49, 0x64, 0x22,
	0x39, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x6e,
	0x22, 0xe1, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xff,
	0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x7e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x7a, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x22, 0x31, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x34, 0x0a, 0x15, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x16, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xca,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x62, 0x6d, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x6d, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0xbc, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x12,
	0x0a, 0x10, 0x52, 0x75, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x94, 0x16, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x54, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x54, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x7e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f,
	0x6e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x57,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x68, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x52, 0x75, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x64, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0xe8, 0x07,
})

var file_api_stack_v1_stack_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_api_stack_v1_stack_proto_goTypes = []any{
	(*PackageRepository)(nil),                 // 0: openhdc.stack.v1.PackageRepository
	(*Network)(nil),                           // 1: openhdc.stack.v1.Network
	(*VLAN)(nil),                              // 2: openhdc.stack.v1.VLAN
	(*Fabric)(nil),                            // 3: openhdc.stack.v1.Fabric
	(*Subnet)(nil),                            // 4: openhdc.stack.v1.Subnet
	(*Machine)(nil),                           // 5: openhdc.stack.v1.Machine
	(*IPRange)(nil),                           // 6: openhdc.stack.v1.IPRange
	(*Model)(nil),                             // 7: openhdc.stack.v1.Model
	(*ModelConfig)(nil),                       // 8: openhdc.stack.v1.ModelConfig
	(*Application)(nil),                       // 9: openhdc.stack.v1.Application
	(*Integration)(nil),                       // 10: openhdc.stack.v1.Integration
	(*Action)(nil),                            // 11: openhdc.stack.v1.Action
	(*ListNTPServersRequest)(nil),             // 12: openhdc.stack.v1.ListNTPServersRequest
	(*ListNTPServersResponse)(nil),            // 13: openhdc.stack.v1.ListNTPServersResponse
	(*UpdateNTPServersRequest)(nil),           // 14: openhdc.stack.v1.UpdateNTPServersRequest
	(*UpdatePackageRepositoryURLRequest)(nil), // 15: openhdc.stack.v1.UpdatePackageRepositoryURLRequest
	(*ListPackageRepositoriesRequest)(nil),    // 16: openhdc.stack.v1.ListPackageRepositoriesRequest
	(*ListPackageRepositoriesResponse)(nil),   // 17: openhdc.stack.v1.ListPackageRepositoriesResponse
	(*ListNetworksRequest)(nil),               // 18: openhdc.stack.v1.ListNetworksRequest
	(*ListNetworksResponse)(nil),              // 19: openhdc.stack.v1.ListNetworksResponse
	(*CreateNetworkRequest)(nil),              // 20: openhdc.stack.v1.CreateNetworkRequest
	(*DeleteNetworkRequest)(nil),              // 21: openhdc.stack.v1.DeleteNetworkRequest
	(*UpdateFabricRequest)(nil),               // 22: openhdc.stack.v1.UpdateFabricRequest
	(*UpdateVLANRequest)(nil),                 // 23: openhdc.stack.v1.UpdateVLANRequest
	(*UpdateSubnetRequest)(nil),               // 24: openhdc.stack.v1.UpdateSubnetRequest
	(*UpdateIPRangeRequest)(nil),              // 25: openhdc.stack.v1.UpdateIPRangeRequest
	(*ListMachinesRequest)(nil),               // 26: openhdc.stack.v1.ListMachinesRequest
	(*ListMachinesResponse)(nil),              // 27: openhdc.stack.v1.ListMachinesResponse
	(*AddMachinesRequest)(nil),                // 28: openhdc.stack.v1.AddMachinesRequest
	(*AddMachinesResponse)(nil),               // 29: openhdc.stack.v1.AddMachinesResponse
	(*ImportBootResourcesRequest)(nil),        // 30: openhdc.stack.v1.ImportBootResourcesRequest
	(*PowerOnMachineRequest)(nil),             // 31: openhdc.stack.v1.PowerOnMachineRequest
	(*PowerOffMachineRequest)(nil),            // 32: openhdc.stack.v1.PowerOffMachineRequest
	(*CommissionMachineRequest)(nil),          // 33: openhdc.stack.v1.CommissionMachineRequest
	(*ListModelsRequest)(nil),                 // 34: openhdc.stack.v1.ListModelsRequest
	(*ListModelsResponse)(nil),                // 35: openhdc.stack.v1.ListModelsResponse
	(*CreateModelRequest)(nil),                // 36: openhdc.stack.v1.CreateModelRequest
	(*GetModelConfigsRequest)(nil),            // 37: openhdc.stack.v1.GetModelConfigsRequest
	(*GetModelConfigsResponse)(nil),           // 38: openhdc.stack.v1.GetModelConfigsResponse
	(*ListApplicationsRequest)(nil),           // 39: openhdc.stack.v1.ListApplicationsRequest
	(*ListApplicationsResponse)(nil),          // 40: openhdc.stack.v1.ListApplicationsResponse
	(*CreateApplicationRequest)(nil),          // 41: openhdc.stack.v1.CreateApplicationRequest
	(*DeleteApplicationRequest)(nil),          // 42: openhdc.stack.v1.DeleteApplicationRequest
	(*UpdateApplicationUnitsRequest)(nil),     // 43: openhdc.stack.v1.UpdateApplicationUnitsRequest
	(*UpdateApplicationRelationRequest)(nil),  // 44: openhdc.stack.v1.UpdateApplicationRelationRequest
	(*UpdateApplicationConfigRequest)(nil),    // 45: openhdc.stack.v1.UpdateApplicationConfigRequest
	(*ExposeApplicationRequest)(nil),          // 46: openhdc.stack.v1.ExposeApplicationRequest
	(*ListIntegrationsRequest)(nil),           // 47: openhdc.stack.v1.ListIntegrationsRequest
	(*ListIntegrationsResponse)(nil),          // 48: openhdc.stack.v1.ListIntegrationsResponse
	(*ListActionsRequest)(nil),                // 49: openhdc.stack.v1.ListActionsRequest
	(*ListActionsResponse)(nil),               // 50: openhdc.stack.v1.ListActionsResponse
	(*RunActionRequest)(nil),                  // 51: openhdc.stack.v1.RunActionRequest
	(*Network_Setting)(nil),                   // 52: openhdc.stack.v1.Network.Setting
	(*Machine_NUMANode)(nil),                  // 53: openhdc.stack.v1.Machine.NUMANode
	(*Machine_BlockDevice)(nil),               // 54: openhdc.stack.v1.Machine.BlockDevice
	(*Machine_NetworkInterface)(nil),          // 55: openhdc.stack.v1.Machine.NetworkInterface
	nil,                                       // 56: openhdc.stack.v1.Machine.WorkloadAnnotationsEntry
	nil,                                       // 57: openhdc.stack.v1.Machine.HardwareInformationEntry
	(*AddMachinesRequest_Constraint)(nil),     // 58: openhdc.stack.v1.AddMachinesRequest.Constraint
	(*AddMachinesRequest_Parameter)(nil),      // 59: openhdc.stack.v1.AddMachinesRequest.Parameter
	nil,                                       // 60: openhdc.stack.v1.GetModelConfigsResponse.ModelConfigsEntry
	(*emptypb.Empty)(nil),                     // 61: google.protobuf.Empty
}
var file_api_stack_v1_stack_proto_depIdxs = []int32{
	3,  // 0: openhdc.stack.v1.Network.fabric:type_name -> openhdc.stack.v1.Fabric
	52, // 1: openhdc.stack.v1.Network.settings:type_name -> openhdc.stack.v1.Network.Setting
	56, // 2: openhdc.stack.v1.Machine.workload_annotations:type_name -> openhdc.stack.v1.Machine.WorkloadAnnotationsEntry
	57, // 3: openhdc.stack.v1.Machine.hardware_information:type_name -> openhdc.stack.v1.Machine.HardwareInformationEntry
	53, // 4: openhdc.stack.v1.Machine.numa_nodes:type_name -> openhdc.stack.v1.Machine.NUMANode
	54, // 5: openhdc.stack.v1.Machine.block_devices:type_name -> openhdc.stack.v1.Machine.BlockDevice
	55, // 6: openhdc.stack.v1.Machine.network_interfaces:type_name -> openhdc.stack.v1.Machine.NetworkInterface
	0,  // 7: openhdc.stack.v1.ListPackageRepositoriesResponse.package_repositories:type_name -> openhdc.stack.v1.PackageRepository
	1,  // 8: openhdc.stack.v1.ListNetworksResponse.networks:type_name -> openhdc.stack.v1.Network
	5,  // 9: openhdc.stack.v1.ListMachinesResponse.machines:type_name -> openhdc.stack.v1.Machine
	59, // 10: openhdc.stack.v1.AddMachinesRequest.parameters:type_name -> openhdc.stack.v1.AddMachinesRequest.Parameter
	7,  // 11: openhdc.stack.v1.ListModelsResponse.models:type_name -> openhdc.stack.v1.Model
	60, // 12: openhdc.stack.v1.GetModelConfigsResponse.model_configs:type_name -> openhdc.stack.v1.GetModelConfigsResponse.ModelConfigsEntry
	9,  // 13: openhdc.stack.v1.ListApplicationsResponse.applications:type_name -> openhdc.stack.v1.Application
	10, // 14: openhdc.stack.v1.ListIntegrationsResponse.integrations:type_name -> openhdc.stack.v1.Integration
	11, // 15: openhdc.stack.v1.ListActionsResponse.Actions:type_name -> openhdc.stack.v1.Action
	2,  // 16: openhdc.stack.v1.Network.Setting.vlan:type_name -> openhdc.stack.v1.VLAN
	4,  // 17: openhdc.stack.v1.Network.Setting.subnet:type_name -> openhdc.stack.v1.Subnet
	6,  // 18: openhdc.stack.v1.Network.Setting.ip_range:type_name -> openhdc.stack.v1.IPRange
	58, // 19: openhdc.stack.v1.AddMachinesRequest.Parameter.constraint:type_name -> openhdc.stack.v1.AddMachinesRequest.Constraint
	12, // 20: openhdc.stack.v1.StackService.ListNTPServers:input_type -> openhdc.stack.v1.ListNTPServersRequest
	14, // 21: openhdc.stack.v1.StackService.UpdateNTPServers:input_type -> openhdc.stack.v1.UpdateNTPServersRequest
	16, // 22: openhdc.stack.v1.StackService.ListPackageRepositories:input_type -> openhdc.stack.v1.ListPackageRepositoriesRequest
	15, // 23: openhdc.stack.v1.StackService.UpdatePackageRepositoryURL:input_type -> openhdc.stack.v1.UpdatePackageRepositoryURLRequest
	18, // 24: openhdc.stack.v1.StackService.ListNetworks:input_type -> openhdc.stack.v1.ListNetworksRequest
	20, // 25: openhdc.stack.v1.StackService.CreateNetwork:input_type -> openhdc.stack.v1.CreateNetworkRequest
	21, // 26: openhdc.stack.v1.StackService.DeleteNetwork:input_type -> openhdc.stack.v1.DeleteNetworkRequest
	22, // 27: openhdc.stack.v1.StackService.UpdateFabric:input_type -> openhdc.stack.v1.UpdateFabricRequest
	23, // 28: openhdc.stack.v1.StackService.UpdateVLAN:input_type -> openhdc.stack.v1.UpdateVLANRequest
	24, // 29: openhdc.stack.v1.StackService.UpdateSubnet:input_type -> openhdc.stack.v1.UpdateSubnetRequest
	25, // 30: openhdc.stack.v1.StackService.UpdateIPRange:input_type -> openhdc.stack.v1.UpdateIPRangeRequest
	26, // 31: openhdc.stack.v1.StackService.ListMachines:input_type -> openhdc.stack.v1.ListMachinesRequest
	28, // 32: openhdc.stack.v1.StackService.AddMachines:input_type -> openhdc.stack.v1.AddMachinesRequest
	30, // 33: openhdc.stack.v1.StackService.ImportBootResources:input_type -> openhdc.stack.v1.ImportBootResourcesRequest
	31, // 34: openhdc.stack.v1.StackService.PowerOnMachine:input_type -> openhdc.stack.v1.PowerOnMachineRequest
	32, // 35: openhdc.stack.v1.StackService.PowerOffMachine:input_type -> openhdc.stack.v1.PowerOffMachineRequest
	33, // 36: openhdc.stack.v1.StackService.CommissionMachine:input_type -> openhdc.stack.v1.CommissionMachineRequest
	34, // 37: openhdc.stack.v1.StackService.ListModels:input_type -> openhdc.stack.v1.ListModelsRequest
	36, // 38: openhdc.stack.v1.StackService.CreateModel:input_type -> openhdc.stack.v1.CreateModelRequest
	37, // 39: openhdc.stack.v1.StackService.GetModelConfigs:input_type -> openhdc.stack.v1.GetModelConfigsRequest
	39, // 40: openhdc.stack.v1.StackService.ListApplications:input_type -> openhdc.stack.v1.ListApplicationsRequest
	41, // 41: openhdc.stack.v1.StackService.CreateApplication:input_type -> openhdc.stack.v1.CreateApplicationRequest
	42, // 42: openhdc.stack.v1.StackService.DeleteApplication:input_type -> openhdc.stack.v1.DeleteApplicationRequest
	43, // 43: openhdc.stack.v1.StackService.UpdateApplicationUnits:input_type -> openhdc.stack.v1.UpdateApplicationUnitsRequest
	44, // 44: openhdc.stack.v1.StackService.UpdateApplicationRelation:input_type -> openhdc.stack.v1.UpdateApplicationRelationRequest
	45, // 45: openhdc.stack.v1.StackService.UpdateApplicationConfig:input_type -> openhdc.stack.v1.UpdateApplicationConfigRequest
	46, // 46: openhdc.stack.v1.StackService.ExposeApplication:input_type -> openhdc.stack.v1.ExposeApplicationRequest
	47, // 47: openhdc.stack.v1.StackService.ListIntegrations:input_type -> openhdc.stack.v1.ListIntegrationsRequest
	49, // 48: openhdc.stack.v1.StackService.ListActions:input_type -> openhdc.stack.v1.ListActionsRequest
	51, // 49: openhdc.stack.v1.StackService.RunAction:input_type -> openhdc.stack.v1.RunActionRequest
	13, // 50: openhdc.stack.v1.StackService.ListNTPServers:output_type -> openhdc.stack.v1.ListNTPServersResponse
	61, // 51: openhdc.stack.v1.StackService.UpdateNTPServers:output_type -> google.protobuf.Empty
	17, // 52: openhdc.stack.v1.StackService.ListPackageRepositories:output_type -> openhdc.stack.v1.ListPackageRepositoriesResponse
	0,  // 53: openhdc.stack.v1.StackService.UpdatePackageRepositoryURL:output_type -> openhdc.stack.v1.PackageRepository
	19, // 54: openhdc.stack.v1.StackService.ListNetworks:output_type -> openhdc.stack.v1.ListNetworksResponse
	1,  // 55: openhdc.stack.v1.StackService.CreateNetwork:output_type -> openhdc.stack.v1.Network
	61, // 56: openhdc.stack.v1.StackService.DeleteNetwork:output_type -> google.protobuf.Empty
	3,  // 57: openhdc.stack.v1.StackService.UpdateFabric:output_type -> openhdc.stack.v1.Fabric
	2,  // 58: openhdc.stack.v1.StackService.UpdateVLAN:output_type -> openhdc.stack.v1.VLAN
	4,  // 59: openhdc.stack.v1.StackService.UpdateSubnet:output_type -> openhdc.stack.v1.Subnet
	6,  // 60: openhdc.stack.v1.StackService.UpdateIPRange:output_type -> openhdc.stack.v1.IPRange
	27, // 61: openhdc.stack.v1.StackService.ListMachines:output_type -> openhdc.stack.v1.ListMachinesResponse
	29, // 62: openhdc.stack.v1.StackService.AddMachines:output_type -> openhdc.stack.v1.AddMachinesResponse
	61, // 63: openhdc.stack.v1.StackService.ImportBootResources:output_type -> google.protobuf.Empty
	5,  // 64: openhdc.stack.v1.StackService.PowerOnMachine:output_type -> openhdc.stack.v1.Machine
	5,  // 65: openhdc.stack.v1.StackService.PowerOffMachine:output_type -> openhdc.stack.v1.Machine
	5,  // 66: openhdc.stack.v1.StackService.CommissionMachine:output_type -> openhdc.stack.v1.Machine
	35, // 67: openhdc.stack.v1.StackService.ListModels:output_type -> openhdc.stack.v1.ListModelsResponse
	7,  // 68: openhdc.stack.v1.StackService.CreateModel:output_type -> openhdc.stack.v1.Model
	38, // 69: openhdc.stack.v1.StackService.GetModelConfigs:output_type -> openhdc.stack.v1.GetModelConfigsResponse
	40, // 70: openhdc.stack.v1.StackService.ListApplications:output_type -> openhdc.stack.v1.ListApplicationsResponse
	9,  // 71: openhdc.stack.v1.StackService.CreateApplication:output_type -> openhdc.stack.v1.Application
	61, // 72: openhdc.stack.v1.StackService.DeleteApplication:output_type -> google.protobuf.Empty
	9,  // 73: openhdc.stack.v1.StackService.UpdateApplicationUnits:output_type -> openhdc.stack.v1.Application
	9,  // 74: openhdc.stack.v1.StackService.UpdateApplicationRelation:output_type -> openhdc.stack.v1.Application
	9,  // 75: openhdc.stack.v1.StackService.UpdateApplicationConfig:output_type -> openhdc.stack.v1.Application
	9,  // 76: openhdc.stack.v1.StackService.ExposeApplication:output_type -> openhdc.stack.v1.Application
	48, // 77: openhdc.stack.v1.StackService.ListIntegrations:output_type -> openhdc.stack.v1.ListIntegrationsResponse
	50, // 78: openhdc.stack.v1.StackService.ListActions:output_type -> openhdc.stack.v1.ListActionsResponse
	11, // 79: openhdc.stack.v1.StackService.RunAction:output_type -> openhdc.stack.v1.Action
	50, // [50:80] is the sub-list for method output_type
	20, // [20:50] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_api_stack_v1_stack_proto_init() }
func file_api_stack_v1_stack_proto_init() {
	if File_api_stack_v1_stack_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_stack_v1_stack_proto_rawDesc), len(file_api_stack_v1_stack_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_stack_v1_stack_proto_goTypes,
		DependencyIndexes: file_api_stack_v1_stack_proto_depIdxs,
		MessageInfos:      file_api_stack_v1_stack_proto_msgTypes,
	}.Build()
	File_api_stack_v1_stack_proto = out.File
	file_api_stack_v1_stack_proto_goTypes = nil
	file_api_stack_v1_stack_proto_depIdxs = nil
}
