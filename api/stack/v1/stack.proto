edition = "2023";

package openhdc.stack.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/openhdc/openhdc/api/stack/v1;v1";

service StackService {
  // Global Configurations
  rpc ListNTPServers(ListNTPServersRequest) returns (ListNTPServersResponse);
  rpc UpdateNTPServers(UpdateNTPServersRequest) returns (google.protobuf.Empty);

  // Package Repository Management
  rpc ListPackageRepositories(ListPackageRepositoriesRequest) returns (ListPackageRepositoriesResponse);
  rpc UpdatePackageRepositoryURL(UpdatePackageRepositoryURLRequest) returns (PackageRepository);

  // Network Management
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (Network);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc UpdateFabric(UpdateFabricRequest) returns (Fabric);
  rpc UpdateVLAN(UpdateVLANRequest) returns (VLAN);
  rpc UpdateSubnet(UpdateSubnetRequest) returns (Subnet);
  rpc UpdateIPRange(UpdateIPRangeRequest) returns (IPRange);

  // Machine Management
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);
  rpc AddMachines(AddMachinesRequest) returns (AddMachinesResponse);

  // Machine Operations
  rpc ImportBootResources(ImportBootResourcesRequest) returns (google.protobuf.Empty);
  rpc PowerOnMachine(PowerOnMachineRequest) returns (Machine);
  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine);
  rpc CommissionMachine(CommissionMachineRequest) returns (Machine);

  // Model Operations
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
  rpc CreateModel(CreateModelRequest) returns (Model);
  rpc GetModelConfigs(GetModelConfigsRequest) returns (GetModelConfigsResponse);

  // Application Operations
  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse);
  rpc CreateApplication(CreateApplicationRequest) returns (Application);
  rpc DeleteApplication(DeleteApplicationRequest) returns (google.protobuf.Empty);
  rpc UpdateApplication(UpdateApplicationRequest) returns (Application);
  rpc AddApplicationUnit(AddApplicationUnitRequest) returns (Application);
  rpc ExposeApplication(ExposeApplicationRequest) returns (Application);

  // Integration Operations
  rpc ListIntegrations(ListIntegrationsRequest) returns (ListIntegrationsResponse);
  rpc CreateIntegration(CreateIntegrationRequest) returns (Integration);
  rpc DeleteIntegration(DeleteIntegrationRequest) returns (google.protobuf.Empty);

  // Action Operations
  rpc ListActions(ListActionsRequest) returns (ListActionsResponse);
  rpc RunAction(RunActionRequest) returns (Action);
}

message PackageRepository {
  int64 id = 1;
  string name = 2;
  string url = 3;
  bool enabled = 4;
}

message Network {
  message Setting {
    VLAN vlan = 1;
    Subnet subnet = 2;
    IPRange ip_range = 3;
  }
  Fabric fabric = 1;
  repeated Setting settings = 2;
}

message VLAN {
  int64 id = 1;
  int64 vid = 2;
  string name = 3;
  int64 mtu = 4;
  string description = 5;
  bool dhcp_on = 6;
}

message Fabric {
  int64 id = 1;
  string name = 2;
}

message Subnet {
  int64 id = 1;
  string name = 2;
  string cidr = 3;
  string gateway_ip = 4;
  repeated string dns_servers = 5;
  string description = 6;
  bool managed_allocation = 7;
  bool active_discovery = 8;
  bool allow_proxy_access = 9;
  bool allow_dns_resolution = 10;
}

message Machine {
  message NUMANode {
    int64 index = 1;
    int64 cores = 2;
    int64 memory = 3;
  }
  message BlockDevice {
    bool boot_disk = 1;
    string name = 11;
    string serial = 12;
    string model = 21;
    string firmware_version = 22;
    int64 size = 31;
    string type = 41;
    repeated string tags = 51;
    string used_for = 61;
  }
  message NetworkInterface {
    bool boot_interface = 1;
    string name = 11;
    string mac_address = 12;
    bool link_connected = 21;
    int64 link_speed = 22;
    int64 interface_speed = 23;
    string type = 31;
    string fabric_name = 41;
    int64 fabric_id = 42;
    string vlan_name = 43;
    int64 vlan_id = 44;
    string subnet_name = 51;
    int64 subnet_id = 52;
    string ip_address = 61;
    bool dhcp_on = 71;
  }
  string system_id = 1;
  string hardware_uuid = 101;
  string hostname = 102;
  string fqdn = 103;
  repeated string tags = 104;
  string description = 105;
  string status = 201;
  string power_state = 301;
  string power_type = 302;
  string osystem = 401;
  string distro_series = 402;
  string hwe_kernel = 403;
  string architecture = 404;
  int64 cpu_speed = 405;
  int64 cpu_count = 406;
  int64 memory = 407;
  double storage = 408;
  repeated string ip_addresses = 409;
  map<string, string> workload_annotations = 501;
  map<string, string> hardware_information = 601;
  string bios_boot_method = 602;
  repeated NUMANode numa_nodes = 701;
  repeated BlockDevice block_devices = 801;
  repeated NetworkInterface network_interfaces = 802;
}

message IPRange {
  int64 id = 1;
  string start_ip = 2;
  string end_ip = 3;
  string type = 4;
  string comment = 5;
}

message Model {
  string uuid = 1;
  string name = 2;
  string life = 3;
  string status = 4;
  google.protobuf.Timestamp updated_at = 5;
  int64 machine_count = 11;
  int64 core_count = 12;
  int64 unit_count = 13;
}

message ModelConfig {}

message Application {
  string machine_system_id = 1;
}

message Integration {
  int64 id = 1;
  string provider = 2;
  string requirer = 3;
  string interface = 4;
  string role = 5;
}

message Action {
  string name = 1;
  string description = 2;
  google.protobuf.Struct parameters = 3;
}

message ListNTPServersRequest {}

message ListNTPServersResponse {
  repeated string ntp_servers = 1;
}

message UpdateNTPServersRequest {
  repeated string ntp_servers = 1;
}

message UpdatePackageRepositoryURLRequest {
  int64 id = 1;
  string url = 2;
  bool skip_juju = 3;
}

message ListPackageRepositoriesRequest {}

message ListPackageRepositoriesResponse {
  repeated PackageRepository package_repositories = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message CreateNetworkRequest {
  bool dhcp_on = 1;
  string cidr = 11;
  string gateway_ip = 12;
  repeated string dns_servers = 13;
  string start_ip = 21;
  string end_ip = 22;
}

message DeleteNetworkRequest {
  int64 fabric_id = 1;
}

message UpdateFabricRequest {
  int64 id = 1;
  string name = 2;
}

message UpdateVLANRequest {
  int64 fabric_id = 1;
  int64 vid = 2;
  string name = 3;
  int64 mtu = 4;
  string description = 5;
  bool dhcp_on = 6;
}

message UpdateSubnetRequest {
  int64 id = 1;
  string name = 2;
  string cidr = 3;
  string gateway_ip = 4;
  repeated string dns_servers = 5;
  string description = 6;
  bool allow_dns_resolution = 7;
}

message UpdateIPRangeRequest {
  int64 id = 1;
  string start_ip = 2;
  string end_ip = 3;
  string comment = 4;
}

message ListMachinesRequest {}

message ListMachinesResponse {
  repeated Machine machines = 1;
}

message AddMachinesRequest {
  message Constraint {
    string architecture = 1;
    uint64 cpu_cores = 2;
    uint64 memory_mb = 3;
    repeated string tags = 11;
  }
  message Parameter {
    string placement = 1;
    Constraint constraint = 2;
  }
  string model_uuid = 1;
  repeated Parameter parameters = 2;
}

message AddMachinesResponse {
  repeated string machines = 1;
}

message ImportBootResourcesRequest {}

message PowerOnMachineRequest {
  string system_id = 1;
}

message PowerOffMachineRequest {
  string system_id = 1;
}

message CommissionMachineRequest {
  string system_id = 1;
  bool enable_ssh = 2;
  bool skip_bmc_config = 3;
  bool skip_networking = 4;
  bool skip_storage = 5;
}

message ListModelsRequest {}

message ListModelsResponse {
  repeated Model models = 1;
}

message CreateModelRequest {
  string name = 1;
}

message GetModelConfigsRequest {
  string uuid = 1;
}

message GetModelConfigsResponse {
  map<string, string> model_configs = 1;
}

message ListApplicationsRequest {}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message CreateApplicationRequest {}

message DeleteApplicationRequest {}

message UpdateApplicationRequest {}

message AddApplicationUnitRequest {}

message ExposeApplicationRequest {}

message ListIntegrationsRequest {
  string model_uuid = 1;
}

message ListIntegrationsResponse {
  repeated Integration integrations = 1;
}

message CreateIntegrationRequest {
  string model_uuid = 1;
  repeated string endpoints = 2;
}

message DeleteIntegrationRequest {
  string model_uuid = 1;
  int32 id = 2;
}

message ListActionsRequest {
  string model_uuid = 1;
  string application_name = 2;
}

message ListActionsResponse {
  repeated Action Actions = 1;
}

message RunActionRequest {}