edition = "2023";

package openhdc.stack.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/openhdc/openhdc/api/stack/v1;v1";

service StackService {
  // Global Configurations
  rpc ListNTPServers(ListNTPServersRequest) returns (ListNTPServersResponse);
  rpc UpdateNTPServers(UpdateNTPServersRequest) returns (google.protobuf.Empty);

  // Package Repository Management
  rpc ListPackageRepositories(ListPackageRepositoriesRequest) returns (ListPackageRepositoriesResponse);
  rpc UpdatePackageRepositoryURL(UpdatePackageRepositoryURLRequest) returns (PackageRepository);

  // Network Management
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (Network);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc UpdateFabric(UpdateFabricRequest) returns (Fabric);
  rpc UpdateVLAN(UpdateVLANRequest) returns (VLAN);
  rpc UpdateSubnet(UpdateSubnetRequest) returns (Subnet);
  rpc UpdateIPRange(UpdateIPRangeRequest) returns (IPRange);

  // Machine Management
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);

  // Machine Operations
  rpc ImportBootResources(ImportBootResourcesRequest) returns (google.protobuf.Empty);
  rpc PowerOnMachine(PowerOnMachineRequest) returns (Machine);
  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine);
  rpc CommissionMachine(CommissionMachineRequest) returns (Machine);

  // Model Operations
  rpc ListModelConfigs(ListModelConfigsRequest) returns (ListModelConfigsResponse);
}

message PackageRepository {
  int32 id = 1;
  string name = 2;
  string url = 3;
  bool enabled = 4;
}

message Network {
  message Setting {
    VLAN vlan = 1;
    Subnet subnet = 2;
    IPRange ip_range = 3;
  }
  Fabric fabric = 1;
  repeated Setting settings = 2;
}

message VLAN {
  int32 id = 1;
  int32 vid = 2;
  string name = 3;
  int32 mtu = 4;
  string description = 5;
  bool dhcp_on = 6;
}

message Fabric {
  int32 id = 1;
  string name = 2;
}

message Subnet {
  int32 id = 1;
  string name = 2;
  string cidr = 3;
  string gateway_ip = 4;
  repeated string dns_servers = 5;
  string description = 6;
  bool managed_allocation = 7;
  bool active_discovery = 8;
  bool allow_proxy_access = 9;
  bool allow_dns_resolution = 10;
}

message Machine {
  message NUMANode {
    int32 index = 1;
    int32 cores = 2;
    int64 memory = 3;
  }
  message BlockDevice {
    bool boot_disk = 1;
    string name = 11;
    string serial = 12;
    string model = 21;
    string firmware_version = 22;
    int64 size = 31;
    string type = 41;
    repeated string tags = 51;
    string used_for = 61;
  }
  message NetworkInterface {
    bool boot_interface = 1;
    string name = 11;
    string mac_address = 12;
    bool link_connected = 21;
    int32 link_speed = 22;
    int32 interface_speed = 23;
    string type = 31;
    string fabric_name = 41;
    int32 fabric_id = 42;
    string vlan_name = 43;
    int32 vlan_id = 44;
    string subnet_name = 51;
    int32 subnet_id = 52;
    string ip_address = 61;
    bool dhcp_on = 71;
  }
  string system_id = 1;
  string hardware_uuid = 101;
  string hostname = 102;
  string fqdn = 103;
  repeated string tags = 104;
  string description = 105;
  string status = 201;
  string power_state = 301;
  string power_type = 302;
  string osystem = 401;
  string distro_series = 402;
  string hwe_kernel = 403;
  string architecture = 404;
  int32 cpu_speed = 405;
  int32 cpu_count = 406;
  int64 memory = 407;
  double storage = 408;
  repeated string ip_addresses = 409;
  map<string, string> workload_annotations = 501;
  map<string, string> hardware_information = 601;
  string bios_boot_method = 602;
  repeated NUMANode numa_nodes = 701;
  repeated BlockDevice block_devices = 801;
  repeated NetworkInterface network_interfaces = 802;
}

message IPRange {
  int32 id = 1;
  string start_ip = 2;
  string end_ip = 3;
  string type = 4;
  string comment = 5;
}

message ListNTPServersRequest {}

message ListNTPServersResponse {
  repeated string ntp_servers = 1;
}

message UpdateNTPServersRequest {
  repeated string ntp_servers = 1;
}

message UpdatePackageRepositoryURLRequest {
  int32 id = 1;
  string url = 2;
  bool skip_juju = 3;
}

message ListPackageRepositoriesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListPackageRepositoriesResponse {
  repeated PackageRepository package_repositories = 1;
  string next_page_token = 2;
}

message ListNetworksRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListNetworksResponse {
  repeated Network networks = 1;
  string next_page_token = 2;
}

message CreateNetworkRequest {
  bool dhcp_on = 1;
  string cidr = 11;
  string gateway_ip = 12;
  repeated string dns_servers = 13;
  string start_ip = 21;
  string end_ip = 22;
}

message DeleteNetworkRequest {
  int32 fabric_id = 1;
}

message UpdateFabricRequest {
  int32 id = 1;
  string name = 2;
}

message UpdateVLANRequest {
  int32 fabric_id = 1;
  int32 vid = 2;
  string name = 3;
  int32 mtu = 4;
  string description = 5;
  bool dhcp_on = 6;
}

message UpdateSubnetRequest {
  int32 id = 1;
  string name = 2;
  string cidr = 3;
  string gateway_ip = 4;
  repeated string dns_servers = 5;
  string description = 6;
  bool allow_dns_resolution = 7;
}

message UpdateIPRangeRequest {
  int32 id = 1;
  string start_ip = 2;
  string end_ip = 3;
  string comment = 4;
}

message ListMachinesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListMachinesResponse {
  repeated Machine machines = 1;
  string next_page_token = 2;
}

message ImportBootResourcesRequest {}

message PowerOnMachineRequest {
  string system_id = 1;
}

message PowerOffMachineRequest {
  string system_id = 1;
}

message CommissionMachineRequest {
  string system_id = 1;
  bool enable_ssh = 2;
  bool skip_bmc_config = 3;
  bool skip_networking = 4;
  bool skip_storage = 5;
}

message ListModelConfigsRequest {
  string uuid = 1;
}

message ListModelConfigsResponse {
  google.protobuf.Struct configs = 1;
}