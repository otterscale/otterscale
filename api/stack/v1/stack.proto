edition = "2023";

package openhdc.stack.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/openhdc/openhdc/api/stack/v1;v1";

service StackService {
  // Global Configurations
  rpc UpdateNTPServers(UpdateNTPServersRequest) returns (google.protobuf.Empty);

  // Package Repository Management
  rpc ListPackageRepositories(ListPackageRepositoriesRequest) returns (ListPackageRepositoriesResponse);
  rpc UpdatePackageRepositoryURL(UpdatePackageRepositoryURLRequest) returns (PackageRepository);

  // Network Management
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (Network);
  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty);
  rpc UpdateFabric(UpdateFabricRequest) returns (Fabric);
  rpc UpdateVLAN(UpdateVLANRequest) returns (VLAN);
  rpc UpdateSubnet(UpdateSubnetRequest) returns (Subnet);
  rpc UpdateIPRange(UpdateIPRangeRequest) returns (IPRange);

  // Machine Operations
  rpc ImportBootResources(ImportBootResourcesRequest) returns (google.protobuf.Empty);
  rpc PowerOnMachine(PowerOnMachineRequest) returns (Machine);
  rpc PowerOffMachine(PowerOffMachineRequest) returns (Machine);
  rpc CommissionMachine(CommissionMachineRequest) returns (Machine);
}

message PackageRepository {}

message Network {}

message VLAN {
  bool dhcp_on = 1;
}

message Fabric {
  repeated VLAN vlans = 1;
}

message Subnet {}

message Machine {}

message IPRange {}

message UpdateNTPServersRequest {
  string ntp_servers = 1;
}

message UpdateNTPServersResponse {
  string ntp_servers = 1;
}

message UpdatePackageRepositoryURLRequest {
  int32 id = 1;
  string url = 2;
}

message ListPackageRepositoriesRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListPackageRepositoriesResponse {
  repeated PackageRepository package_repositories = 1;
  string next_page_token = 2;
}

message ListNetworksRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListNetworksResponse {
  repeated Network networks = 1;
  string next_page_token = 2;
}

message CreateNetworkRequest {}

message UpdateNetworkRequest {}

message DeleteNetworkRequest {
  int32 id = 1;
}

message UpdateFabricRequest {
  int32 id = 1;
}

message UpdateVLANRequest {
  int32 fabric_id = 1;
  int32 vid = 2;
}

message UpdateSubnetRequest {
  int32 id = 1;
}

message UpdateIPRangeRequest {
  int32 id = 1;
}

message ImportBootResourcesRequest {}

message PowerOnMachineRequest {
  string system_id = 1;
}

message PowerOffMachineRequest {
  string system_id = 1;
}

message CommissionMachineRequest {
  string system_id = 1;
}
