// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/stack/v1/stack.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/openhdc/api/stack/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StackServiceName is the fully-qualified name of the StackService service.
	StackServiceName = "openhdc.stack.v1.StackService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StackServiceListNTPServersProcedure is the fully-qualified name of the StackService's
	// ListNTPServers RPC.
	StackServiceListNTPServersProcedure = "/openhdc.stack.v1.StackService/ListNTPServers"
	// StackServiceUpdateNTPServersProcedure is the fully-qualified name of the StackService's
	// UpdateNTPServers RPC.
	StackServiceUpdateNTPServersProcedure = "/openhdc.stack.v1.StackService/UpdateNTPServers"
	// StackServiceListPackageRepositoriesProcedure is the fully-qualified name of the StackService's
	// ListPackageRepositories RPC.
	StackServiceListPackageRepositoriesProcedure = "/openhdc.stack.v1.StackService/ListPackageRepositories"
	// StackServiceUpdatePackageRepositoryURLProcedure is the fully-qualified name of the StackService's
	// UpdatePackageRepositoryURL RPC.
	StackServiceUpdatePackageRepositoryURLProcedure = "/openhdc.stack.v1.StackService/UpdatePackageRepositoryURL"
	// StackServiceListNetworksProcedure is the fully-qualified name of the StackService's ListNetworks
	// RPC.
	StackServiceListNetworksProcedure = "/openhdc.stack.v1.StackService/ListNetworks"
	// StackServiceCreateNetworkProcedure is the fully-qualified name of the StackService's
	// CreateNetwork RPC.
	StackServiceCreateNetworkProcedure = "/openhdc.stack.v1.StackService/CreateNetwork"
	// StackServiceDeleteNetworkProcedure is the fully-qualified name of the StackService's
	// DeleteNetwork RPC.
	StackServiceDeleteNetworkProcedure = "/openhdc.stack.v1.StackService/DeleteNetwork"
	// StackServiceUpdateFabricProcedure is the fully-qualified name of the StackService's UpdateFabric
	// RPC.
	StackServiceUpdateFabricProcedure = "/openhdc.stack.v1.StackService/UpdateFabric"
	// StackServiceUpdateVLANProcedure is the fully-qualified name of the StackService's UpdateVLAN RPC.
	StackServiceUpdateVLANProcedure = "/openhdc.stack.v1.StackService/UpdateVLAN"
	// StackServiceUpdateSubnetProcedure is the fully-qualified name of the StackService's UpdateSubnet
	// RPC.
	StackServiceUpdateSubnetProcedure = "/openhdc.stack.v1.StackService/UpdateSubnet"
	// StackServiceUpdateIPRangeProcedure is the fully-qualified name of the StackService's
	// UpdateIPRange RPC.
	StackServiceUpdateIPRangeProcedure = "/openhdc.stack.v1.StackService/UpdateIPRange"
	// StackServiceListMachinesProcedure is the fully-qualified name of the StackService's ListMachines
	// RPC.
	StackServiceListMachinesProcedure = "/openhdc.stack.v1.StackService/ListMachines"
	// StackServiceImportBootResourcesProcedure is the fully-qualified name of the StackService's
	// ImportBootResources RPC.
	StackServiceImportBootResourcesProcedure = "/openhdc.stack.v1.StackService/ImportBootResources"
	// StackServicePowerOnMachineProcedure is the fully-qualified name of the StackService's
	// PowerOnMachine RPC.
	StackServicePowerOnMachineProcedure = "/openhdc.stack.v1.StackService/PowerOnMachine"
	// StackServicePowerOffMachineProcedure is the fully-qualified name of the StackService's
	// PowerOffMachine RPC.
	StackServicePowerOffMachineProcedure = "/openhdc.stack.v1.StackService/PowerOffMachine"
	// StackServiceCommissionMachineProcedure is the fully-qualified name of the StackService's
	// CommissionMachine RPC.
	StackServiceCommissionMachineProcedure = "/openhdc.stack.v1.StackService/CommissionMachine"
	// StackServiceListModelConfigsProcedure is the fully-qualified name of the StackService's
	// ListModelConfigs RPC.
	StackServiceListModelConfigsProcedure = "/openhdc.stack.v1.StackService/ListModelConfigs"
)

// StackServiceClient is a client for the openhdc.stack.v1.StackService service.
type StackServiceClient interface {
	// Global Configurations
	ListNTPServers(context.Context, *connect.Request[v1.ListNTPServersRequest]) (*connect.Response[v1.ListNTPServersResponse], error)
	UpdateNTPServers(context.Context, *connect.Request[v1.UpdateNTPServersRequest]) (*connect.Response[emptypb.Empty], error)
	// Package Repository Management
	ListPackageRepositories(context.Context, *connect.Request[v1.ListPackageRepositoriesRequest]) (*connect.Response[v1.ListPackageRepositoriesResponse], error)
	UpdatePackageRepositoryURL(context.Context, *connect.Request[v1.UpdatePackageRepositoryURLRequest]) (*connect.Response[v1.PackageRepository], error)
	// Network Management
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.IPRange], error)
	// Machine Management
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	// Machine Operations
	ImportBootResources(context.Context, *connect.Request[v1.ImportBootResourcesRequest]) (*connect.Response[emptypb.Empty], error)
	PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error)
	CommissionMachine(context.Context, *connect.Request[v1.CommissionMachineRequest]) (*connect.Response[v1.Machine], error)
	// Model Operations
	ListModelConfigs(context.Context, *connect.Request[v1.ListModelConfigsRequest]) (*connect.Response[v1.ListModelConfigsResponse], error)
}

// NewStackServiceClient constructs a client for the openhdc.stack.v1.StackService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStackServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StackServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stackServiceMethods := v1.File_api_stack_v1_stack_proto.Services().ByName("StackService").Methods()
	return &stackServiceClient{
		listNTPServers: connect.NewClient[v1.ListNTPServersRequest, v1.ListNTPServersResponse](
			httpClient,
			baseURL+StackServiceListNTPServersProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListNTPServers")),
			connect.WithClientOptions(opts...),
		),
		updateNTPServers: connect.NewClient[v1.UpdateNTPServersRequest, emptypb.Empty](
			httpClient,
			baseURL+StackServiceUpdateNTPServersProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateNTPServers")),
			connect.WithClientOptions(opts...),
		),
		listPackageRepositories: connect.NewClient[v1.ListPackageRepositoriesRequest, v1.ListPackageRepositoriesResponse](
			httpClient,
			baseURL+StackServiceListPackageRepositoriesProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListPackageRepositories")),
			connect.WithClientOptions(opts...),
		),
		updatePackageRepositoryURL: connect.NewClient[v1.UpdatePackageRepositoryURLRequest, v1.PackageRepository](
			httpClient,
			baseURL+StackServiceUpdatePackageRepositoryURLProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdatePackageRepositoryURL")),
			connect.WithClientOptions(opts...),
		),
		listNetworks: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+StackServiceListNetworksProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListNetworks")),
			connect.WithClientOptions(opts...),
		),
		createNetwork: connect.NewClient[v1.CreateNetworkRequest, v1.Network](
			httpClient,
			baseURL+StackServiceCreateNetworkProcedure,
			connect.WithSchema(stackServiceMethods.ByName("CreateNetwork")),
			connect.WithClientOptions(opts...),
		),
		deleteNetwork: connect.NewClient[v1.DeleteNetworkRequest, emptypb.Empty](
			httpClient,
			baseURL+StackServiceDeleteNetworkProcedure,
			connect.WithSchema(stackServiceMethods.ByName("DeleteNetwork")),
			connect.WithClientOptions(opts...),
		),
		updateFabric: connect.NewClient[v1.UpdateFabricRequest, v1.Fabric](
			httpClient,
			baseURL+StackServiceUpdateFabricProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateFabric")),
			connect.WithClientOptions(opts...),
		),
		updateVLAN: connect.NewClient[v1.UpdateVLANRequest, v1.VLAN](
			httpClient,
			baseURL+StackServiceUpdateVLANProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateVLAN")),
			connect.WithClientOptions(opts...),
		),
		updateSubnet: connect.NewClient[v1.UpdateSubnetRequest, v1.Subnet](
			httpClient,
			baseURL+StackServiceUpdateSubnetProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateSubnet")),
			connect.WithClientOptions(opts...),
		),
		updateIPRange: connect.NewClient[v1.UpdateIPRangeRequest, v1.IPRange](
			httpClient,
			baseURL+StackServiceUpdateIPRangeProcedure,
			connect.WithSchema(stackServiceMethods.ByName("UpdateIPRange")),
			connect.WithClientOptions(opts...),
		),
		listMachines: connect.NewClient[v1.ListMachinesRequest, v1.ListMachinesResponse](
			httpClient,
			baseURL+StackServiceListMachinesProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListMachines")),
			connect.WithClientOptions(opts...),
		),
		importBootResources: connect.NewClient[v1.ImportBootResourcesRequest, emptypb.Empty](
			httpClient,
			baseURL+StackServiceImportBootResourcesProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ImportBootResources")),
			connect.WithClientOptions(opts...),
		),
		powerOnMachine: connect.NewClient[v1.PowerOnMachineRequest, v1.Machine](
			httpClient,
			baseURL+StackServicePowerOnMachineProcedure,
			connect.WithSchema(stackServiceMethods.ByName("PowerOnMachine")),
			connect.WithClientOptions(opts...),
		),
		powerOffMachine: connect.NewClient[v1.PowerOffMachineRequest, v1.Machine](
			httpClient,
			baseURL+StackServicePowerOffMachineProcedure,
			connect.WithSchema(stackServiceMethods.ByName("PowerOffMachine")),
			connect.WithClientOptions(opts...),
		),
		commissionMachine: connect.NewClient[v1.CommissionMachineRequest, v1.Machine](
			httpClient,
			baseURL+StackServiceCommissionMachineProcedure,
			connect.WithSchema(stackServiceMethods.ByName("CommissionMachine")),
			connect.WithClientOptions(opts...),
		),
		listModelConfigs: connect.NewClient[v1.ListModelConfigsRequest, v1.ListModelConfigsResponse](
			httpClient,
			baseURL+StackServiceListModelConfigsProcedure,
			connect.WithSchema(stackServiceMethods.ByName("ListModelConfigs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stackServiceClient implements StackServiceClient.
type stackServiceClient struct {
	listNTPServers             *connect.Client[v1.ListNTPServersRequest, v1.ListNTPServersResponse]
	updateNTPServers           *connect.Client[v1.UpdateNTPServersRequest, emptypb.Empty]
	listPackageRepositories    *connect.Client[v1.ListPackageRepositoriesRequest, v1.ListPackageRepositoriesResponse]
	updatePackageRepositoryURL *connect.Client[v1.UpdatePackageRepositoryURLRequest, v1.PackageRepository]
	listNetworks               *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	createNetwork              *connect.Client[v1.CreateNetworkRequest, v1.Network]
	deleteNetwork              *connect.Client[v1.DeleteNetworkRequest, emptypb.Empty]
	updateFabric               *connect.Client[v1.UpdateFabricRequest, v1.Fabric]
	updateVLAN                 *connect.Client[v1.UpdateVLANRequest, v1.VLAN]
	updateSubnet               *connect.Client[v1.UpdateSubnetRequest, v1.Subnet]
	updateIPRange              *connect.Client[v1.UpdateIPRangeRequest, v1.IPRange]
	listMachines               *connect.Client[v1.ListMachinesRequest, v1.ListMachinesResponse]
	importBootResources        *connect.Client[v1.ImportBootResourcesRequest, emptypb.Empty]
	powerOnMachine             *connect.Client[v1.PowerOnMachineRequest, v1.Machine]
	powerOffMachine            *connect.Client[v1.PowerOffMachineRequest, v1.Machine]
	commissionMachine          *connect.Client[v1.CommissionMachineRequest, v1.Machine]
	listModelConfigs           *connect.Client[v1.ListModelConfigsRequest, v1.ListModelConfigsResponse]
}

// ListNTPServers calls openhdc.stack.v1.StackService.ListNTPServers.
func (c *stackServiceClient) ListNTPServers(ctx context.Context, req *connect.Request[v1.ListNTPServersRequest]) (*connect.Response[v1.ListNTPServersResponse], error) {
	return c.listNTPServers.CallUnary(ctx, req)
}

// UpdateNTPServers calls openhdc.stack.v1.StackService.UpdateNTPServers.
func (c *stackServiceClient) UpdateNTPServers(ctx context.Context, req *connect.Request[v1.UpdateNTPServersRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateNTPServers.CallUnary(ctx, req)
}

// ListPackageRepositories calls openhdc.stack.v1.StackService.ListPackageRepositories.
func (c *stackServiceClient) ListPackageRepositories(ctx context.Context, req *connect.Request[v1.ListPackageRepositoriesRequest]) (*connect.Response[v1.ListPackageRepositoriesResponse], error) {
	return c.listPackageRepositories.CallUnary(ctx, req)
}

// UpdatePackageRepositoryURL calls openhdc.stack.v1.StackService.UpdatePackageRepositoryURL.
func (c *stackServiceClient) UpdatePackageRepositoryURL(ctx context.Context, req *connect.Request[v1.UpdatePackageRepositoryURLRequest]) (*connect.Response[v1.PackageRepository], error) {
	return c.updatePackageRepositoryURL.CallUnary(ctx, req)
}

// ListNetworks calls openhdc.stack.v1.StackService.ListNetworks.
func (c *stackServiceClient) ListNetworks(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// CreateNetwork calls openhdc.stack.v1.StackService.CreateNetwork.
func (c *stackServiceClient) CreateNetwork(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return c.createNetwork.CallUnary(ctx, req)
}

// DeleteNetwork calls openhdc.stack.v1.StackService.DeleteNetwork.
func (c *stackServiceClient) DeleteNetwork(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteNetwork.CallUnary(ctx, req)
}

// UpdateFabric calls openhdc.stack.v1.StackService.UpdateFabric.
func (c *stackServiceClient) UpdateFabric(ctx context.Context, req *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Fabric], error) {
	return c.updateFabric.CallUnary(ctx, req)
}

// UpdateVLAN calls openhdc.stack.v1.StackService.UpdateVLAN.
func (c *stackServiceClient) UpdateVLAN(ctx context.Context, req *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.VLAN], error) {
	return c.updateVLAN.CallUnary(ctx, req)
}

// UpdateSubnet calls openhdc.stack.v1.StackService.UpdateSubnet.
func (c *stackServiceClient) UpdateSubnet(ctx context.Context, req *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Subnet], error) {
	return c.updateSubnet.CallUnary(ctx, req)
}

// UpdateIPRange calls openhdc.stack.v1.StackService.UpdateIPRange.
func (c *stackServiceClient) UpdateIPRange(ctx context.Context, req *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.IPRange], error) {
	return c.updateIPRange.CallUnary(ctx, req)
}

// ListMachines calls openhdc.stack.v1.StackService.ListMachines.
func (c *stackServiceClient) ListMachines(ctx context.Context, req *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// ImportBootResources calls openhdc.stack.v1.StackService.ImportBootResources.
func (c *stackServiceClient) ImportBootResources(ctx context.Context, req *connect.Request[v1.ImportBootResourcesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.importBootResources.CallUnary(ctx, req)
}

// PowerOnMachine calls openhdc.stack.v1.StackService.PowerOnMachine.
func (c *stackServiceClient) PowerOnMachine(ctx context.Context, req *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.powerOnMachine.CallUnary(ctx, req)
}

// PowerOffMachine calls openhdc.stack.v1.StackService.PowerOffMachine.
func (c *stackServiceClient) PowerOffMachine(ctx context.Context, req *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.powerOffMachine.CallUnary(ctx, req)
}

// CommissionMachine calls openhdc.stack.v1.StackService.CommissionMachine.
func (c *stackServiceClient) CommissionMachine(ctx context.Context, req *connect.Request[v1.CommissionMachineRequest]) (*connect.Response[v1.Machine], error) {
	return c.commissionMachine.CallUnary(ctx, req)
}

// ListModelConfigs calls openhdc.stack.v1.StackService.ListModelConfigs.
func (c *stackServiceClient) ListModelConfigs(ctx context.Context, req *connect.Request[v1.ListModelConfigsRequest]) (*connect.Response[v1.ListModelConfigsResponse], error) {
	return c.listModelConfigs.CallUnary(ctx, req)
}

// StackServiceHandler is an implementation of the openhdc.stack.v1.StackService service.
type StackServiceHandler interface {
	// Global Configurations
	ListNTPServers(context.Context, *connect.Request[v1.ListNTPServersRequest]) (*connect.Response[v1.ListNTPServersResponse], error)
	UpdateNTPServers(context.Context, *connect.Request[v1.UpdateNTPServersRequest]) (*connect.Response[emptypb.Empty], error)
	// Package Repository Management
	ListPackageRepositories(context.Context, *connect.Request[v1.ListPackageRepositoriesRequest]) (*connect.Response[v1.ListPackageRepositoriesResponse], error)
	UpdatePackageRepositoryURL(context.Context, *connect.Request[v1.UpdatePackageRepositoryURLRequest]) (*connect.Response[v1.PackageRepository], error)
	// Network Management
	ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error)
	DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Fabric], error)
	UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.VLAN], error)
	UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Subnet], error)
	UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.IPRange], error)
	// Machine Management
	ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error)
	// Machine Operations
	ImportBootResources(context.Context, *connect.Request[v1.ImportBootResourcesRequest]) (*connect.Response[emptypb.Empty], error)
	PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error)
	PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error)
	CommissionMachine(context.Context, *connect.Request[v1.CommissionMachineRequest]) (*connect.Response[v1.Machine], error)
	// Model Operations
	ListModelConfigs(context.Context, *connect.Request[v1.ListModelConfigsRequest]) (*connect.Response[v1.ListModelConfigsResponse], error)
}

// NewStackServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStackServiceHandler(svc StackServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stackServiceMethods := v1.File_api_stack_v1_stack_proto.Services().ByName("StackService").Methods()
	stackServiceListNTPServersHandler := connect.NewUnaryHandler(
		StackServiceListNTPServersProcedure,
		svc.ListNTPServers,
		connect.WithSchema(stackServiceMethods.ByName("ListNTPServers")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateNTPServersHandler := connect.NewUnaryHandler(
		StackServiceUpdateNTPServersProcedure,
		svc.UpdateNTPServers,
		connect.WithSchema(stackServiceMethods.ByName("UpdateNTPServers")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceListPackageRepositoriesHandler := connect.NewUnaryHandler(
		StackServiceListPackageRepositoriesProcedure,
		svc.ListPackageRepositories,
		connect.WithSchema(stackServiceMethods.ByName("ListPackageRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdatePackageRepositoryURLHandler := connect.NewUnaryHandler(
		StackServiceUpdatePackageRepositoryURLProcedure,
		svc.UpdatePackageRepositoryURL,
		connect.WithSchema(stackServiceMethods.ByName("UpdatePackageRepositoryURL")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceListNetworksHandler := connect.NewUnaryHandler(
		StackServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(stackServiceMethods.ByName("ListNetworks")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceCreateNetworkHandler := connect.NewUnaryHandler(
		StackServiceCreateNetworkProcedure,
		svc.CreateNetwork,
		connect.WithSchema(stackServiceMethods.ByName("CreateNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceDeleteNetworkHandler := connect.NewUnaryHandler(
		StackServiceDeleteNetworkProcedure,
		svc.DeleteNetwork,
		connect.WithSchema(stackServiceMethods.ByName("DeleteNetwork")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateFabricHandler := connect.NewUnaryHandler(
		StackServiceUpdateFabricProcedure,
		svc.UpdateFabric,
		connect.WithSchema(stackServiceMethods.ByName("UpdateFabric")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateVLANHandler := connect.NewUnaryHandler(
		StackServiceUpdateVLANProcedure,
		svc.UpdateVLAN,
		connect.WithSchema(stackServiceMethods.ByName("UpdateVLAN")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateSubnetHandler := connect.NewUnaryHandler(
		StackServiceUpdateSubnetProcedure,
		svc.UpdateSubnet,
		connect.WithSchema(stackServiceMethods.ByName("UpdateSubnet")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceUpdateIPRangeHandler := connect.NewUnaryHandler(
		StackServiceUpdateIPRangeProcedure,
		svc.UpdateIPRange,
		connect.WithSchema(stackServiceMethods.ByName("UpdateIPRange")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceListMachinesHandler := connect.NewUnaryHandler(
		StackServiceListMachinesProcedure,
		svc.ListMachines,
		connect.WithSchema(stackServiceMethods.ByName("ListMachines")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceImportBootResourcesHandler := connect.NewUnaryHandler(
		StackServiceImportBootResourcesProcedure,
		svc.ImportBootResources,
		connect.WithSchema(stackServiceMethods.ByName("ImportBootResources")),
		connect.WithHandlerOptions(opts...),
	)
	stackServicePowerOnMachineHandler := connect.NewUnaryHandler(
		StackServicePowerOnMachineProcedure,
		svc.PowerOnMachine,
		connect.WithSchema(stackServiceMethods.ByName("PowerOnMachine")),
		connect.WithHandlerOptions(opts...),
	)
	stackServicePowerOffMachineHandler := connect.NewUnaryHandler(
		StackServicePowerOffMachineProcedure,
		svc.PowerOffMachine,
		connect.WithSchema(stackServiceMethods.ByName("PowerOffMachine")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceCommissionMachineHandler := connect.NewUnaryHandler(
		StackServiceCommissionMachineProcedure,
		svc.CommissionMachine,
		connect.WithSchema(stackServiceMethods.ByName("CommissionMachine")),
		connect.WithHandlerOptions(opts...),
	)
	stackServiceListModelConfigsHandler := connect.NewUnaryHandler(
		StackServiceListModelConfigsProcedure,
		svc.ListModelConfigs,
		connect.WithSchema(stackServiceMethods.ByName("ListModelConfigs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/openhdc.stack.v1.StackService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StackServiceListNTPServersProcedure:
			stackServiceListNTPServersHandler.ServeHTTP(w, r)
		case StackServiceUpdateNTPServersProcedure:
			stackServiceUpdateNTPServersHandler.ServeHTTP(w, r)
		case StackServiceListPackageRepositoriesProcedure:
			stackServiceListPackageRepositoriesHandler.ServeHTTP(w, r)
		case StackServiceUpdatePackageRepositoryURLProcedure:
			stackServiceUpdatePackageRepositoryURLHandler.ServeHTTP(w, r)
		case StackServiceListNetworksProcedure:
			stackServiceListNetworksHandler.ServeHTTP(w, r)
		case StackServiceCreateNetworkProcedure:
			stackServiceCreateNetworkHandler.ServeHTTP(w, r)
		case StackServiceDeleteNetworkProcedure:
			stackServiceDeleteNetworkHandler.ServeHTTP(w, r)
		case StackServiceUpdateFabricProcedure:
			stackServiceUpdateFabricHandler.ServeHTTP(w, r)
		case StackServiceUpdateVLANProcedure:
			stackServiceUpdateVLANHandler.ServeHTTP(w, r)
		case StackServiceUpdateSubnetProcedure:
			stackServiceUpdateSubnetHandler.ServeHTTP(w, r)
		case StackServiceUpdateIPRangeProcedure:
			stackServiceUpdateIPRangeHandler.ServeHTTP(w, r)
		case StackServiceListMachinesProcedure:
			stackServiceListMachinesHandler.ServeHTTP(w, r)
		case StackServiceImportBootResourcesProcedure:
			stackServiceImportBootResourcesHandler.ServeHTTP(w, r)
		case StackServicePowerOnMachineProcedure:
			stackServicePowerOnMachineHandler.ServeHTTP(w, r)
		case StackServicePowerOffMachineProcedure:
			stackServicePowerOffMachineHandler.ServeHTTP(w, r)
		case StackServiceCommissionMachineProcedure:
			stackServiceCommissionMachineHandler.ServeHTTP(w, r)
		case StackServiceListModelConfigsProcedure:
			stackServiceListModelConfigsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStackServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStackServiceHandler struct{}

func (UnimplementedStackServiceHandler) ListNTPServers(context.Context, *connect.Request[v1.ListNTPServersRequest]) (*connect.Response[v1.ListNTPServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ListNTPServers is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateNTPServers(context.Context, *connect.Request[v1.UpdateNTPServersRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdateNTPServers is not implemented"))
}

func (UnimplementedStackServiceHandler) ListPackageRepositories(context.Context, *connect.Request[v1.ListPackageRepositoriesRequest]) (*connect.Response[v1.ListPackageRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ListPackageRepositories is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdatePackageRepositoryURL(context.Context, *connect.Request[v1.UpdatePackageRepositoryURLRequest]) (*connect.Response[v1.PackageRepository], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdatePackageRepositoryURL is not implemented"))
}

func (UnimplementedStackServiceHandler) ListNetworks(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ListNetworks is not implemented"))
}

func (UnimplementedStackServiceHandler) CreateNetwork(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.Network], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.CreateNetwork is not implemented"))
}

func (UnimplementedStackServiceHandler) DeleteNetwork(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.DeleteNetwork is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateFabric(context.Context, *connect.Request[v1.UpdateFabricRequest]) (*connect.Response[v1.Fabric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdateFabric is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateVLAN(context.Context, *connect.Request[v1.UpdateVLANRequest]) (*connect.Response[v1.VLAN], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdateVLAN is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateSubnet(context.Context, *connect.Request[v1.UpdateSubnetRequest]) (*connect.Response[v1.Subnet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdateSubnet is not implemented"))
}

func (UnimplementedStackServiceHandler) UpdateIPRange(context.Context, *connect.Request[v1.UpdateIPRangeRequest]) (*connect.Response[v1.IPRange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.UpdateIPRange is not implemented"))
}

func (UnimplementedStackServiceHandler) ListMachines(context.Context, *connect.Request[v1.ListMachinesRequest]) (*connect.Response[v1.ListMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ListMachines is not implemented"))
}

func (UnimplementedStackServiceHandler) ImportBootResources(context.Context, *connect.Request[v1.ImportBootResourcesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ImportBootResources is not implemented"))
}

func (UnimplementedStackServiceHandler) PowerOnMachine(context.Context, *connect.Request[v1.PowerOnMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.PowerOnMachine is not implemented"))
}

func (UnimplementedStackServiceHandler) PowerOffMachine(context.Context, *connect.Request[v1.PowerOffMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.PowerOffMachine is not implemented"))
}

func (UnimplementedStackServiceHandler) CommissionMachine(context.Context, *connect.Request[v1.CommissionMachineRequest]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.CommissionMachine is not implemented"))
}

func (UnimplementedStackServiceHandler) ListModelConfigs(context.Context, *connect.Request[v1.ListModelConfigsRequest]) (*connect.Response[v1.ListModelConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openhdc.stack.v1.StackService.ListModelConfigs is not implemented"))
}
