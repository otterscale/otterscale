// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: api/stack/v1/stack.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StackService_ListNTPServers_FullMethodName             = "/openhdc.stack.v1.StackService/ListNTPServers"
	StackService_UpdateNTPServers_FullMethodName           = "/openhdc.stack.v1.StackService/UpdateNTPServers"
	StackService_ListPackageRepositories_FullMethodName    = "/openhdc.stack.v1.StackService/ListPackageRepositories"
	StackService_UpdatePackageRepositoryURL_FullMethodName = "/openhdc.stack.v1.StackService/UpdatePackageRepositoryURL"
	StackService_ListNetworks_FullMethodName               = "/openhdc.stack.v1.StackService/ListNetworks"
	StackService_CreateNetwork_FullMethodName              = "/openhdc.stack.v1.StackService/CreateNetwork"
	StackService_DeleteNetwork_FullMethodName              = "/openhdc.stack.v1.StackService/DeleteNetwork"
	StackService_UpdateFabric_FullMethodName               = "/openhdc.stack.v1.StackService/UpdateFabric"
	StackService_UpdateVLAN_FullMethodName                 = "/openhdc.stack.v1.StackService/UpdateVLAN"
	StackService_UpdateSubnet_FullMethodName               = "/openhdc.stack.v1.StackService/UpdateSubnet"
	StackService_UpdateIPRange_FullMethodName              = "/openhdc.stack.v1.StackService/UpdateIPRange"
	StackService_ListMachines_FullMethodName               = "/openhdc.stack.v1.StackService/ListMachines"
	StackService_GetMachine_FullMethodName                 = "/openhdc.stack.v1.StackService/GetMachine"
	StackService_AddMachines_FullMethodName                = "/openhdc.stack.v1.StackService/AddMachines"
	StackService_ImportBootResources_FullMethodName        = "/openhdc.stack.v1.StackService/ImportBootResources"
	StackService_PowerOnMachine_FullMethodName             = "/openhdc.stack.v1.StackService/PowerOnMachine"
	StackService_PowerOffMachine_FullMethodName            = "/openhdc.stack.v1.StackService/PowerOffMachine"
	StackService_CommissionMachine_FullMethodName          = "/openhdc.stack.v1.StackService/CommissionMachine"
	StackService_ListModels_FullMethodName                 = "/openhdc.stack.v1.StackService/ListModels"
	StackService_CreateModel_FullMethodName                = "/openhdc.stack.v1.StackService/CreateModel"
	StackService_GetModelConfigs_FullMethodName            = "/openhdc.stack.v1.StackService/GetModelConfigs"
	StackService_ListApplications_FullMethodName           = "/openhdc.stack.v1.StackService/ListApplications"
	StackService_CreateApplication_FullMethodName          = "/openhdc.stack.v1.StackService/CreateApplication"
	StackService_DeleteApplication_FullMethodName          = "/openhdc.stack.v1.StackService/DeleteApplication"
	StackService_UpdateApplication_FullMethodName          = "/openhdc.stack.v1.StackService/UpdateApplication"
	StackService_AddApplicationUnit_FullMethodName         = "/openhdc.stack.v1.StackService/AddApplicationUnit"
	StackService_ExposeApplication_FullMethodName          = "/openhdc.stack.v1.StackService/ExposeApplication"
	StackService_ListIntegrations_FullMethodName           = "/openhdc.stack.v1.StackService/ListIntegrations"
	StackService_CreateIntegration_FullMethodName          = "/openhdc.stack.v1.StackService/CreateIntegration"
	StackService_DeleteIntegration_FullMethodName          = "/openhdc.stack.v1.StackService/DeleteIntegration"
	StackService_ListActions_FullMethodName                = "/openhdc.stack.v1.StackService/ListActions"
	StackService_RunAction_FullMethodName                  = "/openhdc.stack.v1.StackService/RunAction"
)

// StackServiceClient is the client API for StackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackServiceClient interface {
	// Global Configurations
	ListNTPServers(ctx context.Context, in *ListNTPServersRequest, opts ...grpc.CallOption) (*ListNTPServersResponse, error)
	UpdateNTPServers(ctx context.Context, in *UpdateNTPServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Package Repository Management
	ListPackageRepositories(ctx context.Context, in *ListPackageRepositoriesRequest, opts ...grpc.CallOption) (*ListPackageRepositoriesResponse, error)
	UpdatePackageRepositoryURL(ctx context.Context, in *UpdatePackageRepositoryURLRequest, opts ...grpc.CallOption) (*PackageRepository, error)
	// Network Management
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFabric(ctx context.Context, in *UpdateFabricRequest, opts ...grpc.CallOption) (*Fabric, error)
	UpdateVLAN(ctx context.Context, in *UpdateVLANRequest, opts ...grpc.CallOption) (*VLAN, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	UpdateIPRange(ctx context.Context, in *UpdateIPRangeRequest, opts ...grpc.CallOption) (*IPRange, error)
	// Machine Management
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	AddMachines(ctx context.Context, in *AddMachinesRequest, opts ...grpc.CallOption) (*AddMachinesResponse, error)
	// Machine Operations
	ImportBootResources(ctx context.Context, in *ImportBootResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	CommissionMachine(ctx context.Context, in *CommissionMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Model Operations
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error)
	GetModelConfigs(ctx context.Context, in *GetModelConfigsRequest, opts ...grpc.CallOption) (*GetModelConfigsResponse, error)
	// Application Operations
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	AddApplicationUnit(ctx context.Context, in *AddApplicationUnitRequest, opts ...grpc.CallOption) (*Application, error)
	ExposeApplication(ctx context.Context, in *ExposeApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// Integration Operations
	ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error)
	CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Action Operations
	ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	RunAction(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*Action, error)
}

type stackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackServiceClient(cc grpc.ClientConnInterface) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) ListNTPServers(ctx context.Context, in *ListNTPServersRequest, opts ...grpc.CallOption) (*ListNTPServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNTPServersResponse)
	err := c.cc.Invoke(ctx, StackService_ListNTPServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateNTPServers(ctx context.Context, in *UpdateNTPServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateNTPServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListPackageRepositories(ctx context.Context, in *ListPackageRepositoriesRequest, opts ...grpc.CallOption) (*ListPackageRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPackageRepositoriesResponse)
	err := c.cc.Invoke(ctx, StackService_ListPackageRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdatePackageRepositoryURL(ctx context.Context, in *UpdatePackageRepositoryURLRequest, opts ...grpc.CallOption) (*PackageRepository, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageRepository)
	err := c.cc.Invoke(ctx, StackService_UpdatePackageRepositoryURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, StackService_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Network)
	err := c.cc.Invoke(ctx, StackService_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateFabric(ctx context.Context, in *UpdateFabricRequest, opts ...grpc.CallOption) (*Fabric, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fabric)
	err := c.cc.Invoke(ctx, StackService_UpdateFabric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateVLAN(ctx context.Context, in *UpdateVLANRequest, opts ...grpc.CallOption) (*VLAN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VLAN)
	err := c.cc.Invoke(ctx, StackService_UpdateVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Subnet)
	err := c.cc.Invoke(ctx, StackService_UpdateSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateIPRange(ctx context.Context, in *UpdateIPRangeRequest, opts ...grpc.CallOption) (*IPRange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPRange)
	err := c.cc.Invoke(ctx, StackService_UpdateIPRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, StackService_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, StackService_GetMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) AddMachines(ctx context.Context, in *AddMachinesRequest, opts ...grpc.CallOption) (*AddMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMachinesResponse)
	err := c.cc.Invoke(ctx, StackService_AddMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ImportBootResources(ctx context.Context, in *ImportBootResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_ImportBootResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, StackService_PowerOnMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, StackService_PowerOffMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CommissionMachine(ctx context.Context, in *CommissionMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, StackService_CommissionMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, StackService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Model)
	err := c.cc.Invoke(ctx, StackService_CreateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) GetModelConfigs(ctx context.Context, in *GetModelConfigsRequest, opts ...grpc.CallOption) (*GetModelConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelConfigsResponse)
	err := c.cc.Invoke(ctx, StackService_GetModelConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, StackService_ListApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application)
	err := c.cc.Invoke(ctx, StackService_CreateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application)
	err := c.cc.Invoke(ctx, StackService_UpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) AddApplicationUnit(ctx context.Context, in *AddApplicationUnitRequest, opts ...grpc.CallOption) (*Application, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application)
	err := c.cc.Invoke(ctx, StackService_AddApplicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ExposeApplication(ctx context.Context, in *ExposeApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Application)
	err := c.cc.Invoke(ctx, StackService_ExposeApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationsResponse)
	err := c.cc.Invoke(ctx, StackService_ListIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Integration)
	err := c.cc.Invoke(ctx, StackService_CreateIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListActions(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, StackService_ListActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) RunAction(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*Action, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Action)
	err := c.cc.Invoke(ctx, StackService_RunAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServiceServer is the server API for StackService service.
// All implementations must embed UnimplementedStackServiceServer
// for forward compatibility.
type StackServiceServer interface {
	// Global Configurations
	ListNTPServers(context.Context, *ListNTPServersRequest) (*ListNTPServersResponse, error)
	UpdateNTPServers(context.Context, *UpdateNTPServersRequest) (*emptypb.Empty, error)
	// Package Repository Management
	ListPackageRepositories(context.Context, *ListPackageRepositoriesRequest) (*ListPackageRepositoriesResponse, error)
	UpdatePackageRepositoryURL(context.Context, *UpdatePackageRepositoryURLRequest) (*PackageRepository, error)
	// Network Management
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error)
	UpdateFabric(context.Context, *UpdateFabricRequest) (*Fabric, error)
	UpdateVLAN(context.Context, *UpdateVLANRequest) (*VLAN, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error)
	UpdateIPRange(context.Context, *UpdateIPRangeRequest) (*IPRange, error)
	// Machine Management
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	GetMachine(context.Context, *GetMachineRequest) (*Machine, error)
	AddMachines(context.Context, *AddMachinesRequest) (*AddMachinesResponse, error)
	// Machine Operations
	ImportBootResources(context.Context, *ImportBootResourcesRequest) (*emptypb.Empty, error)
	PowerOnMachine(context.Context, *PowerOnMachineRequest) (*Machine, error)
	PowerOffMachine(context.Context, *PowerOffMachineRequest) (*Machine, error)
	CommissionMachine(context.Context, *CommissionMachineRequest) (*Machine, error)
	// Model Operations
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	CreateModel(context.Context, *CreateModelRequest) (*Model, error)
	GetModelConfigs(context.Context, *GetModelConfigsRequest) (*GetModelConfigsResponse, error)
	// Application Operations
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*Application, error)
	AddApplicationUnit(context.Context, *AddApplicationUnitRequest) (*Application, error)
	ExposeApplication(context.Context, *ExposeApplicationRequest) (*Application, error)
	// Integration Operations
	ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error)
	CreateIntegration(context.Context, *CreateIntegrationRequest) (*Integration, error)
	DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*emptypb.Empty, error)
	// Action Operations
	ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	RunAction(context.Context, *RunActionRequest) (*Action, error)
	mustEmbedUnimplementedStackServiceServer()
}

// UnimplementedStackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStackServiceServer struct{}

func (UnimplementedStackServiceServer) ListNTPServers(context.Context, *ListNTPServersRequest) (*ListNTPServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNTPServers not implemented")
}
func (UnimplementedStackServiceServer) UpdateNTPServers(context.Context, *UpdateNTPServersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNTPServers not implemented")
}
func (UnimplementedStackServiceServer) ListPackageRepositories(context.Context, *ListPackageRepositoriesRequest) (*ListPackageRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackageRepositories not implemented")
}
func (UnimplementedStackServiceServer) UpdatePackageRepositoryURL(context.Context, *UpdatePackageRepositoryURLRequest) (*PackageRepository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageRepositoryURL not implemented")
}
func (UnimplementedStackServiceServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedStackServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedStackServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedStackServiceServer) UpdateFabric(context.Context, *UpdateFabricRequest) (*Fabric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFabric not implemented")
}
func (UnimplementedStackServiceServer) UpdateVLAN(context.Context, *UpdateVLANRequest) (*VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVLAN not implemented")
}
func (UnimplementedStackServiceServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedStackServiceServer) UpdateIPRange(context.Context, *UpdateIPRangeRequest) (*IPRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPRange not implemented")
}
func (UnimplementedStackServiceServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedStackServiceServer) GetMachine(context.Context, *GetMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedStackServiceServer) AddMachines(context.Context, *AddMachinesRequest) (*AddMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachines not implemented")
}
func (UnimplementedStackServiceServer) ImportBootResources(context.Context, *ImportBootResourcesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBootResources not implemented")
}
func (UnimplementedStackServiceServer) PowerOnMachine(context.Context, *PowerOnMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOnMachine not implemented")
}
func (UnimplementedStackServiceServer) PowerOffMachine(context.Context, *PowerOffMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOffMachine not implemented")
}
func (UnimplementedStackServiceServer) CommissionMachine(context.Context, *CommissionMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionMachine not implemented")
}
func (UnimplementedStackServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedStackServiceServer) CreateModel(context.Context, *CreateModelRequest) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedStackServiceServer) GetModelConfigs(context.Context, *GetModelConfigsRequest) (*GetModelConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelConfigs not implemented")
}
func (UnimplementedStackServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedStackServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedStackServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedStackServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedStackServiceServer) AddApplicationUnit(context.Context, *AddApplicationUnitRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplicationUnit not implemented")
}
func (UnimplementedStackServiceServer) ExposeApplication(context.Context, *ExposeApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposeApplication not implemented")
}
func (UnimplementedStackServiceServer) ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedStackServiceServer) CreateIntegration(context.Context, *CreateIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedStackServiceServer) DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegration not implemented")
}
func (UnimplementedStackServiceServer) ListActions(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActions not implemented")
}
func (UnimplementedStackServiceServer) RunAction(context.Context, *RunActionRequest) (*Action, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAction not implemented")
}
func (UnimplementedStackServiceServer) mustEmbedUnimplementedStackServiceServer() {}
func (UnimplementedStackServiceServer) testEmbeddedByValue()                      {}

// UnsafeStackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServiceServer will
// result in compilation errors.
type UnsafeStackServiceServer interface {
	mustEmbedUnimplementedStackServiceServer()
}

func RegisterStackServiceServer(s grpc.ServiceRegistrar, srv StackServiceServer) {
	// If the following call pancis, it indicates UnimplementedStackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StackService_ServiceDesc, srv)
}

func _StackService_ListNTPServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNTPServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListNTPServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListNTPServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListNTPServers(ctx, req.(*ListNTPServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateNTPServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNTPServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateNTPServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateNTPServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateNTPServers(ctx, req.(*UpdateNTPServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListPackageRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackageRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListPackageRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListPackageRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListPackageRepositories(ctx, req.(*ListPackageRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdatePackageRepositoryURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRepositoryURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdatePackageRepositoryURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdatePackageRepositoryURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdatePackageRepositoryURL(ctx, req.(*UpdatePackageRepositoryURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateFabric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFabricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateFabric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateFabric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateFabric(ctx, req.(*UpdateFabricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateVLAN(ctx, req.(*UpdateVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateIPRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateIPRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateIPRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateIPRange(ctx, req.(*UpdateIPRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_GetMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_AddMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).AddMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_AddMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).AddMachines(ctx, req.(*AddMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ImportBootResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBootResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ImportBootResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ImportBootResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ImportBootResources(ctx, req.(*ImportBootResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_PowerOnMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).PowerOnMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_PowerOnMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).PowerOnMachine(ctx, req.(*PowerOnMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_PowerOffMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOffMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).PowerOffMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_PowerOffMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).PowerOffMachine(ctx, req.(*PowerOffMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CommissionMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommissionMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CommissionMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CommissionMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CommissionMachine(ctx, req.(*CommissionMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_GetModelConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).GetModelConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_GetModelConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).GetModelConfigs(ctx, req.(*GetModelConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_AddApplicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).AddApplicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_AddApplicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).AddApplicationUnit(ctx, req.(*AddApplicationUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ExposeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposeApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ExposeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ExposeApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ExposeApplication(ctx, req.(*ExposeApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListIntegrations(ctx, req.(*ListIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateIntegration(ctx, req.(*CreateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteIntegration(ctx, req.(*DeleteIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).ListActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_ListActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).ListActions(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_RunAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).RunAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_RunAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).RunAction(ctx, req.(*RunActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StackService_ServiceDesc is the grpc.ServiceDesc for StackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openhdc.stack.v1.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNTPServers",
			Handler:    _StackService_ListNTPServers_Handler,
		},
		{
			MethodName: "UpdateNTPServers",
			Handler:    _StackService_UpdateNTPServers_Handler,
		},
		{
			MethodName: "ListPackageRepositories",
			Handler:    _StackService_ListPackageRepositories_Handler,
		},
		{
			MethodName: "UpdatePackageRepositoryURL",
			Handler:    _StackService_UpdatePackageRepositoryURL_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _StackService_ListNetworks_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _StackService_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _StackService_DeleteNetwork_Handler,
		},
		{
			MethodName: "UpdateFabric",
			Handler:    _StackService_UpdateFabric_Handler,
		},
		{
			MethodName: "UpdateVLAN",
			Handler:    _StackService_UpdateVLAN_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _StackService_UpdateSubnet_Handler,
		},
		{
			MethodName: "UpdateIPRange",
			Handler:    _StackService_UpdateIPRange_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _StackService_ListMachines_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _StackService_GetMachine_Handler,
		},
		{
			MethodName: "AddMachines",
			Handler:    _StackService_AddMachines_Handler,
		},
		{
			MethodName: "ImportBootResources",
			Handler:    _StackService_ImportBootResources_Handler,
		},
		{
			MethodName: "PowerOnMachine",
			Handler:    _StackService_PowerOnMachine_Handler,
		},
		{
			MethodName: "PowerOffMachine",
			Handler:    _StackService_PowerOffMachine_Handler,
		},
		{
			MethodName: "CommissionMachine",
			Handler:    _StackService_CommissionMachine_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _StackService_ListModels_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _StackService_CreateModel_Handler,
		},
		{
			MethodName: "GetModelConfigs",
			Handler:    _StackService_GetModelConfigs_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _StackService_ListApplications_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _StackService_CreateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _StackService_DeleteApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _StackService_UpdateApplication_Handler,
		},
		{
			MethodName: "AddApplicationUnit",
			Handler:    _StackService_AddApplicationUnit_Handler,
		},
		{
			MethodName: "ExposeApplication",
			Handler:    _StackService_ExposeApplication_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _StackService_ListIntegrations_Handler,
		},
		{
			MethodName: "CreateIntegration",
			Handler:    _StackService_CreateIntegration_Handler,
		},
		{
			MethodName: "DeleteIntegration",
			Handler:    _StackService_DeleteIntegration_Handler,
		},
		{
			MethodName: "ListActions",
			Handler:    _StackService_ListActions_Handler,
		},
		{
			MethodName: "RunAction",
			Handler:    _StackService_RunAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stack/v1/stack.proto",
}
