// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/large_language_model/v1/large_language_model.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/otterscale/otterscale/api/large_language_model/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LargeLanguageModelServiceName is the fully-qualified name of the LargeLanguageModelService
	// service.
	LargeLanguageModelServiceName = "otterscale.large_language_model.v1.LargeLanguageModelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LargeLanguageModelServiceCheckInfrastructureStatusProcedure is the fully-qualified name of the
	// LargeLanguageModelService's CheckInfrastructureStatus RPC.
	LargeLanguageModelServiceCheckInfrastructureStatusProcedure = "/otterscale.large_language_model.v1.LargeLanguageModelService/CheckInfrastructureStatus"
	// LargeLanguageModelServiceListLargeLanguageModelsProcedure is the fully-qualified name of the
	// LargeLanguageModelService's ListLargeLanguageModels RPC.
	LargeLanguageModelServiceListLargeLanguageModelsProcedure = "/otterscale.large_language_model.v1.LargeLanguageModelService/ListLargeLanguageModels"
	// LargeLanguageModelServiceGetLargeLanguageModelProcedure is the fully-qualified name of the
	// LargeLanguageModelService's GetLargeLanguageModel RPC.
	LargeLanguageModelServiceGetLargeLanguageModelProcedure = "/otterscale.large_language_model.v1.LargeLanguageModelService/GetLargeLanguageModel"
	// LargeLanguageModelServiceCreateLargeLanguageModelProcedure is the fully-qualified name of the
	// LargeLanguageModelService's CreateLargeLanguageModel RPC.
	LargeLanguageModelServiceCreateLargeLanguageModelProcedure = "/otterscale.large_language_model.v1.LargeLanguageModelService/CreateLargeLanguageModel"
	// LargeLanguageModelServiceDeleteLargeLanguageModelProcedure is the fully-qualified name of the
	// LargeLanguageModelService's DeleteLargeLanguageModel RPC.
	LargeLanguageModelServiceDeleteLargeLanguageModelProcedure = "/otterscale.large_language_model.v1.LargeLanguageModelService/DeleteLargeLanguageModel"
)

// LargeLanguageModelServiceClient is a client for the
// otterscale.large_language_model.v1.LargeLanguageModelService service.
type LargeLanguageModelServiceClient interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListLargeLanguageModels(context.Context, *v1.ListLargeLanguageModelsRequest) (*v1.ListLargeLanguageModelsResponse, error)
	GetLargeLanguageModel(context.Context, *v1.GetLargeLanguageModelRequest) (*v1.LargeLanguageModel, error)
	CreateLargeLanguageModel(context.Context, *v1.CreateLargeLanguageModelRequest) (*v1.LargeLanguageModel, error)
	DeleteLargeLanguageModel(context.Context, *v1.DeleteLargeLanguageModelRequest) (*emptypb.Empty, error)
}

// NewLargeLanguageModelServiceClient constructs a client for the
// otterscale.large_language_model.v1.LargeLanguageModelService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLargeLanguageModelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LargeLanguageModelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	largeLanguageModelServiceMethods := v1.File_api_large_language_model_v1_large_language_model_proto.Services().ByName("LargeLanguageModelService").Methods()
	return &largeLanguageModelServiceClient{
		checkInfrastructureStatus: connect.NewClient[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse](
			httpClient,
			baseURL+LargeLanguageModelServiceCheckInfrastructureStatusProcedure,
			connect.WithSchema(largeLanguageModelServiceMethods.ByName("CheckInfrastructureStatus")),
			connect.WithClientOptions(opts...),
		),
		listLargeLanguageModels: connect.NewClient[v1.ListLargeLanguageModelsRequest, v1.ListLargeLanguageModelsResponse](
			httpClient,
			baseURL+LargeLanguageModelServiceListLargeLanguageModelsProcedure,
			connect.WithSchema(largeLanguageModelServiceMethods.ByName("ListLargeLanguageModels")),
			connect.WithClientOptions(opts...),
		),
		getLargeLanguageModel: connect.NewClient[v1.GetLargeLanguageModelRequest, v1.LargeLanguageModel](
			httpClient,
			baseURL+LargeLanguageModelServiceGetLargeLanguageModelProcedure,
			connect.WithSchema(largeLanguageModelServiceMethods.ByName("GetLargeLanguageModel")),
			connect.WithClientOptions(opts...),
		),
		createLargeLanguageModel: connect.NewClient[v1.CreateLargeLanguageModelRequest, v1.LargeLanguageModel](
			httpClient,
			baseURL+LargeLanguageModelServiceCreateLargeLanguageModelProcedure,
			connect.WithSchema(largeLanguageModelServiceMethods.ByName("CreateLargeLanguageModel")),
			connect.WithClientOptions(opts...),
		),
		deleteLargeLanguageModel: connect.NewClient[v1.DeleteLargeLanguageModelRequest, emptypb.Empty](
			httpClient,
			baseURL+LargeLanguageModelServiceDeleteLargeLanguageModelProcedure,
			connect.WithSchema(largeLanguageModelServiceMethods.ByName("DeleteLargeLanguageModel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// largeLanguageModelServiceClient implements LargeLanguageModelServiceClient.
type largeLanguageModelServiceClient struct {
	checkInfrastructureStatus *connect.Client[v1.CheckInfrastructureStatusRequest, v1.CheckInfrastructureStatusResponse]
	listLargeLanguageModels   *connect.Client[v1.ListLargeLanguageModelsRequest, v1.ListLargeLanguageModelsResponse]
	getLargeLanguageModel     *connect.Client[v1.GetLargeLanguageModelRequest, v1.LargeLanguageModel]
	createLargeLanguageModel  *connect.Client[v1.CreateLargeLanguageModelRequest, v1.LargeLanguageModel]
	deleteLargeLanguageModel  *connect.Client[v1.DeleteLargeLanguageModelRequest, emptypb.Empty]
}

// CheckInfrastructureStatus calls
// otterscale.large_language_model.v1.LargeLanguageModelService.CheckInfrastructureStatus.
func (c *largeLanguageModelServiceClient) CheckInfrastructureStatus(ctx context.Context, req *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	response, err := c.checkInfrastructureStatus.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListLargeLanguageModels calls
// otterscale.large_language_model.v1.LargeLanguageModelService.ListLargeLanguageModels.
func (c *largeLanguageModelServiceClient) ListLargeLanguageModels(ctx context.Context, req *v1.ListLargeLanguageModelsRequest) (*v1.ListLargeLanguageModelsResponse, error) {
	response, err := c.listLargeLanguageModels.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetLargeLanguageModel calls
// otterscale.large_language_model.v1.LargeLanguageModelService.GetLargeLanguageModel.
func (c *largeLanguageModelServiceClient) GetLargeLanguageModel(ctx context.Context, req *v1.GetLargeLanguageModelRequest) (*v1.LargeLanguageModel, error) {
	response, err := c.getLargeLanguageModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateLargeLanguageModel calls
// otterscale.large_language_model.v1.LargeLanguageModelService.CreateLargeLanguageModel.
func (c *largeLanguageModelServiceClient) CreateLargeLanguageModel(ctx context.Context, req *v1.CreateLargeLanguageModelRequest) (*v1.LargeLanguageModel, error) {
	response, err := c.createLargeLanguageModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteLargeLanguageModel calls
// otterscale.large_language_model.v1.LargeLanguageModelService.DeleteLargeLanguageModel.
func (c *largeLanguageModelServiceClient) DeleteLargeLanguageModel(ctx context.Context, req *v1.DeleteLargeLanguageModelRequest) (*emptypb.Empty, error) {
	response, err := c.deleteLargeLanguageModel.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// LargeLanguageModelServiceHandler is an implementation of the
// otterscale.large_language_model.v1.LargeLanguageModelService service.
type LargeLanguageModelServiceHandler interface {
	CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error)
	ListLargeLanguageModels(context.Context, *v1.ListLargeLanguageModelsRequest) (*v1.ListLargeLanguageModelsResponse, error)
	GetLargeLanguageModel(context.Context, *v1.GetLargeLanguageModelRequest) (*v1.LargeLanguageModel, error)
	CreateLargeLanguageModel(context.Context, *v1.CreateLargeLanguageModelRequest) (*v1.LargeLanguageModel, error)
	DeleteLargeLanguageModel(context.Context, *v1.DeleteLargeLanguageModelRequest) (*emptypb.Empty, error)
}

// NewLargeLanguageModelServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLargeLanguageModelServiceHandler(svc LargeLanguageModelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	largeLanguageModelServiceMethods := v1.File_api_large_language_model_v1_large_language_model_proto.Services().ByName("LargeLanguageModelService").Methods()
	largeLanguageModelServiceCheckInfrastructureStatusHandler := connect.NewUnaryHandlerSimple(
		LargeLanguageModelServiceCheckInfrastructureStatusProcedure,
		svc.CheckInfrastructureStatus,
		connect.WithSchema(largeLanguageModelServiceMethods.ByName("CheckInfrastructureStatus")),
		connect.WithHandlerOptions(opts...),
	)
	largeLanguageModelServiceListLargeLanguageModelsHandler := connect.NewUnaryHandlerSimple(
		LargeLanguageModelServiceListLargeLanguageModelsProcedure,
		svc.ListLargeLanguageModels,
		connect.WithSchema(largeLanguageModelServiceMethods.ByName("ListLargeLanguageModels")),
		connect.WithHandlerOptions(opts...),
	)
	largeLanguageModelServiceGetLargeLanguageModelHandler := connect.NewUnaryHandlerSimple(
		LargeLanguageModelServiceGetLargeLanguageModelProcedure,
		svc.GetLargeLanguageModel,
		connect.WithSchema(largeLanguageModelServiceMethods.ByName("GetLargeLanguageModel")),
		connect.WithHandlerOptions(opts...),
	)
	largeLanguageModelServiceCreateLargeLanguageModelHandler := connect.NewUnaryHandlerSimple(
		LargeLanguageModelServiceCreateLargeLanguageModelProcedure,
		svc.CreateLargeLanguageModel,
		connect.WithSchema(largeLanguageModelServiceMethods.ByName("CreateLargeLanguageModel")),
		connect.WithHandlerOptions(opts...),
	)
	largeLanguageModelServiceDeleteLargeLanguageModelHandler := connect.NewUnaryHandlerSimple(
		LargeLanguageModelServiceDeleteLargeLanguageModelProcedure,
		svc.DeleteLargeLanguageModel,
		connect.WithSchema(largeLanguageModelServiceMethods.ByName("DeleteLargeLanguageModel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.large_language_model.v1.LargeLanguageModelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LargeLanguageModelServiceCheckInfrastructureStatusProcedure:
			largeLanguageModelServiceCheckInfrastructureStatusHandler.ServeHTTP(w, r)
		case LargeLanguageModelServiceListLargeLanguageModelsProcedure:
			largeLanguageModelServiceListLargeLanguageModelsHandler.ServeHTTP(w, r)
		case LargeLanguageModelServiceGetLargeLanguageModelProcedure:
			largeLanguageModelServiceGetLargeLanguageModelHandler.ServeHTTP(w, r)
		case LargeLanguageModelServiceCreateLargeLanguageModelProcedure:
			largeLanguageModelServiceCreateLargeLanguageModelHandler.ServeHTTP(w, r)
		case LargeLanguageModelServiceDeleteLargeLanguageModelProcedure:
			largeLanguageModelServiceDeleteLargeLanguageModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLargeLanguageModelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLargeLanguageModelServiceHandler struct{}

func (UnimplementedLargeLanguageModelServiceHandler) CheckInfrastructureStatus(context.Context, *v1.CheckInfrastructureStatusRequest) (*v1.CheckInfrastructureStatusResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.large_language_model.v1.LargeLanguageModelService.CheckInfrastructureStatus is not implemented"))
}

func (UnimplementedLargeLanguageModelServiceHandler) ListLargeLanguageModels(context.Context, *v1.ListLargeLanguageModelsRequest) (*v1.ListLargeLanguageModelsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.large_language_model.v1.LargeLanguageModelService.ListLargeLanguageModels is not implemented"))
}

func (UnimplementedLargeLanguageModelServiceHandler) GetLargeLanguageModel(context.Context, *v1.GetLargeLanguageModelRequest) (*v1.LargeLanguageModel, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.large_language_model.v1.LargeLanguageModelService.GetLargeLanguageModel is not implemented"))
}

func (UnimplementedLargeLanguageModelServiceHandler) CreateLargeLanguageModel(context.Context, *v1.CreateLargeLanguageModelRequest) (*v1.LargeLanguageModel, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.large_language_model.v1.LargeLanguageModelService.CreateLargeLanguageModel is not implemented"))
}

func (UnimplementedLargeLanguageModelServiceHandler) DeleteLargeLanguageModel(context.Context, *v1.DeleteLargeLanguageModelRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.large_language_model.v1.LargeLanguageModelService.DeleteLargeLanguageModel is not implemented"))
}
