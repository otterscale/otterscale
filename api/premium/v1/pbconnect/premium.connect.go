// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/premium/v1/premium.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/openhdc/otterscale/api/premium/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PremiumServiceName is the fully-qualified name of the PremiumService service.
	PremiumServiceName = "otterscale.premium.v1.PremiumService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PremiumServiceGetEditionProcedure is the fully-qualified name of the PremiumService's GetEdition
	// RPC.
	PremiumServiceGetEditionProcedure = "/otterscale.premium.v1.PremiumService/GetEdition"
)

// PremiumServiceClient is a client for the otterscale.premium.v1.PremiumService service.
type PremiumServiceClient interface {
	GetEdition(context.Context, *connect.Request[v1.GetEditionRequest]) (*connect.Response[v1.GetEditionResponse], error)
}

// NewPremiumServiceClient constructs a client for the otterscale.premium.v1.PremiumService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPremiumServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PremiumServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	premiumServiceMethods := v1.File_api_premium_v1_premium_proto.Services().ByName("PremiumService").Methods()
	return &premiumServiceClient{
		getEdition: connect.NewClient[v1.GetEditionRequest, v1.GetEditionResponse](
			httpClient,
			baseURL+PremiumServiceGetEditionProcedure,
			connect.WithSchema(premiumServiceMethods.ByName("GetEdition")),
			connect.WithClientOptions(opts...),
		),
	}
}

// premiumServiceClient implements PremiumServiceClient.
type premiumServiceClient struct {
	getEdition *connect.Client[v1.GetEditionRequest, v1.GetEditionResponse]
}

// GetEdition calls otterscale.premium.v1.PremiumService.GetEdition.
func (c *premiumServiceClient) GetEdition(ctx context.Context, req *connect.Request[v1.GetEditionRequest]) (*connect.Response[v1.GetEditionResponse], error) {
	return c.getEdition.CallUnary(ctx, req)
}

// PremiumServiceHandler is an implementation of the otterscale.premium.v1.PremiumService service.
type PremiumServiceHandler interface {
	GetEdition(context.Context, *connect.Request[v1.GetEditionRequest]) (*connect.Response[v1.GetEditionResponse], error)
}

// NewPremiumServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPremiumServiceHandler(svc PremiumServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	premiumServiceMethods := v1.File_api_premium_v1_premium_proto.Services().ByName("PremiumService").Methods()
	premiumServiceGetEditionHandler := connect.NewUnaryHandler(
		PremiumServiceGetEditionProcedure,
		svc.GetEdition,
		connect.WithSchema(premiumServiceMethods.ByName("GetEdition")),
		connect.WithHandlerOptions(opts...),
	)
	return "/otterscale.premium.v1.PremiumService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PremiumServiceGetEditionProcedure:
			premiumServiceGetEditionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPremiumServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPremiumServiceHandler struct{}

func (UnimplementedPremiumServiceHandler) GetEdition(context.Context, *connect.Request[v1.GetEditionRequest]) (*connect.Response[v1.GetEditionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("otterscale.premium.v1.PremiumService.GetEdition is not implemented"))
}
