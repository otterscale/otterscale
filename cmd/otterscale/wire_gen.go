// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/otterscale/otterscale/internal/app"
	"github.com/otterscale/otterscale/internal/config"
	"github.com/otterscale/otterscale/internal/core"
	"github.com/otterscale/otterscale/internal/data/ceph"
	"github.com/otterscale/otterscale/internal/data/juju"
	"github.com/otterscale/otterscale/internal/data/kube"
	"github.com/otterscale/otterscale/internal/data/maas"
	"github.com/otterscale/otterscale/internal/mux"
	"github.com/spf13/cobra"
)

// Injectors from wire.go:

func wireCmd(bool2 bool) (*cobra.Command, func(), error) {
	configConfig, cleanup, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	bootstrapUseCase := core.NewBootstrapUseCase(configConfig)
	bootstrapService := app.NewBootstrapService(bootstrapUseCase)
	bootstrap := mux.NewBootstrap(bootstrapService)
	jujuJuju := juju.New(configConfig)
	actionRepo := juju.NewAction(jujuJuju)
	kubeKube, err := kube.New(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	chartRepo, err := kube.NewHelmChart(kubeKube)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	facilityRepo := juju.NewApplication(jujuJuju)
	releaseRepo, err := kube.NewHelmRelease(kubeKube)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	chartUseCase := core.NewChartUseCase(actionRepo, chartRepo, facilityRepo, releaseRepo)
	releaseUseCase := core.NewReleaseUseCase(actionRepo, chartRepo, facilityRepo, releaseRepo)
	clientRepo := juju.NewClient(jujuJuju)
	kubeAppsRepo := kube.NewApps(kubeKube)
	kubeCoreRepo := kube.NewCore(kubeKube)
	kubeStorageRepo := kube.NewStorage(kubeKube)
	kubernetesUseCase := core.NewKubernetesUseCase(actionRepo, clientRepo, facilityRepo, kubeAppsRepo, kubeCoreRepo, kubeStorageRepo)
	applicationService := app.NewApplicationService(chartUseCase, releaseUseCase, kubernetesUseCase)
	maasMAAS := maas.New(configConfig)
	bootResourceRepo := maas.NewBootResource(maasMAAS)
	bootSourceRepo := maas.NewBootSource(maasMAAS)
	bootSourceSelectionRepo := maas.NewBootSourceSelection(maasMAAS)
	packageRepositoryRepo := maas.NewPackageRepository(maasMAAS)
	scopeRepo := juju.NewModel(jujuJuju)
	scopeConfigRepo := juju.NewModelConfig(jujuJuju)
	serverRepo := maas.NewServer(maasMAAS)
	configurationUseCase := core.NewConfigurationUseCase(configConfig, bootResourceRepo, bootSourceRepo, bootSourceSelectionRepo, packageRepositoryRepo, scopeRepo, scopeConfigRepo, serverRepo)
	cephCeph := ceph.New(configConfig)
	cephClusterRepo := ceph.NewCluster(cephCeph)
	cephRBDRepo := ceph.NewRBD(cephCeph)
	kubeBatchRepo := kube.NewBatch(kubeKube)
	bistUseCase := core.NewBISTUseCase(configConfig, actionRepo, cephClusterRepo, cephRBDRepo, clientRepo, facilityRepo, kubeBatchRepo, kubeCoreRepo, scopeRepo)
	configurationService := app.NewConfigurationService(configurationUseCase, bistUseCase)
	environmentUseCase := core.NewEnvironmentUseCase(configConfig, actionRepo, facilityRepo, scopeRepo)
	environmentService := app.NewEnvironmentService(environmentUseCase)
	charmRepo := juju.NewCharm(jujuJuju)
	machineRepo := maas.NewMachine(maasMAAS)
	facilityUseCase := core.NewFacilityUseCase(actionRepo, charmRepo, clientRepo, facilityRepo, machineRepo, serverRepo)
	facilityService := app.NewFacilityService(facilityUseCase)
	kubeCDIRepo := kube.NewCDI(kubeKube)
	kubeInstanceTypeRepo := kube.NewInstanceType(kubeKube)
	kubeVirtRepo := kube.NewVirt(kubeKube)
	kubeVirtCloneRepo := kube.NewVirtClone(kubeKube)
	kubeVirtSnapshotRepo := kube.NewVirtSnapshot(kubeKube)
	instanceUseCase := core.NewInstanceUseCase(actionRepo, facilityRepo, kubeCDIRepo, kubeCoreRepo, kubeInstanceTypeRepo, kubeStorageRepo, kubeVirtRepo, kubeVirtCloneRepo, kubeVirtSnapshotRepo, releaseRepo, machineRepo)
	instanceService := app.NewInstanceService(instanceUseCase)
	eventRepo := maas.NewEvent(maasMAAS)
	machineManagerRepo := juju.NewMachine(jujuJuju)
	nodeDeviceRepo := maas.NewNodeDevice(maasMAAS)
	tagRepo := maas.NewTag(maasMAAS)
	machineUseCase := core.NewMachineUseCase(actionRepo, clientRepo, eventRepo, facilityRepo, machineRepo, machineManagerRepo, nodeDeviceRepo, serverRepo, tagRepo)
	machineService := app.NewMachineService(machineUseCase)
	modelUseCase := core.NewModelUseCase(actionRepo, facilityRepo, releaseRepo)
	modelService := app.NewModelService(modelUseCase)
	fabricRepo := maas.NewFabric(maasMAAS)
	ipRangeRepo := maas.NewIPRange(maasMAAS)
	subnetRepo := maas.NewSubnet(maasMAAS)
	vlanRepo := maas.NewVLAN(maasMAAS)
	networkUseCase := core.NewNetworkUseCase(fabricRepo, ipRangeRepo, subnetRepo, vlanRepo)
	networkService := app.NewNetworkService(networkUseCase)
	facilityOffersRepo := juju.NewApplicationOffers(jujuJuju)
	orchestratorUseCase := core.NewOrchestratorUseCase(configConfig, actionRepo, clientRepo, facilityRepo, facilityOffersRepo, ipRangeRepo, kubeAppsRepo, kubeCoreRepo, machineRepo, scopeRepo, serverRepo, subnetRepo, tagRepo)
	orchestratorService := app.NewOrchestratorService(orchestratorUseCase)
	cephFSRepo := ceph.NewFS(cephCeph)
	cephRGWRepo := ceph.NewRGW(cephCeph)
	storageUseCase := core.NewStorageUseCase(actionRepo, facilityRepo, cephClusterRepo, cephFSRepo, cephRBDRepo, cephRGWRepo, machineRepo)
	storageService := app.NewStorageService(storageUseCase)
	keyRepo := juju.NewKey(jujuJuju)
	sshKeyRepo := maas.NewSSHKey(maasMAAS)
	scopeUseCase := core.NewScopeUseCase(keyRepo, scopeRepo, sshKeyRepo)
	scopeService := app.NewScopeService(scopeUseCase)
	v, err := mux.NewInterceptorOptions()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	serve, err := mux.NewServe(applicationService, configurationService, environmentService, facilityService, instanceService, machineService, modelService, networkService, orchestratorService, storageService, scopeService, v)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	command := newCmd(bootstrap, configConfig, serve)
	return command, func() {
		cleanup()
	}, nil
}
