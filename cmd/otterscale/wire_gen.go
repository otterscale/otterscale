// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/openhdc/otterscale/internal/app"
	"github.com/openhdc/otterscale/internal/config"
	"github.com/openhdc/otterscale/internal/core"
	"github.com/openhdc/otterscale/internal/data/ceph"
	"github.com/openhdc/otterscale/internal/data/juju"
	"github.com/openhdc/otterscale/internal/data/kube"
	"github.com/openhdc/otterscale/internal/data/maas"
	"github.com/openhdc/otterscale/internal/mux"
	"github.com/spf13/cobra"
)

// Injectors from wire.go:

func wireCmd(bool2 bool) (*cobra.Command, func(), error) {
	configConfig, cleanup, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	kubeKube, err := kube.New(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	kubeAppsRepo := kube.NewApps(kubeKube)
	kubeCoreRepo := kube.NewCore(kubeKube)
	kubeStorageRepo := kube.NewStorage(kubeKube)
	chartRepo, err := kube.NewHelmChart(kubeKube)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	releaseRepo, err := kube.NewHelmRelease(kubeKube)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	jujuJuju := juju.New(configConfig)
	facilityRepo := juju.NewApplication(jujuJuju)
	scopeRepo := juju.NewModel(jujuJuju)
	clientRepo := juju.NewClient(jujuJuju)
	applicationUseCase := core.NewApplicationUseCase(kubeAppsRepo, kubeCoreRepo, kubeStorageRepo, chartRepo, releaseRepo, facilityRepo, scopeRepo, clientRepo)
	applicationService := app.NewApplicationService(applicationUseCase)
	maasMAAS := maas.New(configConfig)
	serverRepo := maas.NewServer(maasMAAS)
	scopeConfigRepo := juju.NewModelConfig(jujuJuju)
	bootResourceRepo := maas.NewBootResource(maasMAAS)
	bootSourceRepo := maas.NewBootSource(maasMAAS)
	bootSourceSelectionRepo := maas.NewBootSourceSelection(maasMAAS)
	packageRepositoryRepo := maas.NewPackageRepository(maasMAAS)
	configurationUseCase := core.NewConfigurationUseCase(serverRepo, scopeRepo, scopeConfigRepo, bootResourceRepo, bootSourceRepo, bootSourceSelectionRepo, packageRepositoryRepo)
	configurationService := app.NewConfigurationService(configurationUseCase)
	environmentUseCase := core.NewEnvironmentUseCase(configConfig)
	environmentService := app.NewEnvironmentService(environmentUseCase)
	actionRepo := juju.NewAction(jujuJuju)
	charmRepo := juju.NewCharm(jujuJuju)
	machineRepo := maas.NewMachine(maasMAAS)
	facilityUseCase := core.NewFacilityUseCase(facilityRepo, serverRepo, clientRepo, actionRepo, charmRepo, machineRepo)
	facilityService := app.NewFacilityService(facilityUseCase)
	facilityOffersRepo := juju.NewApplicationOffers(jujuJuju)
	subnetRepo := maas.NewSubnet(maasMAAS)
	ipRangeRepo := maas.NewIPRange(maasMAAS)
	essentialUseCase := core.NewEssentialUseCase(configConfig, scopeRepo, facilityRepo, facilityOffersRepo, machineRepo, subnetRepo, ipRangeRepo, serverRepo, clientRepo)
	essentialService := app.NewEssentialService(essentialUseCase)
	machineManagerRepo := juju.NewMachine(jujuJuju)
	tagRepo := maas.NewTag(maasMAAS)
	machineUseCase := core.NewMachineUseCase(machineRepo, machineManagerRepo, serverRepo, clientRepo, tagRepo)
	machineService := app.NewMachineService(machineUseCase)
	fabricRepo := maas.NewFabric(maasMAAS)
	vlanRepo := maas.NewVLAN(maasMAAS)
	networkUseCase := core.NewNetworkUseCase(fabricRepo, vlanRepo, subnetRepo, ipRangeRepo)
	networkService := app.NewNetworkService(networkUseCase)
	cephCeph := ceph.New(configConfig)
	cephClusterRepo := ceph.NewCluster(cephCeph)
	cephRBDRepo := ceph.NewRBD(cephCeph)
	cephFSRepo := ceph.NewFS(cephCeph)
	cephRGWRepo := ceph.NewRGW(cephCeph)
	storageUseCase := core.NewStorageUseCase(actionRepo, facilityRepo, cephClusterRepo, cephRBDRepo, cephFSRepo, cephRGWRepo)
	storageService := app.NewStorageService(storageUseCase)
	keyRepo := juju.NewKey(jujuJuju)
	sshKeyRepo := maas.NewSSHKey(maasMAAS)
	scopeUseCase := core.NewScopeUseCase(scopeRepo, keyRepo, sshKeyRepo)
	scopeService := app.NewScopeService(scopeUseCase)
	tagUseCase := core.NewTagUseCase(tagRepo)
	tagService := app.NewTagService(tagUseCase)
	serveMux := mux.New(bool2, applicationService, configurationService, environmentService, facilityService, essentialService, machineService, networkService, storageService, scopeService, tagService)
	command := newCmd(configConfig, serveMux)
	return command, func() {
		cleanup()
	}, nil
}
